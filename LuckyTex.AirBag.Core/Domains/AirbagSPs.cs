#region Using

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;
using System.Data.Common;
using System.Text;

#endregion

#region Extra Using

using System.Reflection;

using NLib;
using NLib.Components;
using NLib.Data;
using NLib.Logs;
using NLib.Xml;

using LuckyTex.Domains;

#endregion

namespace LuckyTex.Domains
{
    #region WEAV_WEAVINGMCSTATUS Parameter

    public class WEAV_WEAVINGMCSTATUSParameter
    {
        public System.String P_MC { get; set; }
    }

    #endregion

    #region WEAV_WEAVINGMCSTATUS Result

    public class WEAV_WEAVINGMCSTATUSResult
    {
        public System.String BEAMLOT { get; set; }
        public System.String MC { get; set; }
        public System.String REEDNO2 { get; set; }
        public System.String WEFTYARN { get; set; }
        public System.String TEMPLETYPE { get; set; }
        public System.String BARNO { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? FINISHDATE { get; set; }
        public System.String FINISHFLAG { get; set; }
        public System.String SETTINGBY { get; set; }
        public System.DateTime? EDITDATE { get; set; }
        public System.String EDITBY { get; set; }
        public System.String ITM_WEAVING { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.Decimal? WIDTH { get; set; }
        public System.Decimal? BEAMLENGTH { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.String REEDNO { get; set; }
        public System.String HEALDCOLOR { get; set; }
    }

    #endregion

    #region WEAV_WEAVINGINPROCESSLIST Parameter

    public class WEAV_WEAVINGINPROCESSLISTParameter
    {
        public System.String P_BEAMROLL { get; set; }
        public System.Decimal? P_DOFFNO { get; set; }
    }

    #endregion

    #region WEAV_WEAVINGINPROCESSLIST Result

    public class WEAV_WEAVINGINPROCESSLISTResult
    {
        public System.String BEAMLOT { get; set; }
        public System.String MC { get; set; }
        public System.String REEDNO2 { get; set; }
        public System.String WEFTYARN { get; set; }
        public System.String TEMPLETYPE { get; set; }
        public System.String BARNO { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? FINISHDATE { get; set; }
        public System.String FINISHFLAG { get; set; }
        public System.String SETTINGBY { get; set; }
        public System.DateTime? EDITDATE { get; set; }
        public System.String EDITBY { get; set; }
        public System.String ITM_WEAVING { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.Decimal? WIDTH { get; set; }
        public System.Decimal? BEAMLENGTH { get; set; }
        public System.Decimal? SPEED { get; set; }
    }

    #endregion

    #region WEAV_UPDATEWEFTSTOCK Parameter

    public class WEAV_UPDATEWEFTSTOCKParameter
    {
        public System.String P_BEAMLOT { get; set; }
        public System.String P_WEAVINGLOT { get; set; }
        public System.Decimal? P_DOFFNO { get; set; }
        public System.String P_LOOMNO { get; set; }
        public System.String P_ITMYARN { get; set; }
    }

    #endregion

    #region WEAV_UPDATEWEFTSTOCK Result

    public class WEAV_UPDATEWEFTSTOCKResult
    {
        public System.String R_RESULT { get; set; }
    }

    #endregion

    #region WEAV_UPDATEWEAVINGLOT Parameter

    public class WEAV_UPDATEWEAVINGLOTParameter
    {
        public System.String P_WEAVINGLOT { get; set; }
        public System.Decimal? P_LENGHT { get; set; }
        public System.String P_SHIFT { get; set; }
        public System.Decimal? P_DENSITYWARP { get; set; }
        public System.Decimal? P_DENSITYWEFT { get; set; }
        public System.Decimal? P_TENSION { get; set; }
        public System.Decimal? P_WASTE { get; set; }
    }

    #endregion

    #region WEAV_UPDATEWEAVINGLOT Result

    public class WEAV_UPDATEWEAVINGLOTResult
    {
    }

    #endregion

    #region WEAV_SHIPMENTREPORT Parameter

    public class WEAV_SHIPMENTREPORTParameter
    {
        public System.String P_BEGINDATE { get; set; }
        public System.String P_ENDDATE { get; set; }
    }

    #endregion

    #region WEAV_SHIPMENTREPORT Result

    public class WEAV_SHIPMENTREPORTResult
    {
        public System.String ITM_WEAVING { get; set; }
        public System.Decimal? PIECES { get; set; }
        public System.Decimal? METERS { get; set; }
    }

    #endregion

    #region WEAV_SEARCHPRODUCTION Parameter

    public class WEAV_SEARCHPRODUCTIONParameter
    {
        public System.String P_LOOMNO { get; set; }
        public System.String P_BEAMERROLL { get; set; }
        public System.String P_ITMWEAVING { get; set; }
        public System.String P_SETDATE { get; set; }
    }

    #endregion

    #region WEAV_SEARCHPRODUCTION Result

    public class WEAV_SEARCHPRODUCTIONResult
    {
        public System.String BEAMLOT { get; set; }
        public System.String MC { get; set; }
        public System.String REEDNO2 { get; set; }
        public System.String WEFTYARN { get; set; }
        public System.String TEMPLETYPE { get; set; }
        public System.String BARNO { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? FINISHDATE { get; set; }
        public System.String FINISHFLAG { get; set; }
        public System.String SETTINGBY { get; set; }
        public System.DateTime? EDITDATE { get; set; }
        public System.String EDITBY { get; set; }
        public System.String ITM_WEAVING { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.Decimal? WIDTH { get; set; }
        public System.Decimal? BEAMLENGTH { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.String BEAMERNO { get; set; }
    }

    #endregion

    #region WEAV_SAMPLING Parameter

    public class WEAV_SAMPLINGParameter
    {
        public System.String P_BEAMERROLL { get; set; }
        public System.String P_LOOM { get; set; }
        public System.String P_ITMWEAVE { get; set; }
        public System.DateTime? P_SETTINGDATE { get; set; }
        public System.String P_BARNO { get; set; }
        public System.Decimal? P_SPIRIAL_L { get; set; }
        public System.Decimal? P_SPIRIAL_R { get; set; }
        public System.Decimal? P_SAMPLING { get; set; }
        public System.String P_SAMPLINGBY { get; set; }
        public System.Decimal? P_RECUT { get; set; }
        public System.String P_RECUTBY { get; set; }
        public System.DateTime? P_RECUTDATE { get; set; }
        public System.String P_REMARK { get; set; }
    }

    #endregion

    #region WEAV_SAMPLING Result

    public class WEAV_SAMPLINGResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region WEAV_INSERTMCSTOP Parameter

    public class WEAV_INSERTMCSTOPParameter
    {
        public System.String P_LOOMNO { get; set; }
        public System.Decimal? P_DOFFNO { get; set; }
        public System.String P_BEAMROLL { get; set; }
        public System.String P_WEAVINGLOT { get; set; }
        public System.String P_DEFECT { get; set; }
        public System.Decimal? P_LENGTH { get; set; }
        public System.Decimal? P_POSITION { get; set; }
        public System.String P_REMARK { get; set; }
        public System.String P_OPERATOR { get; set; }
        public System.DateTime? P_DATE { get; set; }
    }

    #endregion

    #region WEAV_INSERTMCSTOP Result

    public class WEAV_INSERTMCSTOPResult
    {
        public System.String R_RESULT { get; set; }
    }

    #endregion

    #region WEAV_GREYROLLDAILYREPORT Parameter

    public class WEAV_GREYROLLDAILYREPORTParameter
    {
        public System.String P_DATE { get; set; }
        public System.String P_CHINA { get; set; }
    }

    #endregion

    #region WEAV_GREYROLLDAILYREPORT Result

    public class WEAV_GREYROLLDAILYREPORTResult
    {
        public System.String WEAVINGLOT { get; set; }
        public System.String ITM_WEAVING { get; set; }
        public System.Decimal? LENGTH { get; set; }
        public System.String LOOMNO { get; set; }
        public System.DateTime? WEAVINGDATE { get; set; }
        public System.String SHIFT { get; set; }
        public System.String REMARK { get; set; }
        public System.DateTime? CREATEDATE { get; set; }
        public System.Decimal? WIDTH { get; set; }
        public System.String PREPAREBY { get; set; }
        public System.String WEAVINGNO { get; set; }
        public System.String BEAMLOT { get; set; }
        public System.Decimal? DOFFNO { get; set; }
        public System.Decimal? DENSITY_WARP { get; set; }
        public System.Decimal? TENSION { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.String DOFFBY { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.Decimal? WASTE { get; set; }
        public System.Decimal? DENSITY_WEFT { get; set; }
        public System.String DELETEFLAG { get; set; }
        public System.String DELETEBY { get; set; }
        public System.DateTime? DELETEDATE { get; set; }
    }

    #endregion

    #region WEAV_GETWEFTYARNLISTBYDOFFNO Parameter

    public class WEAV_GETWEFTYARNLISTBYDOFFNOParameter
    {
        public System.String P_BEAMROLL { get; set; }
        public System.Decimal? P_DOFFNO { get; set; }
    }

    #endregion

    #region WEAV_GETWEFTYARNLISTBYDOFFNO Result

    public class WEAV_GETWEFTYARNLISTBYDOFFNOResult
    {
        public System.String BEAMLOT { get; set; }
        public System.Decimal? DOFFNO { get; set; }
        public System.String PALLETNO { get; set; }
        public System.String CHLOTNO { get; set; }
        public System.DateTime? ADDDATE { get; set; }
        public System.String ADDBY { get; set; }
        public System.String USETYPE { get; set; }
        public System.String REMARK { get; set; }
        public System.String LOOMNO { get; set; }
    }

    #endregion

    #region WEAV_GETWEAVELISTBYBEAMROLL Parameter

    public class WEAV_GETWEAVELISTBYBEAMROLLParameter
    {
        public System.String P_BEAMROLL { get; set; }
        public System.String P_LOOM { get; set; }
    }

    #endregion

    #region WEAV_GETWEAVELISTBYBEAMROLL Result

    public class WEAV_GETWEAVELISTBYBEAMROLLResult
    {
        public System.String WEAVINGLOT { get; set; }
        public System.String ITM_WEAVING { get; set; }
        public System.Decimal? LENGTH { get; set; }
        public System.String LOOMNO { get; set; }
        public System.DateTime? WEAVINGDATE { get; set; }
        public System.String SHIFT { get; set; }
        public System.String REMARK { get; set; }
        public System.DateTime? CREATEDATE { get; set; }
        public System.Decimal? WIDTH { get; set; }
        public System.String PREPAREBY { get; set; }
        public System.String WEAVINGNO { get; set; }
        public System.String BEAMLOT { get; set; }
        public System.Decimal? DOFFNO { get; set; }
        public System.Decimal? DENSITY_WARP { get; set; }
        public System.Decimal? TENSION { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.String DOFFBY { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.Decimal? WASTE { get; set; }
        public System.Decimal? DENSITY_WEFT { get; set; }
        public System.String DELETEFLAG { get; set; }
        public System.String DELETEBY { get; set; }
        public System.DateTime? DELETEDATE { get; set; }
    }

    #endregion

    #region WEAV_GETSAMPLINGDATA Parameter

    public class WEAV_GETSAMPLINGDATAParameter
    {
        public System.String P_BEAMROLL { get; set; }
        public System.String P_LOOM { get; set; }
    }

    #endregion

    #region WEAV_GETSAMPLINGDATA Result

    public class WEAV_GETSAMPLINGDATAResult
    {
        public System.String BEAMERROLL { get; set; }
        public System.String LOOMNO { get; set; }
        public System.String ITM_WEAVING { get; set; }
        public System.DateTime? SETTINGDATE { get; set; }
        public System.String BARNO { get; set; }
        public System.Decimal? SPIRAL_L { get; set; }
        public System.Decimal? SPIRAL_R { get; set; }
        public System.Decimal? STSAMPLING { get; set; }
        public System.Decimal? RECUTSAMPLING { get; set; }
        public System.String STSAMPLINGBY { get; set; }
        public System.String RECUTBY { get; set; }
        public System.DateTime? STDATE { get; set; }
        public System.DateTime? RECUTDATE { get; set; }
        public System.String REMARK { get; set; }
        public System.String BEAMMC { get; set; }
        public System.String WARPMC { get; set; }
        public System.String BEAMERNO { get; set; }
    }

    #endregion

    #region WEAV_GETMCSTOPLISTBYDOFFNO Parameter

    public class WEAV_GETMCSTOPLISTBYDOFFNOParameter
    {
        public System.String P_LOOMNO { get; set; }
        public System.Decimal? P_DOFFNO { get; set; }
        public System.String P_BEAMROLL { get; set; }
        public System.String P_WEAVELOT { get; set; }
    }

    #endregion

    #region WEAV_GETMCSTOPLISTBYDOFFNO Result

    public class WEAV_GETMCSTOPLISTBYDOFFNOResult
    {
        public System.String WEAVINGLOT { get; set; }
        public System.String DEFECTCODE { get; set; }
        public System.Decimal? DEFECTPOSITION { get; set; }
        public System.String CREATEBY { get; set; }
        public System.DateTime? CREATEDATE { get; set; }
        public System.String REMARK { get; set; }
        public System.String LOOMNO { get; set; }
        public System.String BEAMERROLL { get; set; }
        public System.Decimal? DOFFNO { get; set; }
        public System.Decimal? DEFECTLENGTH { get; set; }
        public System.DateTime? STOPDATE { get; set; }
        public System.String DESCRIPTION { get; set; }
    }

    #endregion

    #region WEAV_GETMCSTOPBYLOT Parameter

    public class WEAV_GETMCSTOPBYLOTParameter
    {
        public System.String P_WEAVINGLOT { get; set; }
    }

    #endregion

    #region WEAV_GETMCSTOPBYLOT Result

    public class WEAV_GETMCSTOPBYLOTResult
    {
        public System.String WEAVINGLOT { get; set; }
        public System.String DEFECTCODE { get; set; }
        public System.Decimal? DEFECTPOSITION { get; set; }
        public System.String CREATEBY { get; set; }
        public System.DateTime? CREATEDATE { get; set; }
        public System.String REMARK { get; set; }
        public System.String LOOMNO { get; set; }
        public System.String BEAMERROLL { get; set; }
        public System.Decimal? DOFFNO { get; set; }
        public System.Decimal? DEFECTLENGTH { get; set; }
        public System.DateTime? STOPDATE { get; set; }
        public System.String DESCRIPTION { get; set; }
        public System.DateTime? WEAVSTARTDATE { get; set; }
        public System.DateTime? WEAVFINISHDATE { get; set; }
        public System.String ITM_WEAVING { get; set; }
        public System.Decimal? WIDTH { get; set; }
        public System.Decimal? LENGTH { get; set; }
    }

    #endregion

    #region WEAV_GETMACHINEZONELIST Parameter

    public class WEAV_GETMACHINEZONELISTParameter
    {
    }

    #endregion

    #region WEAV_GETMACHINEZONELIST Result

    public class WEAV_GETMACHINEZONELISTResult
    {
        public System.String ZONE { get; set; }
        public System.String TYPE { get; set; }
        public System.Decimal? TOTAL { get; set; }
    }

    #endregion

    #region WEAV_GETITEMWEAVINGLIST Parameter

    public class WEAV_GETITEMWEAVINGLISTParameter
    {
        public System.String P_WEAVETYPE { get; set; }
    }

    #endregion

    #region WEAV_GETITEMWEAVINGLIST Result

    public class WEAV_GETITEMWEAVINGLISTResult
    {
        public System.String ITM_WEAVING { get; set; }
        public System.Decimal? WIDTHWEAVING { get; set; }
        public System.String WEAVE_TYPE { get; set; }
        public System.String ITM_YARN { get; set; }
    }

    #endregion

    #region WEAV_GETINPROCESSBYBEAMROLL Parameter

    public class WEAV_GETINPROCESSBYBEAMROLLParameter
    {
        public System.String P_BEAMROLL { get; set; }
        public System.String P_LOOM { get; set; }
    }

    #endregion

    #region WEAV_GETINPROCESSBYBEAMROLL Result

    public class WEAV_GETINPROCESSBYBEAMROLLResult
    {
        public System.String WEAVINGLOT { get; set; }
        public System.String ITM_WEAVING { get; set; }
        public System.Decimal? LENGTH { get; set; }
        public System.String LOOMNO { get; set; }
        public System.DateTime? WEAVINGDATE { get; set; }
        public System.String SHIFT { get; set; }
        public System.String REMARK { get; set; }
        public System.DateTime? CREATEDATE { get; set; }
        public System.Decimal? WIDTH { get; set; }
        public System.String PREPAREBY { get; set; }
        public System.String WEAVINGNO { get; set; }
        public System.String BEAMLOT { get; set; }
        public System.Decimal? DOFFNO { get; set; }
        public System.Decimal? DENSITY_WARP { get; set; }
        public System.Decimal? TENSION { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.String DOFFBY { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.Decimal? WASTE { get; set; }
        public System.Decimal? DENSITY_WEFT { get; set; }
        public System.String DELETEFLAG { get; set; }
        public System.String DELETEBY { get; set; }
        public System.DateTime? DELETEDATE { get; set; }
    }

    #endregion

    #region WEAV_GETCNTCHINALOT Parameter

    public class WEAV_GETCNTCHINALOTParameter
    {
        public System.String P_LOT { get; set; }
    }

    #endregion

    #region WEAV_GETCNTCHINALOT Result

    public class WEAV_GETCNTCHINALOTResult
    {
        public System.String CNT { get; set; }
    }

    #endregion

    #region WEAV_GETALLITEMWEAVING Parameter

    public class WEAV_GETALLITEMWEAVINGParameter
    {
    }

    #endregion

    #region WEAV_GETALLITEMWEAVING Result

    public class WEAV_GETALLITEMWEAVINGResult
    {
        public System.String ITM_WEAVING { get; set; }
        public System.Decimal? WIDTHWEAVING { get; set; }
    }

    #endregion

    #region WEAV_DELETEWEAVINGLOT Parameter

    public class WEAV_DELETEWEAVINGLOTParameter
    {
        public System.String P_WEAVINGLOT { get; set; }
        public System.String P_REMARK { get; set; }
        public System.String P_OPERATOR { get; set; }
    }

    #endregion

    #region WEAV_DELETEWEAVINGLOT Result

    public class WEAV_DELETEWEAVINGLOTResult
    {
    }

    #endregion

    #region WEAV_DELETEMCSTOP Parameter

    public class WEAV_DELETEMCSTOPParameter
    {
        public System.String P_LOOMNO { get; set; }
        public System.Decimal? P_DOFFNO { get; set; }
        public System.String P_BEAMROLL { get; set; }
        public System.String P_DEFECT { get; set; }
        public System.DateTime? P_DATE { get; set; }
    }

    #endregion

    #region WEAV_DELETEMCSTOP Result

    public class WEAV_DELETEMCSTOPResult
    {
    }

    #endregion

    #region WEAV_DEFECTLIST Parameter

    public class WEAV_DEFECTLISTParameter
    {
    }

    #endregion

    #region WEAV_DEFECTLIST Result

    public class WEAV_DEFECTLISTResult
    {
        public System.String DEFECTCODE { get; set; }
        public System.String DEFECTTYPE { get; set; }
        public System.String DESCRIPTION { get; set; }
        public System.String YARN { get; set; }
    }

    #endregion

    #region WEAVE_WEAVINGPROCESS Parameter

    public class WEAVE_WEAVINGPROCESSParameter
    {
        public System.String P_BEAMLOT { get; set; }
        public System.Decimal? P_DOFFNO { get; set; }
        public System.String P_ITEMWEAVING { get; set; }
        public System.Decimal? P_LENGHT { get; set; }
        public System.DateTime? P_WEAVINGDATE { get; set; }
        public System.String P_LOOM { get; set; }
        public System.String P_SHIFT { get; set; }
        public System.Decimal? P_DENSITYWARP { get; set; }
        public System.Decimal? P_DENSITYWEFT { get; set; }
        public System.Decimal? P_TENSION { get; set; }
        public System.Decimal? P_SPEED { get; set; }
        public System.Decimal? P_WASTE { get; set; }
        public System.String P_REMARK { get; set; }
        public System.String P_OPERATOR { get; set; }
        public System.DateTime? P_STARTDATE { get; set; }
    }

    #endregion

    #region WEAVE_WEAVINGPROCESS Result

    public class WEAVE_WEAVINGPROCESSResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region WEAVE_UPDATEPROCESSSETTING Parameter

    public class WEAVE_UPDATEPROCESSSETTINGParameter
    {
        public System.String P_BEAMLOT { get; set; }
        public System.String P_REEDNO2 { get; set; }
        public System.String P_TEMPLE { get; set; }
        public System.String P_BARNO { get; set; }
        public System.String P_PRODUCTTYPE { get; set; }
        public System.Decimal? P_WIDTH { get; set; }
        public System.DateTime? P_FINISHDATE { get; set; }
        public System.String P_FLAG { get; set; }
        public System.DateTime? P_EDITDATE { get; set; }
        public System.String P_EDITBY { get; set; }
        public System.Decimal? P_SPEED { get; set; }
    }

    #endregion

    #region WEAVE_UPDATEPROCESSSETTING Result

    public class WEAVE_UPDATEPROCESSSETTINGResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region WEAVE_INSERTUPDATEWEFTYARN Parameter

    public class WEAVE_INSERTUPDATEWEFTYARNParameter
    {
        public System.String P_BEAMLOT { get; set; }
        public System.Decimal? P_DOFFNO { get; set; }
        public System.String P_MCNO { get; set; }
        public System.String P_PALLETNO { get; set; }
        public System.String P_CHLOTNO { get; set; }
        public System.DateTime? P_ADDDATE { get; set; }
        public System.String P_ADDBY { get; set; }
        public System.String P_USETYPE { get; set; }
        public System.String P_REMARK { get; set; }
    }

    #endregion

    #region WEAVE_INSERTUPDATEWEFTYARN Result

    public class WEAVE_INSERTUPDATEWEFTYARNResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region WEAVE_INSERTPROCESSSETTING Parameter

    public class WEAVE_INSERTPROCESSSETTINGParameter
    {
        public System.String P_BEAMLOT { get; set; }
        public System.String P_MC { get; set; }
        public System.String P_ITMWEAVE { get; set; }
        public System.String P_REEDNO2 { get; set; }
        public System.String P_WEFTYARN { get; set; }
        public System.String P_TEMPLE { get; set; }
        public System.String P_BARNO { get; set; }
        public System.DateTime? P_STARTDATE { get; set; }
        public System.String P_SETTINGBY { get; set; }
        public System.String P_PRODUCTTYPE { get; set; }
        public System.Decimal? P_WIDTH { get; set; }
        public System.Decimal? P_BEAMLENGTH { get; set; }
        public System.Decimal? P_SPEED { get; set; }
    }

    #endregion

    #region WEAVE_INSERTPROCESSSETTING Result

    public class WEAVE_INSERTPROCESSSETTINGResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region WEAVE_GETBEAMLOTDETAIL Parameter

    public class WEAVE_GETBEAMLOTDETAILParameter
    {
        public System.String P_BEAMLOT { get; set; }
    }

    #endregion

    #region WEAVE_GETBEAMLOTDETAIL Result

    public class WEAVE_GETBEAMLOTDETAILResult
    {
        public System.String BEAMLOT { get; set; }
        public System.String ITM_PREPARE { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.String DRAWINGTYPE { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDATE { get; set; }
        public System.String REEDNO { get; set; }
        public System.String HEALDCOLOR { get; set; }
        public System.String STARTBY { get; set; }
        public System.String FINISHBY { get; set; }
        public System.String USEFLAG { get; set; }
        public System.Decimal? HEALDNO { get; set; }
        public System.String OPERATOR_GROUP { get; set; }
        public System.Decimal? LENGTH { get; set; }

        //เพิ่มใหม่ 01/09/17
        public System.String RESULT { get; set; }
    }

    #endregion

    #region WEAVE_DELETEWEFTYARN Parameter

    public class WEAVE_DELETEWEFTYARNParameter
    {
        public System.String P_BEAMLOT { get; set; }
        public System.Decimal? P_DOFFNO { get; set; }
        public System.String P_PALLETNO { get; set; }
        public System.String P_CHLOTNO { get; set; }
    }

    #endregion

    #region WEAVE_DELETEWEFTYARN Result

    public class WEAVE_DELETEWEFTYARNResult
    {
    }

    #endregion

    #region WEAVE_CHECKWEAVINGMC Parameter

    public class WEAVE_CHECKWEAVINGMCParameter
    {
        public System.String P_LOOMNO { get; set; }
    }

    #endregion

    #region WEAVE_CHECKWEAVINGMC Result

    public class WEAVE_CHECKWEAVINGMCResult
    {
        public System.String MACHINEID { get; set; }
        public System.String PROCESSID { get; set; }
        public System.String MCNAME { get; set; }
        public System.String ZONE { get; set; }
        public System.Decimal? NO { get; set; }
        public System.String TYPE { get; set; }
    }

    #endregion

    #region WEAVE_CHECKITEMPREPARE Parameter

    public class WEAVE_CHECKITEMPREPAREParameter
    {
        public System.String P_ITMWEAVING { get; set; }
        public System.String P_ITMPREPARE { get; set; }
    }

    #endregion

    #region WEAVE_CHECKITEMPREPARE Result

    public class WEAVE_CHECKITEMPREPAREResult
    {
        public System.String ITM_CODE { get; set; }
        public System.String ITM_WEAVING { get; set; }
        public System.String ITM_YARN { get; set; }
        public System.Decimal? ITM_WIDTH { get; set; }
        public System.String ITM_PROC1 { get; set; }
        public System.String ITM_PROC2 { get; set; }
        public System.String ITM_PROC3 { get; set; }
        public System.String ITM_PROC4 { get; set; }
        public System.String ITM_PROC5 { get; set; }
        public System.String ITM_PROC6 { get; set; }
        public System.DateTime? CREATEDATE { get; set; }
        public System.String CREATEBY { get; set; }
        public System.DateTime? EDITDATE { get; set; }
        public System.String EDITBY { get; set; }
        public System.String ITM_PREPARE { get; set; }
        public System.Decimal? COREWEIGHT { get; set; }
        public System.Decimal? FULLWEIGHT { get; set; }
        public System.String ITM_GROUP { get; set; }
        public System.String YARNCODE { get; set; }
        public System.String WIDTHCODE { get; set; }
        public System.Decimal? WIDTHWEAVING { get; set; }
        public System.String LABFORM { get; set; }
        public System.String WEAVE_TYPE { get; set; }
    }

    #endregion

    #region WEAVE_CANCELLOOMSETUP Parameter

    public class WEAVE_CANCELLOOMSETUPParameter
    {
        public System.String P_BEAMLOT { get; set; }
        public System.String P_LOOMNO { get; set; }
        public System.String P_OPERATOR { get; set; }
    }

    #endregion

    #region WEAVE_CANCELLOOMSETUP Result

    public class WEAVE_CANCELLOOMSETUPResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region WARP_WARPLIST Parameter

    public class WARP_WARPLISTParameter
    {
        public System.String P_WARPHEADNO { get; set; }
        public System.String P_WARPMC { get; set; }
        public System.String P_ITMPREPARE { get; set; }
        public System.String P_STARTDATE { get; set; }
        public System.String P_ENDDATE { get; set; }
    }

    #endregion

    #region WARP_WARPLIST Result

    public class WARP_WARPLISTResult
    {
        public System.String WARPHEADNO { get; set; }
        public System.String WARPERLOT { get; set; }
        public System.String BEAMNO { get; set; }
        public System.String SIDE { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.Decimal? LENGTH { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.Decimal? HARDNESS_L { get; set; }
        public System.Decimal? HARDNESS_N { get; set; }
        public System.Decimal? HARDNESS_R { get; set; }
        public System.Decimal? TENSION { get; set; }
        public System.String STARTBY { get; set; }
        public System.String DOFFBY { get; set; }
        public System.String FLAG { get; set; }
        public System.String WARPMC { get; set; }
        public System.String REMARK { get; set; }
        public System.Decimal? TENSION_IT { get; set; }
        public System.Decimal? TENSION_TAKEUP { get; set; }
        public System.Decimal? MC_COUNT_L { get; set; }
        public System.Decimal? MC_COUNT_S { get; set; }
        public System.DateTime? EDITDATE { get; set; }
        public System.String EDITBY { get; set; }
        public System.String ITM_PREPARE { get; set; }
        public System.String ITM_YARN { get; set; }
    }

    #endregion

    #region WARP_UPDATEWARPINGPROCESS Parameter

    public class WARP_UPDATEWARPINGPROCESSParameter
    {
        public System.String P_WARPHEADNO { get; set; }
        public System.String P_WARPLOT { get; set; }
        public System.Decimal? P_LENGTH { get; set; }
        public System.DateTime? P_ENDDATE { get; set; }
        public System.Decimal? P_SPEED { get; set; }
        public System.Decimal? P_HARDL { get; set; }
        public System.Decimal? P_HARDN { get; set; }
        public System.Decimal? P_HARDR { get; set; }
        public System.Decimal? P_TENSION { get; set; }
        public System.String P_DOFFBY { get; set; }
        public System.String P_REMARK { get; set; }
        public System.String P_FLAG { get; set; }
        public System.Decimal? P_TENSION_IT { get; set; }
        public System.Decimal? P_TENSION_TAKE { get; set; }
        public System.Decimal? P_MCL { get; set; }
        public System.Decimal? P_MCS { get; set; }
        public System.String P_BEAMNO { get; set; }
        public System.String P_OPERATOR { get; set; }
    }

    #endregion

    #region WARP_UPDATEWARPINGPROCESS Result

    public class WARP_UPDATEWARPINGPROCESSResult
    {
    }

    #endregion

    #region WARP_UPDATESETTINGHEAD Parameter

    public class WARP_UPDATESETTINGHEADParameter
    {
        public System.String P_WARPHEADNO { get; set; }
        public System.DateTime? P_STARTDATE { get; set; }
        public System.DateTime? P_ENDDATE { get; set; }
        public System.String P_CONDITONBY { get; set; }
        public System.String P_STATUS { get; set; }
        public System.String P_FINISHBY { get; set; }
        public System.String P_FLAG { get; set; }
    }

    #endregion

    #region WARP_UPDATESETTINGHEAD Result

    public class WARP_UPDATESETTINGHEADResult
    {
    }

    #endregion

    #region WARP_UPDATEPALLET Parameter

    public class WARP_UPDATEPALLETParameter
    {
        public System.DateTime? P_RECEIVEDATE { get; set; }
        public System.String P_PALLETNO { get; set; }
        public System.Decimal? P_USEDCH { get; set; }
        public System.Decimal? P_REJECTCH { get; set; }
        public System.Decimal? P_REMAINCH { get; set; }
        public System.String P_WARPHEADNO { get; set; }
    }

    #endregion

    #region WARP_UPDATEPALLET Result

    public class WARP_UPDATEPALLETResult
    {
    }

    #endregion

    #region WARP_TRANFERSLIP Parameter

    public class WARP_TRANFERSLIPParameter
    {
        public System.String P_WARPHEADNO { get; set; }
        public System.String P_WARPLOT { get; set; }
    }

    #endregion

    #region WARP_TRANFERSLIP Result

    public class WARP_TRANFERSLIPResult
    {
        public System.String WARPHEADNO { get; set; }
        public System.String WARPERLOT { get; set; }
        public System.String BEAMNO { get; set; }
        public System.String SIDE { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.Decimal? LENGTH { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.Decimal? HARDNESS_L { get; set; }
        public System.Decimal? HARDNESS_N { get; set; }
        public System.Decimal? HARDNESS_R { get; set; }
        public System.Decimal? TENSION { get; set; }
        public System.String STARTBY { get; set; }
        public System.String DOFFBY { get; set; }
        public System.String FLAG { get; set; }
        public System.String WARPMC { get; set; }
        public System.String REMARK { get; set; }
        public System.Decimal? TENSION_IT { get; set; }
        public System.Decimal? TENSION_TAKEUP { get; set; }
        public System.Decimal? MC_COUNT_L { get; set; }
        public System.Decimal? MC_COUNT_S { get; set; }
        public System.DateTime? EDITDATE { get; set; }
        public System.String EDITBY { get; set; }
        public System.String ITM_PREPARE { get; set; }
        public System.String ITM_YARN { get; set; }
    }

    #endregion

    #region WARP_SEARCHWARPRECORD Parameter

    public class WARP_SEARCHWARPRECORDParameter
    {
        public System.String P_WARPHEADNO { get; set; }
        public System.String P_WARPMC { get; set; }
        public System.String P_ITMPREPARE { get; set; }
        public System.String P_STARTDATE { get; set; }
    }

    #endregion

    #region WARP_SEARCHWARPRECORD Result

    public class WARP_SEARCHWARPRECORDResult
    {
        public System.String WARPHEADNO { get; set; }
        public System.String ITM_PREPARE { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.String WARPMC { get; set; }
        public System.String SIDE { get; set; }
        public System.Decimal? ACTUALCH { get; set; }
        public System.String WTYPE { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.String CREATEBY { get; set; }
        public System.DateTime? CONDITIONSTART { get; set; }
        public System.String CONDITIONBY { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.String STATUS { get; set; }
        public System.String FINISHBY { get; set; }
        public System.String FINISHFLAG { get; set; }
        public System.String REEDNO { get; set; }
        public System.String EDITBY { get; set; }
        public System.DateTime? EDITDATE { get; set; }
    }

    #endregion

    #region WARP_RECEIVEPALLET Parameter

    public class WARP_RECEIVEPALLETParameter
    {
        public System.String P_ITMYARN { get; set; }
        public System.DateTime? P_RECEIVEDATE { get; set; }
        public System.String P_PALLETNO { get; set; }
        public System.Decimal? P_WEIGHT { get; set; }
        public System.Decimal? P_CH { get; set; }
        public System.String P_VERIFY { get; set; }
        public System.String P_REJECTID { get; set; }
        public System.String P_OPERATOR { get; set; }
    }

    #endregion

    #region WARP_RECEIVEPALLET Result

    public class WARP_RECEIVEPALLETResult
    {
    }

    #endregion

    #region WARP_PALLETLISTBYITMYARN Parameter

    public class WARP_PALLETLISTBYITMYARNParameter
    {
        public System.String P_ITEM_YARN { get; set; }
        public System.String P_WARPHEADNO { get; set; }
    }

    #endregion

    #region WARP_PALLETLISTBYITMYARN Result

    public class WARP_PALLETLISTBYITMYARNResult
    {
        public System.String ITM_YARN { get; set; }
        public System.DateTime? RECEIVEDATE { get; set; }
        public System.String PALLETNO { get; set; }
        public System.Decimal? RECEIVEWEIGHT { get; set; }
        public System.Decimal? RECEIVECH { get; set; }
        public System.Decimal? USEDWEIGHT { get; set; }
        public System.Decimal? USEDCH { get; set; }
        public System.String VERIFY { get; set; }
        public System.String REJECTID { get; set; }
        public System.String FINISHFLAG { get; set; }
        public System.String RETURNFLAG { get; set; }
        public System.Decimal? REJECTCH { get; set; }
        public System.DateTime? CREATEDATE { get; set; }
        public System.String CREATEBY { get; set; }
        public System.String CLEARBY { get; set; }
        public System.String REMARK { get; set; }
        public System.DateTime? CLEARDATE { get; set; }
        public System.Decimal? KGPERCH { get; set; }
    }

    #endregion

    #region WARP_INSERTWARPMCSTOP Parameter

    public class WARP_INSERTWARPMCSTOPParameter
    {
        public System.String P_WARPHEADNO { get; set; }
        public System.String P_WARPLOT { get; set; }
        public System.String P_REASON { get; set; }
        public System.Decimal? P_LENGTH { get; set; }
        public System.String P_OTHER { get; set; }
        public System.String P_OPERATOR { get; set; }
    }

    #endregion

    #region WARP_INSERTWARPMCSTOP Result

    public class WARP_INSERTWARPMCSTOPResult
    {
        public System.String R_RESULT { get; set; }
    }

    #endregion

    #region WARP_INSERTWARPINGPROCESS Parameter

    public class WARP_INSERTWARPINGPROCESSParameter
    {
        public System.String P_WARPHEADNO { get; set; }
        public System.String P_WARPMC { get; set; }
        public System.String P_BEAMNO { get; set; }
        public System.String P_SIDE { get; set; }
        public System.DateTime? P_STARTDATE { get; set; }
        public System.String P_STARTBY { get; set; }
    }

    #endregion

    #region WARP_INSERTWARPINGPROCESS Result

    public class WARP_INSERTWARPINGPROCESSResult
    {
        public System.String R_WRAPLOT { get; set; }
        public System.String RESULT { get; set; }
    }

    #endregion

    #region WARP_INSERTSETTINGHEAD Parameter

    public class WARP_INSERTSETTINGHEADParameter
    {
        public System.String P_WARPERHEADNO { get; set; }
        public System.String P_ITMPREPARE { get; set; }
        public System.String P_PRODUCTID { get; set; }
        public System.String P_MCNO { get; set; }
        public System.String P_SIDE { get; set; }
        public System.Decimal? P_ACTUALCH { get; set; }
        public System.String P_WTYPE { get; set; }
        public System.String P_OPERATOR { get; set; }
        public System.String P_REEDNO { get; set; }
    }

    #endregion

    #region WARP_INSERTSETTINGHEAD Result

    public class WARP_INSERTSETTINGHEADResult
    {
        public System.String R_RESULT { get; set; }
    }

    #endregion

    #region WARP_INSERTSETTINGDETAIL Parameter

    public class WARP_INSERTSETTINGDETAILParameter
    {
        public System.String P_WARPHEADNO { get; set; }
        public System.String P_PALLETNO { get; set; }
        public System.Decimal? P_USED { get; set; }
        public System.Decimal? P_REJECTCH { get; set; }
    }

    #endregion

    #region WARP_INSERTSETTINGDETAIL Result

    public class WARP_INSERTSETTINGDETAILResult
    {
    }

    #endregion

    #region WARP_INSERTBEAMINGDETAIL Parameter

    public class WARP_INSERTBEAMINGDETAILParameter
    {
        public System.String P_BEAMERNO { get; set; }
        public System.String P_MCNO { get; set; }
        public System.String P_BEAMNO { get; set; }
        public System.DateTime? P_STARTDATE { get; set; }
        public System.String P_STARTBY { get; set; }
    }

    #endregion

    #region WARP_INSERTBEAMINGDETAIL Result

    public class WARP_INSERTBEAMINGDETAILResult
    {
        public System.String R_BEAMLOT { get; set; }
    }

    #endregion

    #region WARP_GETWARPERROLLREMARK Parameter

    public class WARP_GETWARPERROLLREMARKParameter
    {
        public System.String P_WARPLOT { get; set; }
    }

    #endregion

    #region WARP_GETWARPERROLLREMARK Result

    public class WARP_GETWARPERROLLREMARKResult
    {
        public System.String R_REMARK { get; set; }
    }

    #endregion

    #region WARP_GETWARPERROLLDETAIL Parameter

    public class WARP_GETWARPERROLLDETAILParameter
    {
        public System.String P_WARPERROLL { get; set; }
    }

    #endregion

    #region WARP_GETWARPERROLLDETAIL Result

    public class WARP_GETWARPERROLLDETAILResult
    {
        public System.String WARPHEADNO { get; set; }
        public System.String WARPERLOT { get; set; }
        public System.String BEAMNO { get; set; }
        public System.String SIDE { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.Decimal? LENGTH { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.Decimal? HARDNESS_L { get; set; }
        public System.Decimal? HARDNESS_N { get; set; }
        public System.Decimal? HARDNESS_R { get; set; }
        public System.Decimal? TENSION { get; set; }
        public System.String STARTBY { get; set; }
        public System.String DOFFBY { get; set; }
        public System.String FLAG { get; set; }
        public System.String WARPMC { get; set; }
        public System.String REMARK { get; set; }
        public System.Decimal? TENSION_IT { get; set; }
        public System.Decimal? TENSION_TAKEUP { get; set; }
        public System.Decimal? MC_COUNT_L { get; set; }
        public System.Decimal? MC_COUNT_S { get; set; }
        public System.DateTime? EDITDATE { get; set; }
        public System.String EDITBY { get; set; }
    }

    #endregion

    #region WARP_GETWARPERMCSTATUS Parameter

    public class WARP_GETWARPERMCSTATUSParameter
    {
        public System.String P_MCNO { get; set; }
    }

    #endregion

    #region WARP_GETWARPERMCSTATUS Result

    public class WARP_GETWARPERMCSTATUSResult
    {
        public System.String WARPHEADNO { get; set; }
        public System.String ITM_PREPARE { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.String WARPMC { get; set; }
        public System.String SIDE { get; set; }
        public System.Decimal? ACTUALCH { get; set; }
        public System.String WTYPE { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.String CREATEBY { get; set; }
        public System.DateTime? CONDITIONSTART { get; set; }
        public System.String CONDITIONBY { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.String STATUS { get; set; }
        public System.String FINISHBY { get; set; }
        public System.String FINISHFLAG { get; set; }
        public System.String REEDNO { get; set; }
        public System.String EDITBY { get; set; }
        public System.DateTime? EDITDATE { get; set; }
        public System.String CONDITIONING { get; set; }
    }

    #endregion

    #region WARP_GETWARPERLOTBYHEADNO Parameter

    public class WARP_GETWARPERLOTBYHEADNOParameter
    {
        public System.String P_WARPHEADNO { get; set; }
    }

    #endregion

    #region WARP_GETWARPERLOTBYHEADNO Result

    public class WARP_GETWARPERLOTBYHEADNOResult
    {
        public System.String WARPHEADNO { get; set; }
        public System.String WARPERLOT { get; set; }
        public System.String BEAMNO { get; set; }
        public System.String SIDE { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.Decimal? LENGTH { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.Decimal? HARDNESS_L { get; set; }
        public System.Decimal? HARDNESS_N { get; set; }
        public System.Decimal? HARDNESS_R { get; set; }
        public System.Decimal? TENSION { get; set; }
        public System.String STARTBY { get; set; }
        public System.String DOFFBY { get; set; }
        public System.String FLAG { get; set; }
        public System.String WARPMC { get; set; }
        public System.String REMARK { get; set; }
        public System.Decimal? TENSION_IT { get; set; }
        public System.Decimal? TENSION_TAKEUP { get; set; }
        public System.Decimal? MC_COUNT_L { get; set; }
        public System.Decimal? MC_COUNT_S { get; set; }
        public System.DateTime? EDITDATE { get; set; }
        public System.String EDITBY { get; set; }
        public System.Decimal? KEBA { get; set; }
        public System.Decimal? TIGHTEND { get; set; }
        public System.Decimal? MISSYARN { get; set; }
        public System.Decimal? OTHER { get; set; }
    }

    #endregion

    #region WARP_GETSTOPREASONBYWARPERLOT Parameter

    public class WARP_GETSTOPREASONBYWARPERLOTParameter
    {
        public System.String P_WARPHEADNO { get; set; }
        public System.String P_WARPLOT { get; set; }
    }

    #endregion

    #region WARP_GETSTOPREASONBYWARPERLOT Result

    public class WARP_GETSTOPREASONBYWARPERLOTResult
    {
        public System.String WARPHEADNO { get; set; }
        public System.String WARPERLOT { get; set; }
        public System.String REASON { get; set; }
        public System.Decimal? LENGTH { get; set; }
        public System.String OPERATOR { get; set; }
        public System.String OTHERFLAG { get; set; }
        public System.DateTime? CREATEDATE { get; set; }
    }

    #endregion

    #region WARP_GETSPECBYCHOPNOANDMC Parameter

    public class WARP_GETSPECBYCHOPNOANDMCParameter
    {
        public System.String P_ITMPREPARE { get; set; }
        public System.String P_MCNO { get; set; }
    }

    #endregion

    #region WARP_GETSPECBYCHOPNOANDMC Result

    public class WARP_GETSPECBYCHOPNOANDMCResult
    {
        public System.String CHOPNO { get; set; }
        public System.String ITM_YARN { get; set; }
        public System.Decimal? WARPERENDS { get; set; }
        public System.Decimal? MAXLENGTH { get; set; }
        public System.Decimal? MINLENGTH { get; set; }
        public System.String WAXING { get; set; }
        public System.String COMBTYPE { get; set; }
        public System.String COMBPITCH { get; set; }
        public System.Decimal? KEBAYARN { get; set; }
        public System.Decimal? NOWARPBEAM { get; set; }
        public System.Decimal? MAXHARDNESS { get; set; }
        public System.Decimal? MINHARDNESS { get; set; }
        public System.String MCNO { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.Decimal? SPEED_MARGIN { get; set; }
        public System.Decimal? YARN_TENSION { get; set; }
        public System.Decimal? YARN_TENSION_MARGIN { get; set; }
        public System.Decimal? WINDING_TENSION { get; set; }
        public System.Decimal? WINDING_TENSION_MARGIN { get; set; }
        public System.Decimal? NOCH { get; set; }
    }

    #endregion

    #region WARP_GETREMAINPALLET Parameter

    public class WARP_GETREMAINPALLETParameter
    {
        public System.String P_ITEM_YARN { get; set; }
    }

    #endregion

    #region WARP_GETREMAINPALLET Result

    public class WARP_GETREMAINPALLETResult
    {
        public System.String ITM_YARN { get; set; }
        public System.DateTime? RECEIVEDATE { get; set; }
        public System.String PALLETNO { get; set; }
        public System.Decimal? RECEIVEWEIGHT { get; set; }
        public System.Decimal? RECEIVECH { get; set; }
        public System.Decimal? USEDWEIGHT { get; set; }
        public System.Decimal? USEDCH { get; set; }
        public System.String VERIFY { get; set; }
        public System.String REJECTID { get; set; }
        public System.String FINISHFLAG { get; set; }
        public System.String RETURNFLAG { get; set; }
        public System.Decimal? REJECTCH { get; set; }
        public System.DateTime? CREATEDATE { get; set; }
        public System.String CREATEBY { get; set; }
        public System.String CLEARBY { get; set; }
        public System.String REMARK { get; set; }
        public System.DateTime? CLEARDATE { get; set; }
        public System.Decimal? KGPERCH { get; set; }
        public System.Decimal? REMAINCH { get; set; }
    }

    #endregion

    #region WARP_GETINPROCESSLOTBYHEADNO Parameter

    public class WARP_GETINPROCESSLOTBYHEADNOParameter
    {
        public System.String P_WARPHEADNO { get; set; }
    }

    #endregion

    #region WARP_GETINPROCESSLOTBYHEADNO Result

    public class WARP_GETINPROCESSLOTBYHEADNOResult
    {
        public System.String WARPHEADNO { get; set; }
        public System.String WARPERLOT { get; set; }
        public System.String BEAMNO { get; set; }
        public System.String SIDE { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.Decimal? LENGTH { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.Decimal? HARDNESS_L { get; set; }
        public System.Decimal? HARDNESS_N { get; set; }
        public System.Decimal? HARDNESS_R { get; set; }
        public System.Decimal? TENSION { get; set; }
        public System.String STARTBY { get; set; }
        public System.String DOFFBY { get; set; }
        public System.String FLAG { get; set; }
        public System.String WARPMC { get; set; }
        public System.String REMARK { get; set; }
        public System.Decimal? TENSION_IT { get; set; }
        public System.Decimal? TENSION_TAKEUP { get; set; }
        public System.Decimal? MC_COUNT_L { get; set; }
        public System.Decimal? MC_COUNT_S { get; set; }
        public System.DateTime? EDITDATE { get; set; }
        public System.String EDITBY { get; set; }
    }

    #endregion

    #region WARP_GETCREELSETUPSTATUS Parameter

    public class WARP_GETCREELSETUPSTATUSParameter
    {
        public System.String P_MCNO { get; set; }
        public System.String P_SIDE { get; set; }
    }

    #endregion

    #region WARP_GETCREELSETUPSTATUS Result

    public class WARP_GETCREELSETUPSTATUSResult
    {
        public System.String WARPHEADNO { get; set; }
        public System.String ITM_PREPARE { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.String WARPMC { get; set; }
        public System.String SIDE { get; set; }
        public System.Decimal? ACTUALCH { get; set; }
        public System.String WTYPE { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.String CREATEBY { get; set; }
        public System.DateTime? CONDITIONSTART { get; set; }
        public System.String CONDITIONBY { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.String STATUS { get; set; }
        public System.String FINISHBY { get; set; }
        public System.String FINISHFLAG { get; set; }
        public System.String REEDNO { get; set; }
        public System.String EDITBY { get; set; }
        public System.DateTime? EDITDATE { get; set; }
    }

    #endregion

    #region WARP_GETCREELSETUPDETAIL Parameter

    public class WARP_GETCREELSETUPDETAILParameter
    {
        public System.String P_WARPHEADNO { get; set; }
    }

    #endregion

    #region WARP_GETCREELSETUPDETAIL Result

    public class WARP_GETCREELSETUPDETAILResult
    {
        public System.String PALLETNO { get; set; }
        public System.Decimal? RECEIVECH { get; set; }
        public System.Decimal? USEDCH { get; set; }
        public System.Decimal? REJECTCH { get; set; }
        public System.Decimal? PREJECT { get; set; }
        public System.String ITM_YARN { get; set; }
        public System.DateTime? RECEIVEDATE { get; set; }
        public System.Decimal? PUSED { get; set; }
    }

    #endregion

    #region WARP_EDITWARPERMCSETUP Parameter

    public class WARP_EDITWARPERMCSETUPParameter
    {
        public System.String P_WARPHEADNO { get; set; }
        public System.String P_WARPMC { get; set; }
        public System.String P_SIDE { get; set; }
        public System.String P_NEWWARPMC { get; set; }
        public System.String P_OPERATOR { get; set; }
    }

    #endregion

    #region WARP_EDITWARPERMCSETUP Result

    public class WARP_EDITWARPERMCSETUPResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region WARP_CLEARPALLET Parameter

    public class WARP_CLEARPALLETParameter
    {
        public System.DateTime? P_RECEIVEDATE { get; set; }
        public System.String P_PALLETNO { get; set; }
        public System.String P_OPERATOR { get; set; }
        public System.String P_REMARK { get; set; }
    }

    #endregion

    #region WARP_CLEARPALLET Result

    public class WARP_CLEARPALLETResult
    {
    }

    #endregion

    #region WARP_CHECKPALLET Parameter

    public class WARP_CHECKPALLETParameter
    {
        public System.String P_PALLETNO { get; set; }
    }

    #endregion

    #region WARP_CHECKPALLET Result

    public class WARP_CHECKPALLETResult
    {
        public System.String ITM_YARN { get; set; }
        public System.DateTime? RECEIVEDATE { get; set; }
        public System.String PALLETNO { get; set; }
        public System.Decimal? RECEIVEWEIGHT { get; set; }
        public System.Decimal? RECEIVECH { get; set; }
        public System.Decimal? USEDWEIGHT { get; set; }
        public System.Decimal? USEDCH { get; set; }
        public System.String VERIFY { get; set; }
        public System.String REJECTID { get; set; }
        public System.String FINISHFLAG { get; set; }
        public System.String RETURNFLAG { get; set; }
        public System.Decimal? REJECTCH { get; set; }
        public System.DateTime? CREATEDATE { get; set; }
        public System.String CREATEBY { get; set; }
        public System.String CLEARBY { get; set; }
        public System.String REMARK { get; set; }
        public System.DateTime? CLEARDATE { get; set; }
        public System.Decimal? KGPERCH { get; set; }
    }

    #endregion

    #region WARP_CANCELCREELSETUP Parameter

    public class WARP_CANCELCREELSETUPParameter
    {
        public System.String P_WARPHEADNO { get; set; }
        public System.String P_WARPMC { get; set; }
        public System.String P_SIDE { get; set; }
        public System.String P_OPERATOR { get; set; }
    }

    #endregion

    #region WARP_CANCELCREELSETUP Result

    public class WARP_CANCELCREELSETUPResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region UPDATEINSPECTIONPROCESS Parameter

    public class UPDATEINSPECTIONPROCESSParameter
    {
        public System.String P_INSLOT { get; set; }
        public System.DateTime? P_ENDDATE { get; set; }
        public System.Decimal? P_GLENGHT { get; set; }
        public System.Decimal? P_NLENGTH { get; set; }
        public System.String P_GRADE { get; set; }
        public System.Decimal? P_GWEIGHT { get; set; }
        public System.Decimal? P_NWEIGHT { get; set; }
        public System.String P_REMARK { get; set; }
        public System.String P_FLAG { get; set; }
        public System.DateTime? P_SUSPENDDATE { get; set; }
        public System.String P_SUSPENDBY { get; set; }
        public System.DateTime? P_STARTDATE1 { get; set; }
        public System.DateTime? P_STARTDATE { get; set; }
        public System.String P_CLEARBY { get; set; }
        public System.String P_CLEARREMARK { get; set; }
        public System.String P_CUSTOMERTYPE { get; set; }
        public System.String P_DEFECTFILE { get; set; }
        public System.String P_PRODUCTTYPEID { get; set; }
        public System.String P_PACK { get; set; }
        public System.String P_GROUP { get; set; }
        public System.String P_LOADTYPE { get; set; }
    }

    #endregion

    #region UPDATEINSPECTIONPROCESS Result

    public class UPDATEINSPECTIONPROCESSResult
    {
    }

    #endregion

    #region TGMO_GETDETAIL Parameter

    public class TGMO_GETDETAILParameter
    {
        public System.String P_ITMCODE { get; set; }
    }

    #endregion

    #region TGMO_GETDETAIL Result

    public class TGMO_GETDETAILResult
    {
        public System.String ITEMCODE { get; set; }
        public System.String TGCODE { get; set; }
        public System.String KANBAN { get; set; }
        public System.String DESCRIPTION { get; set; }
    }

    #endregion

    #region QA_SEARCHCHECKINGDATA Parameter

    public class QA_SEARCHCHECKINGDATAParameter
    {
        public System.String P_CUSID { get; set; }
        public System.String P_DATE { get; set; }
        public System.String P_LABITMCODE { get; set; }
        public System.String P_RESULT { get; set; }
    }

    #endregion

    #region QA_SEARCHCHECKINGDATA Result

    public class QA_SEARCHCHECKINGDATAResult
    {
        public System.String CUSTOMERID { get; set; }
        public System.String LAB_ITMCODE { get; set; }
        public System.String LAB_LOT { get; set; }
        public System.String LAB_BATCHNO { get; set; }
        public System.String INS_ITMCODE { get; set; }
        public System.String INS_LOT { get; set; }
        public System.String INS_BATCHNO { get; set; }
        public System.String CUS_CODE { get; set; }
        public System.String CHECK_RESULT { get; set; }
        public System.DateTime? CHECKDATE { get; set; }
        public System.String CHECKEDBY { get; set; }
        public System.String DELETEFLAG { get; set; }
        public System.String DELETEBY { get; set; }
        public System.DateTime? DELETEDATE { get; set; }
        public System.String SHIFT { get; set; }
        public System.String REMARK { get; set; }
        public System.String CUSTOMERNAME { get; set; }
    }

    #endregion

    #region QA_INSERTCHECKINGDATA Parameter

    public class QA_INSERTCHECKINGDATAParameter
    {
        public System.String P_CUSTOMERID { get; set; }
        public System.String P_LABITMCODE { get; set; }
        public System.String P_LABLOT { get; set; }
        public System.String P_LABBATCHNO { get; set; }
        public System.String P_INSITMCODE { get; set; }
        public System.String P_INSLOT { get; set; }
        public System.String P_INSBATCHNO { get; set; }
        public System.String P_CUSCODE { get; set; }
        public System.String P_RESULT { get; set; }
        public System.DateTime? P_CHECKDATE { get; set; }
        public System.String P_CHECKEDBY { get; set; }
        public System.String P_SHIFT { get; set; }
        public System.String P_REMARK { get; set; }
    }

    #endregion

    #region QA_INSERTCHECKINGDATA Result

    public class QA_INSERTCHECKINGDATAResult
    {
    }

    #endregion

    #region QA_DELETECHECKINGDATA Parameter

    public class QA_DELETECHECKINGDATAParameter
    {
        public System.String P_LABITMCODE { get; set; }
        public System.String P_LABLOT { get; set; }
        public System.String P_LABBATCHNO { get; set; }
        public System.DateTime? P_CHECKDATE { get; set; }
        public System.String P_DELETEBY { get; set; }
        public System.DateTime? P_DELETEDATE { get; set; }
    }

    #endregion

    #region QA_DELETECHECKINGDATA Result

    public class QA_DELETECHECKINGDATAResult
    {
    }

    #endregion

    #region PCKPRFTP_UPDATESCAN Parameter

    public class PCKPRFTP_UPDATESCANParameter
    {
        public System.String P_INVNO { get; set; }
        public System.String P_CDEL0 { get; set; }
        public System.String P_SCANBY { get; set; }
        public System.Decimal? P_RUNNO { get; set; }
    }

    #endregion

    #region PCKPRFTP_UPDATESCAN Result

    public class PCKPRFTP_UPDATESCANResult
    {
        public System.String R_RESULT { get; set; }
    }

    #endregion

    #region PCKPRFTP_UPDATERUNNO Parameter

    public class PCKPRFTP_UPDATERUNNOParameter
    {
        public System.String P_INVNO { get; set; }
        public System.String P_CDEL0 { get; set; }
        public System.Decimal? P_RUNNO { get; set; }
        public System.String P_EDITBY { get; set; }
        public System.Decimal? P_INUSE { get; set; }
    }

    #endregion

    #region PCKPRFTP_UPDATERUNNO Result

    public class PCKPRFTP_UPDATERUNNOResult
    {
        public System.String R_RESULT { get; set; }
    }

    #endregion

    #region PCKPRFTP_UPDATEINUSE Parameter

    public class PCKPRFTP_UPDATEINUSEParameter
    {
        public System.String P_INVNO { get; set; }
        public System.String P_CDEL0 { get; set; }
        public System.String P_EDITBY { get; set; }
        public System.Decimal? P_INUSE { get; set; }
    }

    #endregion

    #region PCKPRFTP_UPDATEINUSE Result

    public class PCKPRFTP_UPDATEINUSEResult
    {
        public System.String R_RESULT { get; set; }
    }

    #endregion

    #region PCKPRFTP_UPDATECUSNO Parameter

    public class PCKPRFTP_UPDATECUSNOParameter
    {
        public System.String P_CDEL0 { get; set; }
        public System.Decimal? P_CUSNO { get; set; }
        public System.String P_EDITBY { get; set; }
        public System.Decimal? P_INUSE { get; set; }
    }

    #endregion

    #region PCKPRFTP_UPDATECUSNO Result

    public class PCKPRFTP_UPDATECUSNOResult
    {
        public System.String R_RESULT { get; set; }
    }

    #endregion

    #region PCKPRFTP_INSERTUPDATE Parameter

    public class PCKPRFTP_INSERTUPDATEParameter
    {
        public System.String P_ANNUL { get; set; }
        public System.String P_CDDIV { get; set; }
        public System.String P_INVTY { get; set; }
        public System.String P_INVNO { get; set; }
        public System.String P_CDORD { get; set; }
        public System.Decimal? P_RELNO { get; set; }
        public System.String P_CUSCD { get; set; }
        public System.String P_CUSNM { get; set; }
        public System.String P_RECTY { get; set; }
        public System.String P_CDKE1 { get; set; }
        public System.String P_CDKE2 { get; set; }
        public System.String P_CSITM { get; set; }
        public System.String P_CDCON { get; set; }
        public System.String P_CDEL0 { get; set; }
        public System.String P_GRADE { get; set; }
        public System.Decimal? P_PIELN { get; set; }
        public System.Decimal? P_NETWH { get; set; }
        public System.Decimal? P_GRSWH { get; set; }
        public System.Decimal? P_GRSLN { get; set; }
        public System.String P_PALSZ { get; set; }
        public System.Decimal? P_DTTRA { get; set; }
        public System.Decimal? P_DTORA { get; set; }
        public System.Decimal? P_AS400NO { get; set; }
        public System.String P_OPERATORID { get; set; }
        public System.Decimal? P_INUSE { get; set; }
    }

    #endregion

    #region PCKPRFTP_INSERTUPDATE Result

    public class PCKPRFTP_INSERTUPDATEResult
    {
        public System.String R_RESULT { get; set; }
    }

    #endregion

    #region PCKPRFTP_GETINVNO Parameter

    public class PCKPRFTP_GETINVNOParameter
    {
    }

    #endregion

    #region PCKPRFTP_GETINVNO Result

    public class PCKPRFTP_GETINVNOResult
    {
        public System.String INVNO { get; set; }
    }

    #endregion

    #region PCKPRFTP_GETDATA Parameter

    public class PCKPRFTP_GETDATAParameter
    {
        public System.String P_INVNO { get; set; }
        public System.String P_CDEL0 { get; set; }
        public System.Decimal? P_RUNNO { get; set; }
    }

    #endregion

    #region PCKPRFTP_GETDATA Result

    public class PCKPRFTP_GETDATAResult
    {
        public System.String ANNUL { get; set; }
        public System.String CDDIV { get; set; }
        public System.String INVTY { get; set; }
        public System.String INVNO { get; set; }
        public System.String CDORD { get; set; }
        public System.Decimal? RELNO { get; set; }
        public System.String CUSCD { get; set; }
        public System.String CUSNM { get; set; }
        public System.String RECTY { get; set; }
        public System.String CDKE1 { get; set; }
        public System.String CDKE2 { get; set; }
        public System.String CSITM { get; set; }
        public System.String CDCON { get; set; }
        public System.String CDEL0 { get; set; }
        public System.String GRADE { get; set; }
        public System.Decimal? PIELN { get; set; }
        public System.Decimal? NETWH { get; set; }
        public System.Decimal? GRSWH { get; set; }
        public System.Decimal? GRSLN { get; set; }
        public System.String PALSZ { get; set; }
        public System.Decimal? DTTRA { get; set; }
        public System.Decimal? DTORA { get; set; }
        public System.Decimal? RUNNO { get; set; }
        public System.Decimal? AS400NO { get; set; }
        public System.Decimal? CUSNO { get; set; }
        public System.String INSERTBY { get; set; }
        public System.DateTime? INSERTDATE { get; set; }
        public System.String EDITBY { get; set; }
        public System.DateTime? EDITDATE { get; set; }
        public System.Decimal? INUSE { get; set; }
        public System.String SCANBY { get; set; }
        public System.DateTime? SCANDATE { get; set; }
        public System.Decimal? CHKNETWEIGHT { get; set; }
        public System.Decimal? CHKGROSSWEIGHT { get; set; }
        public System.Decimal? CHKNETLENGTH { get; set; }
        public System.Decimal? CHKGROSSLENGTH { get; set; }
    }

    #endregion

    #region PACK_UPDATEPACKINGPALLET Parameter

    public class PACK_UPDATEPACKINGPALLETParameter
    {
        public System.String P_PALLET { get; set; }
        public System.String P_OPERATOR { get; set; }
        public System.DateTime? P_CHECKDATE { get; set; }
        public System.String P_LAB { get; set; }
        public System.String P_AS400 { get; set; }
        public System.String P_REMARK { get; set; }
        public System.String P_FLAG { get; set; }
    }

    #endregion

    #region PACK_UPDATEPACKINGPALLET Result

    public class PACK_UPDATEPACKINGPALLETResult
    {
    }

    #endregion

    #region PACK_SEARCHPALLETLIST Parameter

    public class PACK_SEARCHPALLETLISTParameter
    {
        public System.String P_PALLET { get; set; }
        public System.String P_DATE { get; set; }
        public System.String P_STATUS { get; set; }
    }

    #endregion

    #region PACK_SEARCHPALLETLIST Result

    public class PACK_SEARCHPALLETLISTResult
    {
        public System.String PALLETNO { get; set; }
        public System.DateTime? PACKINGDATE { get; set; }
        public System.String PACKINGBY { get; set; }
        public System.String CHECKBY { get; set; }
        public System.DateTime? CHECKINGDATE { get; set; }
        public System.String REMARK { get; set; }
        public System.String COMPLETELAB { get; set; }
        public System.String TRANSFERAS400 { get; set; }
        public System.String FLAG { get; set; }
    }

    #endregion

    #region PACK_SEARCHINSPECTIONDATA Parameter

    public class PACK_SEARCHINSPECTIONDATAParameter
    {
        public System.String P_DATE { get; set; }
        public System.String P_GRADE { get; set; }
        public System.String P_ITMCODE { get; set; }
        public System.String P_INSLOT { get; set; }
    }

    #endregion

    #region PACK_SEARCHINSPECTIONDATA Result

    public class PACK_SEARCHINSPECTIONDATAResult
    {
        public System.String INSPECTIONLOT { get; set; }
        public System.String ITEMCODE { get; set; }
        public System.String FINISHINGLOT { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.Decimal? GROSSLENGTH { get; set; }
        public System.Decimal? NETLENGTH { get; set; }
        public System.String CUSTOMERID { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.String GRADE { get; set; }
        public System.Decimal? GROSSWEIGHT { get; set; }
        public System.Decimal? NETWEIGHT { get; set; }
        public System.String PEINSPECTIONLOT { get; set; }
        public System.String DEFECTID { get; set; }
        public System.String REMARK { get; set; }
        public System.String ATTACHID { get; set; }
        public System.String TESTRECORDID { get; set; }
        public System.String INSPECTEDBY { get; set; }
        public System.String MCNO { get; set; }
        public System.String FINISHFLAG { get; set; }
        public System.DateTime? SUSPENDDATE { get; set; }
        public System.String INSPECTIONID { get; set; }
        public System.String RETEST { get; set; }
        public System.String PREITEMCODE { get; set; }
        public System.String CLEARBY { get; set; }
        public System.String CLEARREMARK { get; set; }
        public System.String SUSPENDBY { get; set; }
        public System.DateTime? STARTDATE1 { get; set; }
        public System.String CUSTOMERTYPE { get; set; }
        public System.String DEFECTFILENAME { get; set; }
        public System.String ISPACKED { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.String OPERATOR_GROUP { get; set; }
        public System.String DF_CODE { get; set; }
        public System.Decimal? DF_AMOUNT { get; set; }
        public System.Decimal? DF_POINT { get; set; }
        public System.String ITM_GROUP { get; set; }
    }

    #endregion

    #region PACK_PRINTLABEL Parameter

    public class PACK_PRINTLABELParameter
    {
        public System.String P_INSLOT { get; set; }
    }

    #endregion

    #region PACK_PRINTLABEL Result

    public class PACK_PRINTLABELResult
    {
        public System.String INSPECTIONLOT { get; set; }
        public System.Decimal? QUANTITY { get; set; }
        public System.Decimal? GROSSWEIGHT { get; set; }
        public System.Decimal? NETWEIGHT { get; set; }
        public System.String GRADE { get; set; }
        public System.String ITEMCODE { get; set; }
        public System.String DESCRIPTION { get; set; }
        public System.String SUPPLIERCODE { get; set; }
        public System.String BARCODEBACTHNO { get; set; }
        public System.String CUSTOMERPARTNO { get; set; }
        public System.String BATCHNO { get; set; }
        public System.String PDATE { get; set; }
        public System.String CUSTOMERID { get; set; }

        //INC เพิ่มเอง
        public System.String FINISHINGPROCESS { get; set; }
        public System.String DBARCODE { get; set; }
        public System.String BDate { get; set; }
        public System.String CUSPARTNO2D { get; set; }
    }

    #endregion

    #region PACK_PALLETSHEET Parameter

    public class PACK_PALLETSHEETParameter
    {
        public System.String P_PALLET { get; set; }
    }

    #endregion

    #region PACK_PALLETSHEET Result

    public class PACK_PALLETSHEETResult
    {
        public System.String PALLETNO { get; set; }
        public System.String ITEMCODE { get; set; }
        public System.String CUSTOMERTYPE { get; set; }
        public System.String INSPECTIONLOT { get; set; }
        public System.String GRADE { get; set; }
        public System.Decimal? GROSSWEIGHT { get; set; }
        public System.Decimal? NETLENGTH { get; set; }
        public System.Decimal? NETWEIGHT { get; set; }
        public System.DateTime? PACKINGDATE { get; set; }
        public System.String PACKINGBY { get; set; }
        public System.String CHECKBY { get; set; }
        public System.DateTime? CHECKINGDATE { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.String ITM_WEAVING { get; set; }
        public System.String YARNCODE { get; set; }
        public System.Decimal? ORDERNO { get; set; }
    }

    #endregion

    #region PACK_INSPACKINGPALLETDETAIL Parameter

    public class PACK_INSPACKINGPALLETDETAILParameter
    {
        public System.String P_PALLETNO { get; set; }
        public System.Decimal? P_ORDERNO { get; set; }
        public System.String P_INSLOT { get; set; }
        public System.String P_ITMCODE { get; set; }
        public System.String P_GRADE { get; set; }
        public System.Decimal? P_NETLENGTH { get; set; }
        public System.Decimal? P_GROSSLENGTH { get; set; }
        public System.Decimal? P_NETWEIGHT { get; set; }
        public System.Decimal? P_GROSSWEIGHT { get; set; }
        public System.String P_CUSTYPE { get; set; }
        public System.DateTime? P_INSPECTDATE { get; set; }
        public System.String P_LOADTYPE { get; set; }
    }

    #endregion

    #region PACK_INSPACKINGPALLETDETAIL Result

    public class PACK_INSPACKINGPALLETDETAILResult
    {
    }

    #endregion

    #region PACK_INSERTPACKINGPALLET Parameter

    public class PACK_INSERTPACKINGPALLETParameter
    {
        public System.String P_OPERATOR { get; set; }
    }

    #endregion

    #region PACK_INSERTPACKINGPALLET Result

    public class PACK_INSERTPACKINGPALLETResult
    {
        public System.String R_PALLETNO { get; set; }
    }

    #endregion

    #region PACK_GETPALLETDETAIL Parameter

    public class PACK_GETPALLETDETAILParameter
    {
        public System.String P_PALLET { get; set; }
    }

    #endregion

    #region PACK_GETPALLETDETAIL Result

    public class PACK_GETPALLETDETAILResult
    {
        public System.String PALLETNO { get; set; }
        public System.String INSPECTIONLOT { get; set; }
        public System.String ITEMCODE { get; set; }
        public System.Decimal? NETLENGTH { get; set; }
        public System.Decimal? GROSSWEIGHT { get; set; }
        public System.Decimal? NETWEIGHT { get; set; }
        public System.String GRADE { get; set; }
        public System.String CUSTOMERTYPE { get; set; }
        public System.String ISLAB { get; set; }
        public System.DateTime? INSPECTIONDATE { get; set; }
        public System.String FLAG { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.String STOCK { get; set; }
        public System.Decimal? GROSSLENGTH { get; set; }
        public System.Decimal? ORDERNO { get; set; }
        public System.String ITM_GROUP { get; set; }
    }

    #endregion

    #region PACK_EDITPACKINGPALLETDETAIL Parameter

    public class PACK_EDITPACKINGPALLETDETAILParameter
    {
        public System.String P_PALLETNO { get; set; }
        public System.Decimal? P_ORDERNO { get; set; }
        public System.String P_INSLOT_OLD { get; set; }
        public System.String P_INSLOT_NEW { get; set; }
        public System.String P_ITMCODE { get; set; }
        public System.String P_GRADE { get; set; }
        public System.Decimal? P_NETLENGTH { get; set; }
        public System.Decimal? P_GROSSLENGTH { get; set; }
        public System.Decimal? P_NETWEIGHT { get; set; }
        public System.Decimal? P_GROSSWEIGHT { get; set; }
        public System.String P_CUSTYPE { get; set; }
        public System.DateTime? P_INSPECTDATE { get; set; }
        public System.String P_LOADTYPE { get; set; }
    }

    #endregion

    #region PACK_EDITPACKINGPALLETDETAIL Result

    public class PACK_EDITPACKINGPALLETDETAILResult
    {
    }

    #endregion

    #region PACK_CHECKPRINTLABEL Parameter

    public class PACK_CHECKPRINTLABELParameter
    {
        public System.String P_INSLOT { get; set; }
    }

    #endregion

    #region PACK_CHECKPRINTLABEL Result

    public class PACK_CHECKPRINTLABELResult
    {
        public System.DateTime? PRINTDATE { get; set; }
    }

    #endregion

    #region PACK_CANCELPALLET Parameter

    public class PACK_CANCELPALLETParameter
    {
        public System.String P_PALLETNO { get; set; }
    }

    #endregion

    #region PACK_CANCELPALLET Result

    public class PACK_CANCELPALLETResult
    {
    }

    #endregion

    #region OPERATOR_SEARCH Parameter

    public class OPERATOR_SEARCHParameter
    {
        public System.String P_OPID { get; set; }
        public System.String P_TITLE { get; set; }
        public System.String P_FNAME { get; set; }
        public System.String P_LNAME { get; set; }
        public System.String P_PROCESSID { get; set; }
        public System.String P_POSITION { get; set; }
    }

    #endregion

    #region OPERATOR_SEARCH Result

    public class OPERATOR_SEARCHResult
    {
        public System.String OPERATORID { get; set; }
        public System.String TITLE { get; set; }
        public System.String FNAME { get; set; }
        public System.String LNAME { get; set; }
        public System.String USERNAME { get; set; }
        public System.String PASSWORD { get; set; }
        public System.String DELETEFLAG { get; set; }
        public System.String POSITIONLEVEL { get; set; }
        public System.String PROCESSID { get; set; }
        public System.DateTime? CREATEDDATE { get; set; }
        public System.String CREATEDBY { get; set; }
        public System.String WEB { get; set; }
        public System.String STOCK { get; set; }
    }

    #endregion

    #region OPERATOR_INSERTUPDATE Parameter

    public class OPERATOR_INSERTUPDATEParameter
    {
        public System.String P_OPID { get; set; }
        public System.String P_FNAME { get; set; }
        public System.String P_LNAME { get; set; }
        public System.String P_PROCESSID { get; set; }
        public System.String P_USER { get; set; }
        public System.String P_PASSWORD { get; set; }
        public System.String P_TITLE { get; set; }
        public System.String P_FLAG { get; set; }
        public System.String P_POSITION { get; set; }
        public System.String P_CREATEBY { get; set; }
        public System.String P_WEB { get; set; }
        public System.String P_WIP { get; set; }
    }

    #endregion

    #region OPERATOR_INSERTUPDATE Result

    public class OPERATOR_INSERTUPDATEResult
    {
        public System.String R_RESULT { get; set; }
    }

    #endregion

    // -- Update 15/06/18 -- //

    #region MC_GETLOOMLIST Parameter

    public class MC_GETLOOMLISTParameter
    {
    }

    #endregion

    #region MC_GETLOOMLIST Result

    public class MC_GETLOOMLISTResult
    {
        public System.String MCNAME { get; set; }
    }

    #endregion

    //----------------------//

    #region MASTER_POSITIONLIST Parameter

    public class MASTER_POSITIONLISTParameter
    {
    }

    #endregion

    #region MASTER_POSITIONLIST Result

    public class MASTER_POSITIONLISTResult
    {
        public System.String POSITIONLEVEL { get; set; }
        public System.String POSITIONNAME { get; set; }
    }

    #endregion

    #region MASTER_GETLOADINGBYCUSTYPE Parameter

    public class MASTER_GETLOADINGBYCUSTYPEParameter
    {
        public System.String P_CUSTYPE { get; set; }
    }

    #endregion

    #region MASTER_GETLOADINGBYCUSTYPE Result

    public class MASTER_GETLOADINGBYCUSTYPEResult
    {
        public System.String LOADINGTYPE { get; set; }
    }

    #endregion

    #region MASTER_EDITCUSLOADTYPE Parameter

    public class MASTER_EDITCUSLOADTYPEParameter
    {
        public System.String P_CUSTYPE { get; set; }
        public System.String P_LOADTYPE { get; set; }
        public System.String P_OPERATOR { get; set; }
    }

    #endregion

    #region MASTER_EDITCUSLOADTYPE Result

    public class MASTER_EDITCUSLOADTYPEResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region MASTER_DELETECUSLOADTYPE Parameter

    public class MASTER_DELETECUSLOADTYPEParameter
    {
        public System.String P_CUSTYPE { get; set; }
        public System.String P_LOADTYPE { get; set; }
    }

    #endregion

    #region MASTER_DELETECUSLOADTYPE Result

    public class MASTER_DELETECUSLOADTYPEResult
    {
    }

    #endregion

    #region MASTER_CUSTOMERTYPELIST Parameter

    public class MASTER_CUSTOMERTYPELISTParameter
    {
    }

    #endregion

    #region MASTER_CUSTOMERTYPELIST Result

    public class MASTER_CUSTOMERTYPELISTResult
    {
        public System.String CUSTOMERTYPE { get; set; }
    }

    #endregion

    #region MASTER_AIRBAGPROCESSLIST Parameter

    public class MASTER_AIRBAGPROCESSLISTParameter
    {
    }

    #endregion

    #region MASTER_AIRBAGPROCESSLIST Result

    public class MASTER_AIRBAGPROCESSLISTResult
    {
        public System.String PROCESSID { get; set; }
        public System.String PROCESSDESCRIPTION { get; set; }
    }

    #endregion

    #region LAB_WEAVINGHISTORY Parameter

    public class LAB_WEAVINGHISTORYParameter
    {
        public System.String P_WEAVINGLOT { get; set; }
    }

    #endregion

    #region LAB_WEAVINGHISTORY Result

    public class LAB_WEAVINGHISTORYResult
    {
        public System.String WEAVINGLOT { get; set; }
        public System.String ITM_WEAVING { get; set; }
        public System.Decimal? LENGTH { get; set; }
        public System.String LOOMNO { get; set; }
        public System.DateTime? WEAVINGDATE { get; set; }
        public System.String SHIFT { get; set; }
        public System.String REMARK { get; set; }
        public System.DateTime? CREATEDATE { get; set; }
        public System.Decimal? WIDTH { get; set; }
        public System.String PREPAREBY { get; set; }
        public System.String WEAVINGNO { get; set; }
        public System.String BEAMLOT { get; set; }
        public System.Decimal? DOFFNO { get; set; }
        public System.Decimal? DENSITY_WARP { get; set; }
        public System.Decimal? TENSION { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.String DOFFBY { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.Decimal? WASTE { get; set; }
        public System.Decimal? DENSITY_WEFT { get; set; }
        public System.String DELETEFLAG { get; set; }
        public System.String DELETEBY { get; set; }
        public System.DateTime? DELETEDATE { get; set; }
    }

    #endregion

    #region LAB_UPDATEMASSPROSTOCK Parameter

    public class LAB_UPDATEMASSPROSTOCKParameter
    {
        public System.String P_WEAVELOT { get; set; }
        public System.String P_FINISHLOT { get; set; }
        public System.String P_ITMCODE { get; set; }
        public System.DateTime? P_RECEIVEDATE { get; set; }
        public System.String P_RECEIVEBY { get; set; }
        public System.String P_STATUS { get; set; }
        public System.DateTime? P_CONDITONTIME { get; set; }
        public System.String P_TESTBY { get; set; }
        public System.String P_APPROVESTATUS { get; set; }
        public System.String P_APPROVEBY { get; set; }
        public System.DateTime? P_APPROVEDATE { get; set; }
        public System.String P_REMARK { get; set; }
    }

    #endregion

    #region LAB_UPDATEMASSPROSTOCK Result

    public class LAB_UPDATEMASSPROSTOCKResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region LAB_UPDATEGREIGESTOCK Parameter

    public class LAB_UPDATEGREIGESTOCKParameter
    {
        public System.String P_BEAMERROLL { get; set; }
        public System.String P_LOOMNO { get; set; }
        public System.Decimal? P_TESTNO { get; set; }
        public System.DateTime? P_RECEIVEDATE { get; set; }
        public System.String P_RECEIVEBY { get; set; }
        public System.String P_STATUS { get; set; }
        public System.DateTime? P_CONDITONTIME { get; set; }
        public System.String P_TESTBY { get; set; }
        public System.String P_APPROVESTATUS { get; set; }
        public System.String P_APPROVEBY { get; set; }
        public System.DateTime? P_APPROVEDATE { get; set; }
        public System.String P_REMARK { get; set; }
    }

    #endregion

    #region LAB_UPDATEGREIGESTOCK Result

    public class LAB_UPDATEGREIGESTOCKResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region LAB_SEARCHLABMASSPRO Parameter

    public class LAB_SEARCHLABMASSPROParameter
    {
        public System.String P_WEAVELOT { get; set; }
        public System.String P_ITMCODE { get; set; }
        public System.String P_FABRICTPE { get; set; }
        public System.String P_SENDDATE { get; set; }
        public System.String P_TESTRESULT { get; set; }
    }

    #endregion

    #region LAB_SEARCHLABMASSPRO Result

    public class LAB_SEARCHLABMASSPROResult
    {
        public System.String ITM_CODE { get; set; }
        public System.String WEAVINGLOT { get; set; }
        public System.String FINISHINGLOT { get; set; }
        public System.DateTime? RECEIVEDATE { get; set; }
        public System.String RECEIVEBY { get; set; }
        public System.String STATUS { get; set; }
        public System.DateTime? CONDITIONINGTIME { get; set; }
        public System.DateTime? TESTDATE { get; set; }
        public System.String TESTRESULT { get; set; }
        public System.String REMARK { get; set; }
        public System.String TESTBY { get; set; }
        public System.String APPROVESTATUS { get; set; }
        public System.String APPROVEBY { get; set; }
        public System.DateTime? SENDDATE { get; set; }
        public System.DateTime? APPROVEDATE { get; set; }
        public System.String FABRICTYPE { get; set; }
    }

    #endregion

    #region LAB_SEARCHLABGREIGE Parameter

    public class LAB_SEARCHLABGREIGEParameter
    {
        public System.String P_BEAMERROLL { get; set; }
        public System.String P_LOOM { get; set; }
        public System.String P_ITMWEAVE { get; set; }
        public System.String P_SETTINGDATE { get; set; }
        public System.String P_SENDDATE { get; set; }
        public System.String P_TESTRESULT { get; set; }
    }

    #endregion

    #region LAB_SEARCHLABGREIGE Result

    public class LAB_SEARCHLABGREIGEResult
    {
        public System.String BEAMERROLL { get; set; }
        public System.String LOOMNO { get; set; }
        public System.String ITM_WEAVING { get; set; }
        public System.Decimal? TESTNO { get; set; }
        public System.DateTime? RECEIVEDATE { get; set; }
        public System.String RECEIVEBY { get; set; }
        public System.String STATUS { get; set; }
        public System.DateTime? CONDITIONINGTIME { get; set; }
        public System.DateTime? TESTDATE { get; set; }
        public System.String TESTRESULT { get; set; }
        public System.String REMARK { get; set; }
        public System.String TESTBY { get; set; }
        public System.String APPROVESTATUS { get; set; }
        public System.String APPROVEBY { get; set; }
        public System.DateTime? SENDDATE { get; set; }
        public System.DateTime? APPROVEDATE { get; set; }
        public System.DateTime? SETTINGDATE { get; set; }
    }

    #endregion

    // -- Update 26/10/20 -- //
    #region LAB_UPLOADREPORT Parameter

    public class LAB_UPLOADREPORTParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_WEAVINGLOG { get; set; }
        public System.String P_FINISHINGLOT { get; set; }
        public System.DateTime? P_ENTRYDATE { get; set; }
        public System.String P_FILENAME { get; set; }
        public System.DateTime? P_UPLOADDATE { get; set; }
        public System.String P_UPLOADBY { get; set; }
    }

    #endregion

    #region LAB_UPLOADREPORT Result

    public class LAB_UPLOADREPORTResult
    {
        public System.String P_RETURN { get; set; }
    }

    #endregion

    // -- Update 19/04/21 -- //

    #region LAB_SEARCHLABENTRYPRODUCTION Parameter

    public class LAB_SEARCHLABENTRYPRODUCTIONParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_ENTRYSTARTDATE { get; set; }
        public System.String P_ENTRYENDDATE { get; set; }
        public System.String P_LOOM { get; set; }
        public System.String P_FINISHPROCESS { get; set; }
    }

    #endregion

    #region LAB_SEARCHLABENTRYPRODUCTION Result

    public class LAB_SEARCHLABENTRYPRODUCTIONResult
    {
        public System.String ITM_CODE { get; set; }
        public System.String WEAVINGLOT { get; set; }
        public System.String FINISHINGLOT { get; set; }
        public System.DateTime? ENTRYDATE { get; set; }
        public System.String ENTEYBY { get; set; }
        public System.Decimal? WIDTH { get; set; }
        public System.Decimal? USABLE_WIDTH1 { get; set; }
        public System.Decimal? USABLE_WIDTH2 { get; set; }
        public System.Decimal? USABLE_WIDTH3 { get; set; }
        public System.Decimal? WIDTH_SILICONE1 { get; set; }
        public System.Decimal? WIDTH_SILICONE2 { get; set; }
        public System.Decimal? WIDTH_SILICONE3 { get; set; }
        public System.Decimal? NUMTHREADS_W1 { get; set; }
        public System.Decimal? NUMTHREADS_W2 { get; set; }
        public System.Decimal? NUMTHREADS_W3 { get; set; }
        public System.Decimal? NUMTHREADS_F1 { get; set; }
        public System.Decimal? NUMTHREADS_F2 { get; set; }
        public System.Decimal? NUMTHREADS_F3 { get; set; }
        public System.Decimal? TOTALWEIGHT1 { get; set; }
        public System.Decimal? TOTALWEIGHT2 { get; set; }
        public System.Decimal? TOTALWEIGHT3 { get; set; }
        public System.Decimal? TOTALWEIGHT4 { get; set; }
        public System.Decimal? TOTALWEIGHT5 { get; set; }
        public System.Decimal? TOTALWEIGHT6 { get; set; }
        public System.Decimal? UNCOATEDWEIGHT1 { get; set; }
        public System.Decimal? UNCOATEDWEIGHT2 { get; set; }
        public System.Decimal? UNCOATEDWEIGHT3 { get; set; }
        public System.Decimal? UNCOATEDWEIGHT4 { get; set; }
        public System.Decimal? UNCOATEDWEIGHT5 { get; set; }
        public System.Decimal? UNCOATEDWEIGHT6 { get; set; }
        public System.Decimal? COATINGWEIGHT1 { get; set; }
        public System.Decimal? COATINGWEIGHT2 { get; set; }
        public System.Decimal? COATINGWEIGHT3 { get; set; }
        public System.Decimal? COATINGWEIGHT4 { get; set; }
        public System.Decimal? COATINGWEIGHT5 { get; set; }
        public System.Decimal? COATINGWEIGHT6 { get; set; }
        public System.Decimal? THICKNESS1 { get; set; }
        public System.Decimal? THICKNESS2 { get; set; }
        public System.Decimal? THICKNESS3 { get; set; }
        public System.Decimal? MAXFORCE_W1 { get; set; }
        public System.Decimal? MAXFORCE_W2 { get; set; }
        public System.Decimal? MAXFORCE_W3 { get; set; }
        public System.Decimal? MAXFORCE_F1 { get; set; }
        public System.Decimal? MAXFORCE_F2 { get; set; }
        public System.Decimal? MAXFORCE_F3 { get; set; }
        public System.Decimal? ELONGATIONFORCE_W1 { get; set; }
        public System.Decimal? ELONGATIONFORCE_W2 { get; set; }
        public System.Decimal? ELONGATIONFORCE_W3 { get; set; }
        public System.Decimal? ELONGATIONFORCE_F1 { get; set; }
        public System.Decimal? ELONGATIONFORCE_F2 { get; set; }
        public System.Decimal? ELONGATIONFORCE_F3 { get; set; }
        public System.Decimal? FLAMMABILITY_W { get; set; }
        public System.Decimal? FLAMMABILITY_F { get; set; }
        public System.Decimal? EDGECOMB_W1 { get; set; }
        public System.Decimal? EDGECOMB_W2 { get; set; }
        public System.Decimal? EDGECOMB_W3 { get; set; }
        public System.Decimal? EDGECOMB_F1 { get; set; }
        public System.Decimal? EDGECOMB_F2 { get; set; }
        public System.Decimal? EDGECOMB_F3 { get; set; }
        public System.Decimal? STIFFNESS_W1 { get; set; }
        public System.Decimal? STIFFNESS_W2 { get; set; }
        public System.Decimal? STIFFNESS_W3 { get; set; }
        public System.Decimal? STIFFNESS_F1 { get; set; }
        public System.Decimal? STIFFNESS_F2 { get; set; }
        public System.Decimal? STIFFNESS_F3 { get; set; }
        public System.Decimal? TEAR_W1 { get; set; }
        public System.Decimal? TEAR_W2 { get; set; }
        public System.Decimal? TEAR_W3 { get; set; }
        public System.Decimal? TEAR_F1 { get; set; }
        public System.Decimal? TEAR_F2 { get; set; }
        public System.Decimal? TEAR_F3 { get; set; }
        public System.Decimal? STATIC_AIR1 { get; set; }
        public System.Decimal? STATIC_AIR2 { get; set; }
        public System.Decimal? STATIC_AIR3 { get; set; }
        public System.Decimal? DYNAMIC_AIR1 { get; set; }
        public System.Decimal? DYNAMIC_AIR2 { get; set; }
        public System.Decimal? DYNAMIC_AIR3 { get; set; }
        public System.Decimal? EXPONENT1 { get; set; }
        public System.Decimal? EXPONENT2 { get; set; }
        public System.Decimal? EXPONENT3 { get; set; }
        public System.Decimal? DIMENSCHANGE_W1 { get; set; }
        public System.Decimal? DIMENSCHANGE_W2 { get; set; }
        public System.Decimal? DIMENSCHANGE_W3 { get; set; }
        public System.Decimal? DIMENSCHANGE_F1 { get; set; }
        public System.Decimal? DIMENSCHANGE_F2 { get; set; }
        public System.Decimal? DIMENSCHANGE_F3 { get; set; }
        public System.Decimal? FLEXABRASION_W1 { get; set; }
        public System.Decimal? FLEXABRASION_W2 { get; set; }
        public System.Decimal? FLEXABRASION_W3 { get; set; }
        public System.Decimal? FLEXABRASION_F1 { get; set; }
        public System.Decimal? FLEXABRASION_F2 { get; set; }
        public System.Decimal? FLEXABRASION_F3 { get; set; }
        public System.Decimal? BOW1 { get; set; }
        public System.Decimal? SKEW1 { get; set; }
        public System.String STATUS { get; set; }
        public System.String REMARK { get; set; }
        public System.String APPROVEBY { get; set; }
        public System.DateTime? APPROVEDATE { get; set; }
        public System.DateTime? CREATEDATE { get; set; }
        public System.Decimal? BOW2 { get; set; }
        public System.Decimal? BOW3 { get; set; }
        public System.Decimal? SKEW2 { get; set; }
        public System.Decimal? SKEW3 { get; set; }
        public System.Decimal? BENDING_W1 { get; set; }
        public System.Decimal? BENDING_W2 { get; set; }
        public System.Decimal? BENDING_W3 { get; set; }
        public System.Decimal? BENDING_F1 { get; set; }
        public System.Decimal? BENDING_F2 { get; set; }
        public System.Decimal? BENDING_F3 { get; set; }
        public System.Decimal? FLEX_SCOTT_W1 { get; set; }
        public System.Decimal? FLEX_SCOTT_W2 { get; set; }
        public System.Decimal? FLEX_SCOTT_W3 { get; set; }
        public System.Decimal? FLEX_SCOTT_F1 { get; set; }
        public System.Decimal? FLEX_SCOTT_F2 { get; set; }
        public System.Decimal? FLEX_SCOTT_F3 { get; set; }
        public System.Decimal? STATIC_AIR4 { get; set; }
        public System.Decimal? STATIC_AIR5 { get; set; }
        public System.Decimal? STATIC_AIR6 { get; set; }
        public System.String FILENAME { get; set; }
        public System.DateTime? UPLOADDATE { get; set; }
        public System.String UPLOADBY { get; set; }
        public System.Decimal? FLAMMABILITY_W2 { get; set; }
        public System.Decimal? FLAMMABILITY_W3 { get; set; }
        public System.Decimal? FLAMMABILITY_W4 { get; set; }
        public System.Decimal? FLAMMABILITY_W5 { get; set; }
        public System.Decimal? FLAMMABILITY_F2 { get; set; }
        public System.Decimal? FLAMMABILITY_F3 { get; set; }
        public System.Decimal? FLAMMABILITY_F4 { get; set; }
        public System.Decimal? FLAMMABILITY_F5 { get; set; }
        public System.String ITM_CODE_H { get; set; }
        public System.Decimal? FINISHLENGTH { get; set; }
        public System.String FINISHINGPROCESS { get; set; }
        public System.String ITEMLOT { get; set; }
        public System.String LOOMNO { get; set; }
        public System.String FINISHINGMC { get; set; }
        public System.String BATCHNO { get; set; }
        public System.String CUSTOMERID { get; set; }
        public System.String PARTNO { get; set; }
    }

    #endregion

    // -- Update 26/10/20 -- //

    #region LAB_SEARCHAPPROVELAB Parameter

    public class LAB_SEARCHAPPROVELABParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_ENTRYSTARTDATE { get; set; }
        public System.String P_ENTRYENDDATE { get; set; }
        public System.String P_LOOM { get; set; }
        public System.String P_FINISHPROCESS { get; set; }
    }

    #endregion

    #region LAB_SEARCHAPPROVELAB Result

    public class LAB_SEARCHAPPROVELABResult
    {
        public System.String ITM_CODE { get; set; }
        public System.String WEAVINGLOT { get; set; }
        public System.String FINISHINGLOT { get; set; }
        public System.DateTime? ENTRYDATE { get; set; }
        public System.String ENTEYBY { get; set; }
        public System.Decimal? WIDTH { get; set; }
        public System.Decimal? USABLE_WIDTH1 { get; set; }
        public System.Decimal? USABLE_WIDTH2 { get; set; }
        public System.Decimal? USABLE_WIDTH3 { get; set; }
        public System.Decimal? WIDTH_SILICONE1 { get; set; }
        public System.Decimal? WIDTH_SILICONE2 { get; set; }
        public System.Decimal? WIDTH_SILICONE3 { get; set; }
        public System.Decimal? NUMTHREADS_W1 { get; set; }
        public System.Decimal? NUMTHREADS_W2 { get; set; }
        public System.Decimal? NUMTHREADS_W3 { get; set; }
        public System.Decimal? NUMTHREADS_F1 { get; set; }
        public System.Decimal? NUMTHREADS_F2 { get; set; }
        public System.Decimal? NUMTHREADS_F3 { get; set; }
        public System.Decimal? TOTALWEIGHT1 { get; set; }
        public System.Decimal? TOTALWEIGHT2 { get; set; }
        public System.Decimal? TOTALWEIGHT3 { get; set; }
        public System.Decimal? TOTALWEIGHT4 { get; set; }
        public System.Decimal? TOTALWEIGHT5 { get; set; }
        public System.Decimal? TOTALWEIGHT6 { get; set; }
        public System.Decimal? UNCOATEDWEIGHT1 { get; set; }
        public System.Decimal? UNCOATEDWEIGHT2 { get; set; }
        public System.Decimal? UNCOATEDWEIGHT3 { get; set; }
        public System.Decimal? UNCOATEDWEIGHT4 { get; set; }
        public System.Decimal? UNCOATEDWEIGHT5 { get; set; }
        public System.Decimal? UNCOATEDWEIGHT6 { get; set; }
        public System.Decimal? COATINGWEIGHT1 { get; set; }
        public System.Decimal? COATINGWEIGHT2 { get; set; }
        public System.Decimal? COATINGWEIGHT3 { get; set; }
        public System.Decimal? COATINGWEIGHT4 { get; set; }
        public System.Decimal? COATINGWEIGHT5 { get; set; }
        public System.Decimal? COATINGWEIGHT6 { get; set; }
        public System.Decimal? THICKNESS1 { get; set; }
        public System.Decimal? THICKNESS2 { get; set; }
        public System.Decimal? THICKNESS3 { get; set; }
        public System.Decimal? MAXFORCE_W1 { get; set; }
        public System.Decimal? MAXFORCE_W2 { get; set; }
        public System.Decimal? MAXFORCE_W3 { get; set; }
        public System.Decimal? MAXFORCE_F1 { get; set; }
        public System.Decimal? MAXFORCE_F2 { get; set; }
        public System.Decimal? MAXFORCE_F3 { get; set; }
        public System.Decimal? ELONGATIONFORCE_W1 { get; set; }
        public System.Decimal? ELONGATIONFORCE_W2 { get; set; }
        public System.Decimal? ELONGATIONFORCE_W3 { get; set; }
        public System.Decimal? ELONGATIONFORCE_F1 { get; set; }
        public System.Decimal? ELONGATIONFORCE_F2 { get; set; }
        public System.Decimal? ELONGATIONFORCE_F3 { get; set; }
        public System.Decimal? FLAMMABILITY_W { get; set; }
        public System.Decimal? FLAMMABILITY_F { get; set; }
        public System.Decimal? EDGECOMB_W1 { get; set; }
        public System.Decimal? EDGECOMB_W2 { get; set; }
        public System.Decimal? EDGECOMB_W3 { get; set; }
        public System.Decimal? EDGECOMB_F1 { get; set; }
        public System.Decimal? EDGECOMB_F2 { get; set; }
        public System.Decimal? EDGECOMB_F3 { get; set; }
        public System.Decimal? STIFFNESS_W1 { get; set; }
        public System.Decimal? STIFFNESS_W2 { get; set; }
        public System.Decimal? STIFFNESS_W3 { get; set; }
        public System.Decimal? STIFFNESS_F1 { get; set; }
        public System.Decimal? STIFFNESS_F2 { get; set; }
        public System.Decimal? STIFFNESS_F3 { get; set; }
        public System.Decimal? TEAR_W1 { get; set; }
        public System.Decimal? TEAR_W2 { get; set; }
        public System.Decimal? TEAR_W3 { get; set; }
        public System.Decimal? TEAR_F1 { get; set; }
        public System.Decimal? TEAR_F2 { get; set; }
        public System.Decimal? TEAR_F3 { get; set; }
        public System.Decimal? STATIC_AIR1 { get; set; }
        public System.Decimal? STATIC_AIR2 { get; set; }
        public System.Decimal? STATIC_AIR3 { get; set; }
        public System.Decimal? DYNAMIC_AIR1 { get; set; }
        public System.Decimal? DYNAMIC_AIR2 { get; set; }
        public System.Decimal? DYNAMIC_AIR3 { get; set; }
        public System.Decimal? EXPONENT1 { get; set; }
        public System.Decimal? EXPONENT2 { get; set; }
        public System.Decimal? EXPONENT3 { get; set; }
        public System.Decimal? DIMENSCHANGE_W1 { get; set; }
        public System.Decimal? DIMENSCHANGE_W2 { get; set; }
        public System.Decimal? DIMENSCHANGE_W3 { get; set; }
        public System.Decimal? DIMENSCHANGE_F1 { get; set; }
        public System.Decimal? DIMENSCHANGE_F2 { get; set; }
        public System.Decimal? DIMENSCHANGE_F3 { get; set; }
        public System.Decimal? FLEXABRASION_W1 { get; set; }
        public System.Decimal? FLEXABRASION_W2 { get; set; }
        public System.Decimal? FLEXABRASION_W3 { get; set; }
        public System.Decimal? FLEXABRASION_F1 { get; set; }
        public System.Decimal? FLEXABRASION_F2 { get; set; }
        public System.Decimal? FLEXABRASION_F3 { get; set; }
        public System.Decimal? BOW1 { get; set; }
        public System.Decimal? SKEW1 { get; set; }
        public System.String STATUS { get; set; }
        public System.String REMARK { get; set; }
        public System.String APPROVEBY { get; set; }
        public System.DateTime? APPROVEDATE { get; set; }
        public System.DateTime? CREATEDATE { get; set; }
        public System.Decimal? BOW2 { get; set; }
        public System.Decimal? BOW3 { get; set; }
        public System.Decimal? SKEW2 { get; set; }
        public System.Decimal? SKEW3 { get; set; }
        public System.Decimal? BENDING_W1 { get; set; }
        public System.Decimal? BENDING_W2 { get; set; }
        public System.Decimal? BENDING_W3 { get; set; }
        public System.Decimal? BENDING_F1 { get; set; }
        public System.Decimal? BENDING_F2 { get; set; }
        public System.Decimal? BENDING_F3 { get; set; }
        public System.Decimal? FLEX_SCOTT_W1 { get; set; }
        public System.Decimal? FLEX_SCOTT_W2 { get; set; }
        public System.Decimal? FLEX_SCOTT_W3 { get; set; }
        public System.Decimal? FLEX_SCOTT_F1 { get; set; }
        public System.Decimal? FLEX_SCOTT_F2 { get; set; }
        public System.Decimal? FLEX_SCOTT_F3 { get; set; }
        public System.Decimal? STATIC_AIR4 { get; set; }
        public System.Decimal? STATIC_AIR5 { get; set; }
        public System.Decimal? STATIC_AIR6 { get; set; }
        public System.String FILENAME { get; set; }
        public System.DateTime? UPLOADDATE { get; set; }
        public System.String UPLOADBY { get; set; }
        public System.Decimal? FLAMMABILITY_W2 { get; set; }
        public System.Decimal? FLAMMABILITY_W3 { get; set; }
        public System.Decimal? FLAMMABILITY_W4 { get; set; }
        public System.Decimal? FLAMMABILITY_W5 { get; set; }
        public System.Decimal? FLAMMABILITY_F2 { get; set; }
        public System.Decimal? FLAMMABILITY_F3 { get; set; }
        public System.Decimal? FLAMMABILITY_F4 { get; set; }
        public System.Decimal? FLAMMABILITY_F5 { get; set; }
        public System.Decimal? FINISHLENGTH { get; set; }
        public System.String FINISHINGPROCESS { get; set; }
        public System.String ITEMLOT { get; set; }
        public System.String LOOMNO { get; set; }
        public System.String FINISHINGMC { get; set; }
        public System.String BATCHNO { get; set; }
        public System.String CUSTOMERID { get; set; }
        public System.String PARTNO { get; set; }
    }

    #endregion

    //----------------------//

    // New 1/9/22

    #region LAB_SAVEREPLCWEIGHT Parameter

    public class LAB_SAVEREPLCWEIGHTParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_PRODUCTIONLOT { get; set; }
        public System.String P_TYPE { get; set; }
        public System.Decimal? P_WEIGHT1 { get; set; }
        public System.Decimal? P_WEIGHT2 { get; set; }
        public System.Decimal? P_WEIGHT3 { get; set; }
        public System.Decimal? P_WEIGHT4 { get; set; }
        public System.Decimal? P_WEIGHT5 { get; set; }
        public System.Decimal? P_WEIGHT6 { get; set; }
        public System.DateTime? P_WEIGHTDATE { get; set; }
        public System.String P_WEIGHTBY { get; set; }
    }

    #endregion

    #region LAB_SAVEREPLCWEIGHT Result

    public class LAB_SAVEREPLCWEIGHTResult
    {
        public System.String P_RETURN { get; set; }
    }

    #endregion

    #region LAB_SAVEREPLCSTIFFNESS Parameter

    public class LAB_SAVEREPLCSTIFFNESSParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_PRODUCTIONLOT { get; set; }
        public System.Decimal? P_STIFFNESS_W1 { get; set; }
        public System.Decimal? P_STIFFNESS_W2 { get; set; }
        public System.Decimal? P_STIFFNESS_W3 { get; set; }
        public System.Decimal? P_STIFFNESS_F1 { get; set; }
        public System.Decimal? P_STIFFNESS_F2 { get; set; }
        public System.Decimal? P_STIFFNESS_F3 { get; set; }
        public System.DateTime? P_STIFFNESSDATE { get; set; }
        public System.String P_STIFFNESSBY { get; set; }
    }

    #endregion

    #region LAB_SAVEREPLCSTIFFNESS Result

    public class LAB_SAVEREPLCSTIFFNESSResult
    {
        public System.String P_RETURN { get; set; }
    }

    #endregion

    #region LAB_SAVEREPLCSTATICAIR Parameter

    public class LAB_SAVEREPLCSTATICAIRParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_PRODUCTIONLOT { get; set; }
        public System.Decimal? P_STATIC_AIR1 { get; set; }
        public System.Decimal? P_STATIC_AIR2 { get; set; }
        public System.Decimal? P_STATIC_AIR3 { get; set; }
        public System.Decimal? P_STATIC_AIR4 { get; set; }
        public System.Decimal? P_STATIC_AIR5 { get; set; }
        public System.Decimal? P_STATIC_AIR6 { get; set; }
        public System.DateTime? P_STATICAIRDATE { get; set; }
        public System.String P_STATICAIRBY { get; set; }
    }

    #endregion

    #region LAB_SAVEREPLCSTATICAIR Result

    public class LAB_SAVEREPLCSTATICAIRResult
    {
        public System.String P_RETURN { get; set; }
    }

    #endregion

    #region LAB_SAVEREPLCDYNAMICAIR Parameter

    public class LAB_SAVEREPLCDYNAMICAIRParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_PRODUCTIONLOT { get; set; }
        public System.Decimal? P_DYNAMIC_AIR1 { get; set; }
        public System.Decimal? P_DYNAMIC_AIR2 { get; set; }
        public System.Decimal? P_DYNAMIC_AIR3 { get; set; }
        public System.Decimal? P_EXPONENT1 { get; set; }
        public System.Decimal? P_EXPONENT2 { get; set; }
        public System.Decimal? P_EXPONENT3 { get; set; }
        public System.DateTime? P_DYNAMICDATE { get; set; }
        public System.String P_DYNAMICBY { get; set; }
    }

    #endregion

    #region LAB_SAVEREPLCDYNAMICAIR Result

    public class LAB_SAVEREPLCDYNAMICAIRResult
    {
        public System.String P_RETURN { get; set; }
    }

    #endregion

    //----------------------//

    #region LAB_SAVELABRESULT Parameter

    public class LAB_SAVELABRESULTParameter
    {
        public System.String P_INSLOT { get; set; }
        public System.String P_RESULT { get; set; }
    }

    #endregion

    #region LAB_SAVELABRESULT Result

    public class LAB_SAVELABRESULTResult
    {
    }

    #endregion

    #region LAB_SAVELABMASSPRORESULT Parameter

    public class LAB_SAVELABMASSPRORESULTParameter
    {
        public System.String P_WEAVELOT { get; set; }
        public System.String P_ITMCODE { get; set; }
        public System.String P_FINISHINGLOT { get; set; }
        public System.String P_TESTRESULT { get; set; }
    }

    #endregion

    #region LAB_SAVELABMASSPRORESULT Result

    public class LAB_SAVELABMASSPRORESULTResult
    {
    }

    #endregion

    #region LAB_SAVELABGREIGERESULT Parameter

    public class LAB_SAVELABGREIGERESULTParameter
    {
        public System.String P_BEAMERROLL { get; set; }
        public System.String P_LOOM { get; set; }
        public System.String P_ITMWEAVE { get; set; }
        public System.String P_TESTRESULT { get; set; }
        public System.Decimal? P_TESTNO { get; set; }
    }

    #endregion

    #region LAB_SAVELABGREIGERESULT Result

    public class LAB_SAVELABGREIGERESULTResult
    {
    }

    #endregion

    //-- Lab --//

    #region LAB_SAVEAPPROVEPRODUCTION Parameter

    public class LAB_SAVEAPPROVEPRODUCTIONParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_WEAVINGLOG { get; set; }
        public System.String P_FINISHINGLOT { get; set; }
        public System.DateTime? P_ENTRYDATE { get; set; }
        public System.Decimal? P_WIDTH { get; set; }
        public System.Decimal? P_USEWIDTH1 { get; set; }
        public System.Decimal? P_USEWIDTH2 { get; set; }
        public System.Decimal? P_USEWIDTH3 { get; set; }
        public System.Decimal? P_WIDTHSILICONE1 { get; set; }
        public System.Decimal? P_WIDTHSILICONE2 { get; set; }
        public System.Decimal? P_WIDTHSILICONE3 { get; set; }
        public System.Decimal? P_NUMTHREADS_W1 { get; set; }
        public System.Decimal? P_NUMTHREADS_W2 { get; set; }
        public System.Decimal? P_NUMTHREADS_W3 { get; set; }
        public System.Decimal? P_NUMTHREADS_F1 { get; set; }
        public System.Decimal? P_NUMTHREADS_F2 { get; set; }
        public System.Decimal? P_NUMTHREADS_F3 { get; set; }
        public System.Decimal? P_TOTALWEIGHT1 { get; set; }
        public System.Decimal? P_TOTALWEIGHT2 { get; set; }
        public System.Decimal? P_TOTALWEIGHT3 { get; set; }
        public System.Decimal? P_TOTALWEIGHT4 { get; set; }
        public System.Decimal? P_TOTALWEIGHT5 { get; set; }
        public System.Decimal? P_TOTALWEIGHT6 { get; set; }
        public System.Decimal? P_UNCOATEDWEIGHT1 { get; set; }
        public System.Decimal? P_UNCOATEDWEIGHT2 { get; set; }
        public System.Decimal? P_UNCOATEDWEIGHT3 { get; set; }
        public System.Decimal? P_UNCOATEDWEIGHT4 { get; set; }
        public System.Decimal? P_UNCOATEDWEIGHT5 { get; set; }
        public System.Decimal? P_UNCOATEDWEIGHT6 { get; set; }
        public System.Decimal? P_COATWEIGHT1 { get; set; }
        public System.Decimal? P_COATWEIGHT2 { get; set; }
        public System.Decimal? P_COATWEIGHT3 { get; set; }
        public System.Decimal? P_COATWEIGHT4 { get; set; }
        public System.Decimal? P_COATWEIGHT5 { get; set; }
        public System.Decimal? P_COATWEIGHT6 { get; set; }
        public System.Decimal? P_THICKNESS1 { get; set; }
        public System.Decimal? P_THICKNESS2 { get; set; }
        public System.Decimal? P_THICKNESS3 { get; set; }
        public System.Decimal? P_MAXFORCE_W1 { get; set; }
        public System.Decimal? P_MAXFORCE_W2 { get; set; }
        public System.Decimal? P_MAXFORCE_W3 { get; set; }
        public System.Decimal? P_MAXFORCE_W4 { get; set; }
        public System.Decimal? P_MAXFORCE_W5 { get; set; }
        public System.Decimal? P_MAXFORCE_W6 { get; set; }
        public System.Decimal? P_MAXFORCE_F1 { get; set; }
        public System.Decimal? P_MAXFORCE_F2 { get; set; }
        public System.Decimal? P_MAXFORCE_F3 { get; set; }
        public System.Decimal? P_MAXFORCE_F4 { get; set; }
        public System.Decimal? P_MAXFORCE_F5 { get; set; }
        public System.Decimal? P_MAXFORCE_F6 { get; set; }
        public System.Decimal? P_ELOGATION_W1 { get; set; }
        public System.Decimal? P_ELOGATION_W2 { get; set; }
        public System.Decimal? P_ELOGATION_W3 { get; set; }
        public System.Decimal? P_ELOGATION_W4 { get; set; }
        public System.Decimal? P_ELOGATION_W5 { get; set; }
        public System.Decimal? P_ELOGATION_W6 { get; set; }
        public System.Decimal? P_ELOGATION_F1 { get; set; }
        public System.Decimal? P_ELOGATION_F2 { get; set; }
        public System.Decimal? P_ELOGATION_F3 { get; set; }
        public System.Decimal? P_ELOGATION_F4 { get; set; }
        public System.Decimal? P_ELOGATION_F5 { get; set; }
        public System.Decimal? P_ELOGATION_F6 { get; set; }
        public System.Decimal? P_FLAMMABILITY_W { get; set; }
        public System.Decimal? P_FLAMMABILITY_W2 { get; set; }
        public System.Decimal? P_FLAMMABILITY_W3 { get; set; }
        public System.Decimal? P_FLAMMABILITY_W4 { get; set; }
        public System.Decimal? P_FLAMMABILITY_W5 { get; set; }
        public System.Decimal? P_FLAMMABILITY_F { get; set; }
        public System.Decimal? P_FLAMMABILITY_F2 { get; set; }
        public System.Decimal? P_FLAMMABILITY_F3 { get; set; }
        public System.Decimal? P_FLAMMABILITY_F4 { get; set; }
        public System.Decimal? P_FLAMMABILITY_F5 { get; set; }
        public System.Decimal? P_EDGECOMB_W1 { get; set; }
        public System.Decimal? P_EDGECOMB_W2 { get; set; }
        public System.Decimal? P_EDGECOMB_W3 { get; set; }
        public System.Decimal? P_EDGECOMB_F1 { get; set; }
        public System.Decimal? P_EDGECOMB_F2 { get; set; }
        public System.Decimal? P_EDGECOMB_F3 { get; set; }
        public System.Decimal? P_STIFFNESS_W1 { get; set; }
        public System.Decimal? P_STIFFNESS_W2 { get; set; }
        public System.Decimal? P_STIFFNESS_W3 { get; set; }
        public System.Decimal? P_STIFFNESS_F1 { get; set; }
        public System.Decimal? P_STIFFNESS_F2 { get; set; }
        public System.Decimal? P_STIFFNESS_F3 { get; set; }
        public System.Decimal? P_TEAR_W1 { get; set; }
        public System.Decimal? P_TEAR_W2 { get; set; }
        public System.Decimal? P_TEAR_W3 { get; set; }
        public System.Decimal? P_TEAR_F1 { get; set; }
        public System.Decimal? P_TEAR_F2 { get; set; }
        public System.Decimal? P_TEAR_F3 { get; set; }
        public System.Decimal? P_STATIC_AIR1 { get; set; }
        public System.Decimal? P_STATIC_AIR2 { get; set; }
        public System.Decimal? P_STATIC_AIR3 { get; set; }
        public System.Decimal? P_STATIC_AIR4 { get; set; }
        public System.Decimal? P_STATIC_AIR5 { get; set; }
        public System.Decimal? P_STATIC_AIR6 { get; set; }
        public System.Decimal? P_DYNAMIC_AIR1 { get; set; }
        public System.Decimal? P_DYNAMIC_AIR2 { get; set; }
        public System.Decimal? P_DYNAMIC_AIR3 { get; set; }
        public System.Decimal? P_EXPONENT1 { get; set; }
        public System.Decimal? P_EXPONENT2 { get; set; }
        public System.Decimal? P_EXPONENT3 { get; set; }
        public System.Decimal? P_DIMENSCHANGE_W1 { get; set; }
        public System.Decimal? P_DIMENSCHANGE_W2 { get; set; }
        public System.Decimal? P_DIMENSCHANGE_W3 { get; set; }
        public System.Decimal? P_DIMENSCHANGE_F1 { get; set; }
        public System.Decimal? P_DIMENSCHANGE_F2 { get; set; }
        public System.Decimal? P_DIMENSCHANGE_F3 { get; set; }
        public System.Decimal? P_FLEXABRASION_W1 { get; set; }
        public System.Decimal? P_FLEXABRASION_W2 { get; set; }
        public System.Decimal? P_FLEXABRASION_W3 { get; set; }
        public System.Decimal? P_FLEXABRASION_F1 { get; set; }
        public System.Decimal? P_FLEXABRASION_F2 { get; set; }
        public System.Decimal? P_FLEXABRASION_F3 { get; set; }
        public System.Decimal? P_BOW1 { get; set; }
        public System.Decimal? P_BOW2 { get; set; }
        public System.Decimal? P_BOW3 { get; set; }
        public System.Decimal? P_SKEW1 { get; set; }
        public System.Decimal? P_SKEW2 { get; set; }
        public System.Decimal? P_SKEW3 { get; set; }
        public System.Decimal? P_BENDING_W1 { get; set; }
        public System.Decimal? P_BENDING_W2 { get; set; }
        public System.Decimal? P_BENDING_W3 { get; set; }
        public System.Decimal? P_BENDING_F1 { get; set; }
        public System.Decimal? P_BENDING_F2 { get; set; }
        public System.Decimal? P_BENDING_F3 { get; set; }
        public System.Decimal? P_FLEX_SCOTT_W1 { get; set; }
        public System.Decimal? P_FLEX_SCOTT_W2 { get; set; }
        public System.Decimal? P_FLEX_SCOTT_W3 { get; set; }
        public System.Decimal? P_FLEX_SCOTT_F1 { get; set; }
        public System.Decimal? P_FLEX_SCOTT_F2 { get; set; }
        public System.Decimal? P_FLEX_SCOTT_F3 { get; set; }
        public System.String P_STATUS { get; set; }
        public System.String P_REMARK { get; set; }
        public System.String P_APPROVEBY { get; set; }
        public System.DateTime? P_APPROVEDATE { get; set; }
    }

    #endregion

    #region LAB_SAVEAPPROVEPRODUCTION Result

    public class LAB_SAVEAPPROVEPRODUCTIONResult
    {
        public System.String P_RETURN { get; set; }
    }

    #endregion

    //---------//

    #region LAB_RETESTRECORD_INSERTUPDATE Parameter

    public class LAB_RETESTRECORD_INSERTUPDATEParameter
    {
        public System.String P_ITM_CODE { get; set; }
        public System.String P_WEAVINGLOT { get; set; }
        public System.String P_FINISHINGLOT { get; set; }
        public System.String P_PROPERTY { get; set; }
        public System.String P_YARNTYPE { get; set; }
        public System.String P_TESTNO { get; set; }
        public System.Decimal? P_N1 { get; set; }
        public System.Decimal? P_N2 { get; set; }
        public System.Decimal? P_N3 { get; set; }
        public System.Decimal? P_N4 { get; set; }
        public System.Decimal? P_N5 { get; set; }
        public System.String P_OPERATORID { get; set; }
    }

    #endregion

    #region LAB_RETESTRECORD_INSERTUPDATE Result

    public class LAB_RETESTRECORD_INSERTUPDATEResult
    {
        public System.String R_RESULT { get; set; }
    }

    #endregion

    #region LAB_MASSPROSTOCKSTATUS Parameter

    public class LAB_MASSPROSTOCKSTATUSParameter
    {
        public System.String P_WEAVELOT { get; set; }
        public System.String P_RECEIVEDATE { get; set; }
    }

    #endregion

    #region LAB_MASSPROSTOCKSTATUS Result

    public class LAB_MASSPROSTOCKSTATUSResult
    {
        public System.String ITM_CODE { get; set; }
        public System.String WEAVINGLOT { get; set; }
        public System.String FINISHINGLOT { get; set; }
        public System.DateTime? RECEIVEDATE { get; set; }
        public System.String RECEIVEBY { get; set; }
        public System.String STATUS { get; set; }
        public System.String CONDITIONINGTIME { get; set; }
        public System.DateTime? TESTDATE { get; set; }
        public System.String TESTRESULT { get; set; }
        public System.String REMARK { get; set; }
        public System.String TESTBY { get; set; }
        public System.String APPROVESTATUS { get; set; }
        public System.String APPROVEBY { get; set; }
        public System.DateTime? SENDDATE { get; set; }
        public System.DateTime? APPROVEDATE { get; set; }
        public System.String LABFORM { get; set; }
    }

    #endregion

    //-- Lab --//

    #region LAB_INSERTUPDATETENSILE Parameter

    public class LAB_INSERTUPDATETENSILEParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_WEAVINGLOG { get; set; }
        public System.String P_FINISHINGLOT { get; set; }
        public System.String P_OPERATOR { get; set; }
        public System.String P_TESTDATE { get; set; }
        public System.String P_TESTTIME { get; set; }
        public System.String P_YARN { get; set; }
        public System.Decimal? P_TENSILE1 { get; set; }
        public System.Decimal? P_TENSILE2 { get; set; }
        public System.Decimal? P_TENSILE3 { get; set; }
        public System.Decimal? P_ELONG1 { get; set; }
        public System.Decimal? P_ELONG2 { get; set; }
        public System.Decimal? P_ELONG3 { get; set; }
        public System.DateTime? P_UPLOADDATE { get; set; }
        public System.String P_UPLOADBY { get; set; }
    }

    #endregion

    #region LAB_INSERTUPDATETENSILE Result

    public class LAB_INSERTUPDATETENSILEResult
    {
        public System.String P_RETURN { get; set; }
    }

    #endregion

    #region LAB_INSERTUPDATETEAR Parameter

    public class LAB_INSERTUPDATETEARParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_WEAVINGLOG { get; set; }
        public System.String P_FINISHINGLOT { get; set; }
        public System.String P_OPERATOR { get; set; }
        public System.String P_YARN { get; set; }
        public System.Decimal? P_TEAR1 { get; set; }
        public System.Decimal? P_TEAR2 { get; set; }
        public System.Decimal? P_TEAR3 { get; set; }
        public System.DateTime? P_UPLOADDATE { get; set; }
        public System.String P_UPLOADBY { get; set; }
    }

    #endregion

    #region LAB_INSERTUPDATETEAR Result

    public class LAB_INSERTUPDATETEARResult
    {
        public System.String P_RETURN { get; set; }
    }

    #endregion

    #region LAB_INSERTUPDATEREPORTINFO Parameter

    public class LAB_INSERTUPDATEREPORTINFOParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_CUSTOMERID { get; set; }
        public System.String P_REPORTID { get; set; }
        public System.String P_REVERSION { get; set; }
        public System.String P_YARNTYPE { get; set; }
        public System.String P_WEIGHT { get; set; }
        public System.String P_COATWEIGHT { get; set; }
        public System.String P_NUMTHREADS { get; set; }
        public System.String P_USEWIDTH { get; set; }
        public System.String P_THICKNESS { get; set; }
        public System.String P_MAXFORCE { get; set; }
        public System.String P_ELOGATION { get; set; }
        public System.String P_FLAMMABILITY { get; set; }
        public System.String P_EDGECOMB { get; set; }
        public System.String P_STIFFNESS { get; set; }
        public System.String P_TEAR { get; set; }
        public System.String P_STATIC_AIR { get; set; }
        public System.String P_DYNAMIC_AIR { get; set; }
        public System.String P_EXPONENT { get; set; }
        public System.String P_DIMENSCHANGE { get; set; }
        public System.String P_FLEXABRASION { get; set; }
        public System.String P_FLEX_SCOTT { get; set; }
        public System.String P_BOW { get; set; }
        public System.String P_SKEW { get; set; }
        public System.String P_BENDING { get; set; }
    }

    #endregion

    #region LAB_INSERTUPDATEREPORTINFO Result

    public class LAB_INSERTUPDATEREPORTINFOResult
    {
        public System.String P_RETURN { get; set; }
    }

    #endregion

    #region LAB_INSERTUPDATEITEMSPEC Parameter

    public class LAB_INSERTUPDATEITEMSPECParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.Decimal? P_WIDTH_NO { get; set; }
        public System.Decimal? P_WIDTH { get; set; }
        public System.Decimal? P_USEWIDTH_NO { get; set; }
        public System.Decimal? P_USEWIDTH { get; set; }
        public System.String P_USEWIDTH_TOR { get; set; }
        public System.Decimal? P_WIDTHSILICONE_NO { get; set; }
        public System.Decimal? P_WIDTHSILICONE { get; set; }
        public System.String P_WIDTHSILICONE_TOR { get; set; }
        public System.Decimal? P_NUMTHREADS_W_NO { get; set; }
        public System.Decimal? P_NUMTHREADS_W { get; set; }
        public System.Decimal? P_NUMTHREADS_W_TOR { get; set; }
        public System.Decimal? P_NUMTHREADS_F_NO { get; set; }
        public System.Decimal? P_NUMTHREADS_F { get; set; }
        public System.Decimal? P_NUMTHREADS_F_TOR { get; set; }
        public System.Decimal? P_TOTALWEIGHT_NO { get; set; }
        public System.Decimal? P_TOTALWEIGHT { get; set; }
        public System.Decimal? P_TOTALWEIGHT_TOR { get; set; }
        public System.Decimal? P_UNCOATEDWEIGHT_NO { get; set; }
        public System.Decimal? P_UNCOATEDWEIGHT { get; set; }
        public System.Decimal? P_UNCOATEDWEIGHT_TOR { get; set; }
        public System.Decimal? P_COATWEIGHT_NO { get; set; }
        public System.Decimal? P_COATWEIGHT { get; set; }
        public System.Decimal? P_COATWEIGHT_TOR { get; set; }
        public System.Decimal? P_THICKNESS_NO { get; set; }
        public System.Decimal? P_THICKNESS { get; set; }
        public System.Decimal? P_THICKNESS_TOR { get; set; }
        public System.Decimal? P_MAXFORCE_W_NO { get; set; }
        public System.Decimal? P_MAXFORCE_W { get; set; }
        public System.String P_MAXFORCE_W_TOR { get; set; }
        public System.Decimal? P_MAXFORCE_F_NO { get; set; }
        public System.Decimal? P_MAXFORCE_F { get; set; }
        public System.String P_MAXFORCE_F_TOR { get; set; }
        public System.Decimal? P_ELOGATION_W_NO { get; set; }
        public System.Decimal? P_ELOGATION_W { get; set; }
        public System.String P_ELOGATION_W_TOR { get; set; }
        public System.Decimal? P_ELOGATION_F_NO { get; set; }
        public System.Decimal? P_ELOGATION_F { get; set; }
        public System.String P_ELOGATION_F_TOR { get; set; }
        public System.Decimal? P_FLAMMABILITY_W_NO { get; set; }
        public System.Decimal? P_FLAMMABILITY_W { get; set; }
        public System.String P_FLAMMABILITY_W_TOR { get; set; }
        public System.Decimal? P_FLAMMABILITY_F_NO { get; set; }
        public System.Decimal? P_FLAMMABILITY_F { get; set; }
        public System.String P_FLAMMABILITY_F_TOR { get; set; }
        public System.Decimal? P_EDGECOMB_W_NO { get; set; }
        public System.Decimal? P_EDGECOMB_W { get; set; }
        public System.String P_EDGECOMB_W_TOR { get; set; }
        public System.Decimal? P_EDGECOMB_F_NO { get; set; }
        public System.Decimal? P_EDGECOMB_F { get; set; }
        public System.String P_EDGECOMB_F_TOR { get; set; }
        public System.Decimal? P_STIFFNESS_W_NO { get; set; }
        public System.Decimal? P_STIFFNESS_W { get; set; }
        public System.String P_STIFFNESS_W_TOR { get; set; }
        public System.Decimal? P_STIFFNESS_F_NO { get; set; }
        public System.Decimal? P_STIFFNESS_F { get; set; }
        public System.String P_STIFFNESS_F_TOR { get; set; }
        public System.Decimal? P_TEAR_W_NO { get; set; }
        public System.Decimal? P_TEAR_W { get; set; }
        public System.String P_TEAR_W_TOR { get; set; }
        public System.Decimal? P_TEAR_F_NO { get; set; }
        public System.Decimal? P_TEAR_F { get; set; }
        public System.String P_TEAR_F_TOR { get; set; }
        public System.Decimal? P_STATIC_AIR_NO { get; set; }
        public System.Decimal? P_STATIC_AIR { get; set; }
        public System.String P_STATIC_AIR_TOR { get; set; }
        public System.Decimal? P_DYNAMIC_AIR_NO { get; set; }
        public System.Decimal? P_DYNAMIC_AIR { get; set; }
        public System.Decimal? P_DYNAMIC_AIR_TOR { get; set; }
        public System.Decimal? P_EXPONENT_NO { get; set; }
        public System.Decimal? P_EXPONENT { get; set; }
        public System.Decimal? P_EXPONENT_TOR { get; set; }
        public System.Decimal? P_DIMENSCHANGE_W_NO { get; set; }
        public System.Decimal? P_DIMENSCHANGE_W { get; set; }
        public System.String P_DIMENSCHANGE_W_TOR { get; set; }
        public System.Decimal? P_DIMENSCHANGE_F_NO { get; set; }
        public System.Decimal? P_DIMENSCHANGE_F { get; set; }
        public System.String P_DIMENSCHANGE_F_TOR { get; set; }
        public System.Decimal? P_FLEXABRASION_W_NO { get; set; }
        public System.Decimal? P_FLEXABRASION_W { get; set; }
        public System.String P_FLEXABRASION_W_TOR { get; set; }
        public System.Decimal? P_FLEXABRASION_F_NO { get; set; }
        public System.Decimal? P_FLEXABRASION_F { get; set; }
        public System.String P_FLEXABRASION_F_TOR { get; set; }
        public System.Decimal? P_BOW_NO { get; set; }
        public System.Decimal? P_BOW { get; set; }
        public System.String P_BOW_TOR { get; set; }
        public System.Decimal? P_SKEW_NO { get; set; }
        public System.Decimal? P_SKEW { get; set; }
        public System.String P_SKEW_TOR { get; set; }
        public System.Decimal? P_BENDING_W_NO { get; set; }
        public System.Decimal? P_BENDING_W { get; set; }
        public System.String P_BENDING_W_TOR { get; set; }
        public System.Decimal? P_BENDING_F_NO { get; set; }
        public System.Decimal? P_BENDING_F { get; set; }
        public System.String P_BENDING_F_TOR { get; set; }
        public System.Decimal? P_FLEX_SCOTT_W_NO { get; set; }
        public System.Decimal? P_FLEX_SCOTT_W { get; set; }
        public System.String P_FLEX_SCOTT_W_TOR { get; set; }
        public System.Decimal? P_FLEX_SCOTT_F_NO { get; set; }
        public System.Decimal? P_FLEX_SCOTT_F { get; set; }
        public System.String P_FLEX_SCOTT_F_TOR { get; set; }
    }

    #endregion

    #region LAB_INSERTUPDATEITEMSPEC Result

    public class LAB_INSERTUPDATEITEMSPECResult
    {
        public System.String P_RETURN { get; set; }
    }

    #endregion

    #region LAB_INSERTUPDATEEDGECOMB Parameter

    public class LAB_INSERTUPDATEEDGECOMBParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_WEAVINGLOG { get; set; }
        public System.String P_FINISHINGLOT { get; set; }
        public System.String P_OPERATOR { get; set; }
        public System.String P_TESTDATE { get; set; }
        public System.String P_TESTTIME { get; set; }
        public System.String P_YARN { get; set; }
        public System.Decimal? P_EDGECOMB1 { get; set; }
        public System.Decimal? P_EDGECOMB2 { get; set; }
        public System.Decimal? P_EDGECOMB3 { get; set; }
        public System.DateTime? P_UPLOADDATE { get; set; }
        public System.String P_UPLOADBY { get; set; }
    }

    #endregion

    #region LAB_INSERTUPDATEEDGECOMB Result

    public class LAB_INSERTUPDATEEDGECOMBResult
    {
        public System.String P_RETURN { get; set; }
    }

    #endregion

    #region LAB_INSERTPRODUCTION Parameter

    public class LAB_INSERTPRODUCTIONParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_WEAVINGLOG { get; set; }
        public System.String P_FINISHINGLOT { get; set; }
        public System.DateTime? P_ENTRYDATE { get; set; }
        public System.String P_ENTRYBY { get; set; }
        public System.Decimal? P_WIDTH { get; set; }
        public System.Decimal? P_USEWIDTH1 { get; set; }
        public System.Decimal? P_USEWIDTH2 { get; set; }
        public System.Decimal? P_USEWIDTH3 { get; set; }
        public System.Decimal? P_WIDTHSILICONE1 { get; set; }
        public System.Decimal? P_WIDTHSILICONE2 { get; set; }
        public System.Decimal? P_WIDTHSILICONE3 { get; set; }
        public System.Decimal? P_NUMTHREADS_W1 { get; set; }
        public System.Decimal? P_NUMTHREADS_W2 { get; set; }
        public System.Decimal? P_NUMTHREADS_W3 { get; set; }
        public System.Decimal? P_NUMTHREADS_F1 { get; set; }
        public System.Decimal? P_NUMTHREADS_F2 { get; set; }
        public System.Decimal? P_NUMTHREADS_F3 { get; set; }
        public System.Decimal? P_TOTALWEIGHT1 { get; set; }
        public System.Decimal? P_TOTALWEIGHT2 { get; set; }
        public System.Decimal? P_TOTALWEIGHT3 { get; set; }
        public System.Decimal? P_TOTALWEIGHT4 { get; set; }
        public System.Decimal? P_TOTALWEIGHT5 { get; set; }
        public System.Decimal? P_TOTALWEIGHT6 { get; set; }
        public System.Decimal? P_UNCOATEDWEIGHT1 { get; set; }
        public System.Decimal? P_UNCOATEDWEIGHT2 { get; set; }
        public System.Decimal? P_UNCOATEDWEIGHT3 { get; set; }
        public System.Decimal? P_UNCOATEDWEIGHT4 { get; set; }
        public System.Decimal? P_UNCOATEDWEIGHT5 { get; set; }
        public System.Decimal? P_UNCOATEDWEIGHT6 { get; set; }
        public System.Decimal? P_COATWEIGHT1 { get; set; }
        public System.Decimal? P_COATWEIGHT2 { get; set; }
        public System.Decimal? P_COATWEIGHT3 { get; set; }
        public System.Decimal? P_COATWEIGHT4 { get; set; }
        public System.Decimal? P_COATWEIGHT5 { get; set; }
        public System.Decimal? P_COATWEIGHT6 { get; set; }
        public System.Decimal? P_THICKNESS1 { get; set; }
        public System.Decimal? P_THICKNESS2 { get; set; }
        public System.Decimal? P_THICKNESS3 { get; set; }
        public System.Decimal? P_MAXFORCE_W1 { get; set; }
        public System.Decimal? P_MAXFORCE_W2 { get; set; }
        public System.Decimal? P_MAXFORCE_W3 { get; set; }
        public System.Decimal? P_MAXFORCE_W4 { get; set; }
        public System.Decimal? P_MAXFORCE_W5 { get; set; }
        public System.Decimal? P_MAXFORCE_W6 { get; set; }
        public System.Decimal? P_MAXFORCE_F1 { get; set; }
        public System.Decimal? P_MAXFORCE_F2 { get; set; }
        public System.Decimal? P_MAXFORCE_F3 { get; set; }
        public System.Decimal? P_MAXFORCE_F4 { get; set; }
        public System.Decimal? P_MAXFORCE_F5 { get; set; }
        public System.Decimal? P_MAXFORCE_F6 { get; set; }
        public System.Decimal? P_ELOGATION_W1 { get; set; }
        public System.Decimal? P_ELOGATION_W2 { get; set; }
        public System.Decimal? P_ELOGATION_W3 { get; set; }
        public System.Decimal? P_ELOGATION_W4 { get; set; }
        public System.Decimal? P_ELOGATION_W5 { get; set; }
        public System.Decimal? P_ELOGATION_W6 { get; set; }
        public System.Decimal? P_ELOGATION_F1 { get; set; }
        public System.Decimal? P_ELOGATION_F2 { get; set; }
        public System.Decimal? P_ELOGATION_F3 { get; set; }
        public System.Decimal? P_ELOGATION_F4 { get; set; }
        public System.Decimal? P_ELOGATION_F5 { get; set; }
        public System.Decimal? P_ELOGATION_F6 { get; set; }
        public System.Decimal? P_FLAMMABILITY_W { get; set; }
        public System.Decimal? P_FLAMMABILITY_W2 { get; set; }
        public System.Decimal? P_FLAMMABILITY_W3 { get; set; }
        public System.Decimal? P_FLAMMABILITY_W4 { get; set; }
        public System.Decimal? P_FLAMMABILITY_W5 { get; set; }
        public System.Decimal? P_FLAMMABILITY_F { get; set; }
        public System.Decimal? P_FLAMMABILITY_F2 { get; set; }
        public System.Decimal? P_FLAMMABILITY_F3 { get; set; }
        public System.Decimal? P_FLAMMABILITY_F4 { get; set; }
        public System.Decimal? P_FLAMMABILITY_F5 { get; set; }
        public System.Decimal? P_EDGECOMB_W1 { get; set; }
        public System.Decimal? P_EDGECOMB_W2 { get; set; }
        public System.Decimal? P_EDGECOMB_W3 { get; set; }
        public System.Decimal? P_EDGECOMB_F1 { get; set; }
        public System.Decimal? P_EDGECOMB_F2 { get; set; }
        public System.Decimal? P_EDGECOMB_F3 { get; set; }
        public System.Decimal? P_STIFFNESS_W1 { get; set; }
        public System.Decimal? P_STIFFNESS_W2 { get; set; }
        public System.Decimal? P_STIFFNESS_W3 { get; set; }
        public System.Decimal? P_STIFFNESS_F1 { get; set; }
        public System.Decimal? P_STIFFNESS_F2 { get; set; }
        public System.Decimal? P_STIFFNESS_F3 { get; set; }
        public System.Decimal? P_TEAR_W1 { get; set; }
        public System.Decimal? P_TEAR_W2 { get; set; }
        public System.Decimal? P_TEAR_W3 { get; set; }
        public System.Decimal? P_TEAR_F1 { get; set; }
        public System.Decimal? P_TEAR_F2 { get; set; }
        public System.Decimal? P_TEAR_F3 { get; set; }
        public System.Decimal? P_STATIC_AIR1 { get; set; }
        public System.Decimal? P_STATIC_AIR2 { get; set; }
        public System.Decimal? P_STATIC_AIR3 { get; set; }
        public System.Decimal? P_STATIC_AIR4 { get; set; }
        public System.Decimal? P_STATIC_AIR5 { get; set; }
        public System.Decimal? P_STATIC_AIR6 { get; set; }
        public System.Decimal? P_DYNAMIC_AIR1 { get; set; }
        public System.Decimal? P_DYNAMIC_AIR2 { get; set; }
        public System.Decimal? P_DYNAMIC_AIR3 { get; set; }
        public System.Decimal? P_EXPONENT1 { get; set; }
        public System.Decimal? P_EXPONENT2 { get; set; }
        public System.Decimal? P_EXPONENT3 { get; set; }
        public System.Decimal? P_DIMENSCHANGE_W1 { get; set; }
        public System.Decimal? P_DIMENSCHANGE_W2 { get; set; }
        public System.Decimal? P_DIMENSCHANGE_W3 { get; set; }
        public System.Decimal? P_DIMENSCHANGE_F1 { get; set; }
        public System.Decimal? P_DIMENSCHANGE_F2 { get; set; }
        public System.Decimal? P_DIMENSCHANGE_F3 { get; set; }
        public System.Decimal? P_FLEXABRASION_W1 { get; set; }
        public System.Decimal? P_FLEXABRASION_W2 { get; set; }
        public System.Decimal? P_FLEXABRASION_W3 { get; set; }
        public System.Decimal? P_FLEXABRASION_F1 { get; set; }
        public System.Decimal? P_FLEXABRASION_F2 { get; set; }
        public System.Decimal? P_FLEXABRASION_F3 { get; set; }
        public System.Decimal? P_BOW1 { get; set; }
        public System.Decimal? P_BOW2 { get; set; }
        public System.Decimal? P_BOW3 { get; set; }
        public System.Decimal? P_SKEW1 { get; set; }
        public System.Decimal? P_SKEW2 { get; set; }
        public System.Decimal? P_SKEW3 { get; set; }
        public System.Decimal? P_BENDING_W1 { get; set; }
        public System.Decimal? P_BENDING_W2 { get; set; }
        public System.Decimal? P_BENDING_W3 { get; set; }
        public System.Decimal? P_BENDING_F1 { get; set; }
        public System.Decimal? P_BENDING_F2 { get; set; }
        public System.Decimal? P_BENDING_F3 { get; set; }
        public System.Decimal? P_FLEX_SCOTT_W1 { get; set; }
        public System.Decimal? P_FLEX_SCOTT_W2 { get; set; }
        public System.Decimal? P_FLEX_SCOTT_W3 { get; set; }
        public System.Decimal? P_FLEX_SCOTT_F1 { get; set; }
        public System.Decimal? P_FLEX_SCOTT_F2 { get; set; }
        public System.Decimal? P_FLEX_SCOTT_F3 { get; set; }
        public System.String P_STATUS { get; set; }
        public System.String P_REMARK { get; set; }
        public System.String P_APPROVEBY { get; set; }
        public System.DateTime? P_APPROVEDATE { get; set; }
    }

    #endregion

    #region LAB_INSERTPRODUCTION Result

    public class LAB_INSERTPRODUCTIONResult
    {
        public System.String P_RETURN { get; set; }
    }

    #endregion

    //---------//

    #region LAB_GREIGESTOCKSTATUS Parameter

    public class LAB_GREIGESTOCKSTATUSParameter
    {
        public System.String P_BEAMERROLL { get; set; }
        public System.String P_LOOMNO { get; set; }
        public System.String P_RECEIVEDATE { get; set; }
    }

    #endregion

    #region LAB_GREIGESTOCKSTATUS Result

    public class LAB_GREIGESTOCKSTATUSResult
    {
        public System.String BEAMERROLL { get; set; }
        public System.String LOOMNO { get; set; }
        public System.String ITM_WEAVING { get; set; }
        public System.DateTime? RECEIVEDATE { get; set; }
        public System.String RECEIVEBY { get; set; }
        public System.String STATUS { get; set; }
        public System.Decimal? CONDITIONINGTIME { get; set; }
        public System.DateTime? TESTDATE { get; set; }
        public System.String TESTRESULT { get; set; }
        public System.String REMARK { get; set; }
        public System.String TESTBY { get; set; }
        public System.String APPROVESTATUS { get; set; }
        public System.String APPROVEBY { get; set; }
        public System.DateTime? SENDDATE { get; set; }
        public System.DateTime? APPROVEDATE { get; set; }
        public System.Decimal? TESTNO { get; set; }
    }

    #endregion

    #region LAB_GETWEAVINGSAMPLING Parameter

    public class LAB_GETWEAVINGSAMPLINGParameter
    {
        public System.String P_BEAMERROLL { get; set; }
        public System.String P_LOOMNO { get; set; }
    }

    #endregion

    #region LAB_GETWEAVINGSAMPLING Result

    public class LAB_GETWEAVINGSAMPLINGResult
    {
        public System.String BEAMERROLL { get; set; }
        public System.String LOOMNO { get; set; }
        public System.String ITM_WEAVING { get; set; }
        public System.DateTime? SETTINGDATE { get; set; }
        public System.String BARNO { get; set; }
        public System.Decimal? SPIRAL_L { get; set; }
        public System.Decimal? SPIRAL_R { get; set; }
        public System.Decimal? STSAMPLING { get; set; }
        public System.Decimal? RECUTSAMPLING { get; set; }
        public System.String STSAMPLINGBY { get; set; }
        public System.String RECUTBY { get; set; }
        public System.DateTime? STDATE { get; set; }
        public System.DateTime? RECUTDATE { get; set; }
        public System.String REMARK { get; set; }
    }

    #endregion

    // -- Update 28/10/20 -- //

    #region LAB_GETWEAVINGLOTLIST Parameter

    public class LAB_GETWEAVINGLOTLISTParameter
    {
        public System.String P_FINISHINGLOT { get; set; }
        public System.String P_ITEMCODE { get; set; }
        public System.String P_PROCESS { get; set; }
    }

    #endregion

    #region LAB_GETWEAVINGLOTLIST Result

    public class LAB_GETWEAVINGLOTLISTResult
    {
        public System.String WEAVINGLOT { get; set; }
    }

    #endregion


    // New 1/9/22

    #region LAB_GETWEIGHTDATA Parameter

    public class LAB_GETWEIGHTDATAParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_PRODUCTIONLOT { get; set; }
        public System.String P_TYPE { get; set; }
    }

    #endregion

    #region LAB_GETWEIGHTDATA Result

    public class LAB_GETWEIGHTDATAResult
    {
        public System.String ITM_CODE { get; set; }
        public System.String WEAVINGLOT { get; set; }
        public System.Decimal? WEIGHT1 { get; set; }
        public System.Decimal? WEIGHT2 { get; set; }
        public System.Decimal? WEIGHT3 { get; set; }
        public System.Decimal? WEIGHT4 { get; set; }
        public System.Decimal? WEIGHT5 { get; set; }
        public System.Decimal? WEIGHT6 { get; set; }
        public System.DateTime? WEIGHTDATE { get; set; }
        public System.String WEIGHT_BY { get; set; }
    }

    #endregion

    #region LAB_GETSTIFFNESSDATA Parameter

    public class LAB_GETSTIFFNESSDATAParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_PRODUCTIONLOT { get; set; }
    }

    #endregion

    #region LAB_GETSTIFFNESSDATA Result

    public class LAB_GETSTIFFNESSDATAResult
    {
        public System.String ITM_CODE { get; set; }
        public System.String WEAVINGLOT { get; set; }
        public System.Decimal? STIFFNESS_W1 { get; set; }
        public System.Decimal? STIFFNESS_W2 { get; set; }
        public System.Decimal? STIFFNESS_W3 { get; set; }
        public System.Decimal? STIFFNESS_F1 { get; set; }
        public System.Decimal? STIFFNESS_F2 { get; set; }
        public System.Decimal? STIFFNESS_F3 { get; set; }
        public System.DateTime? STIFFNESSDATE { get; set; }
        public System.String STIFFNESS_BY { get; set; }
    }

    #endregion

    #region LAB_GETSTATICAIRDATA Parameter

    public class LAB_GETSTATICAIRDATAParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_PRODUCTIONLOT { get; set; }
    }

    #endregion

    #region LAB_GETSTATICAIRDATA Result

    public class LAB_GETSTATICAIRDATAResult
    {
        public System.String ITM_CODE { get; set; }
        public System.String WEAVINGLOT { get; set; }
        public System.Decimal? STATIC_AIR1 { get; set; }
        public System.Decimal? STATIC_AIR2 { get; set; }
        public System.Decimal? STATIC_AIR3 { get; set; }
        public System.Decimal? STATIC_AIR4 { get; set; }
        public System.Decimal? STATIC_AIR5 { get; set; }
        public System.Decimal? STATIC_AIR6 { get; set; }
        public System.DateTime? STATICAIRDATE { get; set; }
        public System.String STATICAIR_BY { get; set; }
    }

    #endregion

    #region LAB_GETDYNAMICAIRDATA Parameter

    public class LAB_GETDYNAMICAIRDATAParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_PRODUCTIONLOT { get; set; }
    }

    #endregion

    #region LAB_GETDYNAMICAIRDATA Result

    public class LAB_GETDYNAMICAIRDATAResult
    {
        public System.String ITM_CODE { get; set; }
        public System.String WEAVINGLOT { get; set; }
        public System.Decimal? EXPONENT1 { get; set; }
        public System.Decimal? EXPONENT2 { get; set; }
        public System.Decimal? EXPONENT3 { get; set; }
        public System.Decimal? DYNAMIC_AIR1 { get; set; }
        public System.Decimal? DYNAMIC_AIR2 { get; set; }
        public System.Decimal? DYNAMIC_AIR3 { get; set; }
        public System.DateTime? DYNAMICDATE { get; set; }
        public System.String DYNAMIC_BY { get; set; }
    }

    #endregion

    // -- Update 31/08/20 -- //

    #region LAB_GETREPORTINFO Parameter

    public class LAB_GETREPORTINFOParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_CUSTOMERID { get; set; }
    }

    #endregion

    #region LAB_GETREPORTINFO Result

    public class LAB_GETREPORTINFOResult
    {
        public System.String ITM_CODE { get; set; }
        public System.String REPORT_ID { get; set; }
        public System.String REVESION { get; set; }
        public System.String CUSTOMERID { get; set; }
        public System.String YARNTYPE { get; set; }
        public System.String WEIGHT { get; set; }
        public System.String COATWEIGHT { get; set; }
        public System.String NUMTHREADS { get; set; }
        public System.String USABLE_WIDTH { get; set; }
        public System.String THICKNESS { get; set; }
        public System.String MAXFORCE { get; set; }
        public System.String ELONGATIONFORCE { get; set; }
        public System.String FLAMMABILITY { get; set; }
        public System.String EDGECOMB { get; set; }
        public System.String STIFFNESS { get; set; }
        public System.String TEAR { get; set; }
        public System.String STATIC_AIR { get; set; }
        public System.String DYNAMIC_AIR { get; set; }
        public System.String EXPONENT { get; set; }
        public System.String DIMENSCHANGE { get; set; }
        public System.String FLEXABRASION { get; set; }
        public System.String BENDING { get; set; }
        public System.String FLEX_SCOTT { get; set; }
        public System.String BOW { get; set; }
        public System.String SKEW { get; set; }
        public System.DateTime? EFFECTIVE_DATE { get; set; }
        public System.String REPORT_NAME { get; set; }
    }

    #endregion

    #region LAB_GETREPORTIDLIST Parameter

    public class LAB_GETREPORTIDLISTParameter
    {
    }

    #endregion

    #region LAB_GETREPORTIDLIST Result

    public class LAB_GETREPORTIDLISTResult
    {
        public System.String REPORT_ID { get; set; }
        public System.String REPORT_NAME { get; set; }
        public System.DateTime? EFFECTIVE_DATE { get; set; }
        public System.String USE_FLAG { get; set; }
    }

    #endregion

    //----------------------//

    //-- Lab --//

    #region LAB_GETPDFDATA Parameter

    public class LAB_GETPDFDATAParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_WEAVINGLOG { get; set; }
        public System.String P_FINISHINGLOT { get; set; }
    }

    #endregion

    #region LAB_GETPDFDATA Result

    public class LAB_GETPDFDATAResult
    {
        public System.String PROPERTY { get; set; }
        public System.String YARNTYPE { get; set; }
        public System.Decimal? N1 { get; set; }
        public System.Decimal? N2 { get; set; }
        public System.Decimal? N3 { get; set; }
        public System.Decimal? N4 { get; set; }
        public System.Decimal? N5 { get; set; }
        public System.Decimal? N6 { get; set; }
    }

    #endregion

    // -- Update 26/10/20 -- //

    #region LAB_GETLABDETAIL Parameter

    public class LAB_GETLABDETAILParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_WEAVINGLOG { get; set; }
        public System.String P_FINISHINGLOT { get; set; }
        public System.DateTime? P_ENTRYDATE { get; set; }
    }

    #endregion

    #region LAB_GETLABDETAIL Result

    public class LAB_GETLABDETAILResult
    {
        public System.String ITM_CODE { get; set; }
        public System.String WEAVINGLOT { get; set; }
        public System.String FINISHINGLOT { get; set; }
        public System.DateTime? ENTRYDATE { get; set; }
        public System.String ENTEYBY { get; set; }
        public System.Decimal? WIDTH { get; set; }
        public System.Decimal? USABLE_WIDTH1 { get; set; }
        public System.Decimal? USABLE_WIDTH2 { get; set; }
        public System.Decimal? USABLE_WIDTH3 { get; set; }
        public System.Decimal? WIDTH_SILICONE1 { get; set; }
        public System.Decimal? WIDTH_SILICONE2 { get; set; }
        public System.Decimal? WIDTH_SILICONE3 { get; set; }
        public System.Decimal? NUMTHREADS_W1 { get; set; }
        public System.Decimal? NUMTHREADS_W2 { get; set; }
        public System.Decimal? NUMTHREADS_W3 { get; set; }
        public System.Decimal? NUMTHREADS_F1 { get; set; }
        public System.Decimal? NUMTHREADS_F2 { get; set; }
        public System.Decimal? NUMTHREADS_F3 { get; set; }
        public System.Decimal? TOTALWEIGHT1 { get; set; }
        public System.Decimal? TOTALWEIGHT2 { get; set; }
        public System.Decimal? TOTALWEIGHT3 { get; set; }
        public System.Decimal? TOTALWEIGHT4 { get; set; }
        public System.Decimal? TOTALWEIGHT5 { get; set; }
        public System.Decimal? TOTALWEIGHT6 { get; set; }
        public System.Decimal? UNCOATEDWEIGHT1 { get; set; }
        public System.Decimal? UNCOATEDWEIGHT2 { get; set; }
        public System.Decimal? UNCOATEDWEIGHT3 { get; set; }
        public System.Decimal? UNCOATEDWEIGHT4 { get; set; }
        public System.Decimal? UNCOATEDWEIGHT5 { get; set; }
        public System.Decimal? UNCOATEDWEIGHT6 { get; set; }
        public System.Decimal? COATINGWEIGHT1 { get; set; }
        public System.Decimal? COATINGWEIGHT2 { get; set; }
        public System.Decimal? COATINGWEIGHT3 { get; set; }
        public System.Decimal? COATINGWEIGHT4 { get; set; }
        public System.Decimal? COATINGWEIGHT5 { get; set; }
        public System.Decimal? COATINGWEIGHT6 { get; set; }
        public System.Decimal? THICKNESS1 { get; set; }
        public System.Decimal? THICKNESS2 { get; set; }
        public System.Decimal? THICKNESS3 { get; set; }
        public System.Decimal? MAXFORCE_W1 { get; set; }
        public System.Decimal? MAXFORCE_W2 { get; set; }
        public System.Decimal? MAXFORCE_W3 { get; set; }
        public System.Decimal? MAXFORCE_F1 { get; set; }
        public System.Decimal? MAXFORCE_F2 { get; set; }
        public System.Decimal? MAXFORCE_F3 { get; set; }
        public System.Decimal? ELONGATIONFORCE_W1 { get; set; }
        public System.Decimal? ELONGATIONFORCE_W2 { get; set; }
        public System.Decimal? ELONGATIONFORCE_W3 { get; set; }
        public System.Decimal? ELONGATIONFORCE_F1 { get; set; }
        public System.Decimal? ELONGATIONFORCE_F2 { get; set; }
        public System.Decimal? ELONGATIONFORCE_F3 { get; set; }
        public System.Decimal? FLAMMABILITY_W { get; set; }
        public System.Decimal? FLAMMABILITY_F { get; set; }
        public System.Decimal? EDGECOMB_W1 { get; set; }
        public System.Decimal? EDGECOMB_W2 { get; set; }
        public System.Decimal? EDGECOMB_W3 { get; set; }
        public System.Decimal? EDGECOMB_F1 { get; set; }
        public System.Decimal? EDGECOMB_F2 { get; set; }
        public System.Decimal? EDGECOMB_F3 { get; set; }
        public System.Decimal? STIFFNESS_W1 { get; set; }
        public System.Decimal? STIFFNESS_W2 { get; set; }
        public System.Decimal? STIFFNESS_W3 { get; set; }
        public System.Decimal? STIFFNESS_F1 { get; set; }
        public System.Decimal? STIFFNESS_F2 { get; set; }
        public System.Decimal? STIFFNESS_F3 { get; set; }
        public System.Decimal? TEAR_W1 { get; set; }
        public System.Decimal? TEAR_W2 { get; set; }
        public System.Decimal? TEAR_W3 { get; set; }
        public System.Decimal? TEAR_F1 { get; set; }
        public System.Decimal? TEAR_F2 { get; set; }
        public System.Decimal? TEAR_F3 { get; set; }
        public System.Decimal? STATIC_AIR1 { get; set; }
        public System.Decimal? STATIC_AIR2 { get; set; }
        public System.Decimal? STATIC_AIR3 { get; set; }
        public System.Decimal? DYNAMIC_AIR1 { get; set; }
        public System.Decimal? DYNAMIC_AIR2 { get; set; }
        public System.Decimal? DYNAMIC_AIR3 { get; set; }
        public System.Decimal? EXPONENT1 { get; set; }
        public System.Decimal? EXPONENT2 { get; set; }
        public System.Decimal? EXPONENT3 { get; set; }
        public System.Decimal? DIMENSCHANGE_W1 { get; set; }
        public System.Decimal? DIMENSCHANGE_W2 { get; set; }
        public System.Decimal? DIMENSCHANGE_W3 { get; set; }
        public System.Decimal? DIMENSCHANGE_F1 { get; set; }
        public System.Decimal? DIMENSCHANGE_F2 { get; set; }
        public System.Decimal? DIMENSCHANGE_F3 { get; set; }
        public System.Decimal? FLEXABRASION_W1 { get; set; }
        public System.Decimal? FLEXABRASION_W2 { get; set; }
        public System.Decimal? FLEXABRASION_W3 { get; set; }
        public System.Decimal? FLEXABRASION_F1 { get; set; }
        public System.Decimal? FLEXABRASION_F2 { get; set; }
        public System.Decimal? FLEXABRASION_F3 { get; set; }
        public System.Decimal? BOW1 { get; set; }
        public System.Decimal? SKEW1 { get; set; }
        public System.String STATUS { get; set; }
        public System.String REMARK { get; set; }
        public System.String APPROVEBY { get; set; }
        public System.DateTime? APPROVEDATE { get; set; }
        public System.DateTime? CREATEDATE { get; set; }
        public System.Decimal? BOW2 { get; set; }
        public System.Decimal? BOW3 { get; set; }
        public System.Decimal? SKEW2 { get; set; }
        public System.Decimal? SKEW3 { get; set; }
        public System.Decimal? BENDING_W1 { get; set; }
        public System.Decimal? BENDING_W2 { get; set; }
        public System.Decimal? BENDING_W3 { get; set; }
        public System.Decimal? BENDING_F1 { get; set; }
        public System.Decimal? BENDING_F2 { get; set; }
        public System.Decimal? BENDING_F3 { get; set; }
        public System.Decimal? FLEX_SCOTT_W1 { get; set; }
        public System.Decimal? FLEX_SCOTT_W2 { get; set; }
        public System.Decimal? FLEX_SCOTT_W3 { get; set; }
        public System.Decimal? FLEX_SCOTT_F1 { get; set; }
        public System.Decimal? FLEX_SCOTT_F2 { get; set; }
        public System.Decimal? FLEX_SCOTT_F3 { get; set; }
        public System.Decimal? STATIC_AIR4 { get; set; }
        public System.Decimal? STATIC_AIR5 { get; set; }
        public System.Decimal? STATIC_AIR6 { get; set; }
        public System.String FILENAME { get; set; }
        public System.DateTime? UPLOADDATE { get; set; }
        public System.String UPLOADBY { get; set; }
        public System.Decimal? FLAMMABILITY_W2 { get; set; }
        public System.Decimal? FLAMMABILITY_W3 { get; set; }
        public System.Decimal? FLAMMABILITY_W4 { get; set; }
        public System.Decimal? FLAMMABILITY_W5 { get; set; }
        public System.Decimal? FLAMMABILITY_F2 { get; set; }
        public System.Decimal? FLAMMABILITY_F3 { get; set; }
        public System.Decimal? FLAMMABILITY_F4 { get; set; }
        public System.Decimal? FLAMMABILITY_F5 { get; set; }
    }

    #endregion

    //----------------------//

    #region LAB_GETITEMTESTSPECIFICATION Parameter

    public class LAB_GETITEMTESTSPECIFICATIONParameter
    {
        public System.String P_ITMCODE { get; set; }
    }

    #endregion

    #region LAB_GETITEMTESTSPECIFICATION Result

    public class LAB_GETITEMTESTSPECIFICATIONResult
    {
        public System.String ITM_CODE { get; set; }
        public System.Decimal? WIDTH { get; set; }
        public System.Decimal? USABLE_WIDTH { get; set; }
        public System.String USABLE_WIDTH_TOR { get; set; }
        public System.Decimal? NUMTHREADS_W { get; set; }
        public System.Decimal? NUMTHREADS_W_TOR { get; set; }
        public System.Decimal? NUMTHREADS_F { get; set; }
        public System.Decimal? NUMTHREADS_F_TOR { get; set; }
        public System.Decimal? WIDTH_SILICONE { get; set; }
        public System.String WIDTH_SILICONE_TOR { get; set; }
        public System.Decimal? TOTALWEIGHT { get; set; }
        public System.Decimal? TOTALWEIGHT_TOR { get; set; }
        public System.Decimal? UNCOATEDWEIGHT { get; set; }
        public System.Decimal? UNCOATEDWEIGHT_TOR { get; set; }
        public System.Decimal? COATINGWEIGHT { get; set; }
        public System.Decimal? COATINGWEIGHT_TOR { get; set; }
        public System.Decimal? THICKNESS { get; set; }
        public System.Decimal? THICKNESS_TOR { get; set; }
        public System.Decimal? MAXFORCE_W { get; set; }
        public System.String MAXFORCE_W_TOR { get; set; }
        public System.Decimal? MAXFORCE_F { get; set; }
        public System.String MAXFORCE_F_TOR { get; set; }
        public System.Decimal? ELONGATIONFORCE_W { get; set; }
        public System.String ELONGATIONFORCE_W_TOR { get; set; }
        public System.Decimal? ELONGATIONFORCE_F { get; set; }
        public System.String ELONGATIONFORCE_F_TOR { get; set; }
        public System.Decimal? FLAMMABILITY_W { get; set; }
        public System.String FLAMMABILITY_W_TOR { get; set; }
        public System.Decimal? FLAMMABILITY_F { get; set; }
        public System.String FLAMMABILITY_F_TOR { get; set; }
        public System.Decimal? EDGECOMB_W { get; set; }
        public System.String EDGECOMB_W_TOR { get; set; }
        public System.Decimal? EDGECOMB_F { get; set; }
        public System.String EDGECOMB_F_TOR { get; set; }
        public System.Decimal? STIFFNESS_W { get; set; }
        public System.String STIFFNESS_W_TOR { get; set; }
        public System.Decimal? STIFFNESS_F { get; set; }
        public System.String STIFFNESS_F_TOR { get; set; }
        public System.Decimal? TEAR_W { get; set; }
        public System.String TEAR_W_TOR { get; set; }
        public System.Decimal? TEAR_F { get; set; }
        public System.String TEAR_F_TOR { get; set; }
        public System.Decimal? STATIC_AIR { get; set; }
        public System.String STATIC_AIR_TOR { get; set; }
        public System.Decimal? DYNAMIC_AIR { get; set; }
        public System.Decimal? DYNAMIC_AIR_TOR { get; set; }
        public System.Decimal? EXPONENT { get; set; }
        public System.Decimal? EXPONENT_TOR { get; set; }
        public System.Decimal? DIMENSCHANGE_W { get; set; }
        public System.String DIMENSCHANGE_W_TOR { get; set; }
        public System.Decimal? DIMENSCHANGE_F { get; set; }
        public System.String DIMENSCHANGE_F_TOR { get; set; }
        public System.Decimal? FLEXABRASION_W { get; set; }
        public System.String FLEXABRASION_W_TOR { get; set; }
        public System.Decimal? FLEXABRASION_F { get; set; }
        public System.String FLEXABRASION_F_TOR { get; set; }
        public System.Decimal? BOW { get; set; }
        public System.String BOW_TOR { get; set; }
        public System.Decimal? SKEW { get; set; }
        public System.String SKEW_TOR { get; set; }
        public System.Decimal? BENDING_W { get; set; }
        public System.String BENDING_W_TOR { get; set; }
        public System.Decimal? BENDING_F { get; set; }
        public System.String BENDING_F_TOR { get; set; }
        public System.Decimal? FLEX_SCOTT_W { get; set; }
        public System.String FLEX_SCOTT_W_TOR { get; set; }
        public System.Decimal? FLEX_SCOTT_F { get; set; }
        public System.String FLEX_SCOTT_F_TOR { get; set; }
        public System.Decimal? USABLE_WIDTH_LCL { get; set; }
        public System.Decimal? USABLE_WIDTH_UCL { get; set; }
        public System.Decimal? TOTALWEIGHT_LCL { get; set; }
        public System.Decimal? TOTALWEIGHT_UCL { get; set; }
        public System.Decimal? NUMTHREADS_W_LCL { get; set; }
        public System.Decimal? NUMTHREADS_W_UCL { get; set; }
        public System.Decimal? NUMTHREADS_F_LCL { get; set; }
        public System.Decimal? NUMTHREADS_F_UCL { get; set; }
        public System.Decimal? MAXFORCE_W_LCL { get; set; }
        public System.Decimal? MAXFORCE_W_UCL { get; set; }
        public System.Decimal? MAXFORCE_F_LCL { get; set; }
        public System.Decimal? MAXFORCE_F_UCL { get; set; }
        public System.Decimal? ELONGATIONFORCE_W_LCL { get; set; }
        public System.Decimal? ELONGATIONFORCE_W_UCL { get; set; }
        public System.Decimal? ELONGATIONFORCE_F_LCL { get; set; }
        public System.Decimal? ELONGATIONFORCE_F_UCL { get; set; }
        public System.Decimal? EDGECOMB_W_LCL { get; set; }
        public System.Decimal? EDGECOMB_W_UCL { get; set; }
        public System.Decimal? EDGECOMB_F_LCL { get; set; }
        public System.Decimal? EDGECOMB_F_UCL { get; set; }
        public System.Decimal? TEAR_W_LCL { get; set; }
        public System.Decimal? TEAR_W_UCL { get; set; }
        public System.Decimal? TEAR_F_LCL { get; set; }
        public System.Decimal? TEAR_F_UCL { get; set; }
        public System.Decimal? STATIC_AIR_LCL { get; set; }
        public System.Decimal? STATIC_AIR_UCL { get; set; }
        public System.Decimal? DYNAMIC_AIR_LCL { get; set; }
        public System.Decimal? DYNAMIC_AIR_UCL { get; set; }
        public System.Decimal? EXPONENT_LCL { get; set; }
        public System.Decimal? EXPONENT_UCL { get; set; }
        public System.String CUSTOMERID { get; set; }
    }

    #endregion

    #region LAB_GETITEMTESTPROPERTY Parameter

    public class LAB_GETITEMTESTPROPERTYParameter
    {
        public System.String P_ITMCODE { get; set; }
    }

    #endregion

    #region LAB_GETITEMTESTPROPERTY Result

    public class LAB_GETITEMTESTPROPERTYResult
    {
        public System.String ITM_CODE { get; set; }
        public System.Decimal? WIDTH { get; set; }
        public System.Decimal? USABLE_WIDTH { get; set; }
        public System.Decimal? WIDTH_SILICONE { get; set; }
        public System.Decimal? NUMTHREADS_W { get; set; }
        public System.Decimal? NUMTHREADS_F { get; set; }
        public System.Decimal? TOTALWEIGHT { get; set; }
        public System.Decimal? UNCOATEDWEIGHT { get; set; }
        public System.Decimal? COATINGWEIGHT { get; set; }
        public System.Decimal? THICKNESS { get; set; }
        public System.Decimal? MAXFORCE_W { get; set; }
        public System.Decimal? MAXFORCE_F { get; set; }
        public System.Decimal? ELONGATIONFORCE_W { get; set; }
        public System.Decimal? ELONGATIONFORCE_F { get; set; }
        public System.Decimal? FLAMMABILITY_W { get; set; }
        public System.Decimal? FLAMMABILITY_F { get; set; }
        public System.Decimal? EDGECOMB_W { get; set; }
        public System.Decimal? EDGECOMB_F { get; set; }
        public System.Decimal? STIFFNESS_W { get; set; }
        public System.Decimal? STIFFNESS_F { get; set; }
        public System.Decimal? TEAR_W { get; set; }
        public System.Decimal? TEAR_F { get; set; }
        public System.Decimal? STATIC_AIR { get; set; }
        public System.Decimal? DYNAMIC_AIR { get; set; }
        public System.Decimal? EXPONENT { get; set; }
        public System.Decimal? DIMENSCHANGE_W { get; set; }
        public System.Decimal? DIMENSCHANGE_F { get; set; }
        public System.Decimal? FLEXABRASION_W { get; set; }
        public System.Decimal? FLEXABRASION_F { get; set; }
        public System.Decimal? BOW { get; set; }
        public System.Decimal? SKEW { get; set; }
        public System.Decimal? BENDING_W { get; set; }
        public System.Decimal? BENDING_F { get; set; }
        public System.Decimal? FLEX_SCOTT_W { get; set; }
        public System.Decimal? FLEX_SCOTT_F { get; set; }
    }

    #endregion

    //---------//

    #region LAB_GETINSPECTIONLIST Parameter

    public class LAB_GETINSPECTIONLISTParameter
    {
        public System.String P_INSLOT { get; set; }
        public System.String P_DATE { get; set; }
    }

    #endregion

    #region LAB_GETINSPECTIONLIST Result

    public class LAB_GETINSPECTIONLISTResult
    {
        public System.String PALLETNO { get; set; }
        public System.String INSPECTIONLOT { get; set; }
        public System.String ITEMCODE { get; set; }
        public System.Decimal? NETLENGTH { get; set; }
        public System.Decimal? GROSSWEIGHT { get; set; }
        public System.Decimal? NETWEIGHT { get; set; }
        public System.String GRADE { get; set; }
        public System.String CUSTOMERTYPE { get; set; }
        public System.String ISLAB { get; set; }
        public System.DateTime? INSPECTIONDATE { get; set; }
        public System.String FLAG { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.String STOCK { get; set; }
        public System.Decimal? GROSSLENGTH { get; set; }
        public System.Decimal? ORDERNO { get; set; }
    }

    #endregion

    #region LAB_GETFINISHINGSAMPLING Parameter

    public class LAB_GETFINISHINGSAMPLINGParameter
    {
        public System.String P_WEAVLOT { get; set; }
        public System.String P_ITEMCODE { get; set; }
    }

    #endregion

    #region LAB_GETFINISHINGSAMPLING Result

    public class LAB_GETFINISHINGSAMPLINGResult
    {
        public System.String WEAVINGLOT { get; set; }
        public System.String FINISHINGLOT { get; set; }
        public System.String ITM_CODE { get; set; }
        public System.DateTime? CREATEDATE { get; set; }
        public System.String CREATEBY { get; set; }
        public System.String PRODUCTID { get; set; }
        public System.Decimal? SAMPLING_WIDTH { get; set; }
        public System.Decimal? SAMPLING_LENGTH { get; set; }
        public System.String PROCESS { get; set; }
        public System.String REMARK { get; set; }
        public System.String FABRICTYPE { get; set; }
        public System.String RETESTFLAG { get; set; }
    }

    #endregion

    #region LAB_CHECKRECEIVESAMPLING Parameter

    public class LAB_CHECKRECEIVESAMPLINGParameter
    {
        public System.String P_WEAVLOT { get; set; }
        public System.String P_ITEMCODE { get; set; }
    }

    #endregion

    #region LAB_CHECKRECEIVESAMPLING Result

    public class LAB_CHECKRECEIVESAMPLINGResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region LAB_CHECKRECEIVEGREIGESAMPLING Parameter

    public class LAB_CHECKRECEIVEGREIGESAMPLINGParameter
    {
        public System.String P_BEAMERROLL { get; set; }
        public System.String P_LOOMNO { get; set; }
    }

    #endregion

    #region LAB_CHECKRECEIVEGREIGESAMPLING Result

    public class LAB_CHECKRECEIVEGREIGESAMPLINGResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    // -- Update 15/06/18 -- //

    #region LAB_APPROVELABDATA Parameter

    public class LAB_APPROVELABDATAParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_WEAVINGLOG { get; set; }
        public System.String P_FINISHINGLOT { get; set; }
        public System.DateTime? P_ENTRYDATE { get; set; }
        public System.String P_STATUS { get; set; }
        public System.String P_REMARK { get; set; }
        public System.String P_APPROVEBY { get; set; }
        public System.DateTime? P_APPROVEDATE { get; set; }
    }

    #endregion

    #region LAB_APPROVELABDATA Result

    public class LAB_APPROVELABDATAResult
    {
        public System.String P_RETURN { get; set; }
    }

    #endregion

    // -- Update 01/07/18 -- //

    #region LAB_INSERTSAMPLEDATA Parameter

    public class LAB_INSERTSAMPLEDATAParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_PRODUCTIONLOT { get; set; }
        public System.String P_FINISHINGLOT { get; set; }
        public System.DateTime? P_ENTRYDATE { get; set; }
        public System.String P_ENTRYBY { get; set; }
        public System.String P_YARN { get; set; }
        public System.String P_METHOD { get; set; }
        public System.Decimal? P_NO { get; set; }
        public System.Decimal? P_VALUE { get; set; }
    }

    #endregion

    #region LAB_INSERTSAMPLEDATA Result

    public class LAB_INSERTSAMPLEDATAResult
    {
        public System.String P_RETURN { get; set; }
    }

    #endregion

    #region LAB_GETNOSAMPLEBYMETHOD Parameter

    public class LAB_GETNOSAMPLEBYMETHODParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_PRODUCTIONLOT { get; set; }
        public System.String P_FINISHINGLOT { get; set; }
    }

    #endregion

    #region LAB_GETNOSAMPLEBYMETHOD Result

    public class LAB_GETNOSAMPLEBYMETHODResult
    {
        public System.String ITM_CODE { get; set; }
        public System.String PRODUCTIONLOT { get; set; }
        public System.String FINISHINGLOT { get; set; }
        public System.String METHOD { get; set; }
        public System.DateTime? ENTRYDATE { get; set; }
        public System.Decimal? N { get; set; }
    }

    #endregion

    //----------------------//

    // -- Update 20/09/18 -- //

    #region LAB_SEARCHLABSAMPLEDATA Parameter

    public class LAB_SEARCHLABSAMPLEDATAParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_ENTRYSTARTDATE { get; set; }
        public System.String P_ENTRYENDDATE { get; set; }
    }

    #endregion

    #region LAB_SEARCHLABSAMPLEDATA Result

    public class LAB_SEARCHLABSAMPLEDATAResult
    {
        public System.String PRODUCTIONLOT { get; set; }
        public System.String ITM_CODE { get; set; }
        public System.DateTime? ENTRYDATE { get; set; }
    }

    #endregion

    #region LAB_SAVEPLCDATA Parameter

    public class LAB_SAVEPLCDATAParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_PRODUCTIONLOT { get; set; }
        public System.Decimal? P_TOTALWEIGHT1 { get; set; }
        public System.Decimal? P_TOTALWEIGHT2 { get; set; }
        public System.Decimal? P_TOTALWEIGHT3 { get; set; }
        public System.Decimal? P_TOTALWEIGHT4 { get; set; }
        public System.Decimal? P_TOTALWEIGHT5 { get; set; }
        public System.Decimal? P_TOTALWEIGHT6 { get; set; }
        public System.Decimal? P_UNCOATEDWEIGHT1 { get; set; }
        public System.Decimal? P_UNCOATEDWEIGHT2 { get; set; }
        public System.Decimal? P_UNCOATEDWEIGHT3 { get; set; }
        public System.Decimal? P_UNCOATEDWEIGHT4 { get; set; }
        public System.Decimal? P_UNCOATEDWEIGHT5 { get; set; }
        public System.Decimal? P_UNCOATEDWEIGHT6 { get; set; }
        public System.Decimal? P_COATWEIGHT1 { get; set; }
        public System.Decimal? P_COATWEIGHT2 { get; set; }
        public System.Decimal? P_COATWEIGHT3 { get; set; }
        public System.Decimal? P_COATWEIGHT4 { get; set; }
        public System.Decimal? P_COATWEIGHT5 { get; set; }
        public System.Decimal? P_COATWEIGHT6 { get; set; }
        public System.Decimal? P_STIFFNESS_W1 { get; set; }
        public System.Decimal? P_STIFFNESS_W2 { get; set; }
        public System.Decimal? P_STIFFNESS_W3 { get; set; }
        public System.Decimal? P_STIFFNESS_F1 { get; set; }
        public System.Decimal? P_STIFFNESS_F2 { get; set; }
        public System.Decimal? P_STIFFNESS_F3 { get; set; }
        public System.Decimal? P_STATIC_AIR1 { get; set; }
        public System.Decimal? P_STATIC_AIR2 { get; set; }
        public System.Decimal? P_STATIC_AIR3 { get; set; }
        public System.Decimal? P_STATIC_AIR4 { get; set; }
        public System.Decimal? P_STATIC_AIR5 { get; set; }
        public System.Decimal? P_STATIC_AIR6 { get; set; }
        public System.Decimal? P_DYNAMIC_AIR1 { get; set; }
        public System.Decimal? P_DYNAMIC_AIR2 { get; set; }
        public System.Decimal? P_DYNAMIC_AIR3 { get; set; }
        public System.Decimal? P_EXPONENT1 { get; set; }
        public System.Decimal? P_EXPONENT2 { get; set; }
        public System.Decimal? P_EXPONENT3 { get; set; }
        public System.DateTime? P_WEIGHTDATE { get; set; }
        public System.String P_WEIGHTBY { get; set; }
        public System.DateTime? P_STIFFNESSDATE { get; set; }
        public System.String P_STIFFNESSBY { get; set; }
        public System.DateTime? P_STATICAIRDATE { get; set; }
        public System.String P_STATICAIRBY { get; set; }
        public System.DateTime? P_DYNAMICDATE { get; set; }
        public System.String P_DYNAMICBY { get; set; }
    }

    #endregion

    #region LAB_SAVEPLCDATA Result

    public class LAB_SAVEPLCDATAResult
    {
        public System.String P_RETURN { get; set; }
    }

    #endregion

    #region LAB_GETSAMPLEDATABYMETHOD Parameter

    public class LAB_GETSAMPLEDATABYMETHODParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_PRODUCTIONLOT { get; set; }
        public System.String P_FINISHINGLOT { get; set; }
        public System.String P_METHOD { get; set; }
    }

    #endregion

    #region LAB_GETSAMPLEDATABYMETHOD Result

    public class LAB_GETSAMPLEDATABYMETHODResult
    {
        public System.String ITM_CODE { get; set; }
        public System.String PRODUCTIONLOT { get; set; }
        public System.String FINISHINGLOT { get; set; }
        public System.DateTime? ENTRYDATE { get; set; }
        public System.String ENTRYBY { get; set; }
        public System.String METHOD { get; set; }
        public System.String YARN { get; set; }
        public System.Decimal? NO { get; set; }
        public System.Decimal? VALUE { get; set; }
        public System.DateTime? CREATEDDATE { get; set; }
    }

    #endregion

    #region LAB_GETPLCDATA Parameter

    public class LAB_GETPLCDATAParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_PRODUCTIONLOT { get; set; }
    }

    #endregion

    #region LAB_GETPLCDATA Result

    public class LAB_GETPLCDATAResult
    {
        public System.String ITM_CODE { get; set; }
        public System.String WEAVINGLOT { get; set; }
        public System.Decimal? TOTALWEIGHT1 { get; set; }
        public System.Decimal? TOTALWEIGHT2 { get; set; }
        public System.Decimal? TOTALWEIGHT3 { get; set; }
        public System.Decimal? TOTALWEIGHT4 { get; set; }
        public System.Decimal? TOTALWEIGHT5 { get; set; }
        public System.Decimal? TOTALWEIGHT6 { get; set; }
        public System.Decimal? UNCOATEDWEIGHT1 { get; set; }
        public System.Decimal? UNCOATEDWEIGHT2 { get; set; }
        public System.Decimal? UNCOATEDWEIGHT3 { get; set; }
        public System.Decimal? UNCOATEDWEIGHT4 { get; set; }
        public System.Decimal? UNCOATEDWEIGHT5 { get; set; }
        public System.Decimal? UNCOATEDWEIGHT6 { get; set; }
        public System.Decimal? COATINGWEIGHT1 { get; set; }
        public System.Decimal? COATINGWEIGHT2 { get; set; }
        public System.Decimal? COATINGWEIGHT3 { get; set; }
        public System.Decimal? COATINGWEIGHT4 { get; set; }
        public System.Decimal? COATINGWEIGHT5 { get; set; }
        public System.Decimal? COATINGWEIGHT6 { get; set; }
        public System.Decimal? STIFFNESS_W1 { get; set; }
        public System.Decimal? STIFFNESS_W2 { get; set; }
        public System.Decimal? STIFFNESS_W3 { get; set; }
        public System.Decimal? STIFFNESS_F1 { get; set; }
        public System.Decimal? STIFFNESS_F2 { get; set; }
        public System.Decimal? STIFFNESS_F3 { get; set; }
        public System.Decimal? STATIC_AIR1 { get; set; }
        public System.Decimal? STATIC_AIR2 { get; set; }
        public System.Decimal? STATIC_AIR3 { get; set; }
        public System.Decimal? STATIC_AIR4 { get; set; }
        public System.Decimal? STATIC_AIR5 { get; set; }
        public System.Decimal? STATIC_AIR6 { get; set; }
        public System.DateTime? WEIGHTDATE { get; set; }
        public System.String WEIGHT_BY { get; set; }
        public System.DateTime? STIFFNESSDATE { get; set; }
        public System.String STIFFNESS_BY { get; set; }
        public System.DateTime? STATICAIRDATE { get; set; }
        public System.String STATICAIR_BY { get; set; }
        public System.Decimal? EXPONENT1 { get; set; }
        public System.Decimal? EXPONENT2 { get; set; }
        public System.Decimal? EXPONENT3 { get; set; }
        public System.Decimal? DYNAMIC_AIR1 { get; set; }
        public System.Decimal? DYNAMIC_AIR2 { get; set; }
        public System.Decimal? DYNAMIC_AIR3 { get; set; }
        public System.DateTime? DYNAMICDATE { get; set; }
        public System.String DYNAMIC_BY { get; set; }
    }

    #endregion

    //----------------------//

    #region LOG_INSERT Parameter

    public class LOG_INSERTParameter
    {
        public System.String P_PROCESSID { get; set; }
        public System.String P_OPERATION { get; set; }
        public System.String P_LOT { get; set; }
        public System.String P_OPERATORID { get; set; }
        public System.String P_COMPUTORNAME { get; set; }
        public System.DateTime? P_DATE { get; set; }
    }

    #endregion

    #region LOG_INSERT Result

    public class LOG_INSERTResult
    {
    }

    #endregion

    #region ITM_UPDATE100MRECORD Parameter

    public class ITM_UPDATE100MRECORDParameter
    {
        public System.String P_ITEMCODE { get; set; }
        public System.String P_DENW { get; set; }
        public System.String P_DENF { get; set; }
        public System.String P_WIDTHALL { get; set; }
        public System.String P_WIDTHPIN { get; set; }
        public System.String P_WIDTHCOAT { get; set; }
        public System.String P_WIDTHSELVAGEL { get; set; }
        public System.String P_WIDTHSELVAGER { get; set; }
        public System.String P_TRIML { get; set; }
        public System.String P_TRIMR { get; set; }
        public System.String P_FLOPPYL { get; set; }
        public System.String P_FLOPPYR { get; set; }
        public System.String P_UNWINDER { get; set; }
        public System.String P_WINDER { get; set; }
        public System.String P_HARDNESSL { get; set; }
        public System.String P_HARDNESSC { get; set; }
        public System.String P_HARDNESSR { get; set; }
    }

    #endregion

    #region ITM_UPDATE100MRECORD Result

    public class ITM_UPDATE100MRECORDResult
    {
    }

    #endregion

    #region ITM_SEARCHITEMCODE Parameter

    public class ITM_SEARCHITEMCODEParameter
    {
        public System.String P_ITEMCODE { get; set; }
        public System.String P_ITEMWEAV { get; set; }
        public System.String P_ITEMPREPARE { get; set; }
        public System.String P_ITEMYARN { get; set; }
        public System.String P_YARNCODE { get; set; }
    }

    #endregion

    #region ITM_SEARCHITEMCODE Result

    public class ITM_SEARCHITEMCODEResult
    {
        public System.String ITM_CODE { get; set; }
        public System.String ITM_WEAVING { get; set; }
        public System.String ITM_YARN { get; set; }
        public System.Decimal? ITM_WIDTH { get; set; }
        public System.String ITM_PROC1 { get; set; }
        public System.String ITM_PROC2 { get; set; }
        public System.String ITM_PROC3 { get; set; }
        public System.String ITM_PROC4 { get; set; }
        public System.String ITM_PROC5 { get; set; }
        public System.String ITM_PROC6 { get; set; }
        public System.DateTime? CREATEDATE { get; set; }
        public System.String CREATEBY { get; set; }
        public System.DateTime? EDITDATE { get; set; }
        public System.String EDITBY { get; set; }
        public System.String ITM_PREPARE { get; set; }
        public System.Decimal? COREWEIGHT { get; set; }
        public System.Decimal? FULLWEIGHT { get; set; }
        public System.String ITM_GROUP { get; set; }
        public System.String YARNCODE { get; set; }
        public System.String WIDTHCODE { get; set; }
        public System.Decimal? WIDTHWEAVING { get; set; }
        public System.String LABFORM { get; set; }
        public System.String WEAVE_TYPE { get; set; }
    }

    #endregion

    #region ITM_INSERTUPDATEITEMCODE Parameter

    public class ITM_INSERTUPDATEITEMCODEParameter
    {
        public System.String P_ITEMCODE { get; set; }
        public System.String P_ITEMWEAV { get; set; }
        public System.String P_ITEMPREPARE { get; set; }
        public System.String P_ITEMYARN { get; set; }
        public System.Decimal? P_WIDTH { get; set; }
        public System.Decimal? P_WEAVEWIDTH { get; set; }
        public System.Decimal? P_COREWEIGHT { get; set; }
        public System.String P_YARNCODE { get; set; }
        public System.String P_PROC1 { get; set; }
        public System.String P_PROC2 { get; set; }
        public System.String P_PROC3 { get; set; }
        public System.String P_PROC4 { get; set; }
        public System.String P_PROC5 { get; set; }
        public System.String P_PROC6 { get; set; }
        public System.String P_OPERATOR { get; set; }
    }

    #endregion

    #region ITM_INSERTUPDATEITEMCODE Result

    public class ITM_INSERTUPDATEITEMCODEResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region ITM_GETITEMYARNLIST Parameter

    public class ITM_GETITEMYARNLISTParameter
    {
    }

    #endregion

    #region ITM_GETITEMYARNLIST Result

    public class ITM_GETITEMYARNLISTResult
    {
        public System.String ITM_YARN { get; set; }
    }

    #endregion

    #region ITM_GETITEMYARN400 Parameter

    public class ITM_GETITEMYARN400Parameter
    {
        public System.String P_ITEMYARN { get; set; }
    }

    #endregion

    #region ITM_GETITEMYARN400 Result

    public class ITM_GETITEMYARN400Result
    {
        public System.String ITM_YARN { get; set; }
    }

    #endregion

    #region ITM_GETITEMPREPARELIST Parameter

    public class ITM_GETITEMPREPARELISTParameter
    {
    }

    #endregion

    #region ITM_GETITEMPREPARELIST Result

    public class ITM_GETITEMPREPARELISTResult
    {
        public System.String ITM_PREPARE { get; set; }
        public System.String ITM_YARN { get; set; }
    }

    #endregion

    #region ITM_GETITEMCODELIST Parameter

    public class ITM_GETITEMCODELISTParameter
    {
    }

    #endregion

    #region ITM_GETITEMCODELIST Result

    public class ITM_GETITEMCODELISTResult
    {
        public System.String ITM_CODE { get; set; }
    }

    #endregion

    #region ITM_GETITEMBYITEMCODEANDCUSID Parameter

    public class ITM_GETITEMBYITEMCODEANDCUSIDParameter
    {
        public System.String P_CUSTOMERID { get; set; }
        public System.String P_ITMCODE { get; set; }
    }

    #endregion

    #region ITM_GETITEMBYITEMCODEANDCUSID Result

    public class ITM_GETITEMBYITEMCODEANDCUSIDResult
    {
        public System.String CUSTOMERID { get; set; }
        public System.String ITM_CODE { get; set; }
        public System.String PARTNO { get; set; }
        public System.String FABRIC { get; set; }
        public System.Decimal? LENGTH { get; set; }
        public System.String DENSITY_W { get; set; }
        public System.String DENSITY_F { get; set; }
        public System.String WIDTH_ALL { get; set; }
        public System.String WIDTH_PIN { get; set; }
        public System.String WIDTH_COAT { get; set; }
        public System.String TRIM_L { get; set; }
        public System.String TRIM_R { get; set; }
        public System.String FLOPPY_L { get; set; }
        public System.String FLOPPY_R { get; set; }
        public System.String HARDNESS_L { get; set; }
        public System.String HARDNESS_C { get; set; }
        public System.String HARDNESS_R { get; set; }
        public System.String UNWINDER { get; set; }
        public System.String WINDER { get; set; }
        public System.String FINISHINGCUSTOMER { get; set; }
        public System.String DESCRIPTION { get; set; }
        public System.String SUPPLIERCODE { get; set; }
        public System.String WIDTH { get; set; }

        public System.String WIDTH_SELVAGEL { get; set; }
        public System.String WIDTH_SELVAGER { get; set; }
        public System.Decimal? RESETSTARTLENGTH { get; set; }
    }

    #endregion

    #region INS_SHIFTREMARK Parameter

    public class INS_SHIFTREMARKParameter
    {
        public System.String P_INSLOT { get; set; }
        public System.DateTime? P_STARTDATE { get; set; }
        public System.String P_SHIFTREMARK { get; set; }
        public System.String P_SHIFTID { get; set; }
        public System.DateTime? P_SHIFTDATE { get; set; }
    }

    #endregion

    #region INS_SHIFTREMARK Result

    public class INS_SHIFTREMARKResult
    {
        public System.String R_RESULT { get; set; }
    }

    #endregion

    #region INS_SEARCHINSPECTIONDATA Parameter

    public class INS_SEARCHINSPECTIONDATAParameter
    {
        public System.String P_DATE { get; set; }
        public System.String P_MC { get; set; }
    }

    #endregion

    #region INS_SEARCHINSPECTIONDATA Result

    public class INS_SEARCHINSPECTIONDATAResult
    {
        public System.String INSPECTIONLOT { get; set; }
        public System.String ITEMCODE { get; set; }
        public System.String FINISHINGLOT { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.Decimal? GROSSLENGTH { get; set; }
        public System.Decimal? NETLENGTH { get; set; }
        public System.String CUSTOMERID { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.String GRADE { get; set; }
        public System.Decimal? GROSSWEIGHT { get; set; }
        public System.Decimal? NETWEIGHT { get; set; }
        public System.String PEINSPECTIONLOT { get; set; }
        public System.String DEFECTID { get; set; }
        public System.String REMARK { get; set; }
        public System.String ATTACHID { get; set; }
        public System.String TESTRECORDID { get; set; }
        public System.String INSPECTEDBY { get; set; }
        public System.String MCNO { get; set; }
        public System.String FINISHFLAG { get; set; }
        public System.DateTime? SUSPENDDATE { get; set; }
        public System.String INSPECTIONID { get; set; }
        public System.String RETEST { get; set; }
        public System.String PREITEMCODE { get; set; }
        public System.String SUSPENDBY { get; set; }
        public System.DateTime? STARTDATE1 { get; set; }
        public System.String CLEARBY { get; set; }
        public System.String CLEARREMARK { get; set; }
        public System.String CUSTOMERTYPE { get; set; }
        public System.String DEFECTFILENAME { get; set; }
        public System.String ISPACKED { get; set; }
        public System.String DF_CODE { get; set; }
        public System.Decimal? DF_AMOUNT { get; set; }
        public System.Decimal? DF_POINT { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.String OPERATOR_GROUP { get; set; }
        public System.String RETYPE { get; set; }
        public System.String SHIFT_REMARK { get; set; }
        public System.String SHIFT_ID { get; set; }
        public System.DateTime? SHIFT_REMARK_DATE { get; set; }
        public System.Decimal? CONFIRMSTARTLENGTH { get; set; }
    }

    #endregion

    #region INS_REWAREHOUSE Parameter

    public class INS_REWAREHOUSEParameter
    {
        public System.String P_INSOLD { get; set; }
        public System.String P_DEFECTID { get; set; }
        public System.String P_TESTID { get; set; }
        public System.String P_INSNEW { get; set; }
    }

    #endregion

    #region INS_REWAREHOUSE Result

    public class INS_REWAREHOUSEResult
    {
    }

    #endregion

    #region INS_REPORTSUMDEFECT Parameter

    public class INS_REPORTSUMDEFECTParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_DEFECTID { get; set; }
    }

    #endregion

    #region INS_REPORTSUMDEFECT Result

    public class INS_REPORTSUMDEFECTResult
    {
        public System.Decimal? TOTALPOINT { get; set; }
        public System.Decimal? SHORTDEFECT { get; set; }
        public System.Decimal? LONGDEFECT { get; set; }
        public System.Decimal? COMLONGDEFECT { get; set; }
        public System.Decimal? COMSHORTDEFECT { get; set; }
    }

    #endregion

    //New 23/8/22

    #region INS_INSERTCONFIRMSTARTING Parameter

    public class INS_INSERTCONFIRMSTARTINGParameter
    {
        public System.String P_INSID { get; set; }
        public System.String P_INSLOT { get; set; }
        public System.Decimal? P_CONFIRMSTART { get; set; }
    }

    #endregion

    #region INS_INSERTCONFIRMSTARTING Result

    public class INS_INSERTCONFIRMSTARTINGResult
    {
    }

    #endregion

    //-----------//

    #region INS_INSERTMANUALINSPECTDATA Parameter

    public class INS_INSERTMANUALINSPECTDATAParameter
    {
        public System.String P_INSLOT { get; set; }
        public System.String P_ITMCODE { get; set; }
        public System.String P_FINISHLOT { get; set; }
        public System.DateTime? P_STARTDATE { get; set; }
        public System.DateTime? P_ENDDATE { get; set; }
        public System.String P_CUSTOMERID { get; set; }
        public System.String P_PRODUCTTYPEID { get; set; }
        public System.String P_INSPECTEDBY { get; set; }
        public System.String P_MCNO { get; set; }
        public System.String P_CUSTOMERTYPE { get; set; }
        public System.String P_LOADTYPE { get; set; }
        public System.Decimal? P_GLENGHT { get; set; }
        public System.Decimal? P_NLENGTH { get; set; }
        public System.String P_GRADE { get; set; }
        public System.Decimal? P_GWEIGHT { get; set; }
        public System.Decimal? P_NWEIGHT { get; set; }
        public System.String P_REMARK { get; set; }
        public System.String P_OPERATOR { get; set; }
        public System.String P_GROUP { get; set; }
    }

    #endregion

    #region INS_INSERTMANUALINSPECTDATA Result

    public class INS_INSERTMANUALINSPECTDATAResult
    {
        public System.String R_INSID { get; set; }
    }

    #endregion

    #region INS_GETTOTALDEFECTBYINSLOT Parameter

    public class INS_GETTOTALDEFECTBYINSLOTParameter
    {
        public System.String P_INSLOT { get; set; }
        public System.String P_DEFECTID { get; set; }
    }

    #endregion

    #region INS_GETTOTALDEFECTBYINSLOT Result

    public class INS_GETTOTALDEFECTBYINSLOTResult
    {
        public System.Decimal? TOTAL { get; set; }
    }

    #endregion

    //New 17/10/22
    #region INS_GETRESETSTARTLENGTH Parameter

    public class INS_GETRESETSTARTLENGTHParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_CUSTOMERID { get; set; }
    }

    #endregion

    #region INS_GETRESETSTARTLENGTH Result

    public class INS_GETRESETSTARTLENGTHResult
    {
        public System.Decimal? RESETSTARTLENGTH { get; set; }
    }

    #endregion

    #region INS_GETNETLENGTH Parameter

    public class INS_GETNETLENGTHParameter
    {
        public System.String P_CUSID { get; set; }
        public System.String P_ITMCODE { get; set; }
        public System.Decimal? P_LENGTH { get; set; }
        public System.String P_GRADE { get; set; }
        public System.String P_DEFECTID { get; set; }
    }

    #endregion

    #region INS_GETNETLENGTH Result

    public class INS_GETNETLENGTHResult
    {
        public System.Decimal? NETLENGTH { get; set; }
    }

    #endregion

    #region INS_GETMCSUSPENDDATA Parameter

    public class INS_GETMCSUSPENDDATAParameter
    {
        public System.String P_INSMC { get; set; }
    }

    #endregion

    #region INS_GETMCSUSPENDDATA Result

    public class INS_GETMCSUSPENDDATAResult
    {
        public System.String INSPECTIONLOT { get; set; }
        public System.String ITEMCODE { get; set; }
        public System.String FINISHINGLOT { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.Decimal? GROSSLENGTH { get; set; }
        public System.Decimal? NETLENGTH { get; set; }
        public System.String CUSTOMERID { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.String GRADE { get; set; }
        public System.Decimal? GROSSWEIGHT { get; set; }
        public System.Decimal? NETWEIGHT { get; set; }
        public System.String PEINSPECTIONLOT { get; set; }
        public System.String DEFECTID { get; set; }
        public System.String REMARK { get; set; }
        public System.String ATTACHID { get; set; }
        public System.String TESTRECORDID { get; set; }
        public System.String INSPECTEDBY { get; set; }
        public System.String MCNO { get; set; }
        public System.String FINISHFLAG { get; set; }
        public System.DateTime? SUSPENDDATE { get; set; }
        public System.String INSPECTIONID { get; set; }
        public System.String RETEST { get; set; }
        public System.String PREITEMCODE { get; set; }
        public System.String SUSPENDBY { get; set; }
        public System.DateTime? STARTDATE1 { get; set; }
        public System.String CLEARBY { get; set; }
        public System.String CLEARREMARK { get; set; }
        public System.String CUSTOMERTYPE { get; set; }
        public System.String DEFECTFILENAME { get; set; }
        public System.String ISPACKED { get; set; }
        public System.String DF_CODE { get; set; }
        public System.Decimal? DF_AMOUNT { get; set; }
        public System.Decimal? DF_POINT { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.String OPERATOR_GROUP { get; set; }
        public System.String RETYPE { get; set; }
        public System.String SHIFT_REMARK { get; set; }
        public System.String SHIFT_ID { get; set; }
        public System.DateTime? SHIFT_REMARK_DATE { get; set; }
        public System.Decimal? CONFIRMSTARTLENGTH { get; set; }
    }

    #endregion

    #region INS_GETINSPECTIONREPORTDATA Parameter

    public class INS_GETINSPECTIONREPORTDATAParameter
    {
        public System.String P_INS_LOT { get; set; }
    }

    #endregion

    #region INS_GETINSPECTIONREPORTDATA Result

    public class INS_GETINSPECTIONREPORTDATAResult
    {
        public System.String INSPECTIONLOT { get; set; }
        public System.String ITEMCODE { get; set; }
        public System.String FINISHINGLOT { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.Decimal? GROSSLENGTH { get; set; }
        public System.Decimal? NETLENGTH { get; set; }
        public System.String CUSTOMERID { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.String GRADE { get; set; }
        public System.Decimal? GROSSWEIGHT { get; set; }
        public System.Decimal? NETWEIGHT { get; set; }
        public System.String PEINSPECTIONLOT { get; set; }
        public System.String DEFECTID { get; set; }
        public System.String REMARK { get; set; }
        public System.String SHIFT_ID { get; set; }
        public System.String SHIFT_REMARK { get; set; }
        public System.String ATTACHID { get; set; }
        public System.String TESTRECORDID { get; set; }
        public System.String INSPECTEDBY { get; set; }
        public System.String MCNO { get; set; }
        public System.String FINISHFLAG { get; set; }
        public System.DateTime? SUSPENDDATE { get; set; }
        public System.String INSPECTIONID { get; set; }
        public System.String RETEST { get; set; }
        public System.String PREITEMCODE { get; set; }
        public System.String CLEARBY { get; set; }
        public System.String CLEARREMARK { get; set; }
        public System.String SUSPENDBY { get; set; }
        public System.DateTime? STARTDATE1 { get; set; }
        public System.String CUSTOMERTYPE { get; set; }
        public System.String DEFECTFILENAME { get; set; }
        public System.String PRODUCTNAME { get; set; }
        public System.String MCNAME { get; set; }
        public System.String CUSTOMERNAME { get; set; }
        public System.String PARTNO { get; set; }
        public System.String LOADINGTYPE { get; set; }

        public System.Decimal? CONFIRMSTARTLENGTH { get; set; }
        public System.String CONFIRMSTDLENGTH { get; set; }
        public System.Decimal? RESETSTARTLENGTH { get; set; }
    }

    #endregion

    #region INS_GETFINISHINSLOTDATA Parameter

    public class INS_GETFINISHINSLOTDATAParameter
    {
        public System.String P_FINLOT { get; set; }
    }

    #endregion

    #region INS_GETFINISHINSLOTDATA Result

    public class INS_GETFINISHINSLOTDATAResult
    {
        public System.String INSPECTIONLOT { get; set; }
        public System.String ITEMCODE { get; set; }
        public System.String FINISHINGLOT { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.Decimal? GROSSLENGTH { get; set; }
        public System.Decimal? NETLENGTH { get; set; }
        public System.String CUSTOMERID { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.String GRADE { get; set; }
        public System.Decimal? GROSSWEIGHT { get; set; }
        public System.Decimal? NETWEIGHT { get; set; }
        public System.String PEINSPECTIONLOT { get; set; }
        public System.String DEFECTID { get; set; }
        public System.String REMARK { get; set; }
        public System.String ATTACHID { get; set; }
        public System.String TESTRECORDID { get; set; }
        public System.String INSPECTEDBY { get; set; }
        public System.String MCNO { get; set; }
        public System.String FINISHFLAG { get; set; }
        public System.DateTime? SUSPENDDATE { get; set; }
        public System.String INSPECTIONID { get; set; }
        public System.String RETEST { get; set; }
        public System.String PREITEMCODE { get; set; }
        public System.String SUSPENDBY { get; set; }
        public System.DateTime? STARTDATE1 { get; set; }
        public System.String CLEARBY { get; set; }
        public System.String CLEARREMARK { get; set; }
        public System.String CUSTOMERTYPE { get; set; }
        public System.String DEFECTFILENAME { get; set; }
        public System.String ISPACKED { get; set; }
        public System.String DF_CODE { get; set; }
        public System.Decimal? DF_AMOUNT { get; set; }
        public System.Decimal? DF_POINT { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.String OPERATOR_GROUP { get; set; }
        public System.String RETYPE { get; set; }
        public System.String SHIFT_REMARK { get; set; }
        public System.String SHIFT_ID { get; set; }
        public System.DateTime? SHIFT_REMARK_DATE { get; set; }
        public System.Decimal? CONFIRMSTARTLENGTH { get; set; }
    }

    #endregion

    #region INS_GETDEFECTLISTREPORT Parameter

    public class INS_GETDEFECTLISTREPORTParameter
    {
        public System.String P_DEFECTID { get; set; }
        public System.String P_INSLOT { get; set; }
    }

    #endregion

    #region INS_GETDEFECTLISTREPORT Result

    public class INS_GETDEFECTLISTREPORTResult
    {
        public System.String DEFECTID { get; set; }
        public System.String INSPECTIONLOT { get; set; }
        public System.String DEFECTCODE { get; set; }
        public System.Decimal? LENGTH1 { get; set; }
        public System.Decimal? POSITION { get; set; }
        public System.String FLAG { get; set; }
        public System.Decimal? DEFECTPOINT { get; set; }
        public System.Decimal? LENGTH2 { get; set; }
        public System.String DELETEBY { get; set; }
        public System.String DELETEREMARK { get; set; }
        public System.Decimal? COMPENSATELENGTH { get; set; }
        public System.Decimal? DEFECTPOINT100 { get; set; }
        public System.String DESCRIPTION_EN { get; set; }
    }

    #endregion

    #region INS_GET100MDEFECTPOINT Parameter

    public class INS_GET100MDEFECTPOINTParameter
    {
        public System.String P_INSLOT { get; set; }
        public System.String P_DEFECTID { get; set; }
        public System.Decimal? P_LENGTH1 { get; set; }
        public System.Decimal? P_LENGTH2 { get; set; }
    }

    #endregion

    #region INS_GET100MDEFECTPOINT Result

    public class INS_GET100MDEFECTPOINTResult
    {
        public System.Decimal? R_POINT { get; set; }
    }

    #endregion

    #region INS_GETCUTSAMPLELIST Parameter

    public class INS_GETCUTSAMPLELISTParameter
    {
        public System.String P_INS_LOT { get; set; }
        public System.DateTime? P_STARTDATE { get; set; }
    }

    #endregion

    #region INS_GETCUTSAMPLELIST Result

    public class INS_GETCUTSAMPLELISTResult
    {
        public System.String INSPECTIONLOT { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.Decimal? ORDERNO { get; set; }
        public System.Decimal? CUTLENGTH { get; set; }
        public System.String REMARK { get; set; }
        public System.DateTime? CUTDATE { get; set; }
        public System.String CUTBY { get; set; }
    }

    #endregion

    #region INS_EDITDEFECT Parameter

    public class INS_EDITDEFECTParameter
    {
        public System.String P_DEFECTID { get; set; }
        public System.String P_INSLOT { get; set; }
        public System.String P_DEFECTCODE { get; set; }
        public System.Decimal? P_LENGTH1 { get; set; }
        public System.Decimal? P_LENGTH2 { get; set; }
        public System.Decimal? P_POSITION { get; set; }
        public System.String P_NDEFECTCODE { get; set; }
        public System.Decimal? P_NLENGTH1 { get; set; }
        public System.Decimal? P_NLENGTH2 { get; set; }
        public System.Decimal? P_NPOSITION { get; set; }
    }

    #endregion

    #region INS_EDITDEFECT Result

    public class INS_EDITDEFECTResult
    {
    }

    #endregion

    #region INS_EDIT100TESTRECORD Parameter

    public class INS_EDIT100TESTRECORDParameter
    {
        public System.String P_TESTID { get; set; }
        public System.String P_INSLOT { get; set; }
        public System.String P_STDLENGTH { get; set; }
        public System.Decimal? P_ACTLENGTH { get; set; }
        public System.Decimal? P_NACTLENGTH { get; set; }
        public System.Decimal? P_NDENW { get; set; }
        public System.Decimal? P_NDENF { get; set; }
        public System.Decimal? P_NWIDTHALL { get; set; }
        public System.Decimal? P_NWIDTHPIN { get; set; }
        public System.Decimal? P_NWIDTHCOAT { get; set; }
        public System.Decimal? P_NTRIML { get; set; }
        public System.Decimal? P_NTRIMR { get; set; }
        public System.String P_NFLOPPYL { get; set; }
        public System.String P_NFLOPPYR { get; set; }
        public System.Decimal? P_NUNWINDERSET { get; set; }
        public System.Decimal? P_NUNWINDERACT { get; set; }
        public System.Decimal? P_NWINDERSET { get; set; }
        public System.Decimal? P_NWINDERACT { get; set; }
        public System.Decimal? P_NHARDNESSL { get; set; }
        public System.Decimal? P_NHARDNESSC { get; set; }
        public System.Decimal? P_NHARDNESSR { get; set; }
    }

    #endregion

    #region INS_EDIT100TESTRECORD Result

    public class INS_EDIT100TESTRECORDResult
    {
    }

    #endregion

    #region INS_DELETEDEFECTBYLENGTH Parameter

    public class INS_DELETEDEFECTBYLENGTHParameter
    {
        public System.String P_DEFECTID { get; set; }
        public System.Decimal? P_LENGTH { get; set; }
        public System.String P_DELETEBY { get; set; }
    }

    #endregion

    #region INS_DELETEDEFECTBYLENGTH Result

    public class INS_DELETEDEFECTBYLENGTHResult
    {
    }

    #endregion

    #region INS_DELETEDEFECT Parameter

    public class INS_DELETEDEFECTParameter
    {
        public System.String P_DEFECTID { get; set; }
        public System.String P_DEFECTCODE { get; set; }
        public System.Decimal? P_LENGTH1 { get; set; }
        public System.String P_DELETEBY { get; set; }
        public System.String P_DELETEREMARK { get; set; }
    }

    #endregion

    #region INS_DELETEDEFECT Result

    public class INS_DELETEDEFECTResult
    {
    }

    #endregion

    #region INS_DELETE100MRECORD Parameter

    public class INS_DELETE100MRECORDParameter
    {
        public System.String P_TESTID { get; set; }
        public System.String P_STDLENGTH { get; set; }
        public System.Decimal? P_ACTLENGTH { get; set; }
        public System.String P_DELETEBY { get; set; }
        public System.String P_DELETEREMARK { get; set; }
    }

    #endregion

    #region INS_DELETE100MRECORD Result

    public class INS_DELETE100MRECORDResult
    {
    }

    #endregion

    #region INS_CUTSAMPLE Parameter

    public class INS_CUTSAMPLEParameter
    {
        public System.String P_INSLOT { get; set; }
        public System.DateTime? P_STARTDATE { get; set; }
        public System.Decimal? P_CUTLENGTH { get; set; }
        public System.String P_REMARK { get; set; }
        public System.String P_CUTBY { get; set; }
    }

    #endregion

    #region INS_CUTSAMPLE Result

    public class INS_CUTSAMPLEResult
    {
    }

    #endregion

    #region INST_INSPECTIONGRADEHISTORY Parameter

    public class INST_INSPECTIONGRADEHISTORYParameter
    {
        public System.String P_INSLOT { get; set; }
        public System.DateTime? P_STARTDATE { get; set; }
        public System.String P_USER { get; set; }
        public System.String P_PASS { get; set; }
        public System.String P_REMARK { get; set; }
        public System.String P_OLDGRADE { get; set; }
        public System.String P_NEWGRADE { get; set; }
    }

    #endregion

    #region INST_INSPECTIONGRADEHISTORY Result

    public class INST_INSPECTIONGRADEHISTORYResult
    {
        public System.String R_RESULT { get; set; }
    }

    #endregion

    #region INSTINSPECTIONTESTRECORD Parameter

    public class INSTINSPECTIONTESTRECORDParameter
    {
        public System.String P_INSLOT { get; set; }
        public System.Decimal? P_STDLENGTH { get; set; }
        public System.Decimal? P_ACTUALLENGTH { get; set; }
        public System.Decimal? P_DENW { get; set; }
        public System.Decimal? P_DENF { get; set; }
        public System.Decimal? P_WIDTHALL { get; set; }
        public System.Decimal? P_WIDTHPIN { get; set; }
        public System.Decimal? P_WIDTHCOAT { get; set; }
        public System.Decimal? P_TRIML { get; set; }
        public System.Decimal? P_TRIMR { get; set; }
        public System.String P_FLOPPYL { get; set; }
        public System.String P_FLOPPYR { get; set; }
        public System.Decimal? P_UNWINDERSET { get; set; }
        public System.Decimal? P_UNWINDERACT { get; set; }
        public System.Decimal? P_WINDERSET { get; set; }
        public System.Decimal? P_WINDERACT { get; set; }
        public System.DateTime? P_POPUPDATE { get; set; }
        public System.DateTime? P_SAVEDATE { get; set; }
        public System.Decimal? P_HARDNESSL { get; set; }
        public System.Decimal? P_HARDNESSC { get; set; }
        public System.Decimal? P_HARDNESSR { get; set; }
    }

    #endregion

    #region INSTINSPECTIONTESTRECORD Result

    public class INSTINSPECTIONTESTRECORDResult
    {
        public System.String R_TESTID { get; set; }
    }

    #endregion

    #region INSTINSPECTIONLOTDEFECT Parameter

    public class INSTINSPECTIONLOTDEFECTParameter
    {
        public System.String P_INSLOT { get; set; }
        public System.String P_DEFECTCODE { get; set; }
        public System.Decimal? P_LENGTH1 { get; set; }
        public System.Decimal? P_LENGTH2 { get; set; }
        public System.Decimal? P_POINT { get; set; }
        public System.Decimal? P_POSITION { get; set; }
    }

    #endregion

    #region INSTINSPECTIONLOTDEFECT Result

    public class INSTINSPECTIONLOTDEFECTResult
    {
        public System.String R_DEFECTID { get; set; }
    }

    #endregion

    #region INSERTUPDATEWEAVINGDATA Parameter

    public class INSERTUPDATEWEAVINGDATAParameter
    {
        public System.String P_WEAVINGLOTNEW { get; set; }
        public System.String P_WEAVINGLOTOLD { get; set; }
        public System.String P_ITEMWEAVING { get; set; }
        public System.Decimal? P_LENGHT { get; set; }
        public System.DateTime? P_WEAVINGDATE { get; set; }
        public System.String P_LOOM { get; set; }
        public System.String P_SHIFT { get; set; }
        public System.Decimal? P_WIDTH { get; set; }
        public System.String P_REMARK { get; set; }
        public System.String P_OPERATOR { get; set; }
    }

    #endregion

    #region INSERTUPDATEWEAVINGDATA Result

    public class INSERTUPDATEWEAVINGDATAResult
    {
    }

    #endregion

    #region INSERTUPDATEOPERATOR Parameter

    public class INSERTUPDATEOPERATORParameter
    {
        public System.String P_OPID { get; set; }
        public System.String P_TITLE { get; set; }
        public System.String P_FNAME { get; set; }
        public System.String P_LNAME { get; set; }
        public System.String P_USERNAME { get; set; }
        public System.String P_PASS { get; set; }
        public System.String P_PROCESSID { get; set; }
        public System.String P_FLAG { get; set; }
        public System.String P_LEVEL { get; set; }
        public System.String P_CREATEBY { get; set; }
    }

    #endregion

    #region INSERTUPDATEOPERATOR Result

    public class INSERTUPDATEOPERATORResult
    {
        public System.String P_RETURN { get; set; }
    }

    #endregion

    #region INSERTUPDATEFINISHINGDATA Parameter

    public class INSERTUPDATEFINISHINGDATAParameter
    {
        public System.String P_FINISHINGLOT { get; set; }
        public System.String P_ITEMCODE { get; set; }
        public System.String P_PARTNO { get; set; }
        public System.String P_CUSID { get; set; }
        public System.Decimal? P_LENGHT { get; set; }
    }

    #endregion

    #region INSERTUPDATEFINISHINGDATA Result

    public class INSERTUPDATEFINISHINGDATAResult
    {
    }

    #endregion

    #region INSERTINSPECTIONPROCESS Parameter

    public class INSERTINSPECTIONPROCESSParameter
    {
        public System.String P_INSLOT { get; set; }
        public System.String P_ITMCODE { get; set; }
        public System.String P_FINISHLOT { get; set; }
        public System.DateTime? P_STARTDATE { get; set; }
        public System.String P_CUSTOMERID { get; set; }
        public System.String P_PRODUCTTYPEID { get; set; }
        public System.String P_INSPECTEDBY { get; set; }
        public System.String P_MCNO { get; set; }
        public System.String P_PEINSPECTIONLOT { get; set; }
        public System.String P_FLAG { get; set; }
        public System.String P_RETEST { get; set; }
        public System.String P_CUSTOMERTYPE { get; set; }
        public System.String P_LOADTYPE { get; set; }
        public System.String P_GROUP { get; set; }
    }

    #endregion

    #region INSERTINSPECTIONPROCESS Result

    public class INSERTINSPECTIONPROCESSResult
    {
        public System.String R_INSID { get; set; }
    }

    #endregion

    #region GETWEAVINGINGDATA Parameter

    public class GETWEAVINGINGDATAParameter
    {
        public System.String P_WEAVINGLOT { get; set; }
    }

    #endregion

    #region GETWEAVINGINGDATA Result

    public class GETWEAVINGINGDATAResult
    {
        public System.String WEAVINGLOT { get; set; }
        public System.String ITM_WEAVING { get; set; }
        public System.Decimal? LENGTH { get; set; }
        public System.String LOOMNO { get; set; }
        public System.DateTime? WEAVINGDATE { get; set; }
        public System.String SHIFT { get; set; }
        public System.String REMARK { get; set; }
        public System.DateTime? CREATEDATE { get; set; }
        public System.Decimal? WIDTH { get; set; }
        public System.String PREPAREBY { get; set; }
        public System.String WEAVINGNO { get; set; }
        public System.String BEAMLOT { get; set; }
        public System.Decimal? DOFFNO { get; set; }
        public System.Decimal? DENSITY_WARP { get; set; }
        public System.Decimal? TENSION { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.String DOFFBY { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.Decimal? WASTE { get; set; }
        public System.Decimal? DENSITY_WEFT { get; set; }
        public System.String DELETEFLAG { get; set; }
        public System.String DELETEBY { get; set; }
        public System.DateTime? DELETEDATE { get; set; }
    }

    #endregion

    #region GETWARPINGREJECTDETAIL Parameter

    public class GETWARPINGREJECTDETAILParameter
    {
        public System.String P_REJECTID { get; set; }
    }

    #endregion

    #region GETWARPINGREJECTDETAIL Result

    public class GETWARPINGREJECTDETAILResult
    {
        public System.String REJECTID { get; set; }
        public System.String REJECTCODE { get; set; }
        public System.String DESCRIPTION_EN { get; set; }
        public System.String DESCRIPTION_TH { get; set; }
    }

    #endregion

    #region GETREJECTLISTBYPROCESS Parameter

    public class GETREJECTLISTBYPROCESSParameter
    {
        public System.String P_PROCESSID { get; set; }
    }

    #endregion

    #region GETREJECTLISTBYPROCESS Result

    public class GETREJECTLISTBYPROCESSResult
    {
        public System.String PROCESSID { get; set; }
        public System.String REJECTCODE { get; set; }
        public System.String DESCRIPTION_TH { get; set; }
        public System.String DESCRIPTION_EN { get; set; }
    }

    #endregion

    #region GETOPERATORBYPROCESSID Parameter

    public class GETOPERATORBYPROCESSIDParameter
    {
        public System.String P_OPID { get; set; }
        public System.String P_PROCESSID { get; set; }
        public System.String P_USER { get; set; }
        public System.String P_PASS { get; set; }
    }

    #endregion

    #region GETOPERATORBYPROCESSID Result

    public class GETOPERATORBYPROCESSIDResult
    {
        public System.String OPERATORID { get; set; }
        public System.String TITLE { get; set; }
        public System.String FNAME { get; set; }
        public System.String LNAME { get; set; }
        public System.String USERNAME { get; set; }
        public System.String PASSWORD { get; set; }
        public System.String DELETEFLAG { get; set; }
        public System.String POSITIONLEVEL { get; set; }
        public System.String PROCESSID { get; set; }
        public System.DateTime? CREATEDDATE { get; set; }
        public System.String CREATEDBY { get; set; }
        public System.String WEB { get; set; }
    }

    #endregion

    #region GETMACHINELISTBYPROCESSID Parameter

    public class GETMACHINELISTBYPROCESSIDParameter
    {
        public System.String P_PROCESSID { get; set; }
    }

    #endregion

    #region GETMACHINELISTBYPROCESSID Result

    public class GETMACHINELISTBYPROCESSIDResult
    {
        public System.String PROCESSDESCRIPTION { get; set; }
        public System.String MACHINEID { get; set; }
        public System.String MCNAME { get; set; }
    }

    #endregion

    #region GETITEMCODEDATA Parameter

    public class GETITEMCODEDATAParameter
    {
        public System.String P_ITMCODE { get; set; }
        public System.String P_ITMWEAV { get; set; }
        public System.String P_ITMYARN { get; set; }
        public System.String P_ITMPREPARE { get; set; }
    }

    #endregion

    #region GETITEMCODEDATA Result

    public class GETITEMCODEDATAResult
    {
        public System.String ITM_CODE { get; set; }
        public System.String ITM_WEAVING { get; set; }
        public System.String ITM_YARN { get; set; }
        public System.Decimal? ITM_WIDTH { get; set; }
        public System.String ITM_PROC1 { get; set; }
        public System.String ITM_PROC2 { get; set; }
        public System.String ITM_PROC3 { get; set; }
        public System.String ITM_PROC4 { get; set; }
        public System.String ITM_PROC5 { get; set; }
        public System.String ITM_PROC6 { get; set; }
        public System.DateTime? CREATEDATE { get; set; }
        public System.String CREATEBY { get; set; }
        public System.DateTime? EDITDATE { get; set; }
        public System.String EDITBY { get; set; }
        public System.String ITM_PREPARE { get; set; }
        public System.Decimal? COREWEIGHT { get; set; }
        public System.Decimal? FULLWEIGHT { get; set; }
        public System.String ITM_GROUP { get; set; }
        public System.String YARNCODE { get; set; }
        public System.String WIDTHCODE { get; set; }
        public System.Decimal? WIDTHWEAVING { get; set; }
        public System.String LABFORM { get; set; }
        public System.String WEAVE_TYPE { get; set; }
    }

    #endregion

    #region GETINSTESTRECORDLIST Parameter

    public class GETINSTESTRECORDLISTParameter
    {
        public System.String P_TESTID { get; set; }
        public System.String P_INSLOT { get; set; }
    }

    #endregion

    #region GETINSTESTRECORDLIST Result

    public class GETINSTESTRECORDLISTResult
    {
        public System.String TESTRECORDID { get; set; }
        public System.Decimal? STDLENGTH { get; set; }
        public System.Decimal? ACTUALLENGTH { get; set; }
        public System.Decimal? DENSITYW { get; set; }
        public System.Decimal? DENSITYF { get; set; }
        public System.Decimal? WIDTHALL { get; set; }
        public System.Decimal? WIDTHPIN { get; set; }
        public System.Decimal? WIDTHCOAT { get; set; }
        public System.Decimal? TRIML { get; set; }
        public System.Decimal? TRIMR { get; set; }
        public System.String FLOPPYL { get; set; }
        public System.String FLOPPYR { get; set; }
        public System.Decimal? UNWINDERSET { get; set; }
        public System.Decimal? UNWINDERACTUAL { get; set; }
        public System.Decimal? WINDERSET { get; set; }
        public System.Decimal? WINDERACTUAL { get; set; }
        public System.String INSPECTIONLOT { get; set; }
        public System.DateTime? POPUPDATE { get; set; }
        public System.DateTime? SAVEDATE { get; set; }
        public System.String FLAG { get; set; }
        public System.String DELETEBY { get; set; }
        public System.String DELETEREMARK { get; set; }
        public System.Decimal? SELVAGEL { get; set; }
        public System.Decimal? SELVAGER { get; set; }
        public System.Decimal? HARDNESS_L { get; set; }
        public System.Decimal? HARDNESS_C { get; set; }
        public System.Decimal? HARDNESS_R { get; set; }
    }

    #endregion

    #region GETINSPECTIONREPORTDATA Parameter

    public class GETINSPECTIONREPORTDATAParameter
    {
        public System.String P_INS_LOT { get; set; }
    }

    #endregion

    #region GETINSPECTIONREPORTDATA Result

    public class GETINSPECTIONREPORTDATAResult
    {
        public System.String INSPECTIONLOT { get; set; }
        public System.String ITEMCODE { get; set; }
        public System.String FINISHINGLOT { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.Decimal? GROSSLENGTH { get; set; }
        public System.Decimal? NETLENGTH { get; set; }
        public System.String CUSTOMERID { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.String GRADE { get; set; }
        public System.Decimal? GROSSWEIGHT { get; set; }
        public System.Decimal? NETWEIGHT { get; set; }
        public System.String PEINSPECTIONLOT { get; set; }
        public System.String DEFECTID { get; set; }
        public System.String REMARK { get; set; }
        public System.String SHIFT_ID { get; set; }
        public System.String SHIFT_REMARK { get; set; }
        public System.String ATTACHID { get; set; }
        public System.String TESTRECORDID { get; set; }
        public System.String INSPECTEDBY { get; set; }
        public System.String MCNO { get; set; }
        public System.String FINISHFLAG { get; set; }
        public System.DateTime? SUSPENDDATE { get; set; }
        public System.String INSPECTIONID { get; set; }
        public System.String RETEST { get; set; }
        public System.String PREITEMCODE { get; set; }
        public System.String CLEARBY { get; set; }
        public System.String CLEARREMARK { get; set; }
        public System.String SUSPENDBY { get; set; }
        public System.DateTime? STARTDATE1 { get; set; }
        public System.String CUSTOMERTYPE { get; set; }
        public System.String DEFECTFILENAME { get; set; }
        public System.String PRODUCTNAME { get; set; }
        public System.String MCNAME { get; set; }
        public System.String CUSTOMERNAME { get; set; }
        public System.String BATCHNO { get; set; }
        public System.String CUSTOMERITEM { get; set; }
    }

    #endregion

    #region GETINSPECTIONLISTTESTBYITMCODE Parameter

    public class GETINSPECTIONLISTTESTBYITMCODEParameter
    {
        public System.String P_ITMCODE { get; set; }
    }

    #endregion

    #region GETINSPECTIONLISTTESTBYITMCODE Result

    public class GETINSPECTIONLISTTESTBYITMCODEResult
    {
        public System.String ITM_CODE { get; set; }
        public System.String DENSITY_W { get; set; }
        public System.String DENSITY_F { get; set; }
        public System.String WIDTH_ALL { get; set; }
        public System.String WIDTH_PIN { get; set; }
        public System.String WIDTH_COAT { get; set; }
        public System.String WIDTH_SelvageL { get; set; }
        public System.String WIDTH_SelvageR { get; set; }
        public System.String TRIM_L { get; set; }
        public System.String TRIM_R { get; set; }
        public System.String FLOPPY_L { get; set; }
        public System.String FLOPPY_R { get; set; }
        public System.String HARDNESS_L { get; set; }
        public System.String HARDNESS_C { get; set; }
        public System.String HARDNESS_R { get; set; }
        public System.String UNWINDER { get; set; }
        public System.String WINDER { get; set; }
    }

    #endregion

    #region GETINSPECTIONDATA Parameter

    public class GETINSPECTIONDATAParameter
    {
        public System.String P_INS_LOT { get; set; }
    }

    #endregion

    #region GETINSPECTIONDATA Result

    public class GETINSPECTIONDATAResult
    {
        public System.String INSPECTIONLOT { get; set; }
        public System.String ITEMCODE { get; set; }
        public System.String FINISHINGLOT { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.Decimal? GROSSLENGTH { get; set; }
        public System.Decimal? NETLENGTH { get; set; }
        public System.String CUSTOMERID { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.String GRADE { get; set; }
        public System.Decimal? GROSSWEIGHT { get; set; }
        public System.Decimal? NETWEIGHT { get; set; }
        public System.String PEINSPECTIONLOT { get; set; }
        public System.String DEFECTID { get; set; }
        public System.String REMARK { get; set; }
        public System.String ATTACHID { get; set; }
        public System.String TESTRECORDID { get; set; }
        public System.String INSPECTEDBY { get; set; }
        public System.String MCNO { get; set; }
        public System.String FINISHFLAG { get; set; }
        public System.DateTime? SUSPENDDATE { get; set; }
        public System.String INSPECTIONID { get; set; }
        public System.String RETEST { get; set; }
        public System.String PREITEMCODE { get; set; }
        public System.String CLEARBY { get; set; }
        public System.String CLEARREMARK { get; set; }
        public System.String SUSPENDBY { get; set; }
        public System.DateTime? STARTDATE1 { get; set; }
        public System.String CUSTOMERTYPE { get; set; }
        public System.String DEFECTFILENAME { get; set; }
        public System.String ISPACKED { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.String OPERATOR_GROUP { get; set; }
        public System.String DF_CODE { get; set; }
        public System.Decimal? DF_AMOUNT { get; set; }
        public System.Decimal? DF_POINT { get; set; }
    }

    #endregion

    #region GETINSDEFECTLIST Parameter

    public class GETINSDEFECTLISTParameter
    {
        public System.String P_DEFECTID { get; set; }
        public System.String P_INSLOT { get; set; }
    }

    #endregion

    #region GETINSDEFECTLIST Result

    public class GETINSDEFECTLISTResult
    {
        public System.String DEFECTID { get; set; }
        public System.String INSPECTIONLOT { get; set; }
        public System.String DEFECTCODE { get; set; }
        public System.Decimal? LENGTH1 { get; set; }
        public System.Decimal? POSITION { get; set; }
        public System.String FLAG { get; set; }
        public System.Decimal? DEFECTPOINT { get; set; }
        public System.Decimal? LENGTH2 { get; set; }
        public System.String DELETEBY { get; set; }
        public System.String DELETEREMARK { get; set; }
        public System.Decimal? COMPENSATELENGTH { get; set; }
        public System.Decimal? DEFECTPOINT100 { get; set; }
        public System.String DESCRIPTION_EN { get; set; }
    }

    #endregion

    #region GETGRADE Parameter

    public class GETGRADEParameter
    {
        public System.String P_ITEM_CODE { get; set; }
        public System.String P_CUSID { get; set; }
        public System.Decimal? P_LENGTH { get; set; }
        public System.String P_INSLOT { get; set; }
    }

    #endregion

    #region GETGRADE Result

    public class GETGRADEResult
    {
        public System.String R_GRADE { get; set; }
    }

    #endregion

    #region GETFINISHINGDATA Parameter

    public class GETFINISHINGDATAParameter
    {
        public System.String P_FINISHINGLOT { get; set; }
    }

    #endregion

    #region GETFINISHINGDATA Result

    public class GETFINISHINGDATAResult
    {
        public System.String ITEMLOT { get; set; }
        public System.String ITEMCODE { get; set; }
        public System.String PARTNO { get; set; }
        public System.Decimal? FINISHLENGTH { get; set; }
        public System.String CUSTOMERID { get; set; }
        public System.String FINISHLOT { get; set; }
        public System.String FINISHINGPROCESS { get; set; }
        public System.String REPROCESS { get; set; }
        public System.String SND_BARCODE { get; set; }
        public System.String ITM_WEAVING { get; set; }
    }

    #endregion

    #region GETDEFECTCODEDETAIL Parameter

    public class GETDEFECTCODEDETAILParameter
    {
        public System.String P_DEFECTID { get; set; }
    }

    #endregion

    #region GETDEFECTCODEDETAIL Result

    public class GETDEFECTCODEDETAILResult
    {
        public System.String DEFECTCODE { get; set; }
        public System.String DESCRIPTION_TH { get; set; }
        public System.String DESCRIPTION_EN { get; set; }
        public System.String PROCESSID { get; set; }
        public System.String DEFECTPROCESSCODE { get; set; }
        public System.Decimal? POINT { get; set; }
    }

    #endregion

    #region GETCURRENTINSDATA Parameter

    public class GETCURRENTINSDATAParameter
    {
        public System.String P_FINISHINGLOT { get; set; }
    }

    #endregion

    #region GETCURRENTINSDATA Result

    public class GETCURRENTINSDATAResult
    {
        public System.Decimal? ACTUALLENGTH { get; set; }
        public System.Decimal? TOTALINS { get; set; }
    }

    #endregion

    #region GETCOUNTDEFECT100M Parameter

    public class GETCOUNTDEFECT100MParameter
    {
        public System.String P_DEFECTID { get; set; }
        public System.String P_INSPECTIONLOT { get; set; }
        public System.Decimal? STARTLENGTH { get; set; }
        public System.Decimal? ENDLENGTH { get; set; }
    }

    #endregion

    #region GETCOUNTDEFECT100M Result

    public class GETCOUNTDEFECT100MResult
    {
        public System.Decimal? TOTAL { get; set; }
    }

    #endregion

    #region GETAUTHORIZEBYPROCESSID Parameter

    public class GETAUTHORIZEBYPROCESSIDParameter
    {
        public System.String P_PROCESSID { get; set; }
        public System.String P_USER { get; set; }
        public System.String P_PASS { get; set; }
    }

    #endregion

    #region GETAUTHORIZEBYPROCESSID Result

    public class GETAUTHORIZEBYPROCESSIDResult
    {
        public System.String R_OUT { get; set; }
    }

    #endregion

    #region G3_UPDATEYARN Parameter

    public class G3_UPDATEYARNParameter
    {
        public System.String P_PATTETNO { get; set; }
        public System.String P_LOTORDERNO { get; set; }
        public System.String P_VERIFY { get; set; }
        public System.Decimal? P_REMAINQTY { get; set; }
        public System.String P_FLAG { get; set; }
        public System.String P_OPERATORID { get; set; }
        public System.DateTime? P_RECEIVEDATE { get; set; }
        public System.DateTime? P_UPDATEDATE { get; set; }
        public System.String P_TYPE { get; set; }
        public System.String P_PACKAGING { get; set; }
        public System.String P_CLEAN { get; set; }
        public System.String P_TEARING { get; set; }
        public System.String P_FALLDOWN { get; set; }
        public System.String P_CERTIFICATION { get; set; }
        public System.String P_INVOICE { get; set; }
        public System.String P_IDENTIFYAREA { get; set; }
        public System.String P_AMOUNTPALLET { get; set; }
        public System.String P_OTHER { get; set; }
        public System.String P_ACTION { get; set; }
    }

    #endregion

    #region G3_UPDATEYARN Result

    public class G3_UPDATEYARNResult
    {
    }

    #endregion

    #region G3_SEARCHYARNSTOCK Parameter

    public class G3_SEARCHYARNSTOCKParameter
    {
        public System.String P_ITMYARN { get; set; }
        public System.String P_RECDATE { get; set; }
        public System.String P_YARNTYPE { get; set; }
    }

    #endregion

    #region G3_SEARCHYARNSTOCK Result

    public class G3_SEARCHYARNSTOCKResult
    {
        public System.DateTime? ENTRYDATE { get; set; }
        public System.String ITM_YARN { get; set; }
        public System.String PALLETNO { get; set; }
        public System.String YARNTYPE { get; set; }
        public System.Decimal? WEIGHTQTY { get; set; }
        public System.Decimal? CONECH { get; set; }
        public System.String VERIFY { get; set; }
        public System.Decimal? REMAINQTY { get; set; }
        public System.String RECEIVEBY { get; set; }
        public System.DateTime? RECEIVEDATE { get; set; }
        public System.String FINISHFLAG { get; set; }
        public System.DateTime? UPDATEDATE { get; set; }
        public System.String PALLETTYPE { get; set; }
        public System.String ITM400 { get; set; }
        public System.String UM { get; set; }
        public System.String PACKAING { get; set; }
        public System.String CLEAN { get; set; }
        public System.String TEARING { get; set; }
        public System.String FALLDOWN { get; set; }
        public System.String CERTIFICATION { get; set; }
        public System.String INVOICE { get; set; }
        public System.String IDENTIFYAREA { get; set; }
        public System.String AMOUNTPALLET { get; set; }
        public System.String OTHER { get; set; }
        public System.String ACTION { get; set; }
        public System.DateTime? MOVEMENTDATE { get; set; }
        public System.String LOTNO { get; set; }
        public System.String TRACENO { get; set; }
        public System.Decimal? KGPERCH { get; set; }
    }

    #endregion

    #region G3_SEARCHBYPALLETNO Parameter

    public class G3_SEARCHBYPALLETNOParameter
    {
        public System.String P_PALLETNO { get; set; }
    }

    #endregion

    #region G3_SEARCHBYPALLETNO Result

    public class G3_SEARCHBYPALLETNOResult
    {
        public System.DateTime? ENTRYDATE { get; set; }
        public System.String ITM_YARN { get; set; }
        public System.String PALLETNO { get; set; }
        public System.String YARNTYPE { get; set; }
        public System.Decimal? WEIGHTQTY { get; set; }
        public System.Decimal? CONECH { get; set; }
        public System.String VERIFY { get; set; }
        public System.Decimal? REMAINQTY { get; set; }
        public System.String RECEIVEBY { get; set; }
        public System.DateTime? RECEIVEDATE { get; set; }
        public System.String FINISHFLAG { get; set; }
        public System.DateTime? UPDATEDATE { get; set; }
        public System.String PALLETTYPE { get; set; }
        public System.String ITM400 { get; set; }
        public System.String UM { get; set; }
        public System.String PACKAING { get; set; }
        public System.String CLEAN { get; set; }
        public System.String TEARING { get; set; }
        public System.String FALLDOWN { get; set; }
        public System.String CERTIFICATION { get; set; }
        public System.String INVOICE { get; set; }
        public System.String IDENTIFYAREA { get; set; }
        public System.String AMOUNTPALLET { get; set; }
        public System.String OTHER { get; set; }
        public System.String ACTION { get; set; }
        public System.DateTime? MOVEMENTDATE { get; set; }
        public System.String LOTNO { get; set; }
        public System.String TRACENO { get; set; }
        public System.Decimal? KGPERCH { get; set; }
    }

    #endregion

    #region G3_RECEIVEYARN Parameter

    public class G3_RECEIVEYARNParameter
    {
        public System.String P_TRACENO { get; set; }
        public System.String P_LOTNO { get; set; }
        public System.String P_VERIFY { get; set; }
        public System.Decimal? P_REMAINQTY { get; set; }
        public System.String P_FLAG { get; set; }
        public System.String P_OPERATORID { get; set; }
        public System.DateTime? P_RECEIVEDATE { get; set; }
        public System.DateTime? P_UPDATEDATE { get; set; }
        public System.String P_TYPE { get; set; }
        public System.String P_PACKAGING { get; set; }
        public System.String P_CLEAN { get; set; }
        public System.String P_TEARING { get; set; }
        public System.String P_FALLDOWN { get; set; }
        public System.String P_CERTIFICATION { get; set; }
        public System.String P_INVOICE { get; set; }
        public System.String P_IDENTIFYAREA { get; set; }
        public System.String P_AMOUNTPALLET { get; set; }
        public System.String P_OTHER { get; set; }
        public System.String P_ACTION { get; set; }
    }

    #endregion

    #region G3_RECEIVEYARN Result

    public class G3_RECEIVEYARNResult
    {
    }

    #endregion

    #region G3_INSERTYARN Parameter

    public class G3_INSERTYARNParameter
    {
        public System.String P_TRUCKNO { get; set; }
        public System.String P_DESC { get; set; }
        public System.String P_PATTETNO { get; set; }
        public System.Decimal? P_CH { get; set; }
        public System.Decimal? P_WEIGHT { get; set; }
        public System.String P_LOTORDERNO { get; set; }
        public System.String P_ITMORDER { get; set; }
        public System.String P_RECEIVEDATE { get; set; }
        public System.String P_UM { get; set; }
        public System.String P_ITMYARN { get; set; }
        public System.String P_TYPE { get; set; }
    }

    #endregion

    #region G3_INSERTYARN Result

    public class G3_INSERTYARNResult
    {
    }

    #endregion

    #region G3_INSERTUPDATEISSUEYARN Parameter

    public class G3_INSERTUPDATEISSUEYARNParameter
    {
        public System.String P_REQUESTNO { get; set; }
        public System.String P_PATTETNO { get; set; }
        public System.String P_TRACENO { get; set; }
        public System.Decimal? P_CH { get; set; }
        public System.Decimal? P_WEIGHT { get; set; }
        public System.DateTime? P_ISSUEDATE { get; set; }
        public System.String P_OPERATOR { get; set; }
        public System.String P_PALLETTYPE { get; set; }
        public System.String P_ISSUETO { get; set; }
    }

    #endregion

    #region G3_INSERTUPDATEISSUEYARN Result

    public class G3_INSERTUPDATEISSUEYARNResult
    {
    }

    #endregion

    #region G3_INSERTRETURNYARN Parameter

    public class G3_INSERTRETURNYARNParameter
    {
        public System.String P_TRACENO { get; set; }
        public System.String P_NEWTRACENO { get; set; }
        public System.Decimal? P_CH { get; set; }
        public System.Decimal? P_WEIGHT { get; set; }
        public System.DateTime? P_RECEIVEDATE { get; set; }
        public System.String P_OPERATOR { get; set; }
        public System.String P_ITEMYARN { get; set; }
        public System.String P_YARNTYPE { get; set; }
        public System.String P_RETURNBY { get; set; }
    }

    #endregion

    #region G3_INSERTRETURNYARN Result

    public class G3_INSERTRETURNYARNResult
    {
    }

    #endregion

    #region G3_GOLABEL Parameter

    public class G3_GOLABELParameter
    {
        public System.String P_PALLETNO { get; set; }
    }

    #endregion

    #region G3_GOLABEL Result

    public class G3_GOLABELResult
    {
        public System.DateTime? ENTRYDATE { get; set; }
        public System.String ITM_YARN { get; set; }
        public System.String PALLETNO { get; set; }
        public System.String YARNTYPE { get; set; }
        public System.Decimal? WEIGHTQTY { get; set; }
        public System.Decimal? CONECH { get; set; }
        public System.String VERIFY { get; set; }
        public System.Decimal? REMAINQTY { get; set; }
        public System.String RECEIVEBY { get; set; }
        public System.DateTime? RECEIVEDATE { get; set; }
        public System.String FINISHFLAG { get; set; }
        public System.DateTime? UPDATEDATE { get; set; }
        public System.String PALLETTYPE { get; set; }
        public System.String ITM400 { get; set; }
        public System.String UM { get; set; }
        public System.String PACKAING { get; set; }
        public System.String CLEAN { get; set; }
        public System.String TEARING { get; set; }
        public System.String FALLDOWN { get; set; }
        public System.String CERTIFICATION { get; set; }
        public System.String INVOICE { get; set; }
        public System.String IDENTIFYAREA { get; set; }
        public System.String AMOUNTPALLET { get; set; }
        public System.String OTHER { get; set; }
        public System.String ACTION { get; set; }
        public System.DateTime? MOVEMENTDATE { get; set; }
        public System.String LOTNO { get; set; }
        public System.String TRACENO { get; set; }
        public System.Decimal? KGPERCH { get; set; }
    }

    #endregion

    #region G3_GETREQUESTNODETAIL Parameter

    public class G3_GETREQUESTNODETAILParameter
    {
        public System.String P_REQUESTNO { get; set; }
    }

    #endregion

    #region G3_GETREQUESTNODETAIL Result

    public class G3_GETREQUESTNODETAILResult
    {
        public System.DateTime? ISSUEDATE { get; set; }
        public System.String PALLETNO { get; set; }
        public System.String TRACENO { get; set; }
        public System.Decimal? WEIGHT { get; set; }
        public System.Decimal? CH { get; set; }
        public System.String ISSUEBY { get; set; }
        public System.String ISSUETO { get; set; }
        public System.String REQUESTNO { get; set; }
        public System.String PALLETTYPE { get; set; }
        public System.String DELETEFLAG { get; set; }
        public System.DateTime? EDITDATE { get; set; }
        public System.String EDITBY { get; set; }
        public System.String REMARK { get; set; }
        public System.String ITM_YARN { get; set; }
        public System.String LOTNO { get; set; }
        public System.String YARNTYPE { get; set; }
        public System.String ITM400 { get; set; }
        public System.DateTime? ENTRYDATE { get; set; }
        public System.String PACKAING { get; set; }
        public System.String CLEAN { get; set; }
        public System.String FALLDOWN { get; set; }
        public System.String TEARING { get; set; }
    }

    #endregion

    #region G3_GETPALLETDETAIL Parameter

    public class G3_GETPALLETDETAILParameter
    {
        public System.String P_PALLETNO { get; set; }
    }

    #endregion

    #region G3_GETPALLETDETAIL Result

    public class G3_GETPALLETDETAILResult
    {
        public System.DateTime? ENTRYDATE { get; set; }
        public System.String ITM_YARN { get; set; }
        public System.String PALLETNO { get; set; }
        public System.String YARNTYPE { get; set; }
        public System.Decimal? WEIGHTQTY { get; set; }
        public System.Decimal? CONECH { get; set; }
        public System.String VERIFY { get; set; }
        public System.Decimal? REMAINQTY { get; set; }
        public System.String RECEIVEBY { get; set; }
        public System.DateTime? RECEIVEDATE { get; set; }
        public System.String FINISHFLAG { get; set; }
        public System.DateTime? UPDATEDATE { get; set; }
        public System.String PALLETTYPE { get; set; }
        public System.String ITM400 { get; set; }
        public System.String UM { get; set; }
        public System.String PACKAING { get; set; }
        public System.String CLEAN { get; set; }
        public System.String TEARING { get; set; }
        public System.String FALLDOWN { get; set; }
        public System.String CERTIFICATION { get; set; }
        public System.String INVOICE { get; set; }
        public System.String IDENTIFYAREA { get; set; }
        public System.String AMOUNTPALLET { get; set; }
        public System.String OTHER { get; set; }
        public System.String ACTION { get; set; }
        public System.DateTime? MOVEMENTDATE { get; set; }
        public System.String LOTNO { get; set; }
        public System.String TRACENO { get; set; }
        public System.Decimal? KGPERCH { get; set; }
    }

    #endregion

    #region G3_GETDATAD365 Parameter

    public class G3_GETDATAD365Parameter
    {
        public System.DateTime? DTTRA { get; set; }
        public System.DateTime? DTINP { get; set; }
        public System.String CDCON { get; set; }
        public System.Decimal? BLELE { get; set; }
        public System.String CDUM0 { get; set; }
        public System.String CDKE1 { get; set; }
        public System.String CDKE2 { get; set; }
        public System.String CDLOT { get; set; }
        public System.String CDQUA { get; set; }
        public System.Decimal? TECU1 { get; set; }
        public System.Decimal? TECU2 { get; set; }
        public System.Decimal? TECU3 { get; set; }
        public System.Decimal? TECU4 { get; set; }
        public System.Decimal? TECU5 { get; set; }
        public System.String TECU6 { get; set; }
    }

    #endregion

    #region G3_GETDATAD365 Result

    public class G3_GETDATAD365Result
    {
        public System.String R_RESULT { get; set; }
    }

    #endregion


    #region G3_GETDATAAS400 Parameter

    public class G3_GETDATAAS400Parameter
    {
        public System.DateTime? DTTRA { get; set; }
        public System.DateTime? DTINP { get; set; }
        public System.String CDCON { get; set; }
        public System.Decimal? BLELE { get; set; }
        public System.String CDUM0 { get; set; }
        public System.String CDKE1 { get; set; }
        public System.String CDLOT { get; set; }
        public System.String CDQUA { get; set; }
        public System.Decimal? TECU1 { get; set; }
        public System.Decimal? TECU2 { get; set; }
        public System.Decimal? TECU3 { get; set; }
        public System.Decimal? TECU4 { get; set; }
        public System.Decimal? TECU5 { get; set; }
        public System.String TECU6 { get; set; }
    }

    #endregion

    #region G3_GETDATAAS400 Result

    public class G3_GETDATAAS400Result
    {
        public System.String R_RESULT { get; set; }
    }

    #endregion

    #region G3_CANCELREQUESTNO Parameter

    public class G3_CANCELREQUESTNOParameter
    {
        public System.String P_REQUESTNO { get; set; }
        public System.String P_OPERATOR { get; set; }
    }

    #endregion

    #region G3_CANCELREQUESTNO Result

    public class G3_CANCELREQUESTNOResult
    {
    }

    #endregion

    #region G3_Delete Result

    public class G3_DeleteResult
    {
    }

    #endregion

    #region G3_Delete Parameter

    public class G3_DeleteParameter
    {
        public System.String PALLETNO { get; set; }
        public System.String TRACENO { get; set; }
        public System.String ITM_YARN { get; set; }
        public System.String LOTNO { get; set; }

    }

    #endregion

    #region FINISHING_UPDATESCOURINGDATA Parameter

    public class FINISHING_UPDATESCOURINGDATAParameter
    {
        public System.String P_FINISHLOT { get; set; }
        public System.String P_FLAG { get; set; }
        public System.Decimal? P_SAT { get; set; }
        public System.Decimal? P_SAT_MIN { get; set; }
        public System.Decimal? P_SAT_MAX { get; set; }
        public System.Decimal? P_WASHING1 { get; set; }
        public System.Decimal? P_WASHING1_MIN { get; set; }
        public System.Decimal? P_WASHING1_MAX { get; set; }
        public System.Decimal? P_WASHING2 { get; set; }
        public System.Decimal? P_WASHING2_MIN { get; set; }
        public System.Decimal? P_WASHING2_MAX { get; set; }
        public System.Decimal? P_HOTFLUE { get; set; }
        public System.Decimal? P_HOTFLUE_MIN { get; set; }
        public System.Decimal? P_HOTFLUE_MAX { get; set; }
        public System.Decimal? P_TEMP1 { get; set; }
        public System.Decimal? P_TEMP1_MIN { get; set; }
        public System.Decimal? P_TEMP1_MAX { get; set; }
        public System.Decimal? P_TEMP2 { get; set; }
        public System.Decimal? P_TEMP2_MIN { get; set; }
        public System.Decimal? P_TEMP2_MAX { get; set; }
        public System.Decimal? P_TEMP3 { get; set; }
        public System.Decimal? P_TEMP3_MIN { get; set; }
        public System.Decimal? P_TEMP3_MAX { get; set; }
        public System.Decimal? P_TEMP4 { get; set; }
        public System.Decimal? P_TEMP4_MIN { get; set; }
        public System.Decimal? P_TEMP4_MAX { get; set; }
        public System.Decimal? P_TEMP5 { get; set; }
        public System.Decimal? P_TEMP5_MIN { get; set; }
        public System.Decimal? P_TEMP5_MAX { get; set; }
        public System.Decimal? P_TEMP6 { get; set; }
        public System.Decimal? P_TEMP6_MIN { get; set; }
        public System.Decimal? P_TEMP6_MAX { get; set; }
        public System.Decimal? P_TEMP7 { get; set; }
        public System.Decimal? P_TEMP7_MIN { get; set; }
        public System.Decimal? P_TEMP7_MAX { get; set; }
        public System.Decimal? P_TEMP8 { get; set; }
        public System.Decimal? P_TEMP8_MIN { get; set; }
        public System.Decimal? P_TEMP8_MAX { get; set; }
        public System.Decimal? P_SPEED { get; set; }
        public System.Decimal? P_SPEED_MIN { get; set; }
        public System.Decimal? P_SPEED_MAX { get; set; }
        public System.Decimal? P_MAINFRAMEWIDTH { get; set; }
        public System.Decimal? P_WIDTH_BE { get; set; }
        public System.Decimal? P_WIDTH_AF { get; set; }
        public System.Decimal? P_PIN2PIN { get; set; }
        public System.String P_FINISHBY { get; set; }
        public System.DateTime? P_ENDDATE { get; set; }
        public System.Decimal? P_LENGTH1 { get; set; }
        public System.Decimal? P_LENGTH2 { get; set; }
        public System.Decimal? P_LENGTH3 { get; set; }
        public System.Decimal? P_LENGTH4 { get; set; }
        public System.Decimal? P_LENGTH5 { get; set; }
        public System.Decimal? P_LENGTH6 { get; set; }
        public System.Decimal? P_LENGTH7 { get; set; }
        public System.String P_ITMCODE { get; set; }
        public System.String P_WEAVINGLOT { get; set; }
        public System.String P_CUSTOMER { get; set; }
        public System.DateTime? P_STARTDATE { get; set; }
        public System.String P_REMARK { get; set; }
        public System.Decimal? P_HUMID_BF { get; set; }
        public System.Decimal? P_HUMID_AF { get; set; }
        public System.String P_GROUP { get; set; }
    }

    #endregion

    #region FINISHING_UPDATESCOURINGDATA Result

    public class FINISHING_UPDATESCOURINGDATAResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region FINISHING_UPDATESCOURING Parameter

    public class FINISHING_UPDATESCOURINGParameter
    {
        public System.String P_FINISHLOT { get; set; }
        public System.String P_FLAG { get; set; }
        public System.Decimal? P_SATURATOR_PV { get; set; }
        public System.Decimal? P_SATURATOR_SP { get; set; }
        public System.Decimal? P_WASHING1_PV { get; set; }
        public System.Decimal? P_WASHING1_SP { get; set; }
        public System.Decimal? P_WASHING2_PV { get; set; }
        public System.Decimal? P_WASHING2_SP { get; set; }
        public System.Decimal? P_HOTFLUE_PV { get; set; }
        public System.Decimal? P_HOTFLUE_SP { get; set; }
        public System.Decimal? P_TEMP1_PV { get; set; }
        public System.Decimal? P_TEMP1_SP { get; set; }
        public System.Decimal? P_TEMP2_PV { get; set; }
        public System.Decimal? P_TEMP2_SP { get; set; }
        public System.Decimal? P_TEMP3_PV { get; set; }
        public System.Decimal? P_TEMP3_SP { get; set; }
        public System.Decimal? P_TEMP4_PV { get; set; }
        public System.Decimal? P_TEMP4_SP { get; set; }
        public System.Decimal? P_TEMP5_PV { get; set; }
        public System.Decimal? P_TEMP5_SP { get; set; }
        public System.Decimal? P_TEMP6_PV { get; set; }
        public System.Decimal? P_TEMP6_SP { get; set; }
        public System.Decimal? P_TEMP7_PV { get; set; }
        public System.Decimal? P_TEMP7_SP { get; set; }
        public System.Decimal? P_TEMP8_PV { get; set; }
        public System.Decimal? P_TEMP8_SP { get; set; }
        public System.Decimal? P_TEMP9_PV { get; set; }
        public System.Decimal? P_TEMP9_SP { get; set; }
        public System.Decimal? P_TEMP10_PV { get; set; }
        public System.Decimal? P_TEMP10_SP { get; set; }
        public System.Decimal? P_SPEED_PV { get; set; }
        public System.Decimal? P_SPEED_SP { get; set; }
        public System.Decimal? P_MAINFRAMEWIDTH { get; set; }
        public System.Decimal? P_WIDTH_BE { get; set; }
        public System.Decimal? P_WIDTH_AF { get; set; }
        public System.Decimal? P_PIN2PIN { get; set; }
        public System.String P_CONDITIONBY { get; set; }
        public System.String P_FINISHBY { get; set; }
        public System.DateTime? P_ENDDATE { get; set; }
        public System.DateTime? P_CONDITONDATE { get; set; }
        public System.Decimal? P_LENGTH1 { get; set; }
        public System.Decimal? P_LENGTH2 { get; set; }
        public System.Decimal? P_LENGTH3 { get; set; }
        public System.Decimal? P_LENGTH4 { get; set; }
        public System.Decimal? P_LENGTH5 { get; set; }
        public System.Decimal? P_LENGTH6 { get; set; }
        public System.Decimal? P_LENGTH7 { get; set; }
        public System.String P_ITMCODE { get; set; }
        public System.String P_WEAVINGLOT { get; set; }
        public System.String P_CUSTOMER { get; set; }
        public System.DateTime? P_STARTDATE { get; set; }
        public System.String P_REMARK { get; set; }
        public System.Decimal? P_HUMID_BF { get; set; }
        public System.Decimal? P_HUMID_AF { get; set; }
        public System.String P_GROUP { get; set; }
    }

    #endregion

    #region FINISHING_UPDATESCOURING Result

    public class FINISHING_UPDATESCOURINGResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region FINISHING_UPDATEDRYERDATA Parameter

    public class FINISHING_UPDATEDRYERDATAParameter
    {
        public System.String P_FINISHLOT { get; set; }
        public System.String P_FLAG { get; set; }
        public System.Decimal? P_HOTFLUE { get; set; }
        public System.Decimal? P_HOTFLUE_MIN { get; set; }
        public System.Decimal? P_HOTFLUE_MAX { get; set; }
        public System.Decimal? P_SPEED { get; set; }
        public System.Decimal? P_SPEED_MIN { get; set; }
        public System.Decimal? P_SPEED_MAX { get; set; }
        public System.Decimal? P_WIDTHBEHEAT { get; set; }
        public System.Decimal? P_ACCPRESURE { get; set; }
        public System.Decimal? P_ASSTENSION { get; set; }
        public System.Decimal? P_ACCARIDENSER { get; set; }
        public System.Decimal? P_CHIFROT { get; set; }
        public System.Decimal? P_CHIREAR { get; set; }
        public System.Decimal? P_STEAMPRESURE { get; set; }
        public System.Decimal? P_DRYCIRCUFAN { get; set; }
        public System.Decimal? P_EXHAUSTFAN { get; set; }
        public System.Decimal? P_WIDTHAFHEAT { get; set; }
        public System.String P_CONDITIONBY { get; set; }
        public System.String P_FINISHBY { get; set; }
        public System.DateTime? P_ENDDATE { get; set; }
        public System.DateTime? P_CONDITONDATE { get; set; }
        public System.Decimal? P_LENGTH1 { get; set; }
        public System.Decimal? P_LENGTH2 { get; set; }
        public System.Decimal? P_LENGTH3 { get; set; }
        public System.Decimal? P_LENGTH4 { get; set; }
        public System.Decimal? P_LENGTH5 { get; set; }
        public System.Decimal? P_LENGTH6 { get; set; }
        public System.Decimal? P_LENGTH7 { get; set; }
        public System.String P_ITMCODE { get; set; }
        public System.String P_WEAVINGLOT { get; set; }
        public System.String P_CUSTOMER { get; set; }
        public System.DateTime? P_STARTDATE { get; set; }
        public System.String P_REMARK { get; set; }
        public System.Decimal? P_HUMID_BF { get; set; }
        public System.Decimal? P_HUMID_AF { get; set; }
        public System.String P_GROUP { get; set; }
    }

    #endregion

    #region FINISHING_UPDATEDRYERDATA Result

    public class FINISHING_UPDATEDRYERDATAResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region FINISHING_UPDATEDRYER Parameter

    public class FINISHING_UPDATEDRYERParameter
    {
        public System.String P_FINISHLOT { get; set; }
        public System.String P_FLAG { get; set; }
        public System.Decimal? P_HOTFLUE_PV { get; set; }
        public System.Decimal? P_HOTFLUE_SP { get; set; }
        public System.Decimal? P_SPEED_PV { get; set; }
        public System.Decimal? P_SPEED_SP { get; set; }
        public System.Decimal? P_WIDTHBEHEAT { get; set; }
        public System.Decimal? P_ACCPRESURE { get; set; }
        public System.Decimal? P_ASSTENSION { get; set; }
        public System.Decimal? P_ACCARIDENSER { get; set; }
        public System.Decimal? P_CHIFROT { get; set; }
        public System.Decimal? P_CHIREAR { get; set; }
        public System.Decimal? P_STEAMPRESURE { get; set; }
        public System.Decimal? P_DRYCIRCUFAN { get; set; }
        public System.Decimal? P_EXHAUSTFAN { get; set; }
        public System.Decimal? P_WIDTHAFHEAT { get; set; }
        public System.String P_CONDITIONBY { get; set; }
        public System.String P_FINISHBY { get; set; }
        public System.DateTime? P_ENDDATE { get; set; }
        public System.DateTime? P_CONDITONDATE { get; set; }
        public System.Decimal? P_LENGTH1 { get; set; }
        public System.Decimal? P_LENGTH2 { get; set; }
        public System.Decimal? P_LENGTH3 { get; set; }
        public System.Decimal? P_LENGTH4 { get; set; }
        public System.Decimal? P_LENGTH5 { get; set; }
        public System.Decimal? P_LENGTH6 { get; set; }
        public System.Decimal? P_LENGTH7 { get; set; }
        public System.String P_ITMCODE { get; set; }
        public System.String P_WEAVINGLOT { get; set; }
        public System.String P_CUSTOMER { get; set; }
        public System.DateTime? P_STARTDATE { get; set; }
        public System.String P_REMARK { get; set; }
        public System.Decimal? P_HUMID_BF { get; set; }
        public System.Decimal? P_HUMID_AF { get; set; }
        public System.String P_GROUP { get; set; }
        public System.Decimal? P_SATURATOR_PV { get; set; }
        public System.Decimal? P_SATURATOR_SP { get; set; }
        public System.Decimal? P_WASHING1_PV { get; set; }
        public System.Decimal? P_WASHING1_SP { get; set; }
        public System.Decimal? P_WASHING2_PV { get; set; }
        public System.Decimal? P_WASHING2_SP { get; set; }
    }

    #endregion

    #region FINISHING_UPDATEDRYER Result

    public class FINISHING_UPDATEDRYERResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region FINISHING_UPDATECOATINGDATA Parameter

    public class FINISHING_UPDATECOATINGDATAParameter
    {
        public System.String P_FINISHLOT { get; set; }
        public System.String P_FLAG { get; set; }
        public System.Decimal? P_SAT { get; set; }
        public System.Decimal? P_SAT_MIN { get; set; }
        public System.Decimal? P_SAT_MAX { get; set; }
        public System.Decimal? P_WASHING1 { get; set; }
        public System.Decimal? P_WASHING1_MIN { get; set; }
        public System.Decimal? P_WASHING1_MAX { get; set; }
        public System.Decimal? P_WASHING2 { get; set; }
        public System.Decimal? P_WASHING2_MIN { get; set; }
        public System.Decimal? P_WASHING2_MAX { get; set; }
        public System.Decimal? P_HOTFLUE { get; set; }
        public System.Decimal? P_HOTFLUE_MIN { get; set; }
        public System.Decimal? P_HOTFLUE_MAX { get; set; }
        public System.Decimal? P_TEMP1 { get; set; }
        public System.Decimal? P_TEMP1_MIN { get; set; }
        public System.Decimal? P_TEMP1_MAX { get; set; }
        public System.Decimal? P_TEMP2 { get; set; }
        public System.Decimal? P_TEMP2_MIN { get; set; }
        public System.Decimal? P_TEMP2_MAX { get; set; }
        public System.Decimal? P_TEMP3 { get; set; }
        public System.Decimal? P_TEMP3_MIN { get; set; }
        public System.Decimal? P_TEMP3_MAX { get; set; }
        public System.Decimal? P_TEMP4 { get; set; }
        public System.Decimal? P_TEMP4_MIN { get; set; }
        public System.Decimal? P_TEMP4_MAX { get; set; }
        public System.Decimal? P_TEMP5 { get; set; }
        public System.Decimal? P_TEMP5_MIN { get; set; }
        public System.Decimal? P_TEMP5_MAX { get; set; }
        public System.Decimal? P_TEMP6 { get; set; }
        public System.Decimal? P_TEMP6_MIN { get; set; }
        public System.Decimal? P_TEMP6_MAX { get; set; }
        public System.Decimal? P_TEMP7 { get; set; }
        public System.Decimal? P_TEMP7_MIN { get; set; }
        public System.Decimal? P_TEMP7_MAX { get; set; }
        public System.Decimal? P_TEMP8 { get; set; }
        public System.Decimal? P_TEMP8_MIN { get; set; }
        public System.Decimal? P_TEMP8_MAX { get; set; }
        public System.Decimal? P_TEMP9 { get; set; }
        public System.Decimal? P_TEMP9_MIN { get; set; }
        public System.Decimal? P_TEMP9_MAX { get; set; }
        public System.Decimal? P_TEMP10 { get; set; }
        public System.Decimal? P_TEMP10_MIN { get; set; }
        public System.Decimal? P_TEMP10_MAX { get; set; }
        public System.Decimal? P_SPEED { get; set; }
        public System.Decimal? P_SPEED_MIN { get; set; }
        public System.Decimal? P_SPEED_MAX { get; set; }
        public System.Decimal? P_TENSIONUP { get; set; }
        public System.Decimal? P_TENSIONUP_MIN { get; set; }
        public System.Decimal? P_TENSIONUP_MAX { get; set; }
        public System.Decimal? P_TENSIONDOWN { get; set; }
        public System.Decimal? P_TENSIONDOWN_MIN { get; set; }
        public System.Decimal? P_TENSIONDOWN_MAX { get; set; }
        public System.Decimal? P_LENGTH1 { get; set; }
        public System.Decimal? P_LENGTH2 { get; set; }
        public System.Decimal? P_LENGTH3 { get; set; }
        public System.Decimal? P_LENGTH4 { get; set; }
        public System.Decimal? P_LENGTH5 { get; set; }
        public System.Decimal? P_LENGTH6 { get; set; }
        public System.Decimal? P_LENGTH7 { get; set; }
        public System.String P_ITMCODE { get; set; }
        public System.String P_WEAVINGLOT { get; set; }
        public System.String P_CUSTOMER { get; set; }
        public System.DateTime? P_STARTDATE { get; set; }
        public System.Decimal? P_BECOATWIDTH { get; set; }
        public System.Decimal? P_FANRPM { get; set; }
        public System.Decimal? P_EXFAN_FRONT_BACK { get; set; }
        public System.Decimal? P_EXFAN_MIDDLE { get; set; }
        public System.Decimal? P_ANGLEKNIFE { get; set; }
        public System.String P_BLADENO { get; set; }
        public System.String P_BLADEDIRECTION { get; set; }
        public System.Decimal? P_FORN { get; set; }
        public System.Decimal? P_TENTER { get; set; }
        public System.Decimal? P_PATHLINE { get; set; }
        public System.Decimal? P_FEEDIN { get; set; }
        public System.Decimal? P_OVERFEED { get; set; }
        public System.Decimal? P_WIDTHCOAT { get; set; }
        public System.Decimal? P_WIDTHCOATALL { get; set; }
        public System.String P_SILICONEA { get; set; }
        public System.String P_SILICONEB { get; set; }
        public System.Decimal? P_CWL { get; set; }
        public System.Decimal? P_CWC { get; set; }
        public System.Decimal? P_CWR { get; set; }
        public System.String P_CONDITIONBY { get; set; }
        public System.String P_FINISHBY { get; set; }
        public System.DateTime? P_ENDDATE { get; set; }
        public System.DateTime? P_CONDITONDATE { get; set; }
        public System.String P_REMARK { get; set; }
        public System.Decimal? P_HUMID_BF { get; set; }
        public System.Decimal? P_HUMID_AF { get; set; }
        public System.String P_GROUP { get; set; }
    }

    #endregion

    #region FINISHING_UPDATECOATINGDATA Result

    public class FINISHING_UPDATECOATINGDATAResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region FINISHING_UPDATECOATING Parameter

    public class FINISHING_UPDATECOATINGParameter
    {
        public System.String P_FINISHLOT { get; set; }
        public System.String P_FLAG { get; set; }
        public System.Decimal? P_SATURATOR_PV { get; set; }
        public System.Decimal? P_SATURATOR_SP { get; set; }
        public System.Decimal? P_WASHING1_PV { get; set; }
        public System.Decimal? P_WASHING1_SP { get; set; }
        public System.Decimal? P_WASHING2_PV { get; set; }
        public System.Decimal? P_WASHING2_SP { get; set; }
        public System.Decimal? P_HOTFLUE_PV { get; set; }
        public System.Decimal? P_HOTFLUE_SP { get; set; }
        public System.Decimal? P_TEMP1_PV { get; set; }
        public System.Decimal? P_TEMP1_SP { get; set; }
        public System.Decimal? P_TEMP2_PV { get; set; }
        public System.Decimal? P_TEMP2_SP { get; set; }
        public System.Decimal? P_TEMP3_PV { get; set; }
        public System.Decimal? P_TEMP3_SP { get; set; }
        public System.Decimal? P_TEMP4_PV { get; set; }
        public System.Decimal? P_TEMP4_SP { get; set; }
        public System.Decimal? P_TEMP5_PV { get; set; }
        public System.Decimal? P_TEMP5_SP { get; set; }
        public System.Decimal? P_TEMP6_PV { get; set; }
        public System.Decimal? P_TEMP6_SP { get; set; }
        public System.Decimal? P_TEMP7_PV { get; set; }
        public System.Decimal? P_TEMP7_SP { get; set; }
        public System.Decimal? P_TEMP8_PV { get; set; }
        public System.Decimal? P_TEMP8_SP { get; set; }
        public System.Decimal? P_TEMP9_PV { get; set; }
        public System.Decimal? P_TEMP9_SP { get; set; }
        public System.Decimal? P_TEMP10_PV { get; set; }
        public System.Decimal? P_TEMP10_SP { get; set; }
        public System.Decimal? P_SPEED_PV { get; set; }
        public System.Decimal? P_SPEED_SP { get; set; }
        public System.Decimal? P_LENGTH1 { get; set; }
        public System.Decimal? P_LENGTH2 { get; set; }
        public System.Decimal? P_LENGTH3 { get; set; }
        public System.Decimal? P_LENGTH4 { get; set; }
        public System.Decimal? P_LENGTH5 { get; set; }
        public System.Decimal? P_LENGTH6 { get; set; }
        public System.Decimal? P_LENGTH7 { get; set; }
        public System.String P_ITMCODE { get; set; }
        public System.String P_WEAVINGLOT { get; set; }
        public System.String P_CUSTOMER { get; set; }
        public System.DateTime? P_STARTDATE { get; set; }
        public System.Decimal? P_BECOATWIDTH { get; set; }
        public System.Decimal? P_FANRPM { get; set; }
        public System.Decimal? P_EXFAN_FRONT_BACK { get; set; }
        public System.Decimal? P_EXFAN_MIDDLE { get; set; }
        public System.Decimal? P_ANGLEKNIFE { get; set; }
        public System.String P_BLADENO { get; set; }
        public System.String P_BLADEDIRECTION { get; set; }
        public System.Decimal? P_TENSIONUP { get; set; }
        public System.Decimal? P_TENSIONDOWN { get; set; }
        public System.Decimal? P_FORN { get; set; }
        public System.Decimal? P_TENTER { get; set; }
        public System.Decimal? P_PATHLINE { get; set; }
        public System.Decimal? P_FEEDIN { get; set; }
        public System.Decimal? P_OVERFEED { get; set; }
        public System.Decimal? P_WIDTHCOAT { get; set; }
        public System.Decimal? P_WIDTHCOATALL { get; set; }
        public System.String P_SILICONEA { get; set; }
        public System.String P_SILICONEB { get; set; }
        public System.Decimal? P_CWL { get; set; }
        public System.Decimal? P_CWC { get; set; }
        public System.Decimal? P_CWR { get; set; }
        public System.String P_CONDITIONBY { get; set; }
        public System.String P_FINISHBY { get; set; }
        public System.DateTime? P_ENDDATE { get; set; }
        public System.DateTime? P_CONDITONDATE { get; set; }
        public System.String P_REMARK { get; set; }
        public System.Decimal? P_HUMID_BF { get; set; }
        public System.Decimal? P_HUMID_AF { get; set; }
        public System.String P_GROUP { get; set; }
    }

    #endregion

    #region FINISHING_UPDATECOATING Result

    public class FINISHING_UPDATECOATINGResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region FINISHING_SEARCHFINISHRECORD Parameter

    public class FINISHING_SEARCHFINISHRECORDParameter
    {
        public System.String P_DATE { get; set; }
        public System.String P_MCNO { get; set; }
        public System.String P_ITMCODE { get; set; }
    }

    #endregion

    #region FINISHING_SEARCHFINISHRECORD Result

    public class FINISHING_SEARCHFINISHRECORDResult
    {
        public System.String WEAVINGLOT { get; set; }
        public System.String FINISHINGLOT { get; set; }
        public System.String ITM_CODE { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.String FINISHBY { get; set; }
        public System.String STARTBY { get; set; }
        public System.String CONDITIONBY { get; set; }
        public System.String MCNO { get; set; }
        public System.String MC { get; set; }
        public System.Decimal? WEAVLENGTH { get; set; }
        public System.Decimal? WIDTH_BE { get; set; }
        public System.Decimal? WIDTH_AF { get; set; }
        public System.String OPERATOR_GROUP { get; set; }
        public System.Decimal? LENGTH1 { get; set; }
        public System.Decimal? LENGTH2 { get; set; }
        public System.Decimal? LENGTH3 { get; set; }
        public System.Decimal? LENGTH4 { get; set; }
        public System.Decimal? LENGTH5 { get; set; }
        public System.Decimal? LENGTH6 { get; set; }
        public System.Decimal? LENGTH7 { get; set; }
        public System.String PRODUCTIONTYPE { get; set; }
    }

    #endregion

    #region FINISHING_SEARCHFINISHDATA Parameter

    public class FINISHING_SEARCHFINISHDATAParameter
    {
        public System.String P_DATE { get; set; }
        public System.String P_PROCESS { get; set; }
    }

    #endregion

    #region FINISHING_SEARCHFINISHDATA Result

    public class FINISHING_SEARCHFINISHDATAResult
    {
        public System.String WEAVINGLOT { get; set; }
        public System.String FINISHINGLOT { get; set; }
        public System.String ITEMCODE { get; set; }
        public System.Decimal? TOTALLENGTH { get; set; }
        public System.String PROCESS { get; set; }
        public System.DateTime? FINISHINGDATE { get; set; }
        public System.String FINISHBY { get; set; }
        public System.String FINISHINGCUSTOMER { get; set; }
        public System.String MC { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.Decimal? LENGTH1 { get; set; }
        public System.Decimal? LENGTH2 { get; set; }
        public System.Decimal? LENGTH3 { get; set; }
        public System.Decimal? LENGTH4 { get; set; }
        public System.Decimal? LENGTH5 { get; set; }
        public System.Decimal? LENGTH6 { get; set; }
        public System.Decimal? LENGTH7 { get; set; }
        public System.Decimal? SAMPLING_WIDTH { get; set; }
        public System.Decimal? SAMPLING_LENGTH { get; set; }
        public System.String REMARK { get; set; }
    }

    #endregion

    #region FINISHING_SCOURINGPLCDATA Parameter

    public class FINISHING_SCOURINGPLCDATAParameter
    {
        public System.String P_MCNO { get; set; }
        public System.String P_WEAVINGLOT { get; set; }
    }

    #endregion

    #region FINISHING_SCOURINGPLCDATA Result

    public class FINISHING_SCOURINGPLCDATAResult
    {
        public System.DateTime? STARTDATE { get; set; }
        public System.Decimal? TEMP1_MIN { get; set; }
        public System.Decimal? TEMP1_MAX { get; set; }
        public System.Decimal? TEMP1 { get; set; }
        public System.Decimal? TEMP2_MIN { get; set; }
        public System.Decimal? TEMP2_MAX { get; set; }
        public System.Decimal? TEMP2 { get; set; }
        public System.Decimal? TEMP3_MIN { get; set; }
        public System.Decimal? TEMP3_MAX { get; set; }
        public System.Decimal? TEMP3 { get; set; }
        public System.Decimal? TEMP4_MIN { get; set; }
        public System.Decimal? TEMP4_MAX { get; set; }
        public System.Decimal? TEMP4 { get; set; }
        public System.Decimal? TEMP5_MIN { get; set; }
        public System.Decimal? TEMP5_MAX { get; set; }
        public System.Decimal? TEMP5 { get; set; }
        public System.Decimal? TEMP6_MIN { get; set; }
        public System.Decimal? TEMP6_MAX { get; set; }
        public System.Decimal? TEMP6 { get; set; }
        public System.Decimal? TEMP7_MIN { get; set; }
        public System.Decimal? TEMP7_MAX { get; set; }
        public System.Decimal? TEMP7 { get; set; }
        public System.Decimal? TEMP8_MIN { get; set; }
        public System.Decimal? TEMP8_MAX { get; set; }
        public System.Decimal? TEMP8 { get; set; }
        public System.Decimal? SPEED_MIN { get; set; }
        public System.Decimal? SPEED_MAX { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.Decimal? SAT_MIN { get; set; }
        public System.Decimal? SAT_MAX { get; set; }
        public System.Decimal? SAT { get; set; }
        public System.Decimal? HOTF_MIN { get; set; }
        public System.Decimal? HOTF_MAX { get; set; }
        public System.Decimal? HOTF { get; set; }
        public System.Decimal? WASH1_MIN { get; set; }
        public System.Decimal? WASH1_MAX { get; set; }
        public System.Decimal? WASH1 { get; set; }
        public System.Decimal? WASH2_MIN { get; set; }
        public System.Decimal? WASH2_MAX { get; set; }
        public System.Decimal? WASH2 { get; set; }

        public System.Decimal? TEMP9 { get; set; }
        public System.Decimal? TEMP10 { get; set; }
    }

    #endregion

    #region FINISHING_SCOURINGDATABYLOT Parameter

    public class FINISHING_SCOURINGDATABYLOTParameter
    {
        public System.String P_MCNO { get; set; }
        public System.String P_WEAVINGLOT { get; set; }
    }

    #endregion

    #region FINISHING_SCOURINGDATABYLOT Result

    public class FINISHING_SCOURINGDATABYLOTResult
    {
        public System.String FINISHINGLOT { get; set; }
        public System.String ITM_CODE { get; set; }
        public System.String WEAVINGLOT { get; set; }
        public System.String FINISHINGCUSTOMER { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.Decimal? LENGTH1 { get; set; }
        public System.Decimal? LENGTH2 { get; set; }
        public System.Decimal? LENGTH3 { get; set; }
        public System.Decimal? LENGTH4 { get; set; }
        public System.Decimal? LENGTH5 { get; set; }
        public System.String MCNO { get; set; }
        public System.String STATUSFLAG { get; set; }
        public System.Decimal? SATURATOR_CHEM_PV { get; set; }
        public System.Decimal? SATURATOR_CHEM_SP { get; set; }
        public System.Decimal? WASHING1_PV { get; set; }
        public System.Decimal? WASHING1_SP { get; set; }
        public System.Decimal? WASHING2_PV { get; set; }
        public System.Decimal? WASHING2_SP { get; set; }
        public System.Decimal? HOTFLUE_PV { get; set; }
        public System.Decimal? HOTFLUE_SP { get; set; }
        public System.Decimal? TEMP1_PV { get; set; }
        public System.Decimal? TEMP1_SP { get; set; }
        public System.Decimal? TEMP2_PV { get; set; }
        public System.Decimal? TEMP2_SP { get; set; }
        public System.Decimal? TEMP3_PV { get; set; }
        public System.Decimal? TEMP3_SP { get; set; }
        public System.Decimal? TEMP4_PV { get; set; }
        public System.Decimal? TEMP4_SP { get; set; }
        public System.Decimal? TEMP5_PV { get; set; }
        public System.Decimal? TEMP5_SP { get; set; }
        public System.Decimal? TEMP6_PV { get; set; }
        public System.Decimal? TEMP6_SP { get; set; }
        public System.Decimal? TEMP7_PV { get; set; }
        public System.Decimal? TEMP7_SP { get; set; }
        public System.Decimal? TEMP8_PV { get; set; }
        public System.Decimal? TEMP8_SP { get; set; }
        public System.Decimal? SPEED_PV { get; set; }
        public System.Decimal? SPEED_SP { get; set; }
        public System.Decimal? MAINFRAMEWIDTH { get; set; }
        public System.Decimal? WIDTH_BE { get; set; }
        public System.Decimal? WIDTH_AF { get; set; }
        public System.Decimal? PIN2PIN { get; set; }
        public System.String CONDITIONBY { get; set; }
        public System.DateTime? CONDITIONDATE { get; set; }
        public System.String FINISHBY { get; set; }
        public System.String SAMPLINGID { get; set; }
        public System.String STARTBY { get; set; }
        public System.Decimal? LENGTH6 { get; set; }
        public System.Decimal? LENGTH7 { get; set; }
        public System.String REMARK { get; set; }
        public System.Decimal? HUMIDITY_BF { get; set; }
        public System.Decimal? HUMIDITY_AF { get; set; }
        public System.String REPROCESS { get; set; }
        public System.Decimal? WEAVLENGTH { get; set; }
        public System.String OPERATOR_GROUP { get; set; }
        public System.Decimal? TEMP1_MIN { get; set; }
        public System.Decimal? TEMP1_MAX { get; set; }
        public System.Decimal? TEMP2_MIN { get; set; }
        public System.Decimal? TEMP2_MAX { get; set; }
        public System.Decimal? TEMP3_MIN { get; set; }
        public System.Decimal? TEMP3_MAX { get; set; }
        public System.Decimal? TEMP4_MIN { get; set; }
        public System.Decimal? TEMP4_MAX { get; set; }
        public System.Decimal? TEMP5_MIN { get; set; }
        public System.Decimal? TEMP5_MAX { get; set; }
        public System.Decimal? TEMP6_MIN { get; set; }
        public System.Decimal? TEMP6_MAX { get; set; }
        public System.Decimal? TEMP7_MIN { get; set; }
        public System.Decimal? TEMP7_MAX { get; set; }
        public System.Decimal? TEMP8_MIN { get; set; }
        public System.Decimal? TEMP8_MAX { get; set; }
        public System.Decimal? SAT_CHEM_MIN { get; set; }
        public System.Decimal? SAT_CHEM_MAX { get; set; }
        public System.Decimal? WASHING1_MIN { get; set; }
        public System.Decimal? WASHING1_MAX { get; set; }
        public System.Decimal? WASHING2_MIN { get; set; }
        public System.Decimal? WASHING2_MAX { get; set; }
        public System.Decimal? HOTFLUE_MIN { get; set; }
        public System.Decimal? HOTFLUE_MAX { get; set; }
        public System.Decimal? SPEED_MIN { get; set; }
        public System.Decimal? SPEED_MAX { get; set; }
        public System.Decimal? TEMP9_PV { get; set; }
        public System.Decimal? TEMP9_SP { get; set; }
        public System.Decimal? TEMP10_PV { get; set; }
        public System.Decimal? TEMP10_SP { get; set; }
        public System.String ITM_WEAVING { get; set; }
    }

    #endregion

    #region FINISHING_SAMPLINGDATA Parameter

    public class FINISHING_SAMPLINGDATAParameter
    {
        public System.String P_WEAVLOT { get; set; }
        public System.String P_FINISHLOT { get; set; }
        public System.String P_ITMCODE { get; set; }
        public System.String P_FINISHCUSTOMER { get; set; }
        public System.String P_PRODUCTTYPEID { get; set; }
        public System.String P_OPERATORID { get; set; }
        public System.Decimal? P_WIDTH { get; set; }
        public System.Decimal? P_LENGTH { get; set; }
        public System.String P_REMARK { get; set; }
    }

    #endregion

    #region FINISHING_SAMPLINGDATA Result

    public class FINISHING_SAMPLINGDATAResult
    {
    }

    #endregion

    #region FINISHING_INSERTSCOURING Parameter

    public class FINISHING_INSERTSCOURINGParameter
    {
        public System.String P_WEAVLOT { get; set; }
        public System.String P_ITMCODE { get; set; }
        public System.String P_FINISHCUSTOMER { get; set; }
        public System.String P_PRODUCTTYPEID { get; set; }
        public System.String P_OPERATORID { get; set; }
        public System.String P_MCNO { get; set; }
        public System.String P_FLAG { get; set; }
        public System.Decimal? P_SATURATOR_PV { get; set; }
        public System.Decimal? P_SATURATOR_SP { get; set; }
        public System.Decimal? P_WASHING1_PV { get; set; }
        public System.Decimal? P_WASHING1_SP { get; set; }
        public System.Decimal? P_WASHING2_PV { get; set; }
        public System.Decimal? P_WASHING2_SP { get; set; }
        public System.Decimal? P_HOTFLUE_PV { get; set; }
        public System.Decimal? P_HOTFLUE_SP { get; set; }
        public System.Decimal? P_TEMP1_PV { get; set; }
        public System.Decimal? P_TEMP1_SP { get; set; }
        public System.Decimal? P_TEMP2_PV { get; set; }
        public System.Decimal? P_TEMP2_SP { get; set; }
        public System.Decimal? P_TEMP3_PV { get; set; }
        public System.Decimal? P_TEMP3_SP { get; set; }
        public System.Decimal? P_TEMP4_PV { get; set; }
        public System.Decimal? P_TEMP4_SP { get; set; }
        public System.Decimal? P_TEMP5_PV { get; set; }
        public System.Decimal? P_TEMP5_SP { get; set; }
        public System.Decimal? P_TEMP6_PV { get; set; }
        public System.Decimal? P_TEMP6_SP { get; set; }
        public System.Decimal? P_TEMP7_PV { get; set; }
        public System.Decimal? P_TEMP7_SP { get; set; }
        public System.Decimal? P_TEMP8_PV { get; set; }
        public System.Decimal? P_TEMP8_SP { get; set; }
        public System.Decimal? P_TEMP9_PV { get; set; }
        public System.Decimal? P_TEMP9_SP { get; set; }
        public System.Decimal? P_TEMP10_PV { get; set; }
        public System.Decimal? P_TEMP10_SP { get; set; }
        public System.Decimal? P_SPEED_PV { get; set; }
        public System.Decimal? P_SPEED_SP { get; set; }
        public System.Decimal? P_MAINFRAMEWIDTH { get; set; }
        public System.Decimal? P_WIDTH_BE { get; set; }
        public System.Decimal? P_WIDTH_AF { get; set; }
        public System.Decimal? P_PIN2PIN { get; set; }
        public System.Decimal? P_HUMID_BF { get; set; }
        public System.Decimal? P_HUMID_AF { get; set; }
        public System.String P_REPROCESS { get; set; }
        public System.Decimal? P_WEAVLENGTH { get; set; }
        public System.String P_GROUP { get; set; }
    }

    #endregion

    #region FINISHING_INSERTSCOURING Result

    public class FINISHING_INSERTSCOURINGResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region FINISHING_INSERTDRYER Parameter

    public class FINISHING_INSERTDRYERParameter
    {
        public System.String P_WEAVLOT { get; set; }
        public System.String P_ITMCODE { get; set; }
        public System.String P_FINISHCUSTOMER { get; set; }
        public System.String P_PRODUCTTYPEID { get; set; }
        public System.String P_OPERATORID { get; set; }
        public System.String P_MCNO { get; set; }
        public System.String P_FLAG { get; set; }
        public System.Decimal? P_HOTFLUE_PV { get; set; }
        public System.Decimal? P_HOTFLUE_SP { get; set; }
        public System.Decimal? P_SPEED_PV { get; set; }
        public System.Decimal? P_SPEED_SP { get; set; }
        public System.Decimal? P_WIDTHBEHEAT { get; set; }
        public System.Decimal? P_ACCPRESURE { get; set; }
        public System.Decimal? P_ASSTENSION { get; set; }
        public System.Decimal? P_ACCARIDENSER { get; set; }
        public System.Decimal? P_CHIFROT { get; set; }
        public System.Decimal? P_CHIREAR { get; set; }
        public System.Decimal? P_STEAMPRESURE { get; set; }
        public System.Decimal? P_DRYCIRCUFAN { get; set; }
        public System.Decimal? P_EXHAUSTFAN { get; set; }
        public System.Decimal? P_WIDTHAFHEAT { get; set; }
        public System.Decimal? P_HUMID_BF { get; set; }
        public System.Decimal? P_HUMID_AF { get; set; }
        public System.String P_REPROCESS { get; set; }
        public System.Decimal? P_WEAVLENGTH { get; set; }
        public System.String P_GROUP { get; set; }
        public System.Decimal? P_SATURATOR_PV { get; set; }
        public System.Decimal? P_SATURATOR_SP { get; set; }
        public System.Decimal? P_WASHING1_PV { get; set; }
        public System.Decimal? P_WASHING1_SP { get; set; }
        public System.Decimal? P_WASHING2_PV { get; set; }
        public System.Decimal? P_WASHING2_SP { get; set; }
    }

    #endregion

    #region FINISHING_INSERTDRYER Result

    public class FINISHING_INSERTDRYERResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region FINISHING_INSERTCOATING Parameter

    public class FINISHING_INSERTCOATINGParameter
    {
        public System.String P_WEAVLOT { get; set; }
        public System.String P_ITMCODE { get; set; }
        public System.String P_FINISHCUSTOMER { get; set; }
        public System.String P_PRODUCTTYPEID { get; set; }
        public System.String P_OPERATORID { get; set; }
        public System.String P_MCNO { get; set; }
        public System.String P_FLAG { get; set; }
        public System.Decimal? P_SATURATOR_PV { get; set; }
        public System.Decimal? P_SATURATOR_SP { get; set; }
        public System.Decimal? P_WASHING1_PV { get; set; }
        public System.Decimal? P_WASHING1_SP { get; set; }
        public System.Decimal? P_WASHING2_PV { get; set; }
        public System.Decimal? P_WASHING2_SP { get; set; }
        public System.Decimal? P_HOTFLUE_PV { get; set; }
        public System.Decimal? P_HOTFLUE_SP { get; set; }
        public System.Decimal? P_TEMP1_PV { get; set; }
        public System.Decimal? P_TEMP1_SP { get; set; }
        public System.Decimal? P_TEMP2_PV { get; set; }
        public System.Decimal? P_TEMP2_SP { get; set; }
        public System.Decimal? P_TEMP3_PV { get; set; }
        public System.Decimal? P_TEMP3_SP { get; set; }
        public System.Decimal? P_TEMP4_PV { get; set; }
        public System.Decimal? P_TEMP4_SP { get; set; }
        public System.Decimal? P_TEMP5_PV { get; set; }
        public System.Decimal? P_TEMP5_SP { get; set; }
        public System.Decimal? P_TEMP6_PV { get; set; }
        public System.Decimal? P_TEMP6_SP { get; set; }
        public System.Decimal? P_TEMP7_PV { get; set; }
        public System.Decimal? P_TEMP7_SP { get; set; }
        public System.Decimal? P_TEMP8_PV { get; set; }
        public System.Decimal? P_TEMP8_SP { get; set; }
        public System.Decimal? P_TEMP9_PV { get; set; }
        public System.Decimal? P_TEMP9_SP { get; set; }
        public System.Decimal? P_TEMP10_PV { get; set; }
        public System.Decimal? P_TEMP10_SP { get; set; }
        public System.Decimal? P_SPEED_PV { get; set; }
        public System.Decimal? P_SPEED_SP { get; set; }
        public System.Decimal? P_BECOATWIDTH { get; set; }
        public System.Decimal? P_FANRPM { get; set; }
        public System.Decimal? P_EXFAN_FRONT_BACK { get; set; }
        public System.Decimal? P_EXFAN_MIDDLE { get; set; }
        public System.Decimal? P_ANGLEKNIFE { get; set; }
        public System.String P_BLADENO { get; set; }
        public System.String P_BLADEDIRECTION { get; set; }
        public System.Decimal? P_TENSIONUP { get; set; }
        public System.Decimal? P_TENSIONDOWN { get; set; }
        public System.Decimal? P_FORN { get; set; }
        public System.Decimal? P_TENTER { get; set; }
        public System.Decimal? P_PATHLINE { get; set; }
        public System.Decimal? P_FEEDIN { get; set; }
        public System.Decimal? P_OVERFEED { get; set; }
        public System.Decimal? P_WIDTHCOAT { get; set; }
        public System.Decimal? P_WIDTHCOATALL { get; set; }
        public System.String P_SILICONEA { get; set; }
        public System.String P_SILICONEB { get; set; }
        public System.Decimal? P_CWL { get; set; }
        public System.Decimal? P_CWC { get; set; }
        public System.Decimal? P_CWR { get; set; }
        public System.Decimal? P_HUMID_BF { get; set; }
        public System.Decimal? P_HUMID_AF { get; set; }
        public System.String P_REPROCESS { get; set; }
        public System.Decimal? P_WEAVLENGTH { get; set; }
        public System.String P_GROUP { get; set; }
    }

    #endregion

    #region FINISHING_INSERTCOATING Result

    public class FINISHING_INSERTCOATINGResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region FINISHING_INPROCESSLIST Parameter

    public class FINISHING_INPROCESSLISTParameter
    {
    }

    #endregion

    #region FINISHING_INPROCESSLIST Result

    public class FINISHING_INPROCESSLISTResult
    {
        public System.String MCNAME { get; set; }
        public System.String FINISHINGLOT { get; set; }
        public System.String WEAVINGLOT { get; set; }
        public System.String ITM_CODE { get; set; }
        public System.String OPERATOR_GROUP { get; set; }
        public System.String STATUS { get; set; }
        public System.String FINISHINGCUSTOMER { get; set; }
        public System.String STARTBY { get; set; }
        public System.String CONDITIONBY { get; set; }
    }

    #endregion

    #region FINISHING_GETSCOURINGREPORT Parameter

    public class FINISHING_GETSCOURINGREPORTParameter
    {
        public System.String P_WEAVINGLOT { get; set; }
        public System.String P_FINLOT { get; set; }
    }

    #endregion

    #region FINISHING_GETSCOURINGREPORT Result

    public class FINISHING_GETSCOURINGREPORTResult
    {
        public System.String FINISHINGLOT { get; set; }
        public System.String ITM_CODE { get; set; }
        public System.String WEAVINGLOT { get; set; }
        public System.String FINISHINGCUSTOMER { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.Decimal? LENGTH1 { get; set; }
        public System.Decimal? LENGTH2 { get; set; }
        public System.Decimal? LENGTH3 { get; set; }
        public System.Decimal? LENGTH4 { get; set; }
        public System.Decimal? LENGTH5 { get; set; }
        public System.String MCNO { get; set; }
        public System.String STATUSFLAG { get; set; }
        public System.Decimal? SATURATOR_CHEM_PV { get; set; }
        public System.Decimal? SATURATOR_CHEM_SP { get; set; }
        public System.Decimal? WASHING1_PV { get; set; }
        public System.Decimal? WASHING1_SP { get; set; }
        public System.Decimal? WASHING2_PV { get; set; }
        public System.Decimal? WASHING2_SP { get; set; }
        public System.Decimal? HOTFLUE_PV { get; set; }
        public System.Decimal? HOTFLUE_SP { get; set; }
        public System.Decimal? TEMP1_PV { get; set; }
        public System.Decimal? TEMP1_SP { get; set; }
        public System.Decimal? TEMP2_PV { get; set; }
        public System.Decimal? TEMP2_SP { get; set; }
        public System.Decimal? TEMP3_PV { get; set; }
        public System.Decimal? TEMP3_SP { get; set; }
        public System.Decimal? TEMP4_PV { get; set; }
        public System.Decimal? TEMP4_SP { get; set; }
        public System.Decimal? TEMP5_PV { get; set; }
        public System.Decimal? TEMP5_SP { get; set; }
        public System.Decimal? TEMP6_PV { get; set; }
        public System.Decimal? TEMP6_SP { get; set; }
        public System.Decimal? TEMP7_PV { get; set; }
        public System.Decimal? TEMP7_SP { get; set; }
        public System.Decimal? TEMP8_PV { get; set; }
        public System.Decimal? TEMP8_SP { get; set; }
        public System.Decimal? TEMP9_PV { get; set; }
        public System.Decimal? TEMP9_SP { get; set; }
        public System.Decimal? TEMP10_PV { get; set; }
        public System.Decimal? TEMP10_SP { get; set; }
        public System.Decimal? SPEED_PV { get; set; }
        public System.Decimal? SPEED_SP { get; set; }
        public System.Decimal? MAINFRAMEWIDTH { get; set; }
        public System.Decimal? WIDTH_BE { get; set; }
        public System.Decimal? WIDTH_AF { get; set; }
        public System.Decimal? PIN2PIN { get; set; }
        public System.String CONDITIONBY { get; set; }
        public System.DateTime? CONDITIONDATE { get; set; }
        public System.String FINISHBY { get; set; }
        public System.String SAMPLINGID { get; set; }
        public System.String STARTBY { get; set; }
        public System.Decimal? LENGTH6 { get; set; }
        public System.Decimal? LENGTH7 { get; set; }
        public System.String REMARK { get; set; }
        public System.Decimal? HUMIDITY_BF { get; set; }
        public System.Decimal? HUMIDITY_AF { get; set; }
        public System.String REPROCESS { get; set; }
        public System.Decimal? INPUTLENGTH { get; set; }
        public System.String OPERATOR_GROUP { get; set; }
        public System.Decimal? TEMP1_MIN { get; set; }
        public System.Decimal? TEMP1_MAX { get; set; }
        public System.Decimal? TEMP2_MIN { get; set; }
        public System.Decimal? TEMP2_MAX { get; set; }
        public System.Decimal? TEMP3_MIN { get; set; }
        public System.Decimal? TEMP3_MAX { get; set; }
        public System.Decimal? TEMP4_MIN { get; set; }
        public System.Decimal? TEMP4_MAX { get; set; }
        public System.Decimal? TEMP5_MIN { get; set; }
        public System.Decimal? TEMP5_MAX { get; set; }
        public System.Decimal? TEMP6_MIN { get; set; }
        public System.Decimal? TEMP6_MAX { get; set; }
        public System.Decimal? TEMP7_MIN { get; set; }
        public System.Decimal? TEMP7_MAX { get; set; }
        public System.Decimal? TEMP8_MIN { get; set; }
        public System.Decimal? TEMP8_MAX { get; set; }
        public System.Decimal? SAT_CHEM_MIN { get; set; }
        public System.Decimal? SAT_CHEM_MAX { get; set; }
        public System.Decimal? WASHING1_MIN { get; set; }
        public System.Decimal? WASHING1_MAX { get; set; }
        public System.Decimal? WASHING2_MIN { get; set; }
        public System.Decimal? WASHING2_MAX { get; set; }
        public System.Decimal? HOTFLUE_MIN { get; set; }
        public System.Decimal? HOTFLUE_MAX { get; set; }
        public System.Decimal? SPEED_MIN { get; set; }
        public System.Decimal? SPEED_MAX { get; set; }
        public System.String PARTNO { get; set; }
        public System.Decimal? FINISHLENGTH { get; set; }
        public System.String ITM_WEAVING { get; set; }
    }

    #endregion

    #region FINISHING_GETSCOURINGDATA Parameter

    public class FINISHING_GETSCOURINGDATAParameter
    {
        public System.String P_MCNO { get; set; }
        public System.String P_FLAG { get; set; }
    }

    #endregion

    #region FINISHING_GETSCOURINGDATA Result

    public class FINISHING_GETSCOURINGDATAResult
    {
        public System.String FINISHINGLOT { get; set; }
        public System.String ITM_CODE { get; set; }
        public System.String WEAVINGLOT { get; set; }
        public System.String FINISHINGCUSTOMER { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.Decimal? LENGTH1 { get; set; }
        public System.Decimal? LENGTH2 { get; set; }
        public System.Decimal? LENGTH3 { get; set; }
        public System.Decimal? LENGTH4 { get; set; }
        public System.Decimal? LENGTH5 { get; set; }
        public System.String MCNO { get; set; }
        public System.String STATUSFLAG { get; set; }
        public System.Decimal? SATURATOR_CHEM_PV { get; set; }
        public System.Decimal? SATURATOR_CHEM_SP { get; set; }
        public System.Decimal? WASHING1_PV { get; set; }
        public System.Decimal? WASHING1_SP { get; set; }
        public System.Decimal? WASHING2_PV { get; set; }
        public System.Decimal? WASHING2_SP { get; set; }
        public System.Decimal? HOTFLUE_PV { get; set; }
        public System.Decimal? HOTFLUE_SP { get; set; }
        public System.Decimal? TEMP1_PV { get; set; }
        public System.Decimal? TEMP1_SP { get; set; }
        public System.Decimal? TEMP2_PV { get; set; }
        public System.Decimal? TEMP2_SP { get; set; }
        public System.Decimal? TEMP3_PV { get; set; }
        public System.Decimal? TEMP3_SP { get; set; }
        public System.Decimal? TEMP4_PV { get; set; }
        public System.Decimal? TEMP4_SP { get; set; }
        public System.Decimal? TEMP5_PV { get; set; }
        public System.Decimal? TEMP5_SP { get; set; }
        public System.Decimal? TEMP6_PV { get; set; }
        public System.Decimal? TEMP6_SP { get; set; }
        public System.Decimal? TEMP7_PV { get; set; }
        public System.Decimal? TEMP7_SP { get; set; }
        public System.Decimal? TEMP8_PV { get; set; }
        public System.Decimal? TEMP8_SP { get; set; }
        public System.Decimal? TEMP9_PV { get; set; }
        public System.Decimal? TEMP9_SP { get; set; }
        public System.Decimal? TEMP10_PV { get; set; }
        public System.Decimal? TEMP10_SP { get; set; }
        public System.Decimal? SPEED_PV { get; set; }
        public System.Decimal? SPEED_SP { get; set; }
        public System.Decimal? MAINFRAMEWIDTH { get; set; }
        public System.Decimal? WIDTH_BE { get; set; }
        public System.Decimal? WIDTH_AF { get; set; }
        public System.Decimal? PIN2PIN { get; set; }
        public System.String CONDITIONBY { get; set; }
        public System.DateTime? CONDITIONDATE { get; set; }
        public System.String FINISHBY { get; set; }
        public System.String SAMPLINGID { get; set; }
        public System.String STARTBY { get; set; }
        public System.Decimal? LENGTH6 { get; set; }
        public System.Decimal? LENGTH7 { get; set; }
        public System.String REMARK { get; set; }
        public System.Decimal? HUMIDITY_BF { get; set; }
        public System.Decimal? HUMIDITY_AF { get; set; }
        public System.String ITM_WEAVING { get; set; }
        public System.Decimal? WEAVINGLENGTH { get; set; }
        public System.String OPERATOR_GROUP { get; set; }
    }

    #endregion

    #region FINISHING_GETSCOURINGCONDITION Parameter

    public class FINISHING_GETSCOURINGCONDITIONParameter
    {
        public System.String P_ITEMCODE { get; set; }
        public System.String P_SCOURINGNO { get; set; }
    }

    #endregion

    #region FINISHING_GETSCOURINGCONDITION Result

    public class FINISHING_GETSCOURINGCONDITIONResult
    {
        public System.String ITM_CODE { get; set; }
        public System.Decimal? SATURATOR_CHEM { get; set; }
        public System.Decimal? SATURATOR_CHEM_MARGIN { get; set; }
        public System.Decimal? WASHING1 { get; set; }
        public System.Decimal? WASHING1_MARGIN { get; set; }
        public System.Decimal? WASHING2 { get; set; }
        public System.Decimal? WASHING2_MARGIN { get; set; }
        public System.Decimal? HOTFLUE { get; set; }
        public System.Decimal? HOTFLUE_MARGIN { get; set; }
        public System.Decimal? ROOMTEMP { get; set; }
        public System.Decimal? ROOMTEMP_MARGIN { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.Decimal? SPEED_MARGIN { get; set; }
        public System.Decimal? MAINFRAMEWIDTH { get; set; }
        public System.Decimal? MAINFRAMEWIDTH_MARGIN { get; set; }
        public System.Decimal? WIDTH_BE { get; set; }
        public System.Decimal? WIDTH_BE_MARGIN { get; set; }
        public System.Decimal? WIDTH_AF { get; set; }
        public System.Decimal? WIDTH_AF_MARGIN { get; set; }
        public System.String DENSITY_AF { get; set; }
        public System.Decimal? DENSITY_MARGIN { get; set; }
        public System.String SCOURINGNO { get; set; }
        public System.Decimal? NIPCHEMICAL { get; set; }
        public System.Decimal? NIPROLLWASHER1 { get; set; }
        public System.Decimal? NIPROLLWASHER2 { get; set; }
        public System.Decimal? PIN2PIN { get; set; }
        public System.Decimal? PIN2PIN_MARGIN { get; set; }
        public System.Decimal? HUMIDITY_MAX { get; set; }
        public System.Decimal? HUMIDITY_MIN { get; set; }
    }

    #endregion

    #region FINISHING_GETSAMPLINGSHEET Parameter

    public class FINISHING_GETSAMPLINGSHEETParameter
    {
        public System.String P_WEAVINGLOT { get; set; }
        public System.String P_FINLOT { get; set; }
    }

    #endregion

    #region FINISHING_GETSAMPLINGSHEET Result

    public class FINISHING_GETSAMPLINGSHEETResult
    {
        public System.String WEAVINGLOT { get; set; }
        public System.String FINISHINGLOT { get; set; }
        public System.String ITM_CODE { get; set; }
        public System.DateTime? CREATEDATE { get; set; }
        public System.String CREATEBY { get; set; }
        public System.String PRODUCTID { get; set; }
        public System.Decimal? SAMPLING_WIDTH { get; set; }
        public System.Decimal? SAMPLING_LENGTH { get; set; }
        public System.String PROCESS { get; set; }
        public System.String REMARK { get; set; }
        public System.String FABRICTYPE { get; set; }
        public System.String RETESTFLAG { get; set; }
        public System.String PRODUCTNAME { get; set; }
    }

    #endregion

    #region FINISHING_GETITEMGOOD Parameter

    public class FINISHING_GETITEMGOODParameter
    {
        public System.String P_CUSTOMER { get; set; }
    }

    #endregion

    #region FINISHING_GETITEMGOOD Result

    public class FINISHING_GETITEMGOODResult
    {
        public System.String CUSTOMERID { get; set; }
        public System.String ITM_CODE { get; set; }
        public System.String PARTNO { get; set; }
        public System.String FABRIC { get; set; }
        public System.Decimal? LENGTH { get; set; }
        public System.String DENSITY_W { get; set; }
        public System.String DENSITY_F { get; set; }
        public System.String WIDTH_ALL { get; set; }
        public System.String WIDTH_PIN { get; set; }
        public System.String WIDTH_COAT { get; set; }
        public System.String TRIM_L { get; set; }
        public System.String TRIM_R { get; set; }
        public System.String FLOPPY_L { get; set; }
        public System.String FLOPPY_R { get; set; }
        public System.String HARDNESS_L { get; set; }
        public System.String HARDNESS_C { get; set; }
        public System.String HARDNESS_R { get; set; }
        public System.String UNWINDER { get; set; }
        public System.String WINDER { get; set; }
        public System.String FINISHINGCUSTOMER { get; set; }
        public System.String DESCRIPTION { get; set; }
        public System.String SUPPLIERCODE { get; set; }
        public System.String WIDTH { get; set; }

        //New 17/10/22
        public System.String WIDTH_SELVAGEL { get; set; }
        public System.String WIDTH_SELVAGER { get; set; }
        public System.Decimal? RESETSTARTLENGTH { get; set; }
    }

    #endregion

    #region FINISHING_GETDRYERREPORT Parameter

    public class FINISHING_GETDRYERREPORTParameter
    {
        public System.String P_WEAVINGLOT { get; set; }
        public System.String P_FINLOT { get; set; }
    }

    #endregion

    #region FINISHING_GETDRYERREPORT Result

    public class FINISHING_GETDRYERREPORTResult
    {
        public System.String FINISHINGLOT { get; set; }
        public System.String ITM_CODE { get; set; }
        public System.String WEAVINGLOT { get; set; }
        public System.String FINISHINGCUSTOMER { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.Decimal? LENGTH1 { get; set; }
        public System.Decimal? LENGTH2 { get; set; }
        public System.Decimal? LENGTH3 { get; set; }
        public System.Decimal? LENGTH4 { get; set; }
        public System.Decimal? LENGTH5 { get; set; }
        public System.String MCNO { get; set; }
        public System.String STATUSFLAG { get; set; }
        public System.Decimal? WIDTH_BE_HEAT { get; set; }
        public System.Decimal? ACCPRESURE { get; set; }
        public System.Decimal? ASSTENSION { get; set; }
        public System.Decimal? ACCARIDENSER { get; set; }
        public System.Decimal? CHIFROT { get; set; }
        public System.Decimal? CHIREAR { get; set; }
        public System.Decimal? DRYERTEMP1_PV { get; set; }
        public System.Decimal? DRYERTEMP1_SP { get; set; }
        public System.Decimal? SPEED_PV { get; set; }
        public System.Decimal? SPEED_SP { get; set; }
        public System.Decimal? HOTFLUE_MIN { get; set; }
        public System.Decimal? HOTFLUE_MAX { get; set; }
        public System.Decimal? SPEED_MIN { get; set; }
        public System.Decimal? SPEED_MAX { get; set; }
        public System.Decimal? STEAMPRESSURE { get; set; }
        public System.Decimal? DRYERCIRCUFAN { get; set; }
        public System.Decimal? EXHAUSTFAN { get; set; }
        public System.Decimal? WIDTH_AF_HEAT { get; set; }
        public System.String CONDITIONBY { get; set; }
        public System.DateTime? CONDITIONDATE { get; set; }
        public System.String FINISHBY { get; set; }
        public System.String SAMPLINGID { get; set; }
        public System.String STARTBY { get; set; }
        public System.Decimal? LENGTH6 { get; set; }
        public System.Decimal? LENGTH7 { get; set; }
        public System.String REMARK { get; set; }
        public System.String OPERATOR_GROUP { get; set; }
        public System.Decimal? HUMIDITY_BF { get; set; }
        public System.Decimal? HUMIDITY_AF { get; set; }
        public System.String PARTNO { get; set; }
        public System.Decimal? FINISHLENGTH { get; set; }
        public System.String ITM_WEAVING { get; set; }
        public System.Decimal? INPUTLENGTH { get; set; }
        public System.Decimal? SATURATOR_CHEM_PV { get; set; }
        public System.Decimal? SATURATOR_CHEM_SP { get; set; }
        public System.Decimal? WASHING1_PV { get; set; }
        public System.Decimal? WASHING1_SP { get; set; }
        public System.Decimal? WASHING2_PV { get; set; }
        public System.Decimal? WASHING2_SP { get; set; }
    }

    #endregion

    #region FINISHING_GETDRYERDATA Parameter

    public class FINISHING_GETDRYERDATAParameter
    {
        public System.String P_MCNO { get; set; }
        public System.String P_FLAG { get; set; }
    }

    #endregion

    #region FINISHING_GETDRYERDATA Result

    public class FINISHING_GETDRYERDATAResult
    {
        public System.String FINISHINGLOT { get; set; }
        public System.String ITM_CODE { get; set; }
        public System.String WEAVINGLOT { get; set; }
        public System.String FINISHINGCUSTOMER { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.Decimal? LENGTH1 { get; set; }
        public System.Decimal? LENGTH2 { get; set; }
        public System.Decimal? LENGTH3 { get; set; }
        public System.Decimal? LENGTH4 { get; set; }
        public System.Decimal? LENGTH5 { get; set; }
        public System.String MCNO { get; set; }
        public System.String STATUSFLAG { get; set; }
        public System.Decimal? WIDTH_BE_HEAT { get; set; }
        public System.Decimal? ACCPRESURE { get; set; }
        public System.Decimal? ASSTENSION { get; set; }
        public System.Decimal? ACCARIDENSER { get; set; }
        public System.Decimal? CHIFROT { get; set; }
        public System.Decimal? CHIREAR { get; set; }
        public System.Decimal? DRYERTEMP1_PV { get; set; }
        public System.Decimal? DRYERTEMP1_SP { get; set; }
        public System.Decimal? SPEED_PV { get; set; }
        public System.Decimal? SPEED_SP { get; set; }
        public System.Decimal? STEAMPRESSURE { get; set; }
        public System.Decimal? DRYERCIRCUFAN { get; set; }
        public System.Decimal? EXHAUSTFAN { get; set; }
        public System.Decimal? WIDTH_AF_HEAT { get; set; }
        public System.String CONDITIONBY { get; set; }
        public System.DateTime? CONDITIONDATE { get; set; }
        public System.String FINISHBY { get; set; }
        public System.String SAMPLINGID { get; set; }
        public System.String STARTBY { get; set; }
        public System.Decimal? LENGTH6 { get; set; }
        public System.Decimal? LENGTH7 { get; set; }
        public System.String REMARK { get; set; }
        public System.Decimal? HUMIDITY_BF { get; set; }
        public System.Decimal? HUMIDITY_AF { get; set; }
        public System.String ITM_WEAVING { get; set; }
        public System.Decimal? WEAVINGLENGTH { get; set; }
        public System.String OPERATOR_GROUP { get; set; }
        public System.Decimal? SATURATOR_CHEM_PV { get; set; }
        public System.Decimal? SATURATOR_CHEM_SP { get; set; }
        public System.Decimal? WASHING1_PV { get; set; }
        public System.Decimal? WASHING1_SP { get; set; }
        public System.Decimal? WASHING2_PV { get; set; }
        public System.Decimal? WASHING2_SP { get; set; }
    }

    #endregion

    #region FINISHING_GETDRYERCONDITION Parameter

    public class FINISHING_GETDRYERCONDITIONParameter
    {
        public System.String P_ITEMCODE { get; set; }
        public System.String P_MCNO { get; set; }
    }

    #endregion

    #region FINISHING_GETDRYERCONDITION Result

    public class FINISHING_GETDRYERCONDITIONResult
    {
        public System.String ITM_CODE { get; set; }
        public System.Decimal? WIDTH_BE_HEAT_MAX { get; set; }
        public System.Decimal? WIDTH_BE_HEAT_MIN { get; set; }
        public System.Decimal? ACCPRESURE { get; set; }
        public System.Decimal? ASSTENSION { get; set; }
        public System.Decimal? ACCARIDENSER { get; set; }
        public System.Decimal? CHIFROT { get; set; }
        public System.Decimal? CHIREAR { get; set; }
        public System.Decimal? DRYERTEMP1 { get; set; }
        public System.Decimal? DRYERTEMP1_MARGIN { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.Decimal? SPEED_MARGIN { get; set; }
        public System.Decimal? STEAMPRESSURE { get; set; }
        public System.Decimal? DRYERUPCIRCUFAN { get; set; }
        public System.Decimal? DRYERDOWNCIRCUFAN { get; set; }
        public System.Decimal? EXHAUSTFAN { get; set; }
        public System.Decimal? WIDTH_AF_HEAT { get; set; }
        public System.Decimal? WIDTH_AF_HEAT_MARGIN { get; set; }
        public System.Decimal? HUMIDITY_MAX { get; set; }
        public System.Decimal? HUMIDITY_MIN { get; set; }
        public System.String MCNO { get; set; }
        public System.Decimal? SATURATOR_CHEM { get; set; }
        public System.Decimal? SATURATOR_CHEM_MARGIN { get; set; }
        public System.Decimal? WASHING1 { get; set; }
        public System.Decimal? WASHING1_MARGIN { get; set; }
        public System.Decimal? WASHING2 { get; set; }
        public System.Decimal? WASHING2_MARGIN { get; set; }
    }

    #endregion

    #region FINISHING_GETCUTOMERLIST Parameter

    public class FINISHING_GETCUTOMERLISTParameter
    {
    }

    #endregion

    #region FINISHING_GETCUTOMERLIST Result

    public class FINISHING_GETCUTOMERLISTResult
    {
        public System.String FINISHINGCUSTOMER { get; set; }
    }

    #endregion

    #region FINISHING_GETCOATINGREPORT Parameter

    public class FINISHING_GETCOATINGREPORTParameter
    {
        public System.String P_WEAVINGLOT { get; set; }
        public System.String P_FINLOT { get; set; }
    }

    #endregion

    #region FINISHING_GETCOATINGREPORT Result

    public class FINISHING_GETCOATINGREPORTResult
    {
        public System.String FINISHINGLOT { get; set; }
        public System.String ITM_CODE { get; set; }
        public System.String WEAVINGLOT { get; set; }
        public System.String FINISHINGCUSTOMER { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.Decimal? LENGTH1 { get; set; }
        public System.Decimal? LENGTH2 { get; set; }
        public System.Decimal? LENGTH3 { get; set; }
        public System.Decimal? LENGTH4 { get; set; }
        public System.Decimal? LENGTH5 { get; set; }
        public System.String MCNO { get; set; }
        public System.String STATUSFLAG { get; set; }
        public System.Decimal? SATURATOR_CHEM_PV { get; set; }
        public System.Decimal? SATURATOR_CHEM_SP { get; set; }
        public System.Decimal? WASHING1_PV { get; set; }
        public System.Decimal? WASHING1_SP { get; set; }
        public System.Decimal? WASHING2_PV { get; set; }
        public System.Decimal? WASHING2_SP { get; set; }
        public System.Decimal? HOTFLUE_PV { get; set; }
        public System.Decimal? HOTFLUE_SP { get; set; }
        public System.Decimal? BE_COATWIDTH { get; set; }
        public System.Decimal? TEMP1_PV { get; set; }
        public System.Decimal? TEMP1_SP { get; set; }
        public System.Decimal? TEMP2_PV { get; set; }
        public System.Decimal? TEMP2_SP { get; set; }
        public System.Decimal? TEMP3_PV { get; set; }
        public System.Decimal? TEMP3_SP { get; set; }
        public System.Decimal? TEMP4_PV { get; set; }
        public System.Decimal? TEMP4_SP { get; set; }
        public System.Decimal? TEMP5_PV { get; set; }
        public System.Decimal? TEMP5_SP { get; set; }
        public System.Decimal? TEMP6_PV { get; set; }
        public System.Decimal? TEMP6_SP { get; set; }
        public System.Decimal? TEMP7_PV { get; set; }
        public System.Decimal? TEMP7_SP { get; set; }
        public System.Decimal? TEMP8_PV { get; set; }
        public System.Decimal? TEMP8_SP { get; set; }
        public System.Decimal? TEMP9_PV { get; set; }
        public System.Decimal? TEMP9_SP { get; set; }
        public System.Decimal? TEMP10_PV { get; set; }
        public System.Decimal? TEMP10_SP { get; set; }
        public System.Decimal? FANRPM { get; set; }
        public System.Decimal? EXFAN_FRONT_BACK { get; set; }
        public System.Decimal? EXFAN_MIDDLE { get; set; }
        public System.Decimal? ANGLEKNIFE { get; set; }
        public System.String BLADENO { get; set; }
        public System.String BLADEDIRECTION { get; set; }
        public System.Decimal? CYLINDER_TENSIONUP { get; set; }
        public System.Decimal? OPOLE_TENSIONDOWN { get; set; }
        public System.Decimal? FRAMEWIDTH_FORN { get; set; }
        public System.Decimal? FRAMEWIDTH_TENTER { get; set; }
        public System.Decimal? PATHLINE { get; set; }
        public System.Decimal? FEEDIN { get; set; }
        public System.Decimal? OVERFEED { get; set; }
        public System.Decimal? SPEED_PV { get; set; }
        public System.Decimal? SPEED_SP { get; set; }
        public System.Decimal? WIDTHCOAT { get; set; }
        public System.Decimal? WIDTHCOATALL { get; set; }
        public System.String SILICONE_A { get; set; }
        public System.String SILICONE_B { get; set; }
        public System.Decimal? COATINGWEIGTH_L { get; set; }
        public System.Decimal? COATINGWEIGTH_C { get; set; }
        public System.Decimal? COATINGWEIGTH_R { get; set; }
        public System.String CONDITIONBY { get; set; }
        public System.DateTime? CONDITIONDATE { get; set; }
        public System.String FINISHBY { get; set; }
        public System.String SAMPLINGID { get; set; }
        public System.String STARTBY { get; set; }
        public System.Decimal? LENGTH6 { get; set; }
        public System.Decimal? LENGTH7 { get; set; }
        public System.String REMARK { get; set; }
        public System.Decimal? HUMIDITY_BF { get; set; }
        public System.Decimal? HUMIDITY_AF { get; set; }
        public System.String REPROCESS { get; set; }
        public System.Decimal? INPUTLENGTH { get; set; }
        public System.String OPERATOR_GROUP { get; set; }
        public System.Decimal? TEMP1_MIN { get; set; }
        public System.Decimal? TEMP1_MAX { get; set; }
        public System.Decimal? TEMP2_MIN { get; set; }
        public System.Decimal? TEMP2_MAX { get; set; }
        public System.Decimal? TEMP3_MIN { get; set; }
        public System.Decimal? TEMP3_MAX { get; set; }
        public System.Decimal? TEMP4_MIN { get; set; }
        public System.Decimal? TEMP4_MAX { get; set; }
        public System.Decimal? TEMP5_MIN { get; set; }
        public System.Decimal? TEMP5_MAX { get; set; }
        public System.Decimal? TEMP6_MIN { get; set; }
        public System.Decimal? TEMP6_MAX { get; set; }
        public System.Decimal? TEMP7_MIN { get; set; }
        public System.Decimal? TEMP7_MAX { get; set; }
        public System.Decimal? TEMP8_MIN { get; set; }
        public System.Decimal? TEMP8_MAX { get; set; }
        public System.Decimal? TEMP9_MIN { get; set; }
        public System.Decimal? TEMP9_MAX { get; set; }
        public System.Decimal? TEMP10_MIN { get; set; }
        public System.Decimal? TEMP10_MAX { get; set; }
        public System.Decimal? SAT_CHEM_MIN { get; set; }
        public System.Decimal? SAT_CHEM_MAX { get; set; }
        public System.Decimal? WASHING1_MIN { get; set; }
        public System.Decimal? WASHING1_MAX { get; set; }
        public System.Decimal? WASHING2_MIN { get; set; }
        public System.Decimal? WASHING2_MAX { get; set; }
        public System.Decimal? HOTFLUE_MIN { get; set; }
        public System.Decimal? HOTFLUE_MAX { get; set; }
        public System.Decimal? SPEED_MIN { get; set; }
        public System.Decimal? SPEED_MAX { get; set; }
        public System.Decimal? TENSIONUP_MIN { get; set; }
        public System.Decimal? TENSIONUP_MAX { get; set; }
        public System.Decimal? TENSIONDOWN_MIN { get; set; }
        public System.Decimal? TENSIONDOWN_MAX { get; set; }
        public System.String PARTNO { get; set; }
        public System.Decimal? FINISHLENGTH { get; set; }
        public System.String ITM_WEAVING { get; set; }
    }

    #endregion

    #region FINISHING_GETCOATINGDATA Parameter

    public class FINISHING_GETCOATINGDATAParameter
    {
        public System.String P_MCNO { get; set; }
        public System.String P_FLAG { get; set; }
    }

    #endregion

    #region FINISHING_GETCOATINGDATA Result

    public class FINISHING_GETCOATINGDATAResult
    {
        public System.String FINISHINGLOT { get; set; }
        public System.String ITM_CODE { get; set; }
        public System.String WEAVINGLOT { get; set; }
        public System.String FINISHINGCUSTOMER { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.Decimal? LENGTH1 { get; set; }
        public System.Decimal? LENGTH2 { get; set; }
        public System.Decimal? LENGTH3 { get; set; }
        public System.Decimal? LENGTH4 { get; set; }
        public System.Decimal? LENGTH5 { get; set; }
        public System.String MCNO { get; set; }
        public System.String STATUSFLAG { get; set; }
        public System.Decimal? SATURATOR_CHEM_PV { get; set; }
        public System.Decimal? SATURATOR_CHEM_SP { get; set; }
        public System.Decimal? WASHING1_PV { get; set; }
        public System.Decimal? WASHING1_SP { get; set; }
        public System.Decimal? WASHING2_PV { get; set; }
        public System.Decimal? WASHING2_SP { get; set; }
        public System.Decimal? HOTFLUE_PV { get; set; }
        public System.Decimal? HOTFLUE_SP { get; set; }
        public System.Decimal? BE_COATWIDTH { get; set; }
        public System.Decimal? TEMP1_PV { get; set; }
        public System.Decimal? TEMP1_SP { get; set; }
        public System.Decimal? TEMP2_PV { get; set; }
        public System.Decimal? TEMP2_SP { get; set; }
        public System.Decimal? TEMP3_PV { get; set; }
        public System.Decimal? TEMP3_SP { get; set; }
        public System.Decimal? TEMP4_PV { get; set; }
        public System.Decimal? TEMP4_SP { get; set; }
        public System.Decimal? TEMP5_PV { get; set; }
        public System.Decimal? TEMP5_SP { get; set; }
        public System.Decimal? TEMP6_PV { get; set; }
        public System.Decimal? TEMP6_SP { get; set; }
        public System.Decimal? TEMP7_PV { get; set; }
        public System.Decimal? TEMP7_SP { get; set; }
        public System.Decimal? TEMP8_PV { get; set; }
        public System.Decimal? TEMP8_SP { get; set; }
        public System.Decimal? TEMP9_PV { get; set; }
        public System.Decimal? TEMP9_SP { get; set; }
        public System.Decimal? TEMP10_PV { get; set; }
        public System.Decimal? TEMP10_SP { get; set; }
        public System.Decimal? FANRPM { get; set; }
        public System.Decimal? EXFAN_FRONT_BACK { get; set; }
        public System.Decimal? EXFAN_MIDDLE { get; set; }
        public System.Decimal? ANGLEKNIFE { get; set; }
        public System.String BLADENO { get; set; }
        public System.String BLADEDIRECTION { get; set; }
        public System.Decimal? CYLINDER_TENSIONUP { get; set; }
        public System.Decimal? OPOLE_TENSIONDOWN { get; set; }
        public System.Decimal? FRAMEWIDTH_FORN { get; set; }
        public System.Decimal? FRAMEWIDTH_TENTER { get; set; }
        public System.Decimal? PATHLINE { get; set; }
        public System.Decimal? FEEDIN { get; set; }
        public System.Decimal? OVERFEED { get; set; }
        public System.Decimal? SPEED_PV { get; set; }
        public System.Decimal? SPEED_SP { get; set; }
        public System.Decimal? WIDTHCOAT { get; set; }
        public System.Decimal? WIDTHCOATALL { get; set; }
        public System.String SILICONE_A { get; set; }
        public System.String SILICONE_B { get; set; }
        public System.Decimal? COATINGWEIGTH_L { get; set; }
        public System.Decimal? COATINGWEIGTH_C { get; set; }
        public System.Decimal? COATINGWEIGTH_R { get; set; }
        public System.String CONDITIONBY { get; set; }
        public System.DateTime? CONDITIONDATE { get; set; }
        public System.String FINISHBY { get; set; }
        public System.String SAMPLINGID { get; set; }
        public System.String STARTBY { get; set; }
        public System.Decimal? LENGTH6 { get; set; }
        public System.Decimal? LENGTH7 { get; set; }
        public System.String REMARK { get; set; }
        public System.Decimal? HUMIDITY_BF { get; set; }
        public System.Decimal? HUMIDITY_AF { get; set; }
        public System.String ITM_WEAVING { get; set; }
        public System.Decimal? WEAVINGLENGTH { get; set; }
        public System.String OPERATOR_GROUP { get; set; }
    }

    #endregion

    #region FINISHING_GETCOATINGCONDITION Parameter

    public class FINISHING_GETCOATINGCONDITIONParameter
    {
        public System.String P_ITEMCODE { get; set; }
        public System.String P_COATNO { get; set; }
    }

    #endregion

    #region FINISHING_GETCOATINGCONDITION Result

    public class FINISHING_GETCOATINGCONDITIONResult
    {
        public System.String ITM_CODE { get; set; }
        public System.Decimal? SATURATOR_CHEM { get; set; }
        public System.Decimal? SATURATOR_CHEM_MARGIN { get; set; }
        public System.Decimal? WASHING1 { get; set; }
        public System.Decimal? WASHING1_MARGIN { get; set; }
        public System.Decimal? WASHING2 { get; set; }
        public System.Decimal? WASHING2_MARGIN { get; set; }
        public System.Decimal? HOTFLUE { get; set; }
        public System.Decimal? HOTFLUE_MARGIN { get; set; }
        public System.Decimal? BE_COATWIDTHMAX { get; set; }
        public System.Decimal? BE_COATWIDTHMIN { get; set; }
        public System.Decimal? ROOMTEMP { get; set; }
        public System.Decimal? ROOMTEMP_MARGIN { get; set; }
        public System.Decimal? FANRPM { get; set; }
        public System.Decimal? FANRPM_MARGIN { get; set; }
        public System.Decimal? EXFAN_FRONT_BACK { get; set; }
        public System.Decimal? EXFAN_MARGIN { get; set; }
        public System.Decimal? ANGLEKNIFE { get; set; }
        public System.String BLADENO { get; set; }
        public System.String BLADEDIRECTION { get; set; }
        public System.String PATHLINE { get; set; }
        public System.Decimal? FEEDIN_MAX { get; set; }
        public System.Decimal? TENSION_UP { get; set; }
        public System.Decimal? TENSION_DOWN { get; set; }
        public System.Decimal? TENSION_DOWN_MARGIN { get; set; }
        public System.Decimal? FRAMEWIDTH_FORN { get; set; }
        public System.Decimal? FRAMEWIDTH_TENTER { get; set; }
        public System.String OVERFEED { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.Decimal? SPEED_MARGIN { get; set; }
        public System.Decimal? WIDTHCOAT { get; set; }
        public System.Decimal? WIDTHCOATALL_MAX { get; set; }
        public System.Decimal? WIDTHCOATALL_MIN { get; set; }
        public System.Decimal? COATINGWEIGTH_MAX { get; set; }
        public System.Decimal? COATINGWEIGTH_MIN { get; set; }
        public System.Decimal? EXFAN_MIDDLE { get; set; }
        public System.String RATIOSILICONE { get; set; }
        public System.String COATNO { get; set; }
        public System.Decimal? FEEDIN_MIN { get; set; }
        public System.Decimal? TENSION_UP_MARGIN { get; set; }
        public System.Decimal? HUMIDITY_MAX { get; set; }
        public System.Decimal? HUMIDITY_MIN { get; set; }
    }

    #endregion

    #region FINISHING_EDITLENGTH Parameter

    public class FINISHING_EDITLENGTHParameter
    {
        public System.String P_WEAVLOT { get; set; }
        public System.String P_FINISHLOT { get; set; }
        public System.String P_PROCESS { get; set; }
        public System.Decimal? P_LENGTH1 { get; set; }
        public System.Decimal? P_LENGTH2 { get; set; }
        public System.Decimal? P_LENGTH3 { get; set; }
        public System.Decimal? P_LENGTH4 { get; set; }
        public System.Decimal? P_LENGTH5 { get; set; }
        public System.Decimal? P_LENGTH6 { get; set; }
        public System.Decimal? P_LENGTH7 { get; set; }
        public System.Decimal? P_TOTALLENGTH { get; set; }
        public System.String P_OPERATOR { get; set; }
    }

    #endregion

    #region FINISHING_EDITLENGTH Result

    public class FINISHING_EDITLENGTHResult
    {
    }

    #endregion

    #region FINISHING_DRYERPLCDATA Parameter

    public class FINISHING_DRYERPLCDATAParameter
    {
        public System.String P_MCNO { get; set; }
        public System.String P_WEAVINGLOT { get; set; }
    }

    #endregion

    #region FINISHING_DRYERPLCDATA Result

    public class FINISHING_DRYERPLCDATAResult
    {
        public System.DateTime? STARTDATE { get; set; }
        public System.Decimal? HOTF_MIN { get; set; }
        public System.Decimal? HOTF_MAX { get; set; }
        public System.Decimal? HOTF { get; set; }
        public System.Decimal? SPEED_MIN { get; set; }
        public System.Decimal? SPEED_MAX { get; set; }
        public System.Decimal? SPEED { get; set; }
    }

    #endregion

    #region FINISHING_DRYERDATABYLOT Parameter

    public class FINISHING_DRYERDATABYLOTParameter
    {
        public System.String P_MCNO { get; set; }
        public System.String P_WEAVINGLOT { get; set; }
    }

    #endregion

    #region FINISHING_DRYERDATABYLOT Result

    public class FINISHING_DRYERDATABYLOTResult
    {
        public System.String FINISHINGLOT { get; set; }
        public System.String ITM_CODE { get; set; }
        public System.String WEAVINGLOT { get; set; }
        public System.String FINISHINGCUSTOMER { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.Decimal? LENGTH1 { get; set; }
        public System.Decimal? LENGTH2 { get; set; }
        public System.Decimal? LENGTH3 { get; set; }
        public System.Decimal? LENGTH4 { get; set; }
        public System.Decimal? LENGTH5 { get; set; }
        public System.String MCNO { get; set; }
        public System.String STATUSFLAG { get; set; }
        public System.Decimal? WIDTH_BE_HEAT { get; set; }
        public System.Decimal? ACCPRESURE { get; set; }
        public System.Decimal? ASSTENSION { get; set; }
        public System.Decimal? ACCARIDENSER { get; set; }
        public System.Decimal? CHIFROT { get; set; }
        public System.Decimal? CHIREAR { get; set; }
        public System.Decimal? DRYERTEMP1_PV { get; set; }
        public System.Decimal? DRYERTEMP1_SP { get; set; }
        public System.Decimal? SPEED_PV { get; set; }
        public System.Decimal? SPEED_SP { get; set; }
        public System.Decimal? STEAMPRESSURE { get; set; }
        public System.Decimal? DRYERCIRCUFAN { get; set; }
        public System.Decimal? EXHAUSTFAN { get; set; }
        public System.Decimal? WIDTH_AF_HEAT { get; set; }
        public System.String CONDITIONBY { get; set; }
        public System.DateTime? CONDITIONDATE { get; set; }
        public System.String FINISHBY { get; set; }
        public System.String SAMPLINGID { get; set; }
        public System.String STARTBY { get; set; }
        public System.Decimal? LENGTH6 { get; set; }
        public System.Decimal? LENGTH7 { get; set; }
        public System.String REMARK { get; set; }
        public System.Decimal? HUMIDITY_BF { get; set; }
        public System.Decimal? HUMIDITY_AF { get; set; }
        public System.String REPROCESS { get; set; }
        public System.Decimal? WEAVLENGTH { get; set; }
        public System.String OPERATOR_GROUP { get; set; }
        public System.Decimal? HOTFLUE_MIN { get; set; }
        public System.Decimal? HOTFLUE_MAX { get; set; }
        public System.Decimal? SPEED_MIN { get; set; }
        public System.Decimal? SPEED_MAX { get; set; }
        public System.String ITM_WEAVING { get; set; }
    }

    #endregion

    #region FINISHING_COATINGPLCDATA Parameter

    public class FINISHING_COATINGPLCDATAParameter
    {
        public System.String P_MCNO { get; set; }
        public System.String P_WEAVINGLOT { get; set; }
    }

    #endregion

    #region FINISHING_COATINGPLCDATA Result

    public class FINISHING_COATINGPLCDATAResult
    {
        public System.DateTime? STARTDATE { get; set; }
        public System.Decimal? TEMP1_MIN { get; set; }
        public System.Decimal? TEMP1_MAX { get; set; }
        public System.Decimal? TEMP1 { get; set; }
        public System.Decimal? TEMP2_MIN { get; set; }
        public System.Decimal? TEMP2_MAX { get; set; }
        public System.Decimal? TEMP2 { get; set; }
        public System.Decimal? TEMP3_MIN { get; set; }
        public System.Decimal? TEMP3_MAX { get; set; }
        public System.Decimal? TEMP3 { get; set; }
        public System.Decimal? TEMP4_MIN { get; set; }
        public System.Decimal? TEMP4_MAX { get; set; }
        public System.Decimal? TEMP4 { get; set; }
        public System.Decimal? TEMP5_MIN { get; set; }
        public System.Decimal? TEMP5_MAX { get; set; }
        public System.Decimal? TEMP5 { get; set; }
        public System.Decimal? TEMP6_MIN { get; set; }
        public System.Decimal? TEMP6_MAX { get; set; }
        public System.Decimal? TEMP6 { get; set; }
        public System.Decimal? TEMP7_MIN { get; set; }
        public System.Decimal? TEMP7_MAX { get; set; }
        public System.Decimal? TEMP7 { get; set; }
        public System.Decimal? TEMP8_MIN { get; set; }
        public System.Decimal? TEMP8_MAX { get; set; }
        public System.Decimal? TEMP8 { get; set; }
        public System.Decimal? TEMP9_MIN { get; set; }
        public System.Decimal? TEMP9_MAX { get; set; }
        public System.Decimal? TEMP9 { get; set; }
        public System.Decimal? TEMP10_MIN { get; set; }
        public System.Decimal? TEMP10_MAX { get; set; }
        public System.Decimal? TEMP10 { get; set; }
        public System.Decimal? SPEED_MIN { get; set; }
        public System.Decimal? SPEED_MAX { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.Decimal? SAT_MIN { get; set; }
        public System.Decimal? SAT_MAX { get; set; }
        public System.Decimal? SAT { get; set; }
        public System.Decimal? HOTF_MIN { get; set; }
        public System.Decimal? HOTF_MAX { get; set; }
        public System.Decimal? HOTF { get; set; }
        public System.Decimal? WASH1_MIN { get; set; }
        public System.Decimal? WASH1_MAX { get; set; }
        public System.Decimal? WASH1 { get; set; }
        public System.Decimal? WASH2_MIN { get; set; }
        public System.Decimal? WASH2_MAX { get; set; }
        public System.Decimal? WASH2 { get; set; }
        public System.Decimal? TENUP_MIN { get; set; }
        public System.Decimal? TENUP_MAX { get; set; }
        public System.Decimal? TENUP { get; set; }
        public System.Decimal? TENDOWN_MIN { get; set; }
        public System.Decimal? TENDOWN_MAX { get; set; }
        public System.Decimal? TENDOWN { get; set; }
    }

    #endregion

    #region FINISHING_COATINGDATABYLOT Parameter

    public class FINISHING_COATINGDATABYLOTParameter
    {
        public System.String P_MCNO { get; set; }
        public System.String P_WEAVINGLOT { get; set; }
    }

    #endregion

    #region FINISHING_COATINGDATABYLOT Result

    public class FINISHING_COATINGDATABYLOTResult
    {
        public System.String FINISHINGLOT { get; set; }
        public System.String ITM_CODE { get; set; }
        public System.String WEAVINGLOT { get; set; }
        public System.String FINISHINGCUSTOMER { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.Decimal? LENGTH1 { get; set; }
        public System.Decimal? LENGTH2 { get; set; }
        public System.Decimal? LENGTH3 { get; set; }
        public System.Decimal? LENGTH4 { get; set; }
        public System.Decimal? LENGTH5 { get; set; }
        public System.String MCNO { get; set; }
        public System.String STATUSFLAG { get; set; }
        public System.Decimal? SATURATOR_CHEM_PV { get; set; }
        public System.Decimal? SATURATOR_CHEM_SP { get; set; }
        public System.Decimal? WASHING1_PV { get; set; }
        public System.Decimal? WASHING1_SP { get; set; }
        public System.Decimal? WASHING2_PV { get; set; }
        public System.Decimal? WASHING2_SP { get; set; }
        public System.Decimal? HOTFLUE_PV { get; set; }
        public System.Decimal? HOTFLUE_SP { get; set; }
        public System.Decimal? BE_COATWIDTH { get; set; }
        public System.Decimal? TEMP1_PV { get; set; }
        public System.Decimal? TEMP1_SP { get; set; }
        public System.Decimal? TEMP2_PV { get; set; }
        public System.Decimal? TEMP2_SP { get; set; }
        public System.Decimal? TEMP3_PV { get; set; }
        public System.Decimal? TEMP3_SP { get; set; }
        public System.Decimal? TEMP4_PV { get; set; }
        public System.Decimal? TEMP4_SP { get; set; }
        public System.Decimal? TEMP5_PV { get; set; }
        public System.Decimal? TEMP5_SP { get; set; }
        public System.Decimal? TEMP6_PV { get; set; }
        public System.Decimal? TEMP6_SP { get; set; }
        public System.Decimal? TEMP7_PV { get; set; }
        public System.Decimal? TEMP7_SP { get; set; }
        public System.Decimal? TEMP8_PV { get; set; }
        public System.Decimal? TEMP8_SP { get; set; }
        public System.Decimal? TEMP9_PV { get; set; }
        public System.Decimal? TEMP9_SP { get; set; }
        public System.Decimal? TEMP10_PV { get; set; }
        public System.Decimal? TEMP10_SP { get; set; }
        public System.Decimal? FANRPM { get; set; }
        public System.Decimal? EXFAN_FRONT_BACK { get; set; }
        public System.Decimal? EXFAN_MIDDLE { get; set; }
        public System.Decimal? ANGLEKNIFE { get; set; }
        public System.String BLADENO { get; set; }
        public System.String BLADEDIRECTION { get; set; }
        public System.Decimal? CYLINDER_TENSIONUP { get; set; }
        public System.Decimal? OPOLE_TENSIONDOWN { get; set; }
        public System.Decimal? FRAMEWIDTH_FORN { get; set; }
        public System.Decimal? FRAMEWIDTH_TENTER { get; set; }
        public System.Decimal? PATHLINE { get; set; }
        public System.Decimal? FEEDIN { get; set; }
        public System.Decimal? OVERFEED { get; set; }
        public System.Decimal? SPEED_PV { get; set; }
        public System.Decimal? SPEED_SP { get; set; }
        public System.Decimal? WIDTHCOAT { get; set; }
        public System.Decimal? WIDTHCOATALL { get; set; }
        public System.String SILICONE_A { get; set; }
        public System.String SILICONE_B { get; set; }
        public System.Decimal? COATINGWEIGTH_L { get; set; }
        public System.Decimal? COATINGWEIGTH_C { get; set; }
        public System.Decimal? COATINGWEIGTH_R { get; set; }
        public System.String CONDITIONBY { get; set; }
        public System.DateTime? CONDITIONDATE { get; set; }
        public System.String FINISHBY { get; set; }
        public System.String SAMPLINGID { get; set; }
        public System.String STARTBY { get; set; }
        public System.Decimal? LENGTH6 { get; set; }
        public System.Decimal? LENGTH7 { get; set; }
        public System.String REMARK { get; set; }
        public System.Decimal? HUMIDITY_BF { get; set; }
        public System.Decimal? HUMIDITY_AF { get; set; }
        public System.String REPROCESS { get; set; }
        public System.Decimal? WEAVLENGTH { get; set; }
        public System.String OPERATOR_GROUP { get; set; }
        public System.Decimal? TEMP1_MIN { get; set; }
        public System.Decimal? TEMP1_MAX { get; set; }
        public System.Decimal? TEMP2_MIN { get; set; }
        public System.Decimal? TEMP2_MAX { get; set; }
        public System.Decimal? TEMP3_MIN { get; set; }
        public System.Decimal? TEMP3_MAX { get; set; }
        public System.Decimal? TEMP4_MIN { get; set; }
        public System.Decimal? TEMP4_MAX { get; set; }
        public System.Decimal? TEMP5_MIN { get; set; }
        public System.Decimal? TEMP5_MAX { get; set; }
        public System.Decimal? TEMP6_MIN { get; set; }
        public System.Decimal? TEMP6_MAX { get; set; }
        public System.Decimal? TEMP7_MIN { get; set; }
        public System.Decimal? TEMP7_MAX { get; set; }
        public System.Decimal? TEMP8_MIN { get; set; }
        public System.Decimal? TEMP8_MAX { get; set; }
        public System.Decimal? TEMP9_MIN { get; set; }
        public System.Decimal? TEMP9_MAX { get; set; }
        public System.Decimal? TEMP10_MIN { get; set; }
        public System.Decimal? TEMP10_MAX { get; set; }
        public System.Decimal? SAT_CHEM_MIN { get; set; }
        public System.Decimal? SAT_CHEM_MAX { get; set; }
        public System.Decimal? WASHING1_MIN { get; set; }
        public System.Decimal? WASHING1_MAX { get; set; }
        public System.Decimal? WASHING2_MIN { get; set; }
        public System.Decimal? WASHING2_MAX { get; set; }
        public System.Decimal? HOTFLUE_MIN { get; set; }
        public System.Decimal? HOTFLUE_MAX { get; set; }
        public System.Decimal? SPEED_MIN { get; set; }
        public System.Decimal? SPEED_MAX { get; set; }
        public System.Decimal? TENSIONUP_MIN { get; set; }
        public System.Decimal? TENSIONUP_MAX { get; set; }
        public System.Decimal? TENSIONDOWN_MIN { get; set; }
        public System.Decimal? TENSIONDOWN_MAX { get; set; }
        public System.String ITM_WEAVING { get; set; }
    }

    #endregion

    #region FINISHING_CHECKITEMWEAVING Parameter

    public class FINISHING_CHECKITEMWEAVINGParameter
    {
        public System.String P_ITMWEAVING { get; set; }
        public System.String P_ITMCODE { get; set; }
    }

    #endregion

    #region FINISHING_CHECKITEMWEAVING Result

    public class FINISHING_CHECKITEMWEAVINGResult
    {
        public System.String ITM_CODE { get; set; }
        public System.String ITM_WEAVING { get; set; }
        public System.String ITM_YARN { get; set; }
        public System.Decimal? ITM_WIDTH { get; set; }
        public System.String ITM_PROC1 { get; set; }
        public System.String ITM_PROC2 { get; set; }
        public System.String ITM_PROC3 { get; set; }
        public System.String ITM_PROC4 { get; set; }
        public System.String ITM_PROC5 { get; set; }
        public System.String ITM_PROC6 { get; set; }
        public System.DateTime? CREATEDATE { get; set; }
        public System.String CREATEBY { get; set; }
        public System.DateTime? EDITDATE { get; set; }
        public System.String EDITBY { get; set; }
        public System.String ITM_PREPARE { get; set; }
        public System.Decimal? COREWEIGHT { get; set; }
        public System.Decimal? FULLWEIGHT { get; set; }
        public System.String ITM_GROUP { get; set; }
        public System.String YARNCODE { get; set; }
        public System.String WIDTHCODE { get; set; }
        public System.Decimal? WIDTHWEAVING { get; set; }
        public System.String LABFORM { get; set; }
        public System.String WEAVE_TYPE { get; set; }
    }

    #endregion

    #region FINISHING_CANCEL Parameter

    public class FINISHING_CANCELParameter
    {
        public System.String P_WEAVLOT { get; set; }
        public System.String P_FINISHLOT { get; set; }
        public System.String P_PROCESS { get; set; }
        public System.String P_OPERATOR { get; set; }
    }

    #endregion

    #region FINISHING_CANCEL Result

    public class FINISHING_CANCELResult
    {
    }

    #endregion

    #region FG_UPDATEDATASEND400 Parameter

    public class FG_UPDATEDATASEND400Parameter
    {
        public System.String P_INSPECTLOT { get; set; }
        public System.DateTime? P_INSPECTIONDATE { get; set; }
        public System.String P_PALLETNO { get; set; }
    }

    #endregion

    #region FG_UPDATEDATASEND400 Result

    public class FG_UPDATEDATASEND400Result
    {
    }

    #endregion

    #region FG_SEARCHDATASEND400 Parameter

    public class FG_SEARCHDATASEND400Parameter
    {
        public System.String P_STARTDATE { get; set; }
        public System.String P_ENDDATE { get; set; }
        public System.String P_STOCK { get; set; }
        public System.String P_PALLETNO { get; set; }
    }

    #endregion

    #region FG_SEARCHDATASEND400 Result

    public class FG_SEARCHDATASEND400Result
    {
        public System.String PALLETNO { get; set; }
        public System.String INSPECTIONLOT { get; set; }
        public System.String ITEMCODE { get; set; }
        public System.Decimal? NETLENGTH { get; set; }
        public System.Decimal? GROSSWEIGHT { get; set; }
        public System.Decimal? NETWEIGHT { get; set; }
        public System.String GRADE { get; set; }
        public System.String CUSTOMERTYPE { get; set; }
        public System.DateTime? INSPECTIONDATE { get; set; }
        public System.String STOCK { get; set; }
        public System.String FLAG { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.Decimal? GROSSLENGTH { get; set; }
        public System.String ISLAB { get; set; }
        public System.String RETEST { get; set; }
        public System.String PRODUCTTYPE { get; set; }
        public System.String ROLLNO { get; set; }
        public System.String CUSTOMERITEM { get; set; }
        public System.Decimal? ORDERNO { get; set; }
        public System.String FINISHFLAG { get; set; }
    }

    #endregion

    #region DRAW_UPDATEDRAWING Parameter

    public class DRAW_UPDATEDRAWINGParameter
    {
        public System.String P_BEAMLOT { get; set; }
        public System.String P_DRAWINGTYPE { get; set; }
        public System.String P_REEDNO { get; set; }
        public System.String P_HEALDCOLOR { get; set; }
        public System.Decimal? P_HEALDNO { get; set; }
        public System.String P_OPERATOR { get; set; }
        public System.String P_FLAG { get; set; }
        public System.String P_GROUP { get; set; }
    }

    #endregion

    #region DRAW_UPDATEDRAWING Result

    public class DRAW_UPDATEDRAWINGResult
    {
        public System.String R_RESULT { get; set; }
    }

    #endregion

    #region DRAW_TRANSFERSLIP Parameter

    public class DRAW_TRANSFERSLIPParameter
    {
        public System.String P_BEAMERROLL { get; set; }
    }

    #endregion

    #region DRAW_TRANSFERSLIP Result

    public class DRAW_TRANSFERSLIPResult
    {
        public System.String BEAMLOT { get; set; }
        public System.String ITM_PREPARE { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.String DRAWINGTYPE { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDATE { get; set; }
        public System.String REEDNO { get; set; }
        public System.String HEALDCOLOR { get; set; }
        public System.String STARTBY { get; set; }
        public System.String FINISHBY { get; set; }
        public System.String USEFLAG { get; set; }
        public System.Decimal? HEALDNO { get; set; }
        public System.String OPERATOR_GROUP { get; set; }
        public System.Decimal? TOTALYARN { get; set; }
        public System.String BEAMNO { get; set; }
        public System.Decimal? LENGTH { get; set; }
        public System.String BEAMERNO { get; set; }
    }

    #endregion

    #region DRAW_INSERTDRAWING Parameter

    public class DRAW_INSERTDRAWINGParameter
    {
        public System.String P_BEAMLOT { get; set; }
        public System.String P_ITMPREPARE { get; set; }
        public System.String P_PRODUCTID { get; set; }
        public System.String P_DRAWINGTYPE { get; set; }
        public System.String P_REEDNO { get; set; }
        public System.String P_HEALDCOLOR { get; set; }
        public System.Decimal? P_HEALDNO { get; set; }
        public System.String P_OPERATOR { get; set; }
        public System.String P_GROUP { get; set; }
    }

    #endregion

    #region DRAW_INSERTDRAWING Result

    public class DRAW_INSERTDRAWINGResult
    {
        public System.String R_RESULT { get; set; }
    }

    #endregion

    #region DRAW_GETSPECBYCHOPNO Parameter

    public class DRAW_GETSPECBYCHOPNOParameter
    {
        public System.String P_ITMPREPARE { get; set; }
    }

    #endregion

    #region DRAW_GETSPECBYCHOPNO Result

    public class DRAW_GETSPECBYCHOPNOResult
    {
        public System.String CHOPNO { get; set; }
        public System.Decimal? NOYARN { get; set; }
        public System.Decimal? REEDTYPE { get; set; }
        public System.Decimal? LENGTH { get; set; }
        public System.Decimal? NODENT { get; set; }
        public System.Decimal? PITCH { get; set; }
        public System.Decimal? AIRSPACE { get; set; }
    }

    #endregion

    #region DRAW_GETDRAWINGLISTBYITEM Parameter

    public class DRAW_GETDRAWINGLISTBYITEMParameter
    {
        public System.String P_ITMPREPARE { get; set; }
    }

    #endregion

    #region DRAW_GETDRAWINGLISTBYITEM Result

    public class DRAW_GETDRAWINGLISTBYITEMResult
    {
        public System.String BEAMLOT { get; set; }
        public System.String ITM_PREPARE { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.String DRAWINGTYPE { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDATE { get; set; }
        public System.String REEDNO { get; set; }
        public System.String HEALDCOLOR { get; set; }
        public System.String STARTBY { get; set; }
        public System.String FINISHBY { get; set; }
        public System.String USEFLAG { get; set; }
        public System.Decimal? HEALDNO { get; set; }
        public System.String OPERATOR_GROUP { get; set; }
        public System.Decimal? REEDTYPE { get; set; }
        public System.Decimal? HEALDNO1 { get; set; }
        public System.Decimal? TOTALYARN { get; set; }
        public System.String BEAMNO { get; set; }
    }

    #endregion

    #region DRAW_GETBEAMLOTDETAIL Parameter

    public class DRAW_GETBEAMLOTDETAILParameter
    {
        public System.String P_BEAMLOT { get; set; }
    }

    #endregion

    #region DRAW_GETBEAMLOTDETAIL Result

    public class DRAW_GETBEAMLOTDETAILResult
    {
        public System.String BEAMERNO { get; set; }
        public System.String BEAMLOT { get; set; }
        public System.String BEAMNO { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.Decimal? LENGTH { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.Decimal? BEAMSTANDTENSION { get; set; }
        public System.Decimal? WINDINGTENSION { get; set; }
        public System.Decimal? HARDNESS_L { get; set; }
        public System.Decimal? HARDNESS_N { get; set; }
        public System.Decimal? HARDNESS_R { get; set; }
        public System.Decimal? INSIDE_WIDTH { get; set; }
        public System.Decimal? OUTSIDE_WIDTH { get; set; }
        public System.Decimal? FULL_WIDTH { get; set; }
        public System.String STARTBY { get; set; }
        public System.String DOFFBY { get; set; }
        public System.String BEAMMC { get; set; }
        public System.String FLAG { get; set; }
        public System.String REMARK { get; set; }
        public System.Decimal? TENSION_ST1 { get; set; }
        public System.Decimal? TENSION_ST2 { get; set; }
        public System.Decimal? TENSION_ST3 { get; set; }
        public System.Decimal? TENSION_ST4 { get; set; }
        public System.Decimal? TENSION_ST5 { get; set; }
        public System.Decimal? TENSION_ST6 { get; set; }
        public System.Decimal? TENSION_ST7 { get; set; }
        public System.Decimal? TENSION_ST8 { get; set; }
        public System.Decimal? TENSION_ST9 { get; set; }
        public System.Decimal? TENSION_ST10 { get; set; }
        public System.String EDITBY { get; set; }
        public System.String OLDBEAMNO { get; set; }
        public System.DateTime? EDITDATE { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.String ITM_PREPARE { get; set; }
        public System.Decimal? TOTALYARN { get; set; }
    }

    #endregion

    #region DRAW_DAILYREPORT Parameter

    public class DRAW_DAILYREPORTParameter
    {
        public System.String P_DATE { get; set; }
    }

    #endregion

    #region DRAW_DAILYREPORT Result

    public class DRAW_DAILYREPORTResult
    {
        public System.String BEAMLOT { get; set; }
        public System.String ITM_PREPARE { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.String DRAWINGTYPE { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDATE { get; set; }
        public System.String REEDNO { get; set; }
        public System.String HEALDCOLOR { get; set; }
        public System.String STARTBY { get; set; }
        public System.String FINISHBY { get; set; }
        public System.String USEFLAG { get; set; }
        public System.Decimal? HEALDNO { get; set; }
        public System.String OPERATOR_GROUP { get; set; }
        public System.Decimal? TOTALYARN { get; set; }
        public System.String BEAMNO { get; set; }
        public System.Decimal? LENGTH { get; set; }
        public System.String BEAMERNO { get; set; }
    }

    #endregion

    #region DEFECT_SEARCH Parameter

    public class DEFECT_SEARCHParameter
    {
        public System.String P_DEFECTID { get; set; }
        public System.String P_PROCESSID { get; set; }
        public System.String P_THAIDESC { get; set; }
        public System.String P_ENGDESC { get; set; }
    }

    #endregion

    #region DEFECT_SEARCH Result

    public class DEFECT_SEARCHResult
    {
        public System.String DEFECTCODE { get; set; }
        public System.String DESCRIPTION_TH { get; set; }
        public System.String DESCRIPTION_EN { get; set; }
        public System.String PROCESSID { get; set; }
        public System.String DEFECTPROCESSCODE { get; set; }
        public System.Decimal? POINT { get; set; }
        public System.String PROCESSDESCRIPTION { get; set; }
    }

    #endregion

    #region DEFECT_INSERTUPDATE Parameter

    public class DEFECT_INSERTUPDATEParameter
    {
        public System.String P_DEFECTID { get; set; }
        public System.String P_PROCESSID { get; set; }
        public System.String P_THAIDESC { get; set; }
        public System.String P_ENGDESC { get; set; }
        public System.Decimal? P_POINT { get; set; }
    }

    #endregion

    #region DEFECT_INSERTUPDATE Result

    public class DEFECT_INSERTUPDATEResult
    {
        public System.String R_RESULT { get; set; }
    }

    #endregion

    #region DEFECT_DELETE Parameter

    public class DEFECT_DELETEParameter
    {
        public System.String P_DEFECTID { get; set; }
    }

    #endregion

    #region DEFECT_DELETE Result

    public class DEFECT_DELETEResult
    {
    }

    #endregion

    #region CUT_UPDATEDATA Parameter

    public class CUT_UPDATEDATAParameter
    {
        public System.String P_ITEMLOT { get; set; }
        public System.DateTime? P_ENDDATE { get; set; }
        public System.String P_REMARK { get; set; }
        public System.Decimal? P_WIDTH1 { get; set; }
        public System.Decimal? P_WIDTH2 { get; set; }
        public System.Decimal? P_WIDTH3 { get; set; }
        public System.Decimal? P_WIDTH4 { get; set; }
        public System.Decimal? P_DISTANTBAR1 { get; set; }
        public System.Decimal? P_DISTANTBAR2 { get; set; }
        public System.Decimal? P_DISTANTBAR3 { get; set; }
        public System.Decimal? P_DISTANTBAR4 { get; set; }
        public System.Decimal? P_DISTANTLINE1 { get; set; }
        public System.Decimal? P_DISTANTLINE2 { get; set; }
        public System.Decimal? P_DISTANTLINE3 { get; set; }
        public System.Decimal? P_DENWARP { get; set; }
        public System.Decimal? P_DENWEFT { get; set; }
        public System.Decimal? P_SPEED { get; set; }
        public System.Decimal? P_WIDTHBE { get; set; }
        public System.Decimal? P_WIDTHAF { get; set; }
        public System.String P_BEGINLINE1 { get; set; }
        public System.String P_BEGINLINE2 { get; set; }
        public System.String P_BEGINLINE3 { get; set; }
        public System.String P_BEGINLINE4 { get; set; }
        public System.String P_ENDLINE1 { get; set; }
        public System.String P_ENDLINE2 { get; set; }
        public System.String P_ENDLINE3 { get; set; }
        public System.String P_ENDLINE4 { get; set; }
        public System.String P_SELVAGELEFT { get; set; }
        public System.String P_SELVAGERIGHT { get; set; }
        public System.String P_STATUS { get; set; }
        public System.Decimal? P_LENGTHPRINT { get; set; }
        public System.String P_CLEARBY { get; set; }
        public System.String P_CLEARREMARK { get; set; }
        public System.DateTime? P_CLEARDATE { get; set; }
        public System.DateTime? P_SUSPENDDATE { get; set; }
        public System.String P_2BEGINLINE1 { get; set; }
        public System.String P_2BEGINLINE2 { get; set; }
        public System.String P_2BEGINLINE3 { get; set; }
        public System.String P_2BEGINLINE4 { get; set; }
        public System.String P_2ENDLINE1 { get; set; }
        public System.String P_2ENDLINE2 { get; set; }
        public System.String P_2ENDLINE3 { get; set; }
        public System.String P_2ENDLINE4 { get; set; }
        public System.Decimal? P_TENSION { get; set; }
        public System.String P_LENGTHDETAIL { get; set; }
        public System.Decimal? P_WIDTHAF_END { get; set; }
    }

    #endregion

    #region CUT_UPDATEDATA Result

    public class CUT_UPDATEDATAResult
    {
    }

    #endregion

    #region CUT_SERACHLIST Parameter

    public class CUT_SERACHLISTParameter
    {
        public System.String P_STARTDATE { get; set; }
        public System.String P_MC { get; set; }
    }

    #endregion

    #region CUT_SERACHLIST Result

    public class CUT_SERACHLISTResult
    {
        public System.String ITEMLOT { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.Decimal? WIDTHBARCODE1 { get; set; }
        public System.Decimal? WIDTHBARCODE2 { get; set; }
        public System.Decimal? WIDTHBARCODE3 { get; set; }
        public System.Decimal? WIDTHBARCODE4 { get; set; }
        public System.Decimal? DISTANTBARCODE1 { get; set; }
        public System.Decimal? DISTANTBARCODE2 { get; set; }
        public System.Decimal? DISTANTBARCODE3 { get; set; }
        public System.Decimal? DISTANTBARCODE4 { get; set; }
        public System.Decimal? DISTANTLINE1 { get; set; }
        public System.Decimal? DISTANTLINE2 { get; set; }
        public System.Decimal? DISTANTLINE3 { get; set; }
        public System.Decimal? DENSITYWARP { get; set; }
        public System.Decimal? DENSITYWEFT { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.Decimal? BEFORE_WIDTH { get; set; }
        public System.Decimal? AFTER_WIDTH { get; set; }
        public System.String BEGINROLL_LINE1 { get; set; }
        public System.String BEGINROLL_LINE2 { get; set; }
        public System.String BEGINROLL_LINE3 { get; set; }
        public System.String BEGINROLL_LINE4 { get; set; }
        public System.String ENDROLL_LINE1 { get; set; }
        public System.String ENDROLL_LINE2 { get; set; }
        public System.String ENDROLL_LINE3 { get; set; }
        public System.String ENDROLL_LINE4 { get; set; }
        public System.String OPERATORID { get; set; }
        public System.String SELVAGE_LEFT { get; set; }
        public System.String SELVAGE_RIGHT { get; set; }
        public System.String REMARK { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.String MCNO { get; set; }
        public System.String STATUS { get; set; }
        public System.DateTime? SUSPENDDATE { get; set; }
        public System.String SUSPENDBY { get; set; }
        public System.DateTime? CLEARDATE { get; set; }
        public System.String CLEARREMARK { get; set; }
        public System.String CLEARBY { get; set; }
        public System.Decimal? LENGTHPRINT { get; set; }
        public System.DateTime? SUSPENDSTARTDATE { get; set; }
        public System.String BEGINROLL2_LINE1 { get; set; }
        public System.String BEGINROLL2_LINE2 { get; set; }
        public System.String BEGINROLL2_LINE3 { get; set; }
        public System.String BEGINROLL2_LINE4 { get; set; }
        public System.String ENDROLL2_LINE1 { get; set; }
        public System.String ENDROLL2_LINE2 { get; set; }
        public System.String ENDROLL2_LINE3 { get; set; }
        public System.String ENDROLL2_LINE4 { get; set; }
        public System.Decimal? TENSION { get; set; }
        public System.String LENGTHDETAIL { get; set; }
        public System.String ITEMCODE { get; set; }
        public System.String PARTNO { get; set; }
        public System.String MCNAME { get; set; }
        public System.String SND_BARCODE { get; set; }
        public System.String FINISHLOT { get; set; }
        public System.Decimal? FINISHLENGTH { get; set; }
        public System.String FINISHLENGTH1 { get; set; }
    }

    #endregion

    #region CUT_INSERTDATA Parameter

    public class CUT_INSERTDATAParameter
    {
        public System.String P_ITEMLOT { get; set; }
        public System.DateTime? P_STARTDATE { get; set; }
        public System.String P_PRODUCTTYPEID { get; set; }
        public System.String P_OPERATORID { get; set; }
        public System.String P_REMARK { get; set; }
        public System.String P_MCNO { get; set; }
        public System.Decimal? P_WIDTH1 { get; set; }
        public System.Decimal? P_WIDTH2 { get; set; }
        public System.Decimal? P_WIDTH3 { get; set; }
        public System.Decimal? P_WIDTH4 { get; set; }
        public System.Decimal? P_DISTANTBAR1 { get; set; }
        public System.Decimal? P_DISTANTBAR2 { get; set; }
        public System.Decimal? P_DISTANTBAR3 { get; set; }
        public System.Decimal? P_DISTANTBAR4 { get; set; }
        public System.Decimal? P_DISTANTLINE1 { get; set; }
        public System.Decimal? P_DISTANTLINE2 { get; set; }
        public System.Decimal? P_DISTANTLINE3 { get; set; }
        public System.Decimal? P_DENWARP { get; set; }
        public System.Decimal? P_DENWEFT { get; set; }
        public System.Decimal? P_SPEED { get; set; }
        public System.Decimal? P_WIDTHBE { get; set; }
        public System.Decimal? P_WIDTHAF { get; set; }
        public System.String P_BEGINLINE1 { get; set; }
        public System.String P_BEGINLINE2 { get; set; }
        public System.String P_BEGINLINE3 { get; set; }
        public System.String P_BEGINLINE4 { get; set; }
        public System.String P_ENDLINE1 { get; set; }
        public System.String P_ENDLINE2 { get; set; }
        public System.String P_ENDLINE3 { get; set; }
        public System.String P_ENDLINE4 { get; set; }
        public System.String P_SELVAGELEFT { get; set; }
        public System.String P_SELVAGERIGHT { get; set; }
        public System.DateTime? P_SUSPENSTARTDATE { get; set; }
        public System.String P_2BEGINLINE1 { get; set; }
        public System.String P_2BEGINLINE2 { get; set; }
        public System.String P_2BEGINLINE3 { get; set; }
        public System.String P_2BEGINLINE4 { get; set; }
        public System.String P_2ENDLINE1 { get; set; }
        public System.String P_2ENDLINE2 { get; set; }
        public System.String P_2ENDLINE3 { get; set; }
        public System.String P_2ENDLINE4 { get; set; }
        public System.Decimal? P_TENSION { get; set; }
        public System.String P_LENGTHDETAIL { get; set; }
        public System.Decimal? P_WIDTHAF_END { get; set; }
    }

    #endregion

    #region CUT_INSERTDATA Result

    public class CUT_INSERTDATAResult
    {
    }

    #endregion

    #region CUT_GETSLIP Parameter

    public class CUT_GETSLIPParameter
    {
        public System.String P_ITEMLOT { get; set; }
    }

    #endregion

    #region CUT_GETSLIP Result

    public class CUT_GETSLIPResult
    {
        public System.String ITEMLOT { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.Decimal? WIDTHBARCODE1 { get; set; }
        public System.Decimal? WIDTHBARCODE2 { get; set; }
        public System.Decimal? WIDTHBARCODE3 { get; set; }
        public System.Decimal? WIDTHBARCODE4 { get; set; }
        public System.Decimal? DISTANTBARCODE1 { get; set; }
        public System.Decimal? DISTANTBARCODE2 { get; set; }
        public System.Decimal? DISTANTBARCODE3 { get; set; }
        public System.Decimal? DISTANTBARCODE4 { get; set; }
        public System.Decimal? DISTANTLINE1 { get; set; }
        public System.Decimal? DISTANTLINE2 { get; set; }
        public System.Decimal? DISTANTLINE3 { get; set; }
        public System.Decimal? DENSITYWARP { get; set; }
        public System.Decimal? DENSITYWEFT { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.Decimal? BEFORE_WIDTH { get; set; }
        public System.Decimal? AFTER_WIDTH { get; set; }
        public System.String BEGINROLL_LINE1 { get; set; }
        public System.String BEGINROLL_LINE2 { get; set; }
        public System.String BEGINROLL_LINE3 { get; set; }
        public System.String BEGINROLL_LINE4 { get; set; }
        public System.String ENDROLL_LINE1 { get; set; }
        public System.String ENDROLL_LINE2 { get; set; }
        public System.String ENDROLL_LINE3 { get; set; }
        public System.String ENDROLL_LINE4 { get; set; }
        public System.String OPERATORID { get; set; }
        public System.String SELVAGE_LEFT { get; set; }
        public System.String SELVAGE_RIGHT { get; set; }
        public System.String REMARK { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.String MCNO { get; set; }
        public System.String STATUS { get; set; }
        public System.DateTime? SUSPENDDATE { get; set; }
        public System.String SUSPENDBY { get; set; }
        public System.DateTime? CLEARDATE { get; set; }
        public System.String CLEARREMARK { get; set; }
        public System.String CLEARBY { get; set; }
        public System.Decimal? LENGTHPRINT { get; set; }
        public System.DateTime? SUSPENDSTARTDATE { get; set; }
        public System.String BEGINROLL2_LINE1 { get; set; }
        public System.String BEGINROLL2_LINE2 { get; set; }
        public System.String BEGINROLL2_LINE3 { get; set; }
        public System.String BEGINROLL2_LINE4 { get; set; }
        public System.String ENDROLL2_LINE1 { get; set; }
        public System.String ENDROLL2_LINE2 { get; set; }
        public System.String ENDROLL2_LINE3 { get; set; }
        public System.String ENDROLL2_LINE4 { get; set; }
        public System.Decimal? TENSION { get; set; }
        public System.String LENGTHDETAIL { get; set; }
        public System.Decimal? AFTER_WIDTH_END { get; set; }
        public System.String FINISHLOT { get; set; }
        public System.String ITEMCODE { get; set; }
        public System.String ITEMLOT1 { get; set; }
        public System.String PARTNO { get; set; }
        public System.String MCNAME { get; set; }
        public System.String FINISHINGPROCESS { get; set; }
        public System.String SHOWSELVAGE { get; set; }
        public System.String SND_BARCODE { get; set; }
        public System.String CUSTOMERID { get; set; }
        public System.String FINISHLENGTH { get; set; }
    }

    #endregion

    #region CUT_GETMCSUSPENDDATA Parameter

    public class CUT_GETMCSUSPENDDATAParameter
    {
        public System.String P_CUTMCNO { get; set; }
    }

    #endregion

    #region CUT_GETMCSUSPENDDATA Result

    public class CUT_GETMCSUSPENDDATAResult
    {
        public System.String ITEMLOT { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.Decimal? WIDTHBARCODE1 { get; set; }
        public System.Decimal? WIDTHBARCODE2 { get; set; }
        public System.Decimal? WIDTHBARCODE3 { get; set; }
        public System.Decimal? WIDTHBARCODE4 { get; set; }
        public System.Decimal? DISTANTBARCODE1 { get; set; }
        public System.Decimal? DISTANTBARCODE2 { get; set; }
        public System.Decimal? DISTANTBARCODE3 { get; set; }
        public System.Decimal? DISTANTBARCODE4 { get; set; }
        public System.Decimal? DISTANTLINE1 { get; set; }
        public System.Decimal? DISTANTLINE2 { get; set; }
        public System.Decimal? DISTANTLINE3 { get; set; }
        public System.Decimal? DENSITYWARP { get; set; }
        public System.Decimal? DENSITYWEFT { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.Decimal? BEFORE_WIDTH { get; set; }
        public System.Decimal? AFTER_WIDTH { get; set; }
        public System.String BEGINROLL_LINE1 { get; set; }
        public System.String BEGINROLL_LINE2 { get; set; }
        public System.String BEGINROLL_LINE3 { get; set; }
        public System.String BEGINROLL_LINE4 { get; set; }
        public System.String ENDROLL_LINE1 { get; set; }
        public System.String ENDROLL_LINE2 { get; set; }
        public System.String ENDROLL_LINE3 { get; set; }
        public System.String ENDROLL_LINE4 { get; set; }
        public System.String OPERATORID { get; set; }
        public System.String SELVAGE_LEFT { get; set; }
        public System.String SELVAGE_RIGHT { get; set; }
        public System.String REMARK { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.String MCNO { get; set; }
        public System.String STATUS { get; set; }
        public System.DateTime? SUSPENDDATE { get; set; }
        public System.String SUSPENDBY { get; set; }
        public System.DateTime? CLEARDATE { get; set; }
        public System.String CLEARREMARK { get; set; }
        public System.String CLEARBY { get; set; }
        public System.Decimal? LENGTHPRINT { get; set; }
        public System.DateTime? SUSPENDSTARTDATE { get; set; }
        public System.String BEGINROLL2_LINE1 { get; set; }
        public System.String BEGINROLL2_LINE2 { get; set; }
        public System.String BEGINROLL2_LINE3 { get; set; }
        public System.String BEGINROLL2_LINE4 { get; set; }
        public System.String ENDROLL2_LINE1 { get; set; }
        public System.String ENDROLL2_LINE2 { get; set; }
        public System.String ENDROLL2_LINE3 { get; set; }
        public System.String ENDROLL2_LINE4 { get; set; }
        public System.Decimal? TENSION { get; set; }
        public System.String LENGTHDETAIL { get; set; }
        public System.Decimal? AFTER_WIDTH_END { get; set; }
    }

    #endregion

    #region CUT_GETFINISHINGDATA Parameter

    public class CUT_GETFINISHINGDATAParameter
    {
        public System.String P_ITEMLOT { get; set; }
    }

    #endregion

    #region CUT_GETFINISHINGDATA Result

    public class CUT_GETFINISHINGDATAResult
    {
        public System.String ITEMCODE { get; set; }
        public System.String ITEMLOT { get; set; }
        public System.String BATCHNO { get; set; }
        public System.String CUSTOMERID { get; set; }
        public System.String FINISHINGLOT { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.String FINISHINGPROCESS { get; set; }
        public System.String SND_BARCODE { get; set; }
        public System.Decimal? BEFORE_WIDTH { get; set; }
    }

    #endregion

    #region CUT_GETCONDITIONBYITEMCODE Parameter

    public class CUT_GETCONDITIONBYITEMCODEParameter
    {
        public System.String P_ITMCODE { get; set; }
    }

    #endregion

    #region CUT_GETCONDITIONBYITEMCODE Result

    public class CUT_GETCONDITIONBYITEMCODEResult
    {
        public System.String ITM_CODE { get; set; }
        public System.Decimal? WIDTHBARCODE_MIN { get; set; }
        public System.Decimal? WIDTHBARCODE_MAX { get; set; }
        public System.Decimal? DISTANTBARCODE_MIN { get; set; }
        public System.Decimal? DISTANTBARCODE_MAX { get; set; }
        public System.Decimal? DISTANTLINE_MIN { get; set; }
        public System.Decimal? DISTANTLINE_MAX { get; set; }
        public System.Decimal? DENSITYWARP_MIN { get; set; }
        public System.Decimal? DENSITYWARP_MAX { get; set; }
        public System.Decimal? DENSITYWEFT_MIN { get; set; }
        public System.Decimal? DENSITYWEFT_MAX { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.Decimal? SPEED_MARGIN { get; set; }
        public System.Decimal? AFTER_WIDTH { get; set; }
        public System.String SHOWSELVAGE { get; set; }
    }

    #endregion

    #region CUS_GETLIST Parameter

    public class CUS_GETLISTParameter
    {
    }

    #endregion

    #region CUS_GETLIST Result

    public class CUS_GETLISTResult
    {
        public System.String CUSTOMERID { get; set; }
        public System.String CUSTOMERNAME { get; set; }
        public System.String METHODID { get; set; }
        public System.DateTime? CREATEDATE { get; set; }
        public System.String CREATEBY { get; set; }
    }

    #endregion

    #region CUS_GETITEMGOODBYCUSTOMER Parameter

    public class CUS_GETITEMGOODBYCUSTOMERParameter
    {
        public System.String P_CUSTOMERID { get; set; }
    }

    #endregion

    #region CUS_GETITEMGOODBYCUSTOMER Result

    public class CUS_GETITEMGOODBYCUSTOMERResult
    {
        public System.String CUSTOMERID { get; set; }
        public System.String ITM_CODE { get; set; }
        public System.String PARTNO { get; set; }
        public System.String FABRIC { get; set; }
        public System.Decimal? LENGTH { get; set; }
        public System.String DENSITY_W { get; set; }
        public System.String DENSITY_F { get; set; }
        public System.String WIDTH_ALL { get; set; }
        public System.String WIDTH_PIN { get; set; }
        public System.String WIDTH_COAT { get; set; }
        public System.String TRIM_L { get; set; }
        public System.String TRIM_R { get; set; }
        public System.String FLOPPY_L { get; set; }
        public System.String FLOPPY_R { get; set; }
        public System.String HARDNESS_L { get; set; }
        public System.String HARDNESS_C { get; set; }
        public System.String HARDNESS_R { get; set; }
        public System.String UNWINDER { get; set; }
        public System.String WINDER { get; set; }
        public System.String FINISHINGCUSTOMER { get; set; }
        public System.String DESCRIPTION { get; set; }
        public System.String SUPPLIERCODE { get; set; }
        public System.String WIDTH { get; set; }

        public System.String WIDTH_SELVAGEL { get; set; }
        public System.String WIDTH_SELVAGER { get; set; }
        public System.Decimal? RESETSTARTLENGTH { get; set; }
    }

    #endregion

    #region CONDITION_WARPING Parameter

    public class CONDITION_WARPINGParameter
    {
        public System.String P_ITMPREPARE { get; set; }
        public System.String P_MCNO { get; set; }
        public System.String P_ITMYARN { get; set; }
        public System.Decimal? P_WARPERENDS { get; set; }
        public System.Decimal? P_MAXLENGTH { get; set; }
        public System.Decimal? P_MINLENGTH { get; set; }
        public System.String P_WAXING { get; set; }
        public System.String P_COMBTYPE { get; set; }
        public System.Decimal? P_COMBPITCH { get; set; }
        public System.Decimal? P_KEBAYARN { get; set; }
        public System.Decimal? P_NOWARPBEAM { get; set; }
        public System.Decimal? P_HARDNESS_MAX { get; set; }
        public System.Decimal? P_HARDNESS_MIN { get; set; }
        public System.Decimal? P_SPEED { get; set; }
        public System.Decimal? P_SPEED_MARGIN { get; set; }
        public System.Decimal? P_YARNTENSION { get; set; }
        public System.Decimal? P_YARNTENSION_MARGIN { get; set; }
        public System.Decimal? P_WINDTENSION { get; set; }
        public System.Decimal? P_WINDTENSION_MARGIN { get; set; }
        public System.String P_OPERATOR { get; set; }
    }

    #endregion

    #region CONDITION_WARPING Result

    public class CONDITION_WARPINGResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region CONDITION_FINISHINGSCOURING Parameter

    public class CONDITION_FINISHINGSCOURINGParameter
    {
        public System.String P_ITEMCODE { get; set; }
        public System.String P_SCOURINGNO { get; set; }
        public System.Decimal? P_CHEM { get; set; }
        public System.Decimal? P_CHEM_MARGIN { get; set; }
        public System.Decimal? P_WASH1 { get; set; }
        public System.Decimal? P_WASH1_MARGIN { get; set; }
        public System.Decimal? P_WASH2 { get; set; }
        public System.Decimal? P_WASH2_MARGIN { get; set; }
        public System.Decimal? P_HOTFLUE { get; set; }
        public System.Decimal? P_HOTFLUE_MARGIN { get; set; }
        public System.Decimal? P_ROOMTEMP { get; set; }
        public System.Decimal? P_ROOMTEMP_MARGIN { get; set; }
        public System.Decimal? P_SPEED { get; set; }
        public System.Decimal? P_SPEED_MARGIN { get; set; }
        public System.Decimal? P_MAINFRAME { get; set; }
        public System.Decimal? P_MAINFRAME_MARGIN { get; set; }
        public System.Decimal? P_WIDTHBE { get; set; }
        public System.Decimal? P_WIDTHBE_MARGIN { get; set; }
        public System.Decimal? P_WIDTHAF { get; set; }
        public System.Decimal? P_WIDTHAF_MARGIN { get; set; }
        public System.Decimal? P_PIN2PIN { get; set; }
        public System.Decimal? P_PIN2PIN_MARGIN { get; set; }
        public System.Decimal? P_HUMIDITYMAX { get; set; }
        public System.Decimal? P_HUMIDITYMIN { get; set; }
        public System.String P_OPERATOR { get; set; }
    }

    #endregion

    #region CONDITION_FINISHINGSCOURING Result

    public class CONDITION_FINISHINGSCOURINGResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region CONDITION_FINISHINGDRYER Parameter

    public class CONDITION_FINISHINGDRYERParameter
    {
        public System.String P_ITEMCODE { get; set; }
        public System.Decimal? P_WIDTH_BE_HEAT_MAX { get; set; }
        public System.Decimal? P_WIDTH_BE_HEAT_MIN { get; set; }
        public System.Decimal? P_ACCPRESURE { get; set; }
        public System.Decimal? P_ASSTENSION { get; set; }
        public System.Decimal? P_ACCARIDENSER { get; set; }
        public System.Decimal? P_CHIFROT { get; set; }
        public System.Decimal? P_CHIREAR { get; set; }
        public System.Decimal? P_DRYERTEMP { get; set; }
        public System.Decimal? P_DRYERTEMP_MARGIN { get; set; }
        public System.Decimal? P_SPEED { get; set; }
        public System.Decimal? P_SPEED_MARGIN { get; set; }
        public System.Decimal? P_STEAMPRESURE { get; set; }
        public System.Decimal? P_DRYERUPCIRCUFAN { get; set; }
        public System.Decimal? P_EXHAUSTFAN { get; set; }
        public System.Decimal? P_WIDTH_AF_HEAT { get; set; }
        public System.Decimal? P_WIDTH_AF_HEAT_MARGIN { get; set; }
        public System.Decimal? P_HUMIDITYMAX { get; set; }
        public System.Decimal? P_HUMIDITYMIN { get; set; }
        public System.String P_OPERATOR { get; set; }
        public System.String P_MC { get; set; }
    }

    #endregion

    #region CONDITION_FINISHINGDRYER Result

    public class CONDITION_FINISHINGDRYERResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region CONDITION_FINISHINGCOATING Parameter

    public class CONDITION_FINISHINGCOATINGParameter
    {
        public System.String P_ITEMCODE { get; set; }
        public System.String P_COATNO { get; set; }
        public System.Decimal? P_CHEM { get; set; }
        public System.Decimal? P_CHEM_MARGIN { get; set; }
        public System.Decimal? P_WASH1 { get; set; }
        public System.Decimal? P_WASH1_MARGIN { get; set; }
        public System.Decimal? P_WASH2 { get; set; }
        public System.Decimal? P_WASH2_MARGIN { get; set; }
        public System.Decimal? P_HOTFLUE { get; set; }
        public System.Decimal? P_HOTFLUE_MARGIN { get; set; }
        public System.Decimal? P_BE_COAT_MAX { get; set; }
        public System.Decimal? P_BE_COAT_MIN { get; set; }
        public System.Decimal? P_ROOMTEMP { get; set; }
        public System.Decimal? P_ROOMTEMP_MARGIN { get; set; }
        public System.Decimal? P_FANRPM { get; set; }
        public System.Decimal? P_FANRPM_MARGIN { get; set; }
        public System.Decimal? P_EXFAN_FRONT_BACK { get; set; }
        public System.Decimal? P_EXFAN_MARGIN { get; set; }
        public System.Decimal? P_EXFAN_MIDDLE { get; set; }
        public System.Decimal? P_ANGLEKNIFE { get; set; }
        public System.String P_BLADENO { get; set; }
        public System.String P_BLADEDIRECTION { get; set; }
        public System.String P_PATHLINE { get; set; }
        public System.Decimal? P_FEEDIN_MAX { get; set; }
        public System.Decimal? P_FEEDIN_MIN { get; set; }
        public System.Decimal? P_TENSION_UP { get; set; }
        public System.Decimal? P_TENSION_UP_MARGIN { get; set; }
        public System.Decimal? P_TENSION_DOWN { get; set; }
        public System.Decimal? P_TENSION_DOWN_MARGIN { get; set; }
        public System.Decimal? P_FRAME_FORN { get; set; }
        public System.Decimal? P_FRAME_TENTER { get; set; }
        public System.String P_OVERFEED { get; set; }
        public System.Decimal? P_SPEED { get; set; }
        public System.Decimal? P_SPEED_MARGIN { get; set; }
        public System.Decimal? P_WIDTHCOAT { get; set; }
        public System.Decimal? P_WIDTHCOATALL_MAX { get; set; }
        public System.Decimal? P_WIDTHCOATALL_MIN { get; set; }
        public System.Decimal? P_COATINGWEIGTH_MAX { get; set; }
        public System.Decimal? P_COATINGWEIGTH_MIN { get; set; }
        public System.String P_RATIONSILICONE { get; set; }
        public System.Decimal? P_HUMIDITYMAX { get; set; }
        public System.Decimal? P_HUMIDITYMIN { get; set; }
        public System.String P_OPERATOR { get; set; }
    }

    #endregion

    #region CONDITION_FINISHINGCOATING Result

    public class CONDITION_FINISHINGCOATINGResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region CONDITION_DRAWING Parameter

    public class CONDITION_DRAWINGParameter
    {
        public System.String P_ITMPREPARE { get; set; }
        public System.Decimal? P_NOYARN { get; set; }
        public System.Decimal? P_REEDTYPE { get; set; }
        public System.Decimal? P_NODENT { get; set; }
        public System.Decimal? P_PITCH { get; set; }
        public System.Decimal? P_AIRSPACE { get; set; }
        public System.String P_OPERATOR { get; set; }
    }

    #endregion

    #region CONDITION_DRAWING Result

    public class CONDITION_DRAWINGResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region CONDITION_BEAMING Parameter

    public class CONDITION_BEAMINGParameter
    {
        public System.String P_ITMPREPARE { get; set; }
        public System.Decimal? P_NOWARPBEAM { get; set; }
        public System.Decimal? P_TOTALYARN { get; set; }
        public System.Decimal? P_TOTALKEBA { get; set; }
        public System.Decimal? P_BEAMLENGTH { get; set; }
        public System.Decimal? P_HARDNESS_MAX { get; set; }
        public System.Decimal? P_HARDNESS_MIN { get; set; }
        public System.Decimal? P_BEAMWIDTH_MAX { get; set; }
        public System.Decimal? P_BEAMWIDTH_MIN { get; set; }
        public System.Decimal? P_SPEED_MAX { get; set; }
        public System.Decimal? P_SPEED_MIN { get; set; }
        public System.Decimal? P_YARNTENSION_MAX { get; set; }
        public System.Decimal? P_YARNTENSION_MIN { get; set; }
        public System.Decimal? P_WINDTENSION_MAX { get; set; }
        public System.Decimal? P_WINDTENSION_MIN { get; set; }
        public System.String P_COMBTYPE { get; set; }
        public System.Decimal? P_COMBPITCH { get; set; }
        public System.Decimal? P_TOTALBEAM { get; set; }
        public System.String P_OPERATOR { get; set; }
    }

    #endregion

    #region CONDITION_BEAMING Result

    public class CONDITION_BEAMINGResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region BEAM_UPDATEBEAMNO Parameter

    public class BEAM_UPDATEBEAMNOParameter
    {
        public System.String P_BEAMNO { get; set; }
        public System.DateTime? P_ENDDATE { get; set; }
        public System.String P_STATUS { get; set; }
        public System.String P_FLAG { get; set; }
    }

    #endregion

    #region BEAM_UPDATEBEAMNO Result

    public class BEAM_UPDATEBEAMNOResult
    {
        public System.String R_RESULT { get; set; }
    }

    #endregion

    #region BEAM_UPDATEBEAMDETAIL Parameter

    public class BEAM_UPDATEBEAMDETAILParameter
    {
        public System.String P_BEAMERNO { get; set; }
        public System.String P_BEAMLOT { get; set; }
        public System.Decimal? P_LENGTH { get; set; }
        public System.DateTime? P_ENDDATE { get; set; }
        public System.Decimal? P_SPEED { get; set; }
        public System.Decimal? P_HARDL { get; set; }
        public System.Decimal? P_HARDN { get; set; }
        public System.Decimal? P_HARDR { get; set; }
        public System.Decimal? P_STANDTENSION { get; set; }
        public System.Decimal? P_WINDTENSION { get; set; }
        public System.Decimal? P_INSIDE { get; set; }
        public System.Decimal? P_OUTSIDE { get; set; }
        public System.Decimal? P_FULL { get; set; }
        public System.String P_DOFFBY { get; set; }
        public System.String P_FLAG { get; set; }
        public System.String P_REMARK { get; set; }
        public System.Decimal? P_TENSION_ST1 { get; set; }
        public System.Decimal? P_TENSION_ST2 { get; set; }
        public System.Decimal? P_TENSION_ST3 { get; set; }
        public System.Decimal? P_TENSION_ST4 { get; set; }
        public System.Decimal? P_TENSION_ST5 { get; set; }
        public System.Decimal? P_TENSION_ST6 { get; set; }
        public System.Decimal? P_TENSION_ST7 { get; set; }
        public System.Decimal? P_TENSION_ST8 { get; set; }
        public System.Decimal? P_TENSION_ST9 { get; set; }
        public System.Decimal? P_TENSION_ST10 { get; set; }
        public System.String P_OPERATOR { get; set; }
    }

    #endregion

    #region BEAM_UPDATEBEAMDETAIL Result

    public class BEAM_UPDATEBEAMDETAILResult
    {
    }

    #endregion

    #region BEAM_TRANFERSLIP Parameter

    public class BEAM_TRANFERSLIPParameter
    {
        public System.String P_BEAMLOT { get; set; }
    }

    #endregion

    #region BEAM_TRANFERSLIP Result

    public class BEAM_TRANFERSLIPResult
    {
        public System.String BEAMERNO { get; set; }
        public System.String BEAMLOT { get; set; }
        public System.String BEAMNO { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.Decimal? LENGTH { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.Decimal? BEAMSTANDTENSION { get; set; }
        public System.Decimal? WINDINGTENSION { get; set; }
        public System.Decimal? HARDNESS_L { get; set; }
        public System.Decimal? HARDNESS_N { get; set; }
        public System.Decimal? HARDNESS_R { get; set; }
        public System.Decimal? INSIDE_WIDTH { get; set; }
        public System.Decimal? OUTSIDE_WIDTH { get; set; }
        public System.Decimal? FULL_WIDTH { get; set; }
        public System.String STARTBY { get; set; }
        public System.String DOFFBY { get; set; }
        public System.String BEAMMC { get; set; }
        public System.String FLAG { get; set; }
        public System.String REMARK { get; set; }
        public System.Decimal? TENSION_ST1 { get; set; }
        public System.Decimal? TENSION_ST2 { get; set; }
        public System.Decimal? TENSION_ST3 { get; set; }
        public System.Decimal? TENSION_ST4 { get; set; }
        public System.Decimal? TENSION_ST5 { get; set; }
        public System.Decimal? TENSION_ST6 { get; set; }
        public System.Decimal? TENSION_ST7 { get; set; }
        public System.Decimal? TENSION_ST8 { get; set; }
        public System.Decimal? TENSION_ST9 { get; set; }
        public System.Decimal? TENSION_ST10 { get; set; }
        public System.String EDITBY { get; set; }
        public System.String OLDBEAMNO { get; set; }
        public System.DateTime? EDITDATE { get; set; }
        public System.String ITM_PREPARE { get; set; }
    }

    #endregion

    #region BEAM_SEARCHBEAMRECORD Parameter

    public class BEAM_SEARCHBEAMRECORDParameter
    {
        public System.String P_BEAMERNO { get; set; }
        public System.String P_MC { get; set; }
        public System.String P_ITMPREPARE { get; set; }
        public System.String P_STARTDATE { get; set; }
    }

    #endregion

    #region BEAM_SEARCHBEAMRECORD Result

    public class BEAM_SEARCHBEAMRECORDResult
    {
        public System.String BEAMERNO { get; set; }
        public System.String ITM_PREPARE { get; set; }
        public System.Decimal? TOTALYARN { get; set; }
        public System.Decimal? TOTALKEBA { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.String CREATEBY { get; set; }
        public System.DateTime? CREATEDATE { get; set; }
        public System.String STATUS { get; set; }
        public System.String FINISHFLAG { get; set; }
        public System.String MCNO { get; set; }
        public System.String WARPHEADNO { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.Decimal? ADJUSTKEBA { get; set; }
        public System.String REMARK { get; set; }
    }

    #endregion

    #region BEAM_INSERTBEAMNO Parameter

    public class BEAM_INSERTBEAMNOParameter
    {
        public System.String P_BEAMNO { get; set; }
        public System.String P_WARPERHEADNO { get; set; }
        public System.String P_ITMPREPARE { get; set; }
        public System.String P_PRODUCTID { get; set; }
        public System.String P_MCNO { get; set; }
        public System.Decimal? P_TOTALYARN { get; set; }
        public System.Decimal? P_TOTALKEBA { get; set; }
        public System.String P_OPERATOR { get; set; }
        public System.Decimal? P_ADJUSTKEBA { get; set; }
        public System.String P_REMARK { get; set; }
    }

    #endregion

    #region BEAM_INSERTBEAMNO Result

    public class BEAM_INSERTBEAMNOResult
    {
        public System.String R_RESULT { get; set; }
    }

    #endregion

    #region BEAM_INSERTBEAMMCSTOP Parameter

    public class BEAM_INSERTBEAMMCSTOPParameter
    {
        public System.String P_BEAMERNO { get; set; }
        public System.String P_BEAMLOT { get; set; }
        public System.String P_REASON { get; set; }
        public System.Decimal? P_LENGTH { get; set; }
        public System.String P_OTHER { get; set; }
        public System.String P_OPERATOR { get; set; }
    }

    #endregion

    #region BEAM_INSERTBEAMMCSTOP Result

    public class BEAM_INSERTBEAMMCSTOPResult
    {
        public System.String R_RESULT { get; set; }
    }

    #endregion

    #region BEAM_INSERTBEAMINGDETAIL Parameter

    public class BEAM_INSERTBEAMINGDETAILParameter
    {
        public System.String P_BEAMERNO { get; set; }
        public System.String P_MCNO { get; set; }
        public System.String P_BEAMNO { get; set; }
        public System.DateTime? P_STARTDATE { get; set; }
        public System.String P_STARTBY { get; set; }
    }

    #endregion

    #region BEAM_INSERTBEAMINGDETAIL Result

    public class BEAM_INSERTBEAMINGDETAILResult
    {
        public System.String R_BEAMLOT { get; set; }
        public System.String RESULT { get; set; }
    }

    #endregion

    #region BEAM_INSERTBEAMERROLLSETTING Parameter

    public class BEAM_INSERTBEAMERROLLSETTINGParameter
    {
        public System.String P_BEAMERNO { get; set; }
        public System.String P_WARPERHEADNO { get; set; }
        public System.String P_WARPLOT { get; set; }
    }

    #endregion

    #region BEAM_INSERTBEAMERROLLSETTING Result

    public class BEAM_INSERTBEAMERROLLSETTINGResult
    {
    }

    #endregion

    #region BEAM_GETWARPROLLBYBEAMERNO Parameter

    public class BEAM_GETWARPROLLBYBEAMERNOParameter
    {
        public System.String P_BEAMERNO { get; set; }
    }

    #endregion

    #region BEAM_GETWARPROLLBYBEAMERNO Result

    public class BEAM_GETWARPROLLBYBEAMERNOResult
    {
        public System.String BEAMERNO { get; set; }
        public System.String WARPHEADNO { get; set; }
        public System.String WARPERLOT { get; set; }
    }

    #endregion

    #region BEAM_GETWARPNOBYITEMPREPARE Parameter

    public class BEAM_GETWARPNOBYITEMPREPAREParameter
    {
        public System.String P_ITMPREPARE { get; set; }
    }

    #endregion

    #region BEAM_GETWARPNOBYITEMPREPARE Result

    public class BEAM_GETWARPNOBYITEMPREPAREResult
    {
        public System.String WARPHEADNO { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.String WARPMC { get; set; }
        public System.Decimal? ACTUALCH { get; set; }
        public System.Decimal? TOTALBEAM { get; set; }
    }

    #endregion

    #region BEAM_GETSTOPREASONBYBEAMLOT Parameter

    public class BEAM_GETSTOPREASONBYBEAMLOTParameter
    {
        public System.String P_BEAMERNO { get; set; }
        public System.String P_BEAMLOT { get; set; }
    }

    #endregion

    #region BEAM_GETSTOPREASONBYBEAMLOT Result

    public class BEAM_GETSTOPREASONBYBEAMLOTResult
    {
        public System.String BEAMERNO { get; set; }
        public System.String BEAMLOT { get; set; }
        public System.String REASON { get; set; }
        public System.Decimal? LENGTH { get; set; }
        public System.String OPERATOR { get; set; }
        public System.String OTHERFLAG { get; set; }
        public System.DateTime? CREATEDATE { get; set; }
    }

    #endregion

    #region BEAM_GETSPECBYCHOPNO Parameter

    public class BEAM_GETSPECBYCHOPNOParameter
    {
        public System.String P_ITMPREPARE { get; set; }
    }

    #endregion

    #region BEAM_GETSPECBYCHOPNO Result

    public class BEAM_GETSPECBYCHOPNOResult
    {
        public System.String CHOPNO { get; set; }
        public System.Decimal? NOWARPBEAM { get; set; }
        public System.Decimal? TOTALYARN { get; set; }
        public System.Decimal? TOTALKEBA { get; set; }
        public System.Decimal? BEAMLENGTH { get; set; }
        public System.Decimal? MAXHARDNESS { get; set; }
        public System.Decimal? MINHARDNESS { get; set; }
        public System.Decimal? MAXBEAMWIDTH { get; set; }
        public System.Decimal? MINBEAMWIDTH { get; set; }
        public System.Decimal? MAXSPEED { get; set; }
        public System.Decimal? MINSPEED { get; set; }
        public System.Decimal? MAXYARNTENSION { get; set; }
        public System.Decimal? MINYARNTENSION { get; set; }
        public System.Decimal? MAXWINDTENSION { get; set; }
        public System.Decimal? MINWINDTENSION { get; set; }
        public System.String COMBTYPE { get; set; }
        public System.Decimal? COMBPITCH { get; set; }
        public System.Decimal? TOTALBEAM { get; set; }
    }

    #endregion

    #region BEAM_GETINPROCESSLOTBYBEAMNO Parameter

    public class BEAM_GETINPROCESSLOTBYBEAMNOParameter
    {
        public System.String P_BEAMERNO { get; set; }
    }

    #endregion

    #region BEAM_GETINPROCESSLOTBYBEAMNO Result

    public class BEAM_GETINPROCESSLOTBYBEAMNOResult
    {
        public System.String BEAMERNO { get; set; }
        public System.String BEAMLOT { get; set; }
        public System.String BEAMNO { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.Decimal? LENGTH { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.Decimal? BEAMSTANDTENSION { get; set; }
        public System.Decimal? WINDINGTENSION { get; set; }
        public System.Decimal? HARDNESS_L { get; set; }
        public System.Decimal? HARDNESS_N { get; set; }
        public System.Decimal? HARDNESS_R { get; set; }
        public System.Decimal? INSIDE_WIDTH { get; set; }
        public System.Decimal? OUTSIDE_WIDTH { get; set; }
        public System.Decimal? FULL_WIDTH { get; set; }
        public System.String STARTBY { get; set; }
        public System.String DOFFBY { get; set; }
        public System.String BEAMMC { get; set; }
        public System.String FLAG { get; set; }
        public System.String REMARK { get; set; }
        public System.Decimal? TENSION_ST1 { get; set; }
        public System.Decimal? TENSION_ST2 { get; set; }
        public System.Decimal? TENSION_ST3 { get; set; }
        public System.Decimal? TENSION_ST4 { get; set; }
        public System.Decimal? TENSION_ST5 { get; set; }
        public System.Decimal? TENSION_ST6 { get; set; }
        public System.Decimal? TENSION_ST7 { get; set; }
        public System.Decimal? TENSION_ST8 { get; set; }
        public System.Decimal? TENSION_ST9 { get; set; }
        public System.Decimal? TENSION_ST10 { get; set; }
        public System.String EDITBY { get; set; }
        public System.String OLDBEAMNO { get; set; }
        public System.DateTime? EDITDATE { get; set; }
    }

    #endregion

    #region BEAM_GETBEAMROLLDETAIL Parameter

    public class BEAM_GETBEAMROLLDETAILParameter
    {
        public System.String P_BEAMROLL { get; set; }
    }

    #endregion

    #region BEAM_GETBEAMROLLDETAIL Result

    public class BEAM_GETBEAMROLLDETAILResult
    {
        public System.String BEAMERNO { get; set; }
        public System.String BEAMLOT { get; set; }
        public System.String BEAMNO { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.Decimal? LENGTH { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.Decimal? BEAMSTANDTENSION { get; set; }
        public System.Decimal? WINDINGTENSION { get; set; }
        public System.Decimal? HARDNESS_L { get; set; }
        public System.Decimal? HARDNESS_N { get; set; }
        public System.Decimal? HARDNESS_R { get; set; }
        public System.Decimal? INSIDE_WIDTH { get; set; }
        public System.Decimal? OUTSIDE_WIDTH { get; set; }
        public System.Decimal? FULL_WIDTH { get; set; }
        public System.String STARTBY { get; set; }
        public System.String DOFFBY { get; set; }
        public System.String BEAMMC { get; set; }
        public System.String FLAG { get; set; }
        public System.String REMARK { get; set; }
        public System.Decimal? TENSION_ST1 { get; set; }
        public System.Decimal? TENSION_ST2 { get; set; }
        public System.Decimal? TENSION_ST3 { get; set; }
        public System.Decimal? TENSION_ST4 { get; set; }
        public System.Decimal? TENSION_ST5 { get; set; }
        public System.Decimal? TENSION_ST6 { get; set; }
        public System.Decimal? TENSION_ST7 { get; set; }
        public System.Decimal? TENSION_ST8 { get; set; }
        public System.Decimal? TENSION_ST9 { get; set; }
        public System.Decimal? TENSION_ST10 { get; set; }
        public System.String EDITBY { get; set; }
        public System.String OLDBEAMNO { get; set; }
        public System.DateTime? EDITDATE { get; set; }
    }

    #endregion

    #region BEAM_GETBEAMLOTBYBEAMERNO Parameter

    public class BEAM_GETBEAMLOTBYBEAMERNOParameter
    {
        public System.String P_BEAMERNO { get; set; }
    }

    #endregion

    #region BEAM_GETBEAMLOTBYBEAMERNO Result

    public class BEAM_GETBEAMLOTBYBEAMERNOResult
    {
        public System.String BEAMERNO { get; set; }
        public System.String BEAMLOT { get; set; }
        public System.String BEAMNO { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.Decimal? LENGTH { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.Decimal? BEAMSTANDTENSION { get; set; }
        public System.Decimal? WINDINGTENSION { get; set; }
        public System.Decimal? HARDNESS_L { get; set; }
        public System.Decimal? HARDNESS_N { get; set; }
        public System.Decimal? HARDNESS_R { get; set; }
        public System.Decimal? INSIDE_WIDTH { get; set; }
        public System.Decimal? OUTSIDE_WIDTH { get; set; }
        public System.Decimal? FULL_WIDTH { get; set; }
        public System.String STARTBY { get; set; }
        public System.String DOFFBY { get; set; }
        public System.String BEAMMC { get; set; }
        public System.String FLAG { get; set; }
        public System.String REMARK { get; set; }
        public System.Decimal? TENSION_ST1 { get; set; }
        public System.Decimal? TENSION_ST2 { get; set; }
        public System.Decimal? TENSION_ST3 { get; set; }
        public System.Decimal? TENSION_ST4 { get; set; }
        public System.Decimal? TENSION_ST5 { get; set; }
        public System.Decimal? TENSION_ST6 { get; set; }
        public System.Decimal? TENSION_ST7 { get; set; }
        public System.Decimal? TENSION_ST8 { get; set; }
        public System.Decimal? TENSION_ST9 { get; set; }
        public System.Decimal? TENSION_ST10 { get; set; }
        public System.String EDITBY { get; set; }
        public System.String OLDBEAMNO { get; set; }
        public System.DateTime? EDITDATE { get; set; }
        public System.Decimal? KEBA { get; set; }
        public System.Decimal? MISSYARN { get; set; }
        public System.Decimal? OTHER { get; set; }
    }

    #endregion

    #region BEAM_GETBEAMERROLLREMARK Parameter

    public class BEAM_GETBEAMERROLLREMARKParameter
    {
        public System.String P_BEAMLOT { get; set; }
    }

    #endregion

    #region BEAM_GETBEAMERROLLREMARK Result

    public class BEAM_GETBEAMERROLLREMARKResult
    {
        public System.String R_REMARK { get; set; }
    }

    #endregion

    #region BEAM_GETBEAMERMCSTATUS Parameter

    public class BEAM_GETBEAMERMCSTATUSParameter
    {
        public System.String P_MCNO { get; set; }
    }

    #endregion

    #region BEAM_GETBEAMERMCSTATUS Result

    public class BEAM_GETBEAMERMCSTATUSResult
    {
        public System.String BEAMERNO { get; set; }
        public System.String ITM_PREPARE { get; set; }
        public System.Decimal? TOTALYARN { get; set; }
        public System.Decimal? TOTALKEBA { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.String CREATEBY { get; set; }
        public System.DateTime? CREATEDATE { get; set; }
        public System.String STATUS { get; set; }
        public System.String FINISHFLAG { get; set; }
        public System.String MCNO { get; set; }
        public System.String WARPHEADNO { get; set; }
        public System.String PRODUCTTYPEID { get; set; }
        public System.Decimal? ADJUSTKEBA { get; set; }
        public System.String REMARK { get; set; }
        public System.Decimal? NOWARPBEAM { get; set; }
        public System.Decimal? TOTALBEAM { get; set; }
    }

    #endregion

    #region BEAM_EDITNOBEAM Parameter

    public class BEAM_EDITNOBEAMParameter
    {
        public System.String P_BEAMROLL { get; set; }
        public System.String P_OLDNO { get; set; }
        public System.String P_NEWNO { get; set; }
        public System.String P_OPERATOR { get; set; }
    }

    #endregion

    #region BEAM_EDITNOBEAM Result

    public class BEAM_EDITNOBEAMResult
    {
        public System.String R_RESULT { get; set; }
    }

    #endregion

    #region BEAM_EDITBEAMERMC Parameter

    public class BEAM_EDITBEAMERMCParameter
    {
        public System.String P_BEAMERNO { get; set; }
        public System.String P_BEAMMC { get; set; }
        public System.String P_NEWBEAMMC { get; set; }
        public System.String P_OPERATOR { get; set; }
    }

    #endregion

    #region BEAM_EDITBEAMERMC Result

    public class BEAM_EDITBEAMERMCResult
    {
        public System.String RESULT { get; set; }
    }

    #endregion

    #region BEAM_BEAMLIST Parameter

    public class BEAM_BEAMLISTParameter
    {
        public System.String P_BEAMERNO { get; set; }
        public System.String P_MC { get; set; }
        public System.String P_ITMPREPARE { get; set; }
        public System.String P_STARTDATE { get; set; }
        public System.String P_ENDDATE { get; set; }
    }

    #endregion

    #region BEAM_BEAMLIST Result

    public class BEAM_BEAMLISTResult
    {
        public System.String BEAMERNO { get; set; }
        public System.String BEAMLOT { get; set; }
        public System.String BEAMNO { get; set; }
        public System.DateTime? STARTDATE { get; set; }
        public System.DateTime? ENDDATE { get; set; }
        public System.Decimal? LENGTH { get; set; }
        public System.Decimal? SPEED { get; set; }
        public System.Decimal? BEAMSTANDTENSION { get; set; }
        public System.Decimal? WINDINGTENSION { get; set; }
        public System.Decimal? HARDNESS_L { get; set; }
        public System.Decimal? HARDNESS_N { get; set; }
        public System.Decimal? HARDNESS_R { get; set; }
        public System.Decimal? INSIDE_WIDTH { get; set; }
        public System.Decimal? OUTSIDE_WIDTH { get; set; }
        public System.Decimal? FULL_WIDTH { get; set; }
        public System.String STARTBY { get; set; }
        public System.String DOFFBY { get; set; }
        public System.String BEAMMC { get; set; }
        public System.String FLAG { get; set; }
        public System.String REMARK { get; set; }
        public System.Decimal? TENSION_ST1 { get; set; }
        public System.Decimal? TENSION_ST2 { get; set; }
        public System.Decimal? TENSION_ST3 { get; set; }
        public System.Decimal? TENSION_ST4 { get; set; }
        public System.Decimal? TENSION_ST5 { get; set; }
        public System.Decimal? TENSION_ST6 { get; set; }
        public System.Decimal? TENSION_ST7 { get; set; }
        public System.Decimal? TENSION_ST8 { get; set; }
        public System.Decimal? TENSION_ST9 { get; set; }
        public System.Decimal? TENSION_ST10 { get; set; }
        public System.String EDITBY { get; set; }
        public System.String OLDBEAMNO { get; set; }
        public System.DateTime? EDITDATE { get; set; }
        public System.String ITM_PREPARE { get; set; }
        public System.String WARPHEADNO { get; set; }
        public System.Decimal? TOTALYARN { get; set; }
        public System.Decimal? TOTALKEBA { get; set; }
    }

    #endregion

    #region PCKPRFTP_D365_UPDATESCAN Parameter

    public class PCKPRFTP_D365_UPDATESCANParameter
    {
        public System.String P_INVNO { get; set; }
        public System.String P_CDEL0 { get; set; }
        public System.String P_SCANBY { get; set; }
        public System.Decimal? P_RUNNO { get; set; }
    }

    #endregion

    #region PCKPRFTP_D365_UPDATESCAN Result

    public class PCKPRFTP_D365_UPDATESCANResult
    {
        public System.String R_RESULT { get; set; }
    }

    #endregion

    #region PCKPRFTP_D365_UPDATERUNNO Parameter

    public class PCKPRFTP_D365_UPDATERUNNOParameter
    {
        public System.String P_INVNO { get; set; }
        public System.String P_CDEL0 { get; set; }
        public System.Decimal? P_RUNNO { get; set; }
        public System.String P_EDITBY { get; set; }
        public System.Decimal? P_INUSE { get; set; }
    }

    #endregion

    #region PCKPRFTP_D365_UPDATERUNNO Result

    public class PCKPRFTP_D365_UPDATERUNNOResult
    {
        public System.String R_RESULT { get; set; }
    }

    #endregion

    #region PCKPRFTP_D365_UPDATEINUSE Parameter

    public class PCKPRFTP_D365_UPDATEINUSEParameter
    {
        public System.String P_INVNO { get; set; }
        public System.String P_CDEL0 { get; set; }
        public System.String P_EDITBY { get; set; }
        public System.Decimal? P_INUSE { get; set; }
    }

    #endregion

    #region PCKPRFTP_D365_UPDATEINUSE Result

    public class PCKPRFTP_D365_UPDATEINUSEResult
    {
        public System.String R_RESULT { get; set; }
    }

    #endregion

    #region PCKPRFTP_D365_UPDATECUSNO Parameter

    public class PCKPRFTP_D365_UPDATECUSNOParameter
    {
        public System.String P_CDEL0 { get; set; }
        public System.Decimal? P_CUSNO { get; set; }
        public System.String P_EDITBY { get; set; }
        public System.Decimal? P_INUSE { get; set; }
    }

    #endregion

    #region PCKPRFTP_D365_UPDATECUSNO Result

    public class PCKPRFTP_D365_UPDATECUSNOResult
    {
        public System.String R_RESULT { get; set; }
    }

    #endregion

    #region PCKPRFTP_D365_INSERTUPDATE Parameter

    public class PCKPRFTP_D365_INSERTUPDATEParameter
    {
        public System.String P_ANNUL { get; set; }
        public System.String P_CDDIV { get; set; }
        public System.String P_INVTY { get; set; }
        public System.String P_INVNO { get; set; }
        public System.String P_CDORD { get; set; }
        public System.Decimal? P_RELNO { get; set; }
        public System.String P_CUSCD { get; set; }
        public System.String P_CUSNM { get; set; }
        public System.String P_RECTY { get; set; }
        public System.String P_CDKE1 { get; set; }
        public System.String P_CDKE2 { get; set; }
        public System.String P_CSITM { get; set; }
        public System.String P_CDCON { get; set; }
        public System.String P_CDEL0 { get; set; }
        public System.String P_GRADE { get; set; }
        public System.Decimal? P_PIELN { get; set; }
        public System.Decimal? P_NETWH { get; set; }
        public System.Decimal? P_GRSWH { get; set; }
        public System.Decimal? P_GRSLN { get; set; }
        public System.String P_PALSZ { get; set; }
        public System.Decimal? P_DTTRA { get; set; }
        public System.Decimal? P_DTORA { get; set; }
        public System.Decimal? P_AS400NO { get; set; }
        public System.String P_OPERATORID { get; set; }
        public System.Decimal? P_INUSE { get; set; }
    }

    #endregion

    #region PCKPRFTP_D365_INSERTUPDATE Result

    public class PCKPRFTP_D365_INSERTUPDATEResult
    {
        public System.String R_RESULT { get; set; }
    }

    #endregion

    #region PCKPRFTP_D365_GETINVNO Parameter

    public class PCKPRFTP_D365_GETINVNOParameter
    {
    }

    #endregion

    #region PCKPRFTP_D365_GETINVNO Result

    public class PCKPRFTP_D365_GETINVNOResult
    {
        public System.String INVNO { get; set; }
    }

    #endregion

    #region PCKPRFTP_D365_GETDATA Parameter

    public class PCKPRFTP_D365_GETDATAParameter
    {
        public System.String P_INVNO { get; set; }
        public System.String P_CDEL0 { get; set; }
        public System.Decimal? P_RUNNO { get; set; }
    }

    #endregion

    #region PCKPRFTP_D365_GETDATA Result

    public class PCKPRFTP_D365_GETDATAResult
    {
        public System.String ANNUL { get; set; }
        public System.String CDDIV { get; set; }
        public System.String INVTY { get; set; }
        public System.String INVNO { get; set; }
        public System.String CDORD { get; set; }
        public System.Decimal? RELNO { get; set; }
        public System.String CUSCD { get; set; }
        public System.String CUSNM { get; set; }
        public System.String RECTY { get; set; }
        public System.String CDKE1 { get; set; }
        public System.String CDKE2 { get; set; }
        public System.String CSITM { get; set; }
        public System.String CDCON { get; set; }
        public System.String CDEL0 { get; set; }
        public System.String GRADE { get; set; }
        public System.Decimal? PIELN { get; set; }
        public System.Decimal? NETWH { get; set; }
        public System.Decimal? GRSWH { get; set; }
        public System.Decimal? GRSLN { get; set; }
        public System.String PALSZ { get; set; }
        public System.Decimal? DTTRA { get; set; }
        public System.Decimal? DTORA { get; set; }
        public System.Decimal? RUNNO { get; set; }
        public System.Decimal? AS400NO { get; set; }
        public System.Decimal? CUSNO { get; set; }
        public System.String INSERTBY { get; set; }
        public System.DateTime? INSERTDATE { get; set; }
        public System.String EDITBY { get; set; }
        public System.DateTime? EDITDATE { get; set; }
        public System.Decimal? INUSE { get; set; }
        public System.String SCANBY { get; set; }
        public System.DateTime? SCANDATE { get; set; }
        public System.Decimal? CHKNETWEIGHT { get; set; }
        public System.Decimal? CHKGROSSWEIGHT { get; set; }
        public System.Decimal? CHKNETLENGTH { get; set; }
        public System.Decimal? CHKGROSSLENGTH { get; set; }
    }

    #endregion

    #region D365_WP_OUL Parameter

    public class D365_WP_OULParameter
    {
        public System.String P_WARPHEADNO { get; set; }
    }

    #endregion

    #region D365_WP_OUL Result

    public class D365_WP_OULResult
    {
        public System.Decimal? LINENO { get; set; }
        public System.DateTime? OUTPUTDATE { get; set; }
        public System.String ITEMID { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.Decimal? GROSSLENGTH { get; set; }
        public System.Decimal? NETLENGTH { get; set; }
        public System.Decimal? GROSSWEIGHT { get; set; }
        public System.Decimal? NETWEIGHT { get; set; }
        public System.String PALLETNO { get; set; }
        public System.String GRADE { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.String SERIALID { get; set; }
        public System.Decimal? FINISH { get; set; }
        public System.String MOVEMENTTRANS { get; set; }
        public System.String WAREHOUSE { get; set; }
        public System.String LOCATION { get; set; }
    }

    #endregion

    #region D365_WP_OUH Parameter

    public class D365_WP_OUHParameter
    {
        public System.String P_WARPHEADNO { get; set; }
    }

    #endregion

    #region D365_WP_OUH Result

    public class D365_WP_OUHResult
    {
        public System.Decimal? HEADERID { get; set; }
        public System.Decimal? TOTALRECORD { get; set; }
    }

    #endregion

    #region D365_WP_OPL Parameter

    public class D365_WP_OPLParameter
    {
        public System.String P_WARPHEADNO { get; set; }
    }

    #endregion

    #region D365_WP_OPL Result

    public class D365_WP_OPLResult
    {
        public System.Decimal? LINENO { get; set; }
        public System.Decimal? PROCQTY { get; set; }
        public System.String OPRNO { get; set; }
        public System.String OPRID { get; set; }
        public System.String MACHINENO { get; set; }
        public System.DateTime? STARTDATETIME { get; set; }
        public System.DateTime? ENDDATETIME { get; set; }
    }

    #endregion

    #region D365_WP_OPH Parameter

    public class D365_WP_OPHParameter
    {
        public System.String P_WARPHEADNO { get; set; }
    }

    #endregion

    #region D365_WP_OPH Result

    public class D365_WP_OPHResult
    {
        public System.Decimal? HEADERID { get; set; }
        public System.Decimal? TOTALRECORD { get; set; }
    }

    #endregion

    #region D365_WP_ISL Parameter

    public class D365_WP_ISLParameter
    {
        public System.String P_WARPHEADNO { get; set; }
    }

    #endregion

    #region D365_WP_ISL Result

    public class D365_WP_ISLResult
    {
        public System.Decimal? LINENO { get; set; }
        public System.DateTime? ISSUEDATE { get; set; }
        public System.String ITEMID { get; set; }
        public System.String STYLEID { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.String SERIALID { get; set; }
    }

    #endregion

    #region D365_WP_ISH Parameter

    public class D365_WP_ISHParameter
    {
        public System.String P_WARPHEADNO { get; set; }
    }

    #endregion

    #region D365_WP_ISH Result

    public class D365_WP_ISHResult
    {
        public System.Decimal? HEADERID { get; set; }
        public System.Decimal? TOTALRECORD { get; set; }
    }

    #endregion

    #region D365_WP_BPO Parameter

    public class D365_WP_BPOParameter
    {
        public System.String P_WARPHEADNO { get; set; }
    }

    #endregion

    #region D365_WP_BPO Result

    public class D365_WP_BPOResult
    {
        public System.Decimal? PRODID { get; set; }
        public System.String LOTNO { get; set; }
        public System.String ITEMID { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.String OPERATION { get; set; }
    }

    #endregion

    #region D365_PK_TOTALHEADER Parameter

    public class D365_PK_TOTALHEADERParameter
    {
        public System.String P_PLALLETNO { get; set; }
    }

    #endregion

    #region D365_PK_TOTALHEADER Result

    public class D365_PK_TOTALHEADERResult
    {
        public System.String PALLETNO { get; set; }
        public System.String ITEMCODE { get; set; }
        public System.String LOADINGTYPE { get; set; }
    }

    #endregion

    #region D365_PK_OUL_C Parameter

    public class D365_PK_OUL_CParameter
    {
        public System.String P_PALLETNO { get; set; }
        public System.String P_ITEMCODE { get; set; }
        public System.String P_LOADINGTYPE { get; set; }
    }

    #endregion

    #region D365_PK_OUL_C Result

    public class D365_PK_OUL_CResult
    {
        public System.Decimal? LINENO { get; set; }
        public System.DateTime? OUTPUTDATE { get; set; }
        public System.String ITEMID { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.Decimal? GROSSLENGTH { get; set; }
        public System.Decimal? NETLENGTH { get; set; }
        public System.Decimal? GROSSWEIGHT { get; set; }
        public System.Decimal? NETWEIGHT { get; set; }
        public System.String PALLETNO { get; set; }
        public System.String GRADE { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.String SERIALID { get; set; }
        public System.Decimal? FINISH { get; set; }
        public System.String MOVEMENTTRANS { get; set; }
        public System.String WAREHOUSE { get; set; }
        public System.String LOCATION { get; set; }
    }

    #endregion

    #region D365_PK_OUL Parameter

    public class D365_PK_OULParameter
    {
        public System.String P_PALLETNO { get; set; }
        public System.String P_ITEMCODE { get; set; }
        public System.String P_LOADINGTYPE { get; set; }
    }

    #endregion

    #region D365_PK_OUL Result

    public class D365_PK_OULResult
    {
        public System.Decimal? LINENO { get; set; }
        public System.DateTime? OUTPUTDATE { get; set; }
        public System.String ITEMID { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.Decimal? GROSSLENGTH { get; set; }
        public System.Decimal? NETLENGTH { get; set; }
        public System.Decimal? GROSSWEIGHT { get; set; }
        public System.Decimal? NETWEIGHT { get; set; }
        public System.String PALLETNO { get; set; }
        public System.String GRADE { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.String SERIALID { get; set; }
        public System.Decimal? FINISH { get; set; }
        public System.String MOVEMENTTRANS { get; set; }
        public System.String WAREHOUSE { get; set; }
        public System.String LOCATION { get; set; }
    }

    #endregion

    #region D365_PK_OUH_C Parameter

    public class D365_PK_OUH_CParameter
    {
        public System.String P_PALLETNO { get; set; }
        public System.String P_ITEMCODE { get; set; }
        public System.String P_LOADINGTYPE { get; set; }
    }

    #endregion

    #region D365_PK_OUH_C Result

    public class D365_PK_OUH_CResult
    {
        public System.Decimal? HEADERID { get; set; }
        public System.String ITEMID { get; set; }
        public System.Decimal? TOTALRECORD { get; set; }
    }

    #endregion

    #region D365_PK_OUH Parameter

    public class D365_PK_OUHParameter
    {
        public System.String P_PALLETNO { get; set; }
        public System.String P_ITEMCODE { get; set; }
        public System.String P_LOADINGTYPE { get; set; }
    }

    #endregion

    #region D365_PK_OUH Result

    public class D365_PK_OUHResult
    {
        public System.Decimal? HEADERID { get; set; }
        public System.Decimal? TOTALRECORD { get; set; }
    }

    #endregion

    #region D365_PK_ISL_C Parameter

    public class D365_PK_ISL_CParameter
    {
        public System.String P_PALLETNO { get; set; }
        public System.String P_ITEMCODE { get; set; }
        public System.String P_LOADINGTYPE { get; set; }
    }

    #endregion

    #region D365_PK_ISL_C Result

    public class D365_PK_ISL_CResult
    {
        public System.Decimal? LINENO { get; set; }
        public System.DateTime? ISSUEDATE { get; set; }
        public System.String ITEMID { get; set; }
        public System.String STYLEID { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.String SERIALID { get; set; }
    }

    #endregion

    #region D365_PK_ISL Parameter

    public class D365_PK_ISLParameter
    {
        public System.String P_PALLETNO { get; set; }
        public System.String P_ITEMCODE { get; set; }
        public System.String P_LOADINGTYPE { get; set; }
    }

    #endregion

    #region D365_PK_ISL Result

    public class D365_PK_ISLResult
    {
        public System.Decimal? LINENO { get; set; }
        public System.DateTime? ISSUEDATE { get; set; }
        public System.String ITEMID { get; set; }
        public System.String STYLEID { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.String SERIALID { get; set; }
    }

    #endregion

    #region D365_PK_ISH Parameter

    public class D365_PK_ISHParameter
    {
        public System.String P_PALLETNO { get; set; }
        public System.String P_ITEMCODE { get; set; }
        public System.String P_LOADINGTYPE { get; set; }
    }

    #endregion

    #region D365_PK_ISH Result

    public class D365_PK_ISHResult
    {
        public System.Decimal? HEADERID { get; set; }
        public System.Decimal? TOTALRECORD { get; set; }
    }

    #endregion

    #region D365_PK_BPO_C Parameter

    public class D365_PK_BPO_CParameter
    {
        public System.String P_PALLETNO { get; set; }
        public System.String P_ITEMCODE { get; set; }
        public System.String P_LOADINGTYPE { get; set; }
    }

    #endregion

    #region D365_PK_BPO_C Result

    public class D365_PK_BPO_CResult
    {
        public System.Decimal? PRODID { get; set; }
        public System.String LOTNO { get; set; }
        public System.String ITEMID { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.String OPERATION { get; set; }
    }

    #endregion

    #region D365_PK_BPO Parameter

    public class D365_PK_BPOParameter
    {
        public System.String P_PALLETNO { get; set; }
        public System.String P_ITEMCODE { get; set; }
        public System.String P_LOADINGTYPE { get; set; }
    }

    #endregion

    #region D365_PK_BPO Result

    public class D365_PK_BPOResult
    {
        public System.Decimal? PRODID { get; set; }
        public System.String LOTNO { get; set; }
        public System.String ITEMID { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.String OPERATION { get; set; }
    }

    #endregion

    #region D365_IN_OUL_AUTO Parameter

    public class D365_IN_OUL_AUTOParameter
    {
        public System.String P_FINISHINGLOT { get; set; }
        public System.String P_INSPECTIONLOT { get; set; }
        public System.Decimal? P_FINISH { get; set; }
    }

    #endregion

    #region D365_IN_OUL_AUTO Result

    public class D365_IN_OUL_AUTOResult
    {
        public System.Decimal? LINENO { get; set; }
        public System.DateTime? OUTPUTDATE { get; set; }
        public System.String ITEMID { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.Decimal? GROSSLENGTH { get; set; }
        public System.Decimal? NETLENGTH { get; set; }
        public System.Decimal? GROSSWEIGHT { get; set; }
        public System.Decimal? NETWEIGHT { get; set; }
        public System.String PALLETNO { get; set; }
        public System.String GRADE { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.String SERIALID { get; set; }
        public System.Decimal? FINISH { get; set; }
        public System.String MOVEMENTTRANS { get; set; }
        public System.String WAREHOUSE { get; set; }
        public System.String LOCATION { get; set; }
    }

    #endregion

    #region D365_IN_OUL Parameter

    public class D365_IN_OULParameter
    {
        public System.String P_FINISHINGLOT { get; set; }
        public System.String P_INSPECTIONLOT { get; set; }
        public System.DateTime? P_STARTDATE { get; set; }
    }

    #endregion

    #region D365_IN_OUL Result

    public class D365_IN_OULResult
    {
        public System.Decimal? LINENO { get; set; }
        public System.DateTime? OUTPUTDATE { get; set; }
        public System.String ITEMID { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.Decimal? GROSSLENGTH { get; set; }
        public System.Decimal? NETLENGTH { get; set; }
        public System.Decimal? GROSSWEIGHT { get; set; }
        public System.Decimal? NETWEIGHT { get; set; }
        public System.String PALLETNO { get; set; }
        public System.String GRADE { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.String SERIALID { get; set; }
        public System.Decimal? FINISH { get; set; }
        public System.String MOVEMENTTRANS { get; set; }
        public System.String WAREHOUSE { get; set; }
        public System.String LOCATION { get; set; }
    }

    #endregion

    #region D365_IN_OUH Parameter

    public class D365_IN_OUHParameter
    {
        public System.String P_INSPECTIONLOT { get; set; }
    }

    #endregion

    #region D365_IN_OUH Result

    public class D365_IN_OUHResult
    {
        public System.Decimal? HEADERID { get; set; }
        public System.Decimal? TOTALRECORD { get; set; }
    }

    #endregion

    #region D365_IN_OPL Parameter

    public class D365_IN_OPLParameter
    {
        public System.String P_INSPECTIONLOT { get; set; }
        public System.DateTime? P_STARTDATE { get; set; }
    }

    #endregion

    #region D365_IN_OPL Result

    public class D365_IN_OPLResult
    {
        public System.Decimal? LINENO { get; set; }
        public System.Decimal? PROCQTY { get; set; }
        public System.String OPRNO { get; set; }
        public System.String OPRID { get; set; }
        public System.String MACHINENO { get; set; }
        public System.DateTime? STARTDATETIME { get; set; }
        public System.DateTime? ENDDATETIME { get; set; }
    }

    #endregion

    #region D365_IN_OPH Parameter

    public class D365_IN_OPHParameter
    {
        public System.String P_INSPECTIONLOT { get; set; }
    }

    #endregion

    #region D365_IN_OPH Result

    public class D365_IN_OPHResult
    {
        public System.Decimal? HEADERID { get; set; }
        public System.Decimal? TOTALRECORD { get; set; }
    }

    #endregion

    #region D365_IN_ISL Parameter

    public class D365_IN_ISLParameter
    {
        public System.String P_FINISHINGLOT { get; set; }
        public System.String P_INSPECTIONLOT { get; set; }
        public System.DateTime? P_STARTDATE { get; set; }
    }

    #endregion

    #region D365_IN_ISL Result

    public class D365_IN_ISLResult
    {
        public System.Decimal? LINENO { get; set; }
        public System.DateTime? ISSUEDATE { get; set; }
        public System.String ITEMID { get; set; }
        public System.String STYLEID { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.String SERIALID { get; set; }
    }

    #endregion

    #region D365_IN_ISH Parameter

    public class D365_IN_ISHParameter
    {
        public System.String P_FINISHINGLOT { get; set; }
        public System.String P_INSPECTIONLOT { get; set; }
    }

    #endregion

    #region D365_IN_ISH Result

    public class D365_IN_ISHResult
    {
        public System.Decimal? HEADERID { get; set; }
        public System.Decimal? TOTALRECORD { get; set; }
    }

    #endregion

    #region D365_IN_BPO Parameter

    public class D365_IN_BPOParameter
    {
        public System.String P_FINISHINGLOT { get; set; }
        public System.String P_INSPECTIONLOT { get; set; }
        public System.DateTime? P_STARTDATE { get; set; }
    }

    #endregion

    #region D365_IN_BPO Result

    public class D365_IN_BPOResult
    {
        public System.Decimal? PRODID { get; set; }
        public System.String LOTNO { get; set; }
        public System.String ITEMID { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.String OPERATION { get; set; }
    }

    #endregion

    #region D365_GR_OUL Parameter

    public class D365_GR_OULParameter
    {
        public System.String P_BEAMLOT { get; set; }
        public System.String P_WEAVINGLOT { get; set; }
        public System.Decimal? P_DOFFNO { get; set; }
        public System.String P_LOOMNO { get; set; }
    }

    #endregion

    #region D365_GR_OUL Result

    public class D365_GR_OULResult
    {
        public System.Decimal? LINENO { get; set; }
        public System.DateTime? OUTPUTDATE { get; set; }
        public System.String ITEMID { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.Decimal? GROSSLENGTH { get; set; }
        public System.Decimal? NETLENGTH { get; set; }
        public System.Decimal? GROSSWEIGHT { get; set; }
        public System.Decimal? NETWEIGHT { get; set; }
        public System.String PALLETNO { get; set; }
        public System.String GRADE { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.String SERIALID { get; set; }
        public System.Decimal? FINISH { get; set; }
        public System.String MOVEMENTTRANS { get; set; }
        public System.String WAREHOUSE { get; set; }
        public System.String LOCATION { get; set; }
    }

    #endregion

    #region D365_GR_OUH Parameter

    public class D365_GR_OUHParameter
    {
        public System.String P_WEAVINGLOT { get; set; }
    }

    #endregion

    #region D365_GR_OUH Result

    public class D365_GR_OUHResult
    {
        public System.Decimal? HEADERID { get; set; }
        public System.Decimal? TOTALRECORD { get; set; }
    }

    #endregion

    #region D365_GR_OPL Parameter

    public class D365_GR_OPLParameter
    {
        public System.String P_WEAVINGLOT { get; set; }
    }

    #endregion

    #region D365_GR_OPL Result

    public class D365_GR_OPLResult
    {
        public System.Decimal? LINENO { get; set; }
        public System.Decimal? PROCQTY { get; set; }
        public System.String OPRNO { get; set; }
        public System.String OPRID { get; set; }
        public System.String MACHINENO { get; set; }
        public System.DateTime? STARTDATETIME { get; set; }
        public System.DateTime? ENDDATETIME { get; set; }
    }

    #endregion

    #region D365_GR_OPH Parameter

    public class D365_GR_OPHParameter
    {
        public System.String P_WEAVINGLOT { get; set; }
    }

    #endregion

    #region D365_GR_OPH Result

    public class D365_GR_OPHResult
    {
        public System.Decimal? HEADERID { get; set; }
        public System.Decimal? TOTALRECORD { get; set; }
    }

    #endregion

    #region D365_GR_ISL Parameter

    public class D365_GR_ISLParameter
    {
        public System.String P_BEAMLOT { get; set; }
        public System.String P_WEAVINGLOT { get; set; }
        public System.Decimal? P_DOFFNO { get; set; }
        public System.String P_LOOMNO { get; set; }
    }

    #endregion

    #region D365_GR_ISL Result

    public class D365_GR_ISLResult
    {
        public System.Decimal? LINENO { get; set; }
        public System.DateTime? ISSUEDATE { get; set; }
        public System.String ITEMID { get; set; }
        public System.String STYLEID { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.String SERIALID { get; set; }
    }

    #endregion

    #region D365_GR_ISH Parameter

    public class D365_GR_ISHParameter
    {
        public System.String P_BEAMLOT { get; set; }
        public System.String P_WEAVINGLOT { get; set; }
        public System.Decimal? P_DOFFNO { get; set; }
    }

    #endregion

    #region D365_GR_ISH Result

    public class D365_GR_ISHResult
    {
        public System.Decimal? HEADERID { get; set; }
        public System.Decimal? TOTALRECORD { get; set; }
    }

    #endregion

    #region D365_GR_BPO Parameter

    public class D365_GR_BPOParameter
    {
        public System.String P_BEAMLOT { get; set; }
        public System.String P_LOOMNO { get; set; }
        public System.Decimal? P_DOFFNO { get; set; }
    }

    #endregion

    #region D365_GR_BPO Result

    public class D365_GR_BPOResult
    {
        public System.Decimal? PRODID { get; set; }
        public System.String LOTNO { get; set; }
        public System.String ITEMID { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.String OPERATION { get; set; }
    }

    #endregion

    #region D365_FN_OUL Parameter

    public class D365_FN_OULParameter
    {
        public System.String P_FINISHINGLOT { get; set; }
        public System.String P_WEAVINGLOT { get; set; }
        public System.String P_PROCESS { get; set; }
    }

    #endregion

    #region D365_FN_OUL Result

    public class D365_FN_OULResult
    {
        public System.Decimal? LINENO { get; set; }
        public System.DateTime? OUTPUTDATE { get; set; }
        public System.String ITEMID { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.Decimal? GROSSLENGTH { get; set; }
        public System.Decimal? NETLENGTH { get; set; }
        public System.Decimal? GROSSWEIGHT { get; set; }
        public System.Decimal? NETWEIGHT { get; set; }
        public System.String PALLETNO { get; set; }
        public System.String GRADE { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.String SERIALID { get; set; }
        public System.Decimal? FINISH { get; set; }
        public System.String MOVEMENTTRANS { get; set; }
        public System.String WAREHOUSE { get; set; }
        public System.String LOCATION { get; set; }
    }

    #endregion

    #region D365_FN_OUH Parameter

    public class D365_FN_OUHParameter
    {
        public System.String P_FINISHINGLOT { get; set; }
        public System.String P_WEAVINGLOT { get; set; }
        public System.String P_PROCESS { get; set; }
    }

    #endregion

    #region D365_FN_OUH Result

    public class D365_FN_OUHResult
    {
        public System.Decimal? HEADERID { get; set; }
        public System.Decimal? TOTALRECORD { get; set; }
    }

    #endregion

    #region D365_FN_OPL Parameter

    public class D365_FN_OPLParameter
    {
        public System.String P_FINISHINGLOT { get; set; }
        public System.String P_WEAVINGLOT { get; set; }
        public System.String P_PROCESS { get; set; }
    }

    #endregion

    #region D365_FN_OPL Result

    public class D365_FN_OPLResult
    {
        public System.Decimal? LINENO { get; set; }
        public System.Decimal? PROCQTY { get; set; }
        public System.String OPRNO { get; set; }
        public System.String OPRID { get; set; }
        public System.String MACHINENO { get; set; }
        public System.DateTime? STARTDATETIME { get; set; }
        public System.DateTime? ENDDATETIME { get; set; }
    }

    #endregion

    #region D365_FN_OPH Parameter

    public class D365_FN_OPHParameter
    {
        public System.String P_FINISHINGLOT { get; set; }
        public System.String P_WEAVINGLOT { get; set; }
        public System.String P_PROCESS { get; set; }
    }

    #endregion

    #region D365_FN_OPH Result

    public class D365_FN_OPHResult
    {
        public System.Decimal? HEADERID { get; set; }
        public System.Decimal? TOTALRECORD { get; set; }
    }

    #endregion

    #region D365_FN_ISL Parameter

    public class D365_FN_ISLParameter
    {
        public System.String P_FINISHINGLOT { get; set; }
        public System.String P_WEAVINGLOT { get; set; }
        public System.String P_PROCESS { get; set; }
    }

    #endregion

    #region D365_FN_ISL Result

    public class D365_FN_ISLResult
    {
        public System.Decimal? LINENO { get; set; }
        public System.DateTime? ISSUEDATE { get; set; }
        public System.String ITEMID { get; set; }
        public System.String STYLEID { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.String SERIALID { get; set; }
    }

    #endregion

    #region D365_FN_ISH Parameter

    public class D365_FN_ISHParameter
    {
        public System.String P_FINISHINGLOT { get; set; }
        public System.String P_WEAVINGLOT { get; set; }
        public System.String P_PROCESS { get; set; }
    }

    #endregion

    #region D365_FN_ISH Result

    public class D365_FN_ISHResult
    {
        public System.Decimal? HEADERID { get; set; }
        public System.Decimal? TOTALRECORD { get; set; }
    }

    #endregion

    #region D365_FN_BPO Parameter

    public class D365_FN_BPOParameter
    {
        public System.String P_FINISHINGLOT { get; set; }
        public System.String P_WEAVINGLOT { get; set; }
        public System.String P_PROCESS { get; set; }
    }

    #endregion

    #region D365_FN_BPO Result

    public class D365_FN_BPOResult
    {
        public System.Decimal? PRODID { get; set; }
        public System.String LOTNO { get; set; }
        public System.String ITEMID { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.String OPERATION { get; set; }
    }

    #endregion

    #region D365_DT_OUL Parameter

    public class D365_DT_OULParameter
    {
        public System.String P_BEAMERNO { get; set; }
    }

    #endregion

    #region D365_DT_OUL Result

    public class D365_DT_OULResult
    {
        public System.Decimal? LINENO { get; set; }
        public System.DateTime? OUTPUTDATE { get; set; }
        public System.String ITEMID { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.Decimal? GROSSLENGTH { get; set; }
        public System.Decimal? NETLENGTH { get; set; }
        public System.Decimal? GROSSWEIGHT { get; set; }
        public System.Decimal? NETWEIGHT { get; set; }
        public System.String PALLETNO { get; set; }
        public System.String GRADE { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.String SERIALID { get; set; }
        public System.Decimal? FINISH { get; set; }
        public System.String MOVEMENTTRANS { get; set; }
        public System.String WAREHOUSE { get; set; }
        public System.String LOCATION { get; set; }
    }

    #endregion

    #region D365_DT_OUH Parameter

    public class D365_DT_OUHParameter
    {
        public System.String P_BEAMLOT { get; set; }
    }

    #endregion

    #region D365_DT_OUH Result

    public class D365_DT_OUHResult
    {
        public System.Decimal? HEADERID { get; set; }
        public System.Decimal? TOTALRECORD { get; set; }
    }

    #endregion

    #region D365_DT_OPL Parameter

    public class D365_DT_OPLParameter
    {
        public System.String P_BEAMLOT { get; set; }
    }

    #endregion

    #region D365_DT_OPL Result

    public class D365_DT_OPLResult
    {
        public System.Decimal? LINENO { get; set; }
        public System.Decimal? PROCQTY { get; set; }
        public System.String OPRNO { get; set; }
        public System.String OPRID { get; set; }
        public System.String MACHINENO { get; set; }
        public System.DateTime? STARTDATETIME { get; set; }
        public System.DateTime? ENDDATETIME { get; set; }
    }

    #endregion

    #region D365_DT_OPH Parameter

    public class D365_DT_OPHParameter
    {
        public System.String P_BEAMLOT { get; set; }
    }

    #endregion

    #region D365_DT_OPH Result

    public class D365_DT_OPHResult
    {
        public System.Decimal? HEADERID { get; set; }
        public System.Decimal? TOTALRECORD { get; set; }
    }

    #endregion

    #region D365_DT_ISL Parameter

    public class D365_DT_ISLParameter
    {
        public System.String P_BEAMLOT { get; set; }
    }

    #endregion

    #region D365_DT_ISL Result

    public class D365_DT_ISLResult
    {
        public System.Decimal? LINENO { get; set; }
        public System.DateTime? ISSUEDATE { get; set; }
        public System.String ITEMID { get; set; }
        public System.String STYLEID { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.String SERIALID { get; set; }
    }

    #endregion

    #region D365_DT_ISH Parameter

    public class D365_DT_ISHParameter
    {
        public System.String P_BEAMLOT { get; set; }
    }

    #endregion

    #region D365_DT_ISH Result

    public class D365_DT_ISHResult
    {
        public System.Decimal? HEADERID { get; set; }
        public System.Decimal? TOTALRECORD { get; set; }
    }

    #endregion

    #region D365_DT_BPO Parameter

    public class D365_DT_BPOParameter
    {
        public System.String P_BEAMLOT { get; set; }
    }

    #endregion

    #region D365_DT_BPO Result

    public class D365_DT_BPOResult
    {
        public System.Decimal? PRODID { get; set; }
        public System.String LOTNO { get; set; }
        public System.String ITEMID { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.String OPERATION { get; set; }
    }

    #endregion

    #region D365_CP_OUL Parameter

    public class D365_CP_OULParameter
    {
        public System.String P_ITEMLOT { get; set; }
    }

    #endregion
  
    #region D365_CP_OUL Result

    public class D365_CP_OULResult
    {
        public System.Decimal? LINENO { get; set; }
        public System.DateTime? OUTPUTDATE { get; set; }
        public System.String ITEMID { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.Decimal? GROSSLENGTH { get; set; }
        public System.Decimal? NETLENGTH { get; set; }
        public System.Decimal? GROSSWEIGHT { get; set; }
        public System.Decimal? NETWEIGHT { get; set; }
        public System.String PALLETNO { get; set; }
        public System.String GRADE { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.String SERIALID { get; set; }
        public System.Decimal? FINISH { get; set; }
        public System.String MOVEMENTTRANS { get; set; }
        public System.String WAREHOUSE { get; set; }
        public System.String LOCATION { get; set; }
    }

    #endregion

    #region D365_CP_OUH Parameter

    public class D365_CP_OUHParameter
    {
        public System.String P_ITEMLOT { get; set; }
    }

    #endregion

    #region D365_CP_OUH Result

    public class D365_CP_OUHResult
    {
        public System.Decimal? HEADERID { get; set; }
        public System.Decimal? TOTALRECORD { get; set; }
    }

    #endregion

    #region D365_CP_OPL Parameter

    public class D365_CP_OPLParameter
    {
        public System.String P_ITEMLOT { get; set; }
    }

    #endregion

    #region D365_CP_OPL Result

    public class D365_CP_OPLResult
    {
        public System.Decimal? LINENO { get; set; }
        public System.Decimal? PROCQTY { get; set; }
        public System.String OPRNO { get; set; }
        public System.String OPRID { get; set; }
        public System.String MACHINENO { get; set; }
        public System.DateTime? STARTDATETIME { get; set; }
        public System.DateTime? ENDDATETIME { get; set; }
    }

    #endregion

    #region D365_CP_OPH Parameter

    public class D365_CP_OPHParameter
    {
        public System.String P_ITEMLOT { get; set; }
    }

    #endregion

    #region D365_CP_OPH Result

    public class D365_CP_OPHResult
    {
        public System.Decimal? HEADERID { get; set; }
        public System.Decimal? TOTALRECORD { get; set; }
    }

    #endregion

    #region D365_CP_ISL Parameter

    public class D365_CP_ISLParameter
    {
        public System.String P_ITEMLOT { get; set; }
    }

    #endregion

    #region D365_CP_ISL Result

    public class D365_CP_ISLResult
    {
        public System.Decimal? LINENO { get; set; }
        public System.DateTime? ISSUEDATE { get; set; }
        public System.String ITEMID { get; set; }
        public System.String STYLEID { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.String SERIALID { get; set; }
    }

    #endregion

    #region D365_CP_ISH Parameter

    public class D365_CP_ISHParameter
    {
        public System.String P_ITEMLOT { get; set; }
    }

    #endregion

    #region D365_CP_ISH Result

    public class D365_CP_ISHResult
    {
        public System.Decimal? HEADERID { get; set; }
        public System.Decimal? TOTALRECORD { get; set; }
    }

    #endregion

    #region D365_CP_BPO Parameter

    public class D365_CP_BPOParameter
    {
        public System.String P_ITEMLOT { get; set; }
    }

    #endregion

    #region D365_CP_BPO Result

    public class D365_CP_BPOResult
    {
        public System.Decimal? PRODID { get; set; }
        public System.String LOTNO { get; set; }
        public System.String ITEMID { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.String OPERATION { get; set; }
    }

    #endregion

    #region D365_BM_OUL Parameter

    public class D365_BM_OULParameter
    {
        public System.String P_BEAMERNO { get; set; }
    }

    #endregion

    #region D365_BM_OUL Result

    public class D365_BM_OULResult
    {
        public System.Decimal? LINENO { get; set; }
        public System.DateTime? OUTPUTDATE { get; set; }
        public System.String ITEMID { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.Decimal? GROSSLENGTH { get; set; }
        public System.Decimal? NETLENGTH { get; set; }
        public System.Decimal? GROSSWEIGHT { get; set; }
        public System.Decimal? NETWEIGHT { get; set; }
        public System.String PALLETNO { get; set; }
        public System.String GRADE { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.String SERIALID { get; set; }
        public System.Decimal? FINISH { get; set; }
        public System.String MOVEMENTTRANS { get; set; }
        public System.String WAREHOUSE { get; set; }
        public System.String LOCATION { get; set; }
    }

    #endregion

    #region D365_BM_OUH Parameter

    public class D365_BM_OUHParameter
    {
        public System.String P_BEAMERNO { get; set; }
    }

    #endregion

    #region D365_BM_OUH Result

    public class D365_BM_OUHResult
    {
        public System.Decimal? HEADERID { get; set; }
        public System.Decimal? TOTALRECORD { get; set; }
    }

    #endregion

    #region D365_BM_OPL Parameter

    public class D365_BM_OPLParameter
    {
        public System.String P_BEAMERNO { get; set; }
    }

    #endregion

    #region D365_BM_OPL Result

    public class D365_BM_OPLResult
    {
        public System.Decimal? LINENO { get; set; }
        public System.Decimal? PROCQTY { get; set; }
        public System.String OPRNO { get; set; }
        public System.String OPRID { get; set; }
        public System.String MACHINENO { get; set; }
        public System.DateTime? STARTDATETIME { get; set; }
        public System.DateTime? ENDDATETIME { get; set; }
    }

    #endregion

    #region D365_BM_OPH Parameter

    public class D365_BM_OPHParameter
    {
        public System.String P_BEAMERNO { get; set; }
    }

    #endregion

    #region D365_BM_OPH Result

    public class D365_BM_OPHResult
    {
        public System.Decimal? HEADERID { get; set; }
        public System.Decimal? TOTALRECORD { get; set; }
    }

    #endregion

    #region D365_BM_ISL Parameter

    public class D365_BM_ISLParameter
    {
        public System.String P_BEAMERNO { get; set; }
    }

    #endregion

    #region D365_BM_ISL Result

    public class D365_BM_ISLResult
    {
        public System.Decimal? LINENO { get; set; }
        public System.DateTime? ISSUEDATE { get; set; }
        public System.String ITEMID { get; set; }
        public System.String STYLEID { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.String SERIALID { get; set; }
    }

    #endregion

    #region D365_BM_ISH Parameter

    public class D365_BM_ISHParameter
    {
        public System.String P_BEAMERNO { get; set; }
    }

    #endregion

    #region D365_BM_ISH Result

    public class D365_BM_ISHResult
    {
        public System.Decimal? HEADERID { get; set; }
        public System.Decimal? TOTALRECORD { get; set; }
    }

    #endregion

    #region D365_BM_BPO Parameter

    public class D365_BM_BPOParameter
    {
        public System.String P_BEAMERNO { get; set; }
    }

    #endregion

    #region D365_BM_BPO Result

    public class D365_BM_BPOResult
    {
        public System.Decimal? PRODID { get; set; }
        public System.String LOTNO { get; set; }
        public System.String ITEMID { get; set; }
        public System.String LOADINGTYPE { get; set; }
        public System.Decimal? QTY { get; set; }
        public System.String UNIT { get; set; }
        public System.String OPERATION { get; set; }
    }

    #endregion
}

namespace LuckyTex.Services
{
    /// <summary>
    /// Database Manager.
    /// </summary>
    public partial class DatabaseManager
    {
        #region Singelton

        private static DatabaseManager _instance = null;

        /// <summary>
        /// Singelton acccess instance.
        /// </summary>
        public static DatabaseManager Instance
        {
            get
            {
                if (null == _instance)
                {
                    lock (typeof(DatabaseManager))
                    {
                        _instance = new DatabaseManager();
                    }
                }
                return _instance;
            }
        }
        #endregion

        #region Internal Variables

        private NDbConnection _manager = null;

        #endregion

        #region Constructor and Destructor

        /// <summary>
        /// Constructor.
        /// </summary>
        private DatabaseManager() : base() { }
        /// <summary>
        /// Destructor.
        /// </summary>
        ~DatabaseManager()
        {
            Shutdown();
        }

        #endregion

        #region Private Methods

        private bool HasConnection()
        {
            bool result = false;
            if (null == _manager)
            {
                _manager = new NDbConnection();
            }
            if (!_manager.IsConnected)
            {
                _manager.Config = ConfigManager.Instance.DatabaseConfig;
                _manager.Connect();
            }
            if (!_manager.IsConnected)
            {
                "Cannot connect to database".Err();
            }

            result = _manager.IsConnected;

            return result;
        }

        private StoredProcedureResult Execute(string procName,
            string[] paraNames, object[] paraValues)
        {
            ExecuteResult<StoredProcedureResult> ret = null;
            ret = _manager.ExecuteProcedure(procName, paraNames, paraValues);
            if (null == ret)
            {
                string msg =
                    string.Format("Execute {0} error. Null result returns.", procName);
                msg.Err();
            }
            else if (ret.HasException)
            {
                string msg =
                    string.Format("Execute {0} error.", procName);
                msg.Err(ret.Exception);
            }

            return ret;
        }

        #endregion

        #region Start/Shutdown

        /// <summary>
        /// Start service.
        /// </summary>
        public void Start()
        {
            _manager = new NDbConnection();
            _manager.Config = ConfigManager.Instance.DatabaseConfig;
            _manager.Connect();
        }
        /// <summary>
        /// Shutdown service.
        /// </summary>
        public void Shutdown()
        {
            if (null != _manager && _manager.IsConnected)
            {
                _manager.Disconnect();
            }
            _manager = null;
        }

        #endregion

        #region Query
        
        /// <summary>
        /// Execute Query.
        /// </summary>
        /// <param name="queryText">The query text.</param>
        /// <returns>Returns query result in DataTable.</returns>
        public DataTable Query(string queryText)
        {
            DataTable result = null;

            if (!HasConnection())
                return result;
            try
            {
                result = _manager.Query(queryText,null);
            }
            catch (Exception ex)
            {
                ex.Err();
            }

            return result;
        }

        #endregion

        #region Public Properties

        /// <summary>
        /// Check is database connected.
        /// </summary>
        public bool IsConnected
        {
            get
            {
                return (null != _manager && _manager.IsConnected);
            }
        }

        #endregion

        #region Stored Procedure methods

        #region WEAV_WEAVINGMCSTATUS

        public List<WEAV_WEAVINGMCSTATUSResult> WEAV_WEAVINGMCSTATUS(WEAV_WEAVINGMCSTATUSParameter para)
        {
            List<WEAV_WEAVINGMCSTATUSResult> results = new List<WEAV_WEAVINGMCSTATUSResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_MC"
            };
            object[] paraValues = new object[]
            {
                para.P_MC
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAV_WEAVINGMCSTATUS",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WEAV_WEAVINGMCSTATUSResult result =
                            new WEAV_WEAVINGMCSTATUSResult();

                        result.BEAMLOT = row.Field<System.String>("BEAMLOT");
                        result.MC = row.Field<System.String>("MC");
                        result.REEDNO2 = row.Field<System.String>("REEDNO2");
                        result.WEFTYARN = row.Field<System.String>("WEFTYARN");
                        result.TEMPLETYPE = row.Field<System.String>("TEMPLETYPE");
                        result.BARNO = row.Field<System.String>("BARNO");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.FINISHDATE = row.Field<System.DateTime?>("FINISHDATE");
                        result.FINISHFLAG = row.Field<System.String>("FINISHFLAG");
                        result.SETTINGBY = row.Field<System.String>("SETTINGBY");
                        result.EDITDATE = row.Field<System.DateTime?>("EDITDATE");
                        result.EDITBY = row.Field<System.String>("EDITBY");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.WIDTH = row.Field<System.Decimal?>("WIDTH");
                        result.BEAMLENGTH = row.Field<System.Decimal?>("BEAMLENGTH");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.REEDNO = row.Field<System.String>("REEDNO");
                        result.HEALDCOLOR = row.Field<System.String>("HEALDCOLOR");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WEAV_WEAVINGINPROCESSLIST

        public List<WEAV_WEAVINGINPROCESSLISTResult> WEAV_WEAVINGINPROCESSLIST(WEAV_WEAVINGINPROCESSLISTParameter para)
        {
            List<WEAV_WEAVINGINPROCESSLISTResult> results = new List<WEAV_WEAVINGINPROCESSLISTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMROLL", 
                "P_DOFFNO"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMROLL, 
                para.P_DOFFNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAV_WEAVINGINPROCESSLIST",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WEAV_WEAVINGINPROCESSLISTResult result =
                            new WEAV_WEAVINGINPROCESSLISTResult();

                        result.BEAMLOT = row.Field<System.String>("BEAMLOT");
                        result.MC = row.Field<System.String>("MC");
                        result.REEDNO2 = row.Field<System.String>("REEDNO2");
                        result.WEFTYARN = row.Field<System.String>("WEFTYARN");
                        result.TEMPLETYPE = row.Field<System.String>("TEMPLETYPE");
                        result.BARNO = row.Field<System.String>("BARNO");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.FINISHDATE = row.Field<System.DateTime?>("FINISHDATE");
                        result.FINISHFLAG = row.Field<System.String>("FINISHFLAG");
                        result.SETTINGBY = row.Field<System.String>("SETTINGBY");
                        result.EDITDATE = row.Field<System.DateTime?>("EDITDATE");
                        result.EDITBY = row.Field<System.String>("EDITBY");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.WIDTH = row.Field<System.Decimal?>("WIDTH");
                        result.BEAMLENGTH = row.Field<System.Decimal?>("BEAMLENGTH");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WEAV_UPDATEWEFTSTOCK

        public WEAV_UPDATEWEFTSTOCKResult WEAV_UPDATEWEFTSTOCK(WEAV_UPDATEWEFTSTOCKParameter para)
        {
            WEAV_UPDATEWEFTSTOCKResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_BEAMLOT", 
                "P_WEAVINGLOT", 
                "P_DOFFNO", 
                "P_LOOMNO", 
                "P_ITMYARN"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMLOT, 
                para.P_WEAVINGLOT, 
                para.P_DOFFNO, 
                para.P_LOOMNO, 
                para.P_ITMYARN
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAV_UPDATEWEFTSTOCK",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new WEAV_UPDATEWEFTSTOCKResult();
                if (ret.Result.OutParameters["R_RESULT"] != DBNull.Value)
                    result.R_RESULT = (System.String)ret.Result.OutParameters["R_RESULT"];
            }

            return result;
        }

        #endregion

        #region WEAV_UPDATEWEAVINGLOT

        public WEAV_UPDATEWEAVINGLOTResult WEAV_UPDATEWEAVINGLOT(WEAV_UPDATEWEAVINGLOTParameter para)
        {
            WEAV_UPDATEWEAVINGLOTResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_WEAVINGLOT", 
                "P_LENGHT", 
                "P_SHIFT", 
                "P_DENSITYWARP", 
                "P_DENSITYWEFT", 
                "P_TENSION", 
                "P_WASTE"
            };
            object[] paraValues = new object[]
            {
                para.P_WEAVINGLOT, 
                para.P_LENGHT, 
                para.P_SHIFT, 
                para.P_DENSITYWARP, 
                para.P_DENSITYWEFT, 
                para.P_TENSION, 
                para.P_WASTE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAV_UPDATEWEAVINGLOT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new WEAV_UPDATEWEAVINGLOTResult();
            }

            return result;
        }

        #endregion

        #region WEAV_SHIPMENTREPORT

        public List<WEAV_SHIPMENTREPORTResult> WEAV_SHIPMENTREPORT(WEAV_SHIPMENTREPORTParameter para)
        {
            List<WEAV_SHIPMENTREPORTResult> results = new List<WEAV_SHIPMENTREPORTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEGINDATE", 
                "P_ENDDATE"
            };
            object[] paraValues = new object[]
            {
                para.P_BEGINDATE, 
                para.P_ENDDATE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAV_SHIPMENTREPORT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WEAV_SHIPMENTREPORTResult result =
                            new WEAV_SHIPMENTREPORTResult();

                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");
                        result.PIECES = row.Field<System.Decimal?>("PIECES");
                        result.METERS = row.Field<System.Decimal?>("METERS");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WEAV_SEARCHPRODUCTION

        public List<WEAV_SEARCHPRODUCTIONResult> WEAV_SEARCHPRODUCTION(WEAV_SEARCHPRODUCTIONParameter para)
        {
            List<WEAV_SEARCHPRODUCTIONResult> results = new List<WEAV_SEARCHPRODUCTIONResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_LOOMNO", 
                "P_BEAMERROLL", 
                "P_ITMWEAVING", 
                "P_SETDATE"
            };
            object[] paraValues = new object[]
            {
                para.P_LOOMNO, 
                para.P_BEAMERROLL, 
                para.P_ITMWEAVING, 
                para.P_SETDATE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAV_SEARCHPRODUCTION",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WEAV_SEARCHPRODUCTIONResult result =
                            new WEAV_SEARCHPRODUCTIONResult();

                        result.BEAMLOT = row.Field<System.String>("BEAMLOT");
                        result.MC = row.Field<System.String>("MC");
                        result.REEDNO2 = row.Field<System.String>("REEDNO2");
                        result.WEFTYARN = row.Field<System.String>("WEFTYARN");
                        result.TEMPLETYPE = row.Field<System.String>("TEMPLETYPE");
                        result.BARNO = row.Field<System.String>("BARNO");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.FINISHDATE = row.Field<System.DateTime?>("FINISHDATE");
                        result.FINISHFLAG = row.Field<System.String>("FINISHFLAG");
                        result.SETTINGBY = row.Field<System.String>("SETTINGBY");
                        result.EDITDATE = row.Field<System.DateTime?>("EDITDATE");
                        result.EDITBY = row.Field<System.String>("EDITBY");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.WIDTH = row.Field<System.Decimal?>("WIDTH");
                        result.BEAMLENGTH = row.Field<System.Decimal?>("BEAMLENGTH");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.BEAMERNO = row.Field<System.String>("BEAMERNO");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WEAV_SAMPLING

        public WEAV_SAMPLINGResult WEAV_SAMPLING(WEAV_SAMPLINGParameter para)
        {
            WEAV_SAMPLINGResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_BEAMERROLL", 
                "P_LOOM", 
                "P_ITMWEAVE", 
                "P_SETTINGDATE", 
                "P_BARNO", 
                "P_SPIRIAL_L", 
                "P_SPIRIAL_R", 
                "P_SAMPLING", 
                "P_SAMPLINGBY", 
                "P_RECUT", 
                "P_RECUTBY", 
                "P_RECUTDATE", 
                "P_REMARK"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERROLL, 
                para.P_LOOM, 
                para.P_ITMWEAVE, 
                para.P_SETTINGDATE, 
                para.P_BARNO, 
                para.P_SPIRIAL_L, 
                para.P_SPIRIAL_R, 
                para.P_SAMPLING, 
                para.P_SAMPLINGBY, 
                para.P_RECUT, 
                para.P_RECUTBY, 
                para.P_RECUTDATE, 
                para.P_REMARK
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAV_SAMPLING",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new WEAV_SAMPLINGResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region WEAV_INSERTMCSTOP

        public WEAV_INSERTMCSTOPResult WEAV_INSERTMCSTOP(WEAV_INSERTMCSTOPParameter para)
        {
            WEAV_INSERTMCSTOPResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_LOOMNO", 
                "P_DOFFNO", 
                "P_BEAMROLL", 
                "P_WEAVINGLOT", 
                "P_DEFECT", 
                "P_LENGTH", 
                "P_POSITION", 
                "P_REMARK", 
                "P_OPERATOR", 
                "P_DATE"
            };
            object[] paraValues = new object[]
            {
                para.P_LOOMNO, 
                para.P_DOFFNO, 
                para.P_BEAMROLL, 
                para.P_WEAVINGLOT, 
                para.P_DEFECT, 
                para.P_LENGTH, 
                para.P_POSITION, 
                para.P_REMARK, 
                para.P_OPERATOR, 
                para.P_DATE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAV_INSERTMCSTOP",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new WEAV_INSERTMCSTOPResult();
                if (ret.Result.OutParameters["R_RESULT"] != DBNull.Value)
                    result.R_RESULT = (System.String)ret.Result.OutParameters["R_RESULT"];
            }

            return result;
        }

        #endregion

        #region WEAV_GREYROLLDAILYREPORT

        public List<WEAV_GREYROLLDAILYREPORTResult> WEAV_GREYROLLDAILYREPORT(WEAV_GREYROLLDAILYREPORTParameter para)
        {
            List<WEAV_GREYROLLDAILYREPORTResult> results = new List<WEAV_GREYROLLDAILYREPORTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_DATE", 
                "P_CHINA"
            };
            object[] paraValues = new object[]
            {
                para.P_DATE, 
                para.P_CHINA
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAV_GREYROLLDAILYREPORT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WEAV_GREYROLLDAILYREPORTResult result =
                            new WEAV_GREYROLLDAILYREPORTResult();

                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");
                        result.LENGTH = row.Field<System.Decimal?>("LENGTH");
                        result.LOOMNO = row.Field<System.String>("LOOMNO");
                        result.WEAVINGDATE = row.Field<System.DateTime?>("WEAVINGDATE");
                        result.SHIFT = row.Field<System.String>("SHIFT");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.CREATEDATE = row.Field<System.DateTime?>("CREATEDATE");
                        result.WIDTH = row.Field<System.Decimal?>("WIDTH");
                        result.PREPAREBY = row.Field<System.String>("PREPAREBY");
                        result.WEAVINGNO = row.Field<System.String>("WEAVINGNO");
                        result.BEAMLOT = row.Field<System.String>("BEAMLOT");
                        result.DOFFNO = row.Field<System.Decimal?>("DOFFNO");
                        result.DENSITY_WARP = row.Field<System.Decimal?>("DENSITY_WARP");
                        result.TENSION = row.Field<System.Decimal?>("TENSION");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.DOFFBY = row.Field<System.String>("DOFFBY");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.WASTE = row.Field<System.Decimal?>("WASTE");
                        result.DENSITY_WEFT = row.Field<System.Decimal?>("DENSITY_WEFT");
                        result.DELETEFLAG = row.Field<System.String>("DELETEFLAG");
                        result.DELETEBY = row.Field<System.String>("DELETEBY");
                        result.DELETEDATE = row.Field<System.DateTime?>("DELETEDATE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WEAV_GETWEFTYARNLISTBYDOFFNO

        public List<WEAV_GETWEFTYARNLISTBYDOFFNOResult> WEAV_GETWEFTYARNLISTBYDOFFNO(WEAV_GETWEFTYARNLISTBYDOFFNOParameter para)
        {
            List<WEAV_GETWEFTYARNLISTBYDOFFNOResult> results = new List<WEAV_GETWEFTYARNLISTBYDOFFNOResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMROLL", 
                "P_DOFFNO"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMROLL, 
                para.P_DOFFNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAV_GETWEFTYARNLISTBYDOFFNO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WEAV_GETWEFTYARNLISTBYDOFFNOResult result =
                            new WEAV_GETWEFTYARNLISTBYDOFFNOResult();

                        result.BEAMLOT = row.Field<System.String>("BEAMLOT");
                        result.DOFFNO = row.Field<System.Decimal?>("DOFFNO");
                        result.PALLETNO = row.Field<System.String>("PALLETNO");
                        result.CHLOTNO = row.Field<System.String>("CHLOTNO");
                        result.ADDDATE = row.Field<System.DateTime?>("ADDDATE");
                        result.ADDBY = row.Field<System.String>("ADDBY");
                        result.USETYPE = row.Field<System.String>("USETYPE");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.LOOMNO = row.Field<System.String>("LOOMNO");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WEAV_GETWEAVELISTBYBEAMROLL

        public List<WEAV_GETWEAVELISTBYBEAMROLLResult> WEAV_GETWEAVELISTBYBEAMROLL(WEAV_GETWEAVELISTBYBEAMROLLParameter para)
        {
            List<WEAV_GETWEAVELISTBYBEAMROLLResult> results = new List<WEAV_GETWEAVELISTBYBEAMROLLResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMROLL", 
                "P_LOOM"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMROLL, 
                para.P_LOOM
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAV_GETWEAVELISTBYBEAMROLL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WEAV_GETWEAVELISTBYBEAMROLLResult result =
                            new WEAV_GETWEAVELISTBYBEAMROLLResult();

                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");
                        result.LENGTH = row.Field<System.Decimal?>("LENGTH");
                        result.LOOMNO = row.Field<System.String>("LOOMNO");
                        result.WEAVINGDATE = row.Field<System.DateTime?>("WEAVINGDATE");
                        result.SHIFT = row.Field<System.String>("SHIFT");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.CREATEDATE = row.Field<System.DateTime?>("CREATEDATE");
                        result.WIDTH = row.Field<System.Decimal?>("WIDTH");
                        result.PREPAREBY = row.Field<System.String>("PREPAREBY");
                        result.WEAVINGNO = row.Field<System.String>("WEAVINGNO");
                        result.BEAMLOT = row.Field<System.String>("BEAMLOT");
                        result.DOFFNO = row.Field<System.Decimal?>("DOFFNO");
                        result.DENSITY_WARP = row.Field<System.Decimal?>("DENSITY_WARP");
                        result.TENSION = row.Field<System.Decimal?>("TENSION");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.DOFFBY = row.Field<System.String>("DOFFBY");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.WASTE = row.Field<System.Decimal?>("WASTE");
                        result.DENSITY_WEFT = row.Field<System.Decimal?>("DENSITY_WEFT");
                        result.DELETEFLAG = row.Field<System.String>("DELETEFLAG");
                        result.DELETEBY = row.Field<System.String>("DELETEBY");
                        result.DELETEDATE = row.Field<System.DateTime?>("DELETEDATE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WEAV_GETSAMPLINGDATA

        public List<WEAV_GETSAMPLINGDATAResult> WEAV_GETSAMPLINGDATA(WEAV_GETSAMPLINGDATAParameter para)
        {
            List<WEAV_GETSAMPLINGDATAResult> results = new List<WEAV_GETSAMPLINGDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMROLL", 
                "P_LOOM"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMROLL, 
                para.P_LOOM
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAV_GETSAMPLINGDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WEAV_GETSAMPLINGDATAResult result =
                            new WEAV_GETSAMPLINGDATAResult();

                        result.BEAMERROLL = row.Field<System.String>("BEAMERROLL");
                        result.LOOMNO = row.Field<System.String>("LOOMNO");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");
                        result.SETTINGDATE = row.Field<System.DateTime?>("SETTINGDATE");
                        result.BARNO = row.Field<System.String>("BARNO");
                        result.SPIRAL_L = row.Field<System.Decimal?>("SPIRAL_L");
                        result.SPIRAL_R = row.Field<System.Decimal?>("SPIRAL_R");
                        result.STSAMPLING = row.Field<System.Decimal?>("STSAMPLING");
                        result.RECUTSAMPLING = row.Field<System.Decimal?>("RECUTSAMPLING");
                        result.STSAMPLINGBY = row.Field<System.String>("STSAMPLINGBY");
                        result.RECUTBY = row.Field<System.String>("RECUTBY");
                        result.STDATE = row.Field<System.DateTime?>("STDATE");
                        result.RECUTDATE = row.Field<System.DateTime?>("RECUTDATE");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.BEAMMC = row.Field<System.String>("BEAMMC");
                        result.WARPMC = row.Field<System.String>("WARPMC");
                        result.BEAMERNO = row.Field<System.String>("BEAMERNO");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WEAV_GETMCSTOPLISTBYDOFFNO

        public List<WEAV_GETMCSTOPLISTBYDOFFNOResult> WEAV_GETMCSTOPLISTBYDOFFNO(WEAV_GETMCSTOPLISTBYDOFFNOParameter para)
        {
            List<WEAV_GETMCSTOPLISTBYDOFFNOResult> results = new List<WEAV_GETMCSTOPLISTBYDOFFNOResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_LOOMNO", 
                "P_DOFFNO", 
                "P_BEAMROLL", 
                "P_WEAVELOT"
            };
            object[] paraValues = new object[]
            {
                para.P_LOOMNO, 
                para.P_DOFFNO, 
                para.P_BEAMROLL, 
                para.P_WEAVELOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAV_GETMCSTOPLISTBYDOFFNO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WEAV_GETMCSTOPLISTBYDOFFNOResult result =
                            new WEAV_GETMCSTOPLISTBYDOFFNOResult();

                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.DEFECTCODE = row.Field<System.String>("DEFECTCODE");
                        result.DEFECTPOSITION = row.Field<System.Decimal?>("DEFECTPOSITION");
                        result.CREATEBY = row.Field<System.String>("CREATEBY");
                        result.CREATEDATE = row.Field<System.DateTime?>("CREATEDATE");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.LOOMNO = row.Field<System.String>("LOOMNO");
                        result.BEAMERROLL = row.Field<System.String>("BEAMERROLL");
                        result.DOFFNO = row.Field<System.Decimal?>("DOFFNO");
                        result.DEFECTLENGTH = row.Field<System.Decimal?>("DEFECTLENGTH");
                        result.STOPDATE = row.Field<System.DateTime?>("STOPDATE");
                        result.DESCRIPTION = row.Field<System.String>("DESCRIPTION");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WEAV_GETMCSTOPBYLOT

        public List<WEAV_GETMCSTOPBYLOTResult> WEAV_GETMCSTOPBYLOT(WEAV_GETMCSTOPBYLOTParameter para)
        {
            List<WEAV_GETMCSTOPBYLOTResult> results = new List<WEAV_GETMCSTOPBYLOTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WEAVINGLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_WEAVINGLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAV_GETMCSTOPBYLOT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WEAV_GETMCSTOPBYLOTResult result =
                            new WEAV_GETMCSTOPBYLOTResult();

                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.DEFECTCODE = row.Field<System.String>("DEFECTCODE");
                        result.DEFECTPOSITION = row.Field<System.Decimal?>("DEFECTPOSITION");
                        result.CREATEBY = row.Field<System.String>("CREATEBY");
                        result.CREATEDATE = row.Field<System.DateTime?>("CREATEDATE");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.LOOMNO = row.Field<System.String>("LOOMNO");
                        result.BEAMERROLL = row.Field<System.String>("BEAMERROLL");
                        result.DOFFNO = row.Field<System.Decimal?>("DOFFNO");
                        result.DEFECTLENGTH = row.Field<System.Decimal?>("DEFECTLENGTH");
                        result.STOPDATE = row.Field<System.DateTime?>("STOPDATE");
                        result.DESCRIPTION = row.Field<System.String>("DESCRIPTION");
                        result.WEAVSTARTDATE = row.Field<System.DateTime?>("WEAVSTARTDATE");
                        result.WEAVFINISHDATE = row.Field<System.DateTime?>("WEAVFINISHDATE");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");
                        result.WIDTH = row.Field<System.Decimal?>("WIDTH");
                        result.LENGTH = row.Field<System.Decimal?>("LENGTH");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WEAV_GETMACHINEZONELIST

        public List<WEAV_GETMACHINEZONELISTResult> WEAV_GETMACHINEZONELIST(WEAV_GETMACHINEZONELISTParameter para)
        {
            List<WEAV_GETMACHINEZONELISTResult> results = new List<WEAV_GETMACHINEZONELISTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
            };
            object[] paraValues = new object[]
            {
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAV_GETMACHINEZONELIST",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WEAV_GETMACHINEZONELISTResult result =
                            new WEAV_GETMACHINEZONELISTResult();

                        result.ZONE = row.Field<System.String>("ZONE");
                        result.TYPE = row.Field<System.String>("TYPE");
                        result.TOTAL = row.Field<System.Decimal?>("TOTAL");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WEAV_GETITEMWEAVINGLIST

        public List<WEAV_GETITEMWEAVINGLISTResult> WEAV_GETITEMWEAVINGLIST(WEAV_GETITEMWEAVINGLISTParameter para)
        {
            List<WEAV_GETITEMWEAVINGLISTResult> results = new List<WEAV_GETITEMWEAVINGLISTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WEAVETYPE"
            };
            object[] paraValues = new object[]
            {
                para.P_WEAVETYPE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAV_GETITEMWEAVINGLIST",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WEAV_GETITEMWEAVINGLISTResult result =
                            new WEAV_GETITEMWEAVINGLISTResult();

                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");
                        result.WIDTHWEAVING = row.Field<System.Decimal?>("WIDTHWEAVING");
                        result.WEAVE_TYPE = row.Field<System.String>("WEAVE_TYPE");
                        result.ITM_YARN = row.Field<System.String>("ITM_YARN");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WEAV_GETINPROCESSBYBEAMROLL

        public List<WEAV_GETINPROCESSBYBEAMROLLResult> WEAV_GETINPROCESSBYBEAMROLL(WEAV_GETINPROCESSBYBEAMROLLParameter para)
        {
            List<WEAV_GETINPROCESSBYBEAMROLLResult> results = new List<WEAV_GETINPROCESSBYBEAMROLLResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMROLL", 
                "P_LOOM"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMROLL, 
                para.P_LOOM
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAV_GETINPROCESSBYBEAMROLL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WEAV_GETINPROCESSBYBEAMROLLResult result =
                            new WEAV_GETINPROCESSBYBEAMROLLResult();

                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");
                        result.LENGTH = row.Field<System.Decimal?>("LENGTH");
                        result.LOOMNO = row.Field<System.String>("LOOMNO");
                        result.WEAVINGDATE = row.Field<System.DateTime?>("WEAVINGDATE");
                        result.SHIFT = row.Field<System.String>("SHIFT");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.CREATEDATE = row.Field<System.DateTime?>("CREATEDATE");
                        result.WIDTH = row.Field<System.Decimal?>("WIDTH");
                        result.PREPAREBY = row.Field<System.String>("PREPAREBY");
                        result.WEAVINGNO = row.Field<System.String>("WEAVINGNO");
                        result.BEAMLOT = row.Field<System.String>("BEAMLOT");
                        result.DOFFNO = row.Field<System.Decimal?>("DOFFNO");
                        result.DENSITY_WARP = row.Field<System.Decimal?>("DENSITY_WARP");
                        result.TENSION = row.Field<System.Decimal?>("TENSION");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.DOFFBY = row.Field<System.String>("DOFFBY");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.WASTE = row.Field<System.Decimal?>("WASTE");
                        result.DENSITY_WEFT = row.Field<System.Decimal?>("DENSITY_WEFT");
                        result.DELETEFLAG = row.Field<System.String>("DELETEFLAG");
                        result.DELETEBY = row.Field<System.String>("DELETEBY");
                        result.DELETEDATE = row.Field<System.DateTime?>("DELETEDATE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WEAV_GETCNTCHINALOT

        public WEAV_GETCNTCHINALOTResult WEAV_GETCNTCHINALOT(WEAV_GETCNTCHINALOTParameter para)
        {
            WEAV_GETCNTCHINALOTResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_LOT"
            };
            object[] paraValues = new object[]
            {
                para.P_LOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAV_GETCNTCHINALOT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new WEAV_GETCNTCHINALOTResult();
                if (ret.Result.OutParameters["CNT"] != DBNull.Value)
                    result.CNT = (System.String)ret.Result.OutParameters["CNT"];
            }

            return result;
        }

        #endregion

        #region WEAV_GETALLITEMWEAVING

        public List<WEAV_GETALLITEMWEAVINGResult> WEAV_GETALLITEMWEAVING(WEAV_GETALLITEMWEAVINGParameter para)
        {
            List<WEAV_GETALLITEMWEAVINGResult> results = new List<WEAV_GETALLITEMWEAVINGResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
            };
            object[] paraValues = new object[]
            {
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAV_GETALLITEMWEAVING",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WEAV_GETALLITEMWEAVINGResult result =
                            new WEAV_GETALLITEMWEAVINGResult();

                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");
                        result.WIDTHWEAVING = row.Field<System.Decimal?>("WIDTHWEAVING");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WEAV_DELETEWEAVINGLOT

        public WEAV_DELETEWEAVINGLOTResult WEAV_DELETEWEAVINGLOT(WEAV_DELETEWEAVINGLOTParameter para)
        {
            WEAV_DELETEWEAVINGLOTResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_WEAVINGLOT", 
                "P_REMARK", 
                "P_OPERATOR"
            };
            object[] paraValues = new object[]
            {
                para.P_WEAVINGLOT, 
                para.P_REMARK, 
                para.P_OPERATOR
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAV_DELETEWEAVINGLOT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new WEAV_DELETEWEAVINGLOTResult();
            }

            return result;
        }

        #endregion

        #region WEAV_DELETEMCSTOP

        public WEAV_DELETEMCSTOPResult WEAV_DELETEMCSTOP(WEAV_DELETEMCSTOPParameter para)
        {
            WEAV_DELETEMCSTOPResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_LOOMNO", 
                "P_DOFFNO", 
                "P_BEAMROLL", 
                "P_DEFECT", 
                "P_DATE"
            };
            object[] paraValues = new object[]
            {
                para.P_LOOMNO, 
                para.P_DOFFNO, 
                para.P_BEAMROLL, 
                para.P_DEFECT, 
                para.P_DATE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAV_DELETEMCSTOP",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new WEAV_DELETEMCSTOPResult();
            }

            return result;
        }

        #endregion

        #region WEAV_DEFECTLIST

        public List<WEAV_DEFECTLISTResult> WEAV_DEFECTLIST(WEAV_DEFECTLISTParameter para)
        {
            List<WEAV_DEFECTLISTResult> results = new List<WEAV_DEFECTLISTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
            };
            object[] paraValues = new object[]
            {
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAV_DEFECTLIST",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WEAV_DEFECTLISTResult result =
                            new WEAV_DEFECTLISTResult();

                        result.DEFECTCODE = row.Field<System.String>("DEFECTCODE");
                        result.DEFECTTYPE = row.Field<System.String>("DEFECTTYPE");
                        result.DESCRIPTION = row.Field<System.String>("DESCRIPTION");
                        result.YARN = row.Field<System.String>("YARN");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WEAVE_WEAVINGPROCESS

        public WEAVE_WEAVINGPROCESSResult WEAVE_WEAVINGPROCESS(WEAVE_WEAVINGPROCESSParameter para)
        {
            WEAVE_WEAVINGPROCESSResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_BEAMLOT", 
                "P_DOFFNO", 
                "P_ITEMWEAVING", 
                "P_LENGHT", 
                "P_WEAVINGDATE", 
                "P_LOOM", 
                "P_SHIFT", 
                "P_DENSITYWARP", 
                "P_DENSITYWEFT", 
                "P_TENSION", 
                "P_SPEED", 
                "P_WASTE", 
                "P_REMARK", 
                "P_OPERATOR", 
                "P_STARTDATE"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMLOT, 
                para.P_DOFFNO, 
                para.P_ITEMWEAVING, 
                para.P_LENGHT, 
                para.P_WEAVINGDATE, 
                para.P_LOOM, 
                para.P_SHIFT, 
                para.P_DENSITYWARP, 
                para.P_DENSITYWEFT, 
                para.P_TENSION, 
                para.P_SPEED, 
                para.P_WASTE, 
                para.P_REMARK, 
                para.P_OPERATOR, 
                para.P_STARTDATE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAVE_WEAVINGPROCESS",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new WEAVE_WEAVINGPROCESSResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region WEAVE_UPDATEPROCESSSETTING

        public WEAVE_UPDATEPROCESSSETTINGResult WEAVE_UPDATEPROCESSSETTING(WEAVE_UPDATEPROCESSSETTINGParameter para)
        {
            WEAVE_UPDATEPROCESSSETTINGResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_BEAMLOT", 
                "P_REEDNO2", 
                "P_TEMPLE", 
                "P_BARNO", 
                "P_PRODUCTTYPE", 
                "P_WIDTH", 
                "P_FINISHDATE", 
                "P_FLAG", 
                "P_EDITDATE", 
                "P_EDITBY", 
                "P_SPEED"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMLOT, 
                para.P_REEDNO2, 
                para.P_TEMPLE, 
                para.P_BARNO, 
                para.P_PRODUCTTYPE, 
                para.P_WIDTH, 
                para.P_FINISHDATE, 
                para.P_FLAG, 
                para.P_EDITDATE, 
                para.P_EDITBY, 
                para.P_SPEED
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAVE_UPDATEPROCESSSETTING",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new WEAVE_UPDATEPROCESSSETTINGResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region WEAVE_INSERTUPDATEWEFTYARN

        public WEAVE_INSERTUPDATEWEFTYARNResult WEAVE_INSERTUPDATEWEFTYARN(WEAVE_INSERTUPDATEWEFTYARNParameter para)
        {
            WEAVE_INSERTUPDATEWEFTYARNResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_BEAMLOT", 
                "P_DOFFNO", 
                "P_MCNO", 
                "P_PALLETNO", 
                "P_CHLOTNO", 
                "P_ADDDATE", 
                "P_ADDBY", 
                "P_USETYPE", 
                "P_REMARK"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMLOT, 
                para.P_DOFFNO, 
                para.P_MCNO, 
                para.P_PALLETNO, 
                para.P_CHLOTNO, 
                para.P_ADDDATE, 
                para.P_ADDBY, 
                para.P_USETYPE, 
                para.P_REMARK
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAVE_INSERTUPDATEWEFTYARN",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new WEAVE_INSERTUPDATEWEFTYARNResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region WEAVE_INSERTPROCESSSETTING

        public WEAVE_INSERTPROCESSSETTINGResult WEAVE_INSERTPROCESSSETTING(WEAVE_INSERTPROCESSSETTINGParameter para)
        {
            WEAVE_INSERTPROCESSSETTINGResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_BEAMLOT", 
                "P_MC", 
                "P_ITMWEAVE", 
                "P_REEDNO2", 
                "P_WEFTYARN", 
                "P_TEMPLE", 
                "P_BARNO", 
                "P_STARTDATE", 
                "P_SETTINGBY", 
                "P_PRODUCTTYPE", 
                "P_WIDTH", 
                "P_BEAMLENGTH", 
                "P_SPEED"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMLOT, 
                para.P_MC, 
                para.P_ITMWEAVE, 
                para.P_REEDNO2, 
                para.P_WEFTYARN, 
                para.P_TEMPLE, 
                para.P_BARNO, 
                para.P_STARTDATE, 
                para.P_SETTINGBY, 
                para.P_PRODUCTTYPE, 
                para.P_WIDTH, 
                para.P_BEAMLENGTH, 
                para.P_SPEED
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAVE_INSERTPROCESSSETTING",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new WEAVE_INSERTPROCESSSETTINGResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region WEAVE_GETBEAMLOTDETAIL

        public List<WEAVE_GETBEAMLOTDETAILResult> WEAVE_GETBEAMLOTDETAIL(WEAVE_GETBEAMLOTDETAILParameter para)
        {
            List<WEAVE_GETBEAMLOTDETAILResult> results = new List<WEAVE_GETBEAMLOTDETAILResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAVE_GETBEAMLOTDETAIL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    WEAVE_GETBEAMLOTDETAILResult result2 =
                          new WEAVE_GETBEAMLOTDETAILResult();

                    if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                        result2.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
                   
                    if (!string.IsNullOrEmpty(result2.RESULT))
                    {
                        results.Add(result2);
                    }
                    else
                    {
                        foreach (DataRow row in ret.Result.Table.Rows)
                        {
                            WEAVE_GETBEAMLOTDETAILResult result =
                                new WEAVE_GETBEAMLOTDETAILResult();

                            //if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                            //    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];

                            //if (string.IsNullOrEmpty(result.RESULT))
                            //{
                                result.BEAMLOT = row.Field<System.String>("BEAMLOT");
                                result.ITM_PREPARE = row.Field<System.String>("ITM_PREPARE");
                                result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                                result.DRAWINGTYPE = row.Field<System.String>("DRAWINGTYPE");
                                result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                                result.ENDATE = row.Field<System.DateTime?>("ENDATE");
                                result.REEDNO = row.Field<System.String>("REEDNO");
                                result.HEALDCOLOR = row.Field<System.String>("HEALDCOLOR");
                                result.STARTBY = row.Field<System.String>("STARTBY");
                                result.FINISHBY = row.Field<System.String>("FINISHBY");
                                result.USEFLAG = row.Field<System.String>("USEFLAG");
                                result.HEALDNO = row.Field<System.Decimal?>("HEALDNO");
                                result.OPERATOR_GROUP = row.Field<System.String>("OPERATOR_GROUP");
                                result.LENGTH = row.Field<System.Decimal?>("LENGTH");

                                results.Add(result);
                            //}
                            //else
                            //{
                            //    results.Add(result);
                            //    break;
                            //}
                        }
                    }
                }
            }

            return results;
        }

        #endregion

        #region WEAVE_DELETEWEFTYARN

        public WEAVE_DELETEWEFTYARNResult WEAVE_DELETEWEFTYARN(WEAVE_DELETEWEFTYARNParameter para)
        {
            WEAVE_DELETEWEFTYARNResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_BEAMLOT", 
                "P_DOFFNO", 
                "P_PALLETNO", 
                "P_CHLOTNO"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMLOT, 
                para.P_DOFFNO, 
                para.P_PALLETNO, 
                para.P_CHLOTNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAVE_DELETEWEFTYARN",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new WEAVE_DELETEWEFTYARNResult();
            }

            return result;
        }

        #endregion

        #region WEAVE_CHECKWEAVINGMC

        public List<WEAVE_CHECKWEAVINGMCResult> WEAVE_CHECKWEAVINGMC(WEAVE_CHECKWEAVINGMCParameter para)
        {
            List<WEAVE_CHECKWEAVINGMCResult> results = new List<WEAVE_CHECKWEAVINGMCResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_LOOMNO"
            };
            object[] paraValues = new object[]
            {
                para.P_LOOMNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAVE_CHECKWEAVINGMC",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WEAVE_CHECKWEAVINGMCResult result =
                            new WEAVE_CHECKWEAVINGMCResult();

                        result.MACHINEID = row.Field<System.String>("MACHINEID");
                        result.PROCESSID = row.Field<System.String>("PROCESSID");
                        result.MCNAME = row.Field<System.String>("MCNAME");
                        result.ZONE = row.Field<System.String>("ZONE");
                        result.NO = row.Field<System.Decimal?>("NO");
                        result.TYPE = row.Field<System.String>("TYPE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WEAVE_CHECKITEMPREPARE

        public List<WEAVE_CHECKITEMPREPAREResult> WEAVE_CHECKITEMPREPARE(WEAVE_CHECKITEMPREPAREParameter para)
        {
            List<WEAVE_CHECKITEMPREPAREResult> results = new List<WEAVE_CHECKITEMPREPAREResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMWEAVING", 
                "P_ITMPREPARE"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMWEAVING, 
                para.P_ITMPREPARE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAVE_CHECKITEMPREPARE",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WEAVE_CHECKITEMPREPAREResult result =
                            new WEAVE_CHECKITEMPREPAREResult();

                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");
                        result.ITM_YARN = row.Field<System.String>("ITM_YARN");
                        result.ITM_WIDTH = row.Field<System.Decimal?>("ITM_WIDTH");
                        result.ITM_PROC1 = row.Field<System.String>("ITM_PROC1");
                        result.ITM_PROC2 = row.Field<System.String>("ITM_PROC2");
                        result.ITM_PROC3 = row.Field<System.String>("ITM_PROC3");
                        result.ITM_PROC4 = row.Field<System.String>("ITM_PROC4");
                        result.ITM_PROC5 = row.Field<System.String>("ITM_PROC5");
                        result.ITM_PROC6 = row.Field<System.String>("ITM_PROC6");
                        result.CREATEDATE = row.Field<System.DateTime?>("CREATEDATE");
                        result.CREATEBY = row.Field<System.String>("CREATEBY");
                        result.EDITDATE = row.Field<System.DateTime?>("EDITDATE");
                        result.EDITBY = row.Field<System.String>("EDITBY");
                        result.ITM_PREPARE = row.Field<System.String>("ITM_PREPARE");
                        result.COREWEIGHT = row.Field<System.Decimal?>("COREWEIGHT");
                        result.FULLWEIGHT = row.Field<System.Decimal?>("FULLWEIGHT");
                        result.ITM_GROUP = row.Field<System.String>("ITM_GROUP");
                        result.YARNCODE = row.Field<System.String>("YARNCODE");
                        result.WIDTHCODE = row.Field<System.String>("WIDTHCODE");
                        result.WIDTHWEAVING = row.Field<System.Decimal?>("WIDTHWEAVING");
                        result.LABFORM = row.Field<System.String>("LABFORM");
                        result.WEAVE_TYPE = row.Field<System.String>("WEAVE_TYPE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WEAVE_CANCELLOOMSETUP

        public WEAVE_CANCELLOOMSETUPResult WEAVE_CANCELLOOMSETUP(WEAVE_CANCELLOOMSETUPParameter para)
        {
            WEAVE_CANCELLOOMSETUPResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_BEAMLOT", 
                "P_LOOMNO", 
                "P_OPERATOR"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMLOT, 
                para.P_LOOMNO, 
                para.P_OPERATOR
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WEAVE_CANCELLOOMSETUP",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new WEAVE_CANCELLOOMSETUPResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region WARP_WARPLIST

        public List<WARP_WARPLISTResult> WARP_WARPLIST(WARP_WARPLISTParameter para)
        {
            List<WARP_WARPLISTResult> results = new List<WARP_WARPLISTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WARPHEADNO", 
                "P_WARPMC", 
                "P_ITMPREPARE", 
                "P_STARTDATE", 
                "P_ENDDATE"
            };
            object[] paraValues = new object[]
            {
                para.P_WARPHEADNO, 
                para.P_WARPMC, 
                para.P_ITMPREPARE, 
                para.P_STARTDATE, 
                para.P_ENDDATE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WARP_WARPLIST",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WARP_WARPLISTResult result =
                            new WARP_WARPLISTResult();

                        result.WARPHEADNO = row.Field<System.String>("WARPHEADNO");
                        result.WARPERLOT = row.Field<System.String>("WARPERLOT");
                        result.BEAMNO = row.Field<System.String>("BEAMNO");
                        result.SIDE = row.Field<System.String>("SIDE");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.LENGTH = row.Field<System.Decimal?>("LENGTH");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.HARDNESS_L = row.Field<System.Decimal?>("HARDNESS_L");
                        result.HARDNESS_N = row.Field<System.Decimal?>("HARDNESS_N");
                        result.HARDNESS_R = row.Field<System.Decimal?>("HARDNESS_R");
                        result.TENSION = row.Field<System.Decimal?>("TENSION");
                        result.STARTBY = row.Field<System.String>("STARTBY");
                        result.DOFFBY = row.Field<System.String>("DOFFBY");
                        result.FLAG = row.Field<System.String>("FLAG");
                        result.WARPMC = row.Field<System.String>("WARPMC");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.TENSION_IT = row.Field<System.Decimal?>("TENSION_IT");
                        result.TENSION_TAKEUP = row.Field<System.Decimal?>("TENSION_TAKEUP");
                        result.MC_COUNT_L = row.Field<System.Decimal?>("MC_COUNT_L");
                        result.MC_COUNT_S = row.Field<System.Decimal?>("MC_COUNT_S");
                        result.EDITDATE = row.Field<System.DateTime?>("EDITDATE");
                        result.EDITBY = row.Field<System.String>("EDITBY");
                        result.ITM_PREPARE = row.Field<System.String>("ITM_PREPARE");
                        result.ITM_YARN = row.Field<System.String>("ITM_YARN");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WARP_UPDATEWARPINGPROCESS

        public WARP_UPDATEWARPINGPROCESSResult WARP_UPDATEWARPINGPROCESS(WARP_UPDATEWARPINGPROCESSParameter para)
        {
            WARP_UPDATEWARPINGPROCESSResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_WARPHEADNO", 
                "P_WARPLOT", 
                "P_LENGTH", 
                "P_ENDDATE", 
                "P_SPEED", 
                "P_HARDL", 
                "P_HARDN", 
                "P_HARDR", 
                "P_TENSION", 
                "P_DOFFBY", 
                "P_REMARK", 
                "P_FLAG", 
                "P_TENSION_IT", 
                "P_TENSION_TAKE", 
                "P_MCL", 
                "P_MCS", 
                "P_BEAMNO", 
                "P_OPERATOR"
            };
            object[] paraValues = new object[]
            {
                para.P_WARPHEADNO, 
                para.P_WARPLOT, 
                para.P_LENGTH, 
                para.P_ENDDATE, 
                para.P_SPEED, 
                para.P_HARDL, 
                para.P_HARDN, 
                para.P_HARDR, 
                para.P_TENSION, 
                para.P_DOFFBY, 
                para.P_REMARK, 
                para.P_FLAG, 
                para.P_TENSION_IT, 
                para.P_TENSION_TAKE, 
                para.P_MCL, 
                para.P_MCS, 
                para.P_BEAMNO, 
                para.P_OPERATOR
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WARP_UPDATEWARPINGPROCESS",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new WARP_UPDATEWARPINGPROCESSResult();
            }

            return result;
        }

        #endregion

        #region WARP_UPDATESETTINGHEAD

        public WARP_UPDATESETTINGHEADResult WARP_UPDATESETTINGHEAD(WARP_UPDATESETTINGHEADParameter para)
        {
            WARP_UPDATESETTINGHEADResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_WARPHEADNO", 
                "P_STARTDATE", 
                "P_ENDDATE", 
                "P_CONDITONBY", 
                "P_STATUS", 
                "P_FINISHBY", 
                "P_FLAG"
            };
            object[] paraValues = new object[]
            {
                para.P_WARPHEADNO, 
                para.P_STARTDATE, 
                para.P_ENDDATE, 
                para.P_CONDITONBY, 
                para.P_STATUS, 
                para.P_FINISHBY, 
                para.P_FLAG
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WARP_UPDATESETTINGHEAD",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new WARP_UPDATESETTINGHEADResult();
            }

            return result;
        }

        #endregion

        #region WARP_UPDATEPALLET

        public WARP_UPDATEPALLETResult WARP_UPDATEPALLET(WARP_UPDATEPALLETParameter para)
        {
            WARP_UPDATEPALLETResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_RECEIVEDATE", 
                "P_PALLETNO", 
                "P_USEDCH", 
                "P_REJECTCH", 
                "P_REMAINCH", 
                "P_WARPHEADNO"
            };
            object[] paraValues = new object[]
            {
                para.P_RECEIVEDATE, 
                para.P_PALLETNO, 
                para.P_USEDCH, 
                para.P_REJECTCH, 
                para.P_REMAINCH, 
                para.P_WARPHEADNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WARP_UPDATEPALLET",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new WARP_UPDATEPALLETResult();
            }

            return result;
        }

        #endregion

        #region WARP_TRANFERSLIP

        public List<WARP_TRANFERSLIPResult> WARP_TRANFERSLIP(WARP_TRANFERSLIPParameter para)
        {
            List<WARP_TRANFERSLIPResult> results = new List<WARP_TRANFERSLIPResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WARPHEADNO", 
                "P_WARPLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_WARPHEADNO, 
                para.P_WARPLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WARP_TRANFERSLIP",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WARP_TRANFERSLIPResult result =
                            new WARP_TRANFERSLIPResult();

                        result.WARPHEADNO = row.Field<System.String>("WARPHEADNO");
                        result.WARPERLOT = row.Field<System.String>("WARPERLOT");
                        result.BEAMNO = row.Field<System.String>("BEAMNO");
                        result.SIDE = row.Field<System.String>("SIDE");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.LENGTH = row.Field<System.Decimal?>("LENGTH");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.HARDNESS_L = row.Field<System.Decimal?>("HARDNESS_L");
                        result.HARDNESS_N = row.Field<System.Decimal?>("HARDNESS_N");
                        result.HARDNESS_R = row.Field<System.Decimal?>("HARDNESS_R");
                        result.TENSION = row.Field<System.Decimal?>("TENSION");
                        result.STARTBY = row.Field<System.String>("STARTBY");
                        result.DOFFBY = row.Field<System.String>("DOFFBY");
                        result.FLAG = row.Field<System.String>("FLAG");
                        result.WARPMC = row.Field<System.String>("WARPMC");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.TENSION_IT = row.Field<System.Decimal?>("TENSION_IT");
                        result.TENSION_TAKEUP = row.Field<System.Decimal?>("TENSION_TAKEUP");
                        result.MC_COUNT_L = row.Field<System.Decimal?>("MC_COUNT_L");
                        result.MC_COUNT_S = row.Field<System.Decimal?>("MC_COUNT_S");
                        result.EDITDATE = row.Field<System.DateTime?>("EDITDATE");
                        result.EDITBY = row.Field<System.String>("EDITBY");
                        result.ITM_PREPARE = row.Field<System.String>("ITM_PREPARE");
                        result.ITM_YARN = row.Field<System.String>("ITM_YARN");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WARP_SEARCHWARPRECORD

        public List<WARP_SEARCHWARPRECORDResult> WARP_SEARCHWARPRECORD(WARP_SEARCHWARPRECORDParameter para)
        {
            List<WARP_SEARCHWARPRECORDResult> results = new List<WARP_SEARCHWARPRECORDResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WARPHEADNO", 
                "P_WARPMC", 
                "P_ITMPREPARE", 
                "P_STARTDATE"
            };
            object[] paraValues = new object[]
            {
                para.P_WARPHEADNO, 
                para.P_WARPMC, 
                para.P_ITMPREPARE, 
                para.P_STARTDATE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WARP_SEARCHWARPRECORD",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WARP_SEARCHWARPRECORDResult result =
                            new WARP_SEARCHWARPRECORDResult();

                        result.WARPHEADNO = row.Field<System.String>("WARPHEADNO");
                        result.ITM_PREPARE = row.Field<System.String>("ITM_PREPARE");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.WARPMC = row.Field<System.String>("WARPMC");
                        result.SIDE = row.Field<System.String>("SIDE");
                        result.ACTUALCH = row.Field<System.Decimal?>("ACTUALCH");
                        result.WTYPE = row.Field<System.String>("WTYPE");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.CREATEBY = row.Field<System.String>("CREATEBY");
                        result.CONDITIONSTART = row.Field<System.DateTime?>("CONDITIONSTART");
                        result.CONDITIONBY = row.Field<System.String>("CONDITIONBY");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.STATUS = row.Field<System.String>("STATUS");
                        result.FINISHBY = row.Field<System.String>("FINISHBY");
                        result.FINISHFLAG = row.Field<System.String>("FINISHFLAG");
                        result.REEDNO = row.Field<System.String>("REEDNO");
                        result.EDITBY = row.Field<System.String>("EDITBY");
                        result.EDITDATE = row.Field<System.DateTime?>("EDITDATE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WARP_RECEIVEPALLET

        public WARP_RECEIVEPALLETResult WARP_RECEIVEPALLET(WARP_RECEIVEPALLETParameter para)
        {
            WARP_RECEIVEPALLETResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITMYARN", 
                "P_RECEIVEDATE", 
                "P_PALLETNO", 
                "P_WEIGHT", 
                "P_CH", 
                "P_VERIFY", 
                "P_REJECTID", 
                "P_OPERATOR"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMYARN, 
                para.P_RECEIVEDATE, 
                para.P_PALLETNO, 
                para.P_WEIGHT, 
                para.P_CH, 
                para.P_VERIFY, 
                para.P_REJECTID, 
                para.P_OPERATOR
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WARP_RECEIVEPALLET",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new WARP_RECEIVEPALLETResult();
            }

            return result;
        }

        #endregion

        #region WARP_PALLETLISTBYITMYARN

        public List<WARP_PALLETLISTBYITMYARNResult> WARP_PALLETLISTBYITMYARN(WARP_PALLETLISTBYITMYARNParameter para)
        {
            List<WARP_PALLETLISTBYITMYARNResult> results = new List<WARP_PALLETLISTBYITMYARNResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITEM_YARN", 
                "P_WARPHEADNO"
            };
            object[] paraValues = new object[]
            {
                para.P_ITEM_YARN, 
                para.P_WARPHEADNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WARP_PALLETLISTBYITMYARN",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WARP_PALLETLISTBYITMYARNResult result =
                            new WARP_PALLETLISTBYITMYARNResult();

                        result.ITM_YARN = row.Field<System.String>("ITM_YARN");
                        result.RECEIVEDATE = row.Field<System.DateTime?>("RECEIVEDATE");
                        result.PALLETNO = row.Field<System.String>("PALLETNO");
                        result.RECEIVEWEIGHT = row.Field<System.Decimal?>("RECEIVEWEIGHT");
                        result.RECEIVECH = row.Field<System.Decimal?>("RECEIVECH");
                        result.USEDWEIGHT = row.Field<System.Decimal?>("USEDWEIGHT");
                        result.USEDCH = row.Field<System.Decimal?>("USEDCH");
                        result.VERIFY = row.Field<System.String>("VERIFY");
                        result.REJECTID = row.Field<System.String>("REJECTID");
                        result.FINISHFLAG = row.Field<System.String>("FINISHFLAG");
                        result.RETURNFLAG = row.Field<System.String>("RETURNFLAG");
                        result.REJECTCH = row.Field<System.Decimal?>("REJECTCH");
                        result.CREATEDATE = row.Field<System.DateTime?>("CREATEDATE");
                        result.CREATEBY = row.Field<System.String>("CREATEBY");
                        result.CLEARBY = row.Field<System.String>("CLEARBY");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.CLEARDATE = row.Field<System.DateTime?>("CLEARDATE");
                        result.KGPERCH = row.Field<System.Decimal?>("KGPERCH");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WARP_INSERTWARPMCSTOP

        public WARP_INSERTWARPMCSTOPResult WARP_INSERTWARPMCSTOP(WARP_INSERTWARPMCSTOPParameter para)
        {
            WARP_INSERTWARPMCSTOPResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_WARPHEADNO", 
                "P_WARPLOT", 
                "P_REASON", 
                "P_LENGTH", 
                "P_OTHER", 
                "P_OPERATOR"
            };
            object[] paraValues = new object[]
            {
                para.P_WARPHEADNO, 
                para.P_WARPLOT, 
                para.P_REASON, 
                para.P_LENGTH, 
                para.P_OTHER, 
                para.P_OPERATOR
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WARP_INSERTWARPMCSTOP",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new WARP_INSERTWARPMCSTOPResult();
                if (ret.Result.OutParameters["R_RESULT"] != DBNull.Value)
                    result.R_RESULT = (System.String)ret.Result.OutParameters["R_RESULT"];
            }

            return result;
        }

        #endregion

        #region WARP_INSERTWARPINGPROCESS

        public WARP_INSERTWARPINGPROCESSResult WARP_INSERTWARPINGPROCESS(WARP_INSERTWARPINGPROCESSParameter para)
        {
            WARP_INSERTWARPINGPROCESSResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_WARPHEADNO", 
                "P_WARPMC", 
                "P_BEAMNO", 
                "P_SIDE", 
                "P_STARTDATE", 
                "P_STARTBY"
            };
            object[] paraValues = new object[]
            {
                para.P_WARPHEADNO, 
                para.P_WARPMC, 
                para.P_BEAMNO, 
                para.P_SIDE, 
                para.P_STARTDATE, 
                para.P_STARTBY
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WARP_INSERTWARPINGPROCESS",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new WARP_INSERTWARPINGPROCESSResult();
                if (ret.Result.OutParameters["R_WRAPLOT"] != DBNull.Value)
                    result.R_WRAPLOT = (System.String)ret.Result.OutParameters["R_WRAPLOT"];
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region WARP_INSERTSETTINGHEAD

        public WARP_INSERTSETTINGHEADResult WARP_INSERTSETTINGHEAD(WARP_INSERTSETTINGHEADParameter para)
        {
            WARP_INSERTSETTINGHEADResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_WARPERHEADNO", 
                "P_ITMPREPARE", 
                "P_PRODUCTID", 
                "P_MCNO", 
                "P_SIDE", 
                "P_ACTUALCH", 
                "P_WTYPE", 
                "P_OPERATOR", 
                "P_REEDNO"
            };
            object[] paraValues = new object[]
            {
                para.P_WARPERHEADNO, 
                para.P_ITMPREPARE, 
                para.P_PRODUCTID, 
                para.P_MCNO, 
                para.P_SIDE, 
                para.P_ACTUALCH, 
                para.P_WTYPE, 
                para.P_OPERATOR, 
                para.P_REEDNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WARP_INSERTSETTINGHEAD",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new WARP_INSERTSETTINGHEADResult();
                if (ret.Result.OutParameters["R_RESULT"] != DBNull.Value)
                    result.R_RESULT = (System.String)ret.Result.OutParameters["R_RESULT"];
            }

            return result;
        }

        #endregion

        #region WARP_INSERTSETTINGDETAIL

        public WARP_INSERTSETTINGDETAILResult WARP_INSERTSETTINGDETAIL(WARP_INSERTSETTINGDETAILParameter para)
        {
            WARP_INSERTSETTINGDETAILResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_WARPHEADNO", 
                "P_PALLETNO", 
                "P_USED", 
                "P_REJECTCH"
            };
            object[] paraValues = new object[]
            {
                para.P_WARPHEADNO, 
                para.P_PALLETNO, 
                para.P_USED, 
                para.P_REJECTCH
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WARP_INSERTSETTINGDETAIL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new WARP_INSERTSETTINGDETAILResult();
            }

            return result;
        }

        #endregion

        #region WARP_INSERTBEAMINGDETAIL

        public WARP_INSERTBEAMINGDETAILResult WARP_INSERTBEAMINGDETAIL(WARP_INSERTBEAMINGDETAILParameter para)
        {
            WARP_INSERTBEAMINGDETAILResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_BEAMERNO", 
                "P_MCNO", 
                "P_BEAMNO", 
                "P_STARTDATE", 
                "P_STARTBY"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERNO, 
                para.P_MCNO, 
                para.P_BEAMNO, 
                para.P_STARTDATE, 
                para.P_STARTBY
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WARP_INSERTBEAMINGDETAIL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new WARP_INSERTBEAMINGDETAILResult();
                if (ret.Result.OutParameters["R_BEAMLOT"] != DBNull.Value)
                    result.R_BEAMLOT = (System.String)ret.Result.OutParameters["R_BEAMLOT"];
            }

            return result;
        }

        #endregion

        #region WARP_GETWARPERROLLREMARK

        public WARP_GETWARPERROLLREMARKResult WARP_GETWARPERROLLREMARK(WARP_GETWARPERROLLREMARKParameter para)
        {
            WARP_GETWARPERROLLREMARKResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_WARPLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_WARPLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WARP_GETWARPERROLLREMARK",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new WARP_GETWARPERROLLREMARKResult();
                if (ret.Result.OutParameters["R_REMARK"] != DBNull.Value)
                    result.R_REMARK = (System.String)ret.Result.OutParameters["R_REMARK"];
            }

            return result;
        }

        #endregion

        #region WARP_GETWARPERROLLDETAIL

        public List<WARP_GETWARPERROLLDETAILResult> WARP_GETWARPERROLLDETAIL(WARP_GETWARPERROLLDETAILParameter para)
        {
            List<WARP_GETWARPERROLLDETAILResult> results = new List<WARP_GETWARPERROLLDETAILResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WARPERROLL"
            };
            object[] paraValues = new object[]
            {
                para.P_WARPERROLL
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WARP_GETWARPERROLLDETAIL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WARP_GETWARPERROLLDETAILResult result =
                            new WARP_GETWARPERROLLDETAILResult();

                        result.WARPHEADNO = row.Field<System.String>("WARPHEADNO");
                        result.WARPERLOT = row.Field<System.String>("WARPERLOT");
                        result.BEAMNO = row.Field<System.String>("BEAMNO");
                        result.SIDE = row.Field<System.String>("SIDE");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.LENGTH = row.Field<System.Decimal?>("LENGTH");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.HARDNESS_L = row.Field<System.Decimal?>("HARDNESS_L");
                        result.HARDNESS_N = row.Field<System.Decimal?>("HARDNESS_N");
                        result.HARDNESS_R = row.Field<System.Decimal?>("HARDNESS_R");
                        result.TENSION = row.Field<System.Decimal?>("TENSION");
                        result.STARTBY = row.Field<System.String>("STARTBY");
                        result.DOFFBY = row.Field<System.String>("DOFFBY");
                        result.FLAG = row.Field<System.String>("FLAG");
                        result.WARPMC = row.Field<System.String>("WARPMC");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.TENSION_IT = row.Field<System.Decimal?>("TENSION_IT");
                        result.TENSION_TAKEUP = row.Field<System.Decimal?>("TENSION_TAKEUP");
                        result.MC_COUNT_L = row.Field<System.Decimal?>("MC_COUNT_L");
                        result.MC_COUNT_S = row.Field<System.Decimal?>("MC_COUNT_S");
                        result.EDITDATE = row.Field<System.DateTime?>("EDITDATE");
                        result.EDITBY = row.Field<System.String>("EDITBY");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WARP_GETWARPERMCSTATUS

        public List<WARP_GETWARPERMCSTATUSResult> WARP_GETWARPERMCSTATUS(WARP_GETWARPERMCSTATUSParameter para)
        {
            List<WARP_GETWARPERMCSTATUSResult> results = new List<WARP_GETWARPERMCSTATUSResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_MCNO"
            };
            object[] paraValues = new object[]
            {
                para.P_MCNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WARP_GETWARPERMCSTATUS",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WARP_GETWARPERMCSTATUSResult result =
                            new WARP_GETWARPERMCSTATUSResult();

                        result.WARPHEADNO = row.Field<System.String>("WARPHEADNO");
                        result.ITM_PREPARE = row.Field<System.String>("ITM_PREPARE");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.WARPMC = row.Field<System.String>("WARPMC");
                        result.SIDE = row.Field<System.String>("SIDE");
                        result.ACTUALCH = row.Field<System.Decimal?>("ACTUALCH");
                        result.WTYPE = row.Field<System.String>("WTYPE");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.CREATEBY = row.Field<System.String>("CREATEBY");
                        result.CONDITIONSTART = row.Field<System.DateTime?>("CONDITIONSTART");
                        result.CONDITIONBY = row.Field<System.String>("CONDITIONBY");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.STATUS = row.Field<System.String>("STATUS");
                        result.FINISHBY = row.Field<System.String>("FINISHBY");
                        result.FINISHFLAG = row.Field<System.String>("FINISHFLAG");
                        result.REEDNO = row.Field<System.String>("REEDNO");
                        result.EDITBY = row.Field<System.String>("EDITBY");
                        result.EDITDATE = row.Field<System.DateTime?>("EDITDATE");
                        result.CONDITIONING = row.Field<System.String>("CONDITIONING");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WARP_GETWARPERLOTBYHEADNO

        public List<WARP_GETWARPERLOTBYHEADNOResult> WARP_GETWARPERLOTBYHEADNO(WARP_GETWARPERLOTBYHEADNOParameter para)
        {
            List<WARP_GETWARPERLOTBYHEADNOResult> results = new List<WARP_GETWARPERLOTBYHEADNOResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WARPHEADNO"
            };
            object[] paraValues = new object[]
            {
                para.P_WARPHEADNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WARP_GETWARPERLOTBYHEADNO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WARP_GETWARPERLOTBYHEADNOResult result =
                            new WARP_GETWARPERLOTBYHEADNOResult();

                        result.WARPHEADNO = row.Field<System.String>("WARPHEADNO");
                        result.WARPERLOT = row.Field<System.String>("WARPERLOT");
                        result.BEAMNO = row.Field<System.String>("BEAMNO");
                        result.SIDE = row.Field<System.String>("SIDE");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.LENGTH = row.Field<System.Decimal?>("LENGTH");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.HARDNESS_L = row.Field<System.Decimal?>("HARDNESS_L");
                        result.HARDNESS_N = row.Field<System.Decimal?>("HARDNESS_N");
                        result.HARDNESS_R = row.Field<System.Decimal?>("HARDNESS_R");
                        result.TENSION = row.Field<System.Decimal?>("TENSION");
                        result.STARTBY = row.Field<System.String>("STARTBY");
                        result.DOFFBY = row.Field<System.String>("DOFFBY");
                        result.FLAG = row.Field<System.String>("FLAG");
                        result.WARPMC = row.Field<System.String>("WARPMC");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.TENSION_IT = row.Field<System.Decimal?>("TENSION_IT");
                        result.TENSION_TAKEUP = row.Field<System.Decimal?>("TENSION_TAKEUP");
                        result.MC_COUNT_L = row.Field<System.Decimal?>("MC_COUNT_L");
                        result.MC_COUNT_S = row.Field<System.Decimal?>("MC_COUNT_S");
                        result.EDITDATE = row.Field<System.DateTime?>("EDITDATE");
                        result.EDITBY = row.Field<System.String>("EDITBY");
                        result.KEBA = row.Field<System.Decimal?>("KEBA");
                        result.TIGHTEND = row.Field<System.Decimal?>("TIGHTEND");
                        result.MISSYARN = row.Field<System.Decimal?>("MISSYARN");
                        result.OTHER = row.Field<System.Decimal?>("OTHER");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WARP_GETSTOPREASONBYWARPERLOT

        public List<WARP_GETSTOPREASONBYWARPERLOTResult> WARP_GETSTOPREASONBYWARPERLOT(WARP_GETSTOPREASONBYWARPERLOTParameter para)
        {
            List<WARP_GETSTOPREASONBYWARPERLOTResult> results = new List<WARP_GETSTOPREASONBYWARPERLOTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WARPHEADNO", 
                "P_WARPLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_WARPHEADNO, 
                para.P_WARPLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WARP_GETSTOPREASONBYWARPERLOT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WARP_GETSTOPREASONBYWARPERLOTResult result =
                            new WARP_GETSTOPREASONBYWARPERLOTResult();

                        result.WARPHEADNO = row.Field<System.String>("WARPHEADNO");
                        result.WARPERLOT = row.Field<System.String>("WARPERLOT");
                        result.REASON = row.Field<System.String>("REASON");
                        result.LENGTH = row.Field<System.Decimal?>("LENGTH");
                        result.OPERATOR = row.Field<System.String>("OPERATOR");
                        result.OTHERFLAG = row.Field<System.String>("OTHERFLAG");
                        result.CREATEDATE = row.Field<System.DateTime?>("CREATEDATE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WARP_GETSPECBYCHOPNOANDMC

        public List<WARP_GETSPECBYCHOPNOANDMCResult> WARP_GETSPECBYCHOPNOANDMC(WARP_GETSPECBYCHOPNOANDMCParameter para)
        {
            List<WARP_GETSPECBYCHOPNOANDMCResult> results = new List<WARP_GETSPECBYCHOPNOANDMCResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMPREPARE", 
                "P_MCNO"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMPREPARE, 
                para.P_MCNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WARP_GETSPECBYCHOPNOANDMC",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WARP_GETSPECBYCHOPNOANDMCResult result =
                            new WARP_GETSPECBYCHOPNOANDMCResult();

                        result.CHOPNO = row.Field<System.String>("CHOPNO");
                        result.ITM_YARN = row.Field<System.String>("ITM_YARN");
                        result.WARPERENDS = row.Field<System.Decimal?>("WARPERENDS");
                        result.MAXLENGTH = row.Field<System.Decimal?>("MAXLENGTH");
                        result.MINLENGTH = row.Field<System.Decimal?>("MINLENGTH");
                        result.WAXING = row.Field<System.String>("WAXING");
                        result.COMBTYPE = row.Field<System.String>("COMBTYPE");
                        result.COMBPITCH = row.Field<System.String>("COMBPITCH");
                        result.KEBAYARN = row.Field<System.Decimal?>("KEBAYARN");
                        result.NOWARPBEAM = row.Field<System.Decimal?>("NOWARPBEAM");
                        result.MAXHARDNESS = row.Field<System.Decimal?>("MAXHARDNESS");
                        result.MINHARDNESS = row.Field<System.Decimal?>("MINHARDNESS");
                        result.MCNO = row.Field<System.String>("MCNO");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.SPEED_MARGIN = row.Field<System.Decimal?>("SPEED_MARGIN");
                        result.YARN_TENSION = row.Field<System.Decimal?>("YARN_TENSION");
                        result.YARN_TENSION_MARGIN = row.Field<System.Decimal?>("YARN_TENSION_MARGIN");
                        result.WINDING_TENSION = row.Field<System.Decimal?>("WINDING_TENSION");
                        result.WINDING_TENSION_MARGIN = row.Field<System.Decimal?>("WINDING_TENSION_MARGIN");
                        result.NOCH = row.Field<System.Decimal?>("NOCH");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WARP_GETREMAINPALLET

        public List<WARP_GETREMAINPALLETResult> WARP_GETREMAINPALLET(WARP_GETREMAINPALLETParameter para)
        {
            List<WARP_GETREMAINPALLETResult> results = new List<WARP_GETREMAINPALLETResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITEM_YARN"
            };
            object[] paraValues = new object[]
            {
                para.P_ITEM_YARN
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WARP_GETREMAINPALLET",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WARP_GETREMAINPALLETResult result =
                            new WARP_GETREMAINPALLETResult();

                        result.ITM_YARN = row.Field<System.String>("ITM_YARN");
                        result.RECEIVEDATE = row.Field<System.DateTime?>("RECEIVEDATE");
                        result.PALLETNO = row.Field<System.String>("PALLETNO");
                        result.RECEIVEWEIGHT = row.Field<System.Decimal?>("RECEIVEWEIGHT");
                        result.RECEIVECH = row.Field<System.Decimal?>("RECEIVECH");
                        result.USEDWEIGHT = row.Field<System.Decimal?>("USEDWEIGHT");
                        result.USEDCH = row.Field<System.Decimal?>("USEDCH");
                        result.VERIFY = row.Field<System.String>("VERIFY");
                        result.REJECTID = row.Field<System.String>("REJECTID");
                        result.FINISHFLAG = row.Field<System.String>("FINISHFLAG");
                        result.RETURNFLAG = row.Field<System.String>("RETURNFLAG");
                        result.REJECTCH = row.Field<System.Decimal?>("REJECTCH");
                        result.CREATEDATE = row.Field<System.DateTime?>("CREATEDATE");
                        result.CREATEBY = row.Field<System.String>("CREATEBY");
                        result.CLEARBY = row.Field<System.String>("CLEARBY");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.CLEARDATE = row.Field<System.DateTime?>("CLEARDATE");
                        result.KGPERCH = row.Field<System.Decimal?>("KGPERCH");
                        result.REMAINCH = row.Field<System.Decimal?>("REMAINCH");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WARP_GETINPROCESSLOTBYHEADNO

        public List<WARP_GETINPROCESSLOTBYHEADNOResult> WARP_GETINPROCESSLOTBYHEADNO(WARP_GETINPROCESSLOTBYHEADNOParameter para)
        {
            List<WARP_GETINPROCESSLOTBYHEADNOResult> results = new List<WARP_GETINPROCESSLOTBYHEADNOResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WARPHEADNO"
            };
            object[] paraValues = new object[]
            {
                para.P_WARPHEADNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WARP_GETINPROCESSLOTBYHEADNO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WARP_GETINPROCESSLOTBYHEADNOResult result =
                            new WARP_GETINPROCESSLOTBYHEADNOResult();

                        result.WARPHEADNO = row.Field<System.String>("WARPHEADNO");
                        result.WARPERLOT = row.Field<System.String>("WARPERLOT");
                        result.BEAMNO = row.Field<System.String>("BEAMNO");
                        result.SIDE = row.Field<System.String>("SIDE");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.LENGTH = row.Field<System.Decimal?>("LENGTH");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.HARDNESS_L = row.Field<System.Decimal?>("HARDNESS_L");
                        result.HARDNESS_N = row.Field<System.Decimal?>("HARDNESS_N");
                        result.HARDNESS_R = row.Field<System.Decimal?>("HARDNESS_R");
                        result.TENSION = row.Field<System.Decimal?>("TENSION");
                        result.STARTBY = row.Field<System.String>("STARTBY");
                        result.DOFFBY = row.Field<System.String>("DOFFBY");
                        result.FLAG = row.Field<System.String>("FLAG");
                        result.WARPMC = row.Field<System.String>("WARPMC");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.TENSION_IT = row.Field<System.Decimal?>("TENSION_IT");
                        result.TENSION_TAKEUP = row.Field<System.Decimal?>("TENSION_TAKEUP");
                        result.MC_COUNT_L = row.Field<System.Decimal?>("MC_COUNT_L");
                        result.MC_COUNT_S = row.Field<System.Decimal?>("MC_COUNT_S");
                        result.EDITDATE = row.Field<System.DateTime?>("EDITDATE");
                        result.EDITBY = row.Field<System.String>("EDITBY");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WARP_GETCREELSETUPSTATUS

        public List<WARP_GETCREELSETUPSTATUSResult> WARP_GETCREELSETUPSTATUS(WARP_GETCREELSETUPSTATUSParameter para)
        {
            List<WARP_GETCREELSETUPSTATUSResult> results = new List<WARP_GETCREELSETUPSTATUSResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_MCNO", 
                "P_SIDE"
            };
            object[] paraValues = new object[]
            {
                para.P_MCNO, 
                para.P_SIDE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WARP_GETCREELSETUPSTATUS",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WARP_GETCREELSETUPSTATUSResult result =
                            new WARP_GETCREELSETUPSTATUSResult();

                        result.WARPHEADNO = row.Field<System.String>("WARPHEADNO");
                        result.ITM_PREPARE = row.Field<System.String>("ITM_PREPARE");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.WARPMC = row.Field<System.String>("WARPMC");
                        result.SIDE = row.Field<System.String>("SIDE");
                        result.ACTUALCH = row.Field<System.Decimal?>("ACTUALCH");
                        result.WTYPE = row.Field<System.String>("WTYPE");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.CREATEBY = row.Field<System.String>("CREATEBY");
                        result.CONDITIONSTART = row.Field<System.DateTime?>("CONDITIONSTART");
                        result.CONDITIONBY = row.Field<System.String>("CONDITIONBY");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.STATUS = row.Field<System.String>("STATUS");
                        result.FINISHBY = row.Field<System.String>("FINISHBY");
                        result.FINISHFLAG = row.Field<System.String>("FINISHFLAG");
                        result.REEDNO = row.Field<System.String>("REEDNO");
                        result.EDITBY = row.Field<System.String>("EDITBY");
                        result.EDITDATE = row.Field<System.DateTime?>("EDITDATE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WARP_GETCREELSETUPDETAIL

        public List<WARP_GETCREELSETUPDETAILResult> WARP_GETCREELSETUPDETAIL(WARP_GETCREELSETUPDETAILParameter para)
        {
            List<WARP_GETCREELSETUPDETAILResult> results = new List<WARP_GETCREELSETUPDETAILResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WARPHEADNO"
            };
            object[] paraValues = new object[]
            {
                para.P_WARPHEADNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WARP_GETCREELSETUPDETAIL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WARP_GETCREELSETUPDETAILResult result =
                            new WARP_GETCREELSETUPDETAILResult();

                        result.PALLETNO = row.Field<System.String>("PALLETNO");
                        result.RECEIVECH = row.Field<System.Decimal?>("RECEIVECH");
                        result.USEDCH = row.Field<System.Decimal?>("USEDCH");
                        result.REJECTCH = row.Field<System.Decimal?>("REJECTCH");
                        result.PREJECT = row.Field<System.Decimal?>("PREJECT");
                        result.ITM_YARN = row.Field<System.String>("ITM_YARN");
                        result.RECEIVEDATE = row.Field<System.DateTime?>("RECEIVEDATE");
                        result.PUSED = row.Field<System.Decimal?>("PUSED");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WARP_EDITWARPERMCSETUP

        public WARP_EDITWARPERMCSETUPResult WARP_EDITWARPERMCSETUP(WARP_EDITWARPERMCSETUPParameter para)
        {
            WARP_EDITWARPERMCSETUPResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_WARPHEADNO", 
                "P_WARPMC", 
                "P_SIDE", 
                "P_NEWWARPMC", 
                "P_OPERATOR"
            };
            object[] paraValues = new object[]
            {
                para.P_WARPHEADNO, 
                para.P_WARPMC, 
                para.P_SIDE, 
                para.P_NEWWARPMC, 
                para.P_OPERATOR
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WARP_EDITWARPERMCSETUP",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new WARP_EDITWARPERMCSETUPResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region WARP_CLEARPALLET

        public WARP_CLEARPALLETResult WARP_CLEARPALLET(WARP_CLEARPALLETParameter para)
        {
            WARP_CLEARPALLETResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_RECEIVEDATE", 
                "P_PALLETNO", 
                "P_OPERATOR", 
                "P_REMARK"
            };
            object[] paraValues = new object[]
            {
                para.P_RECEIVEDATE, 
                para.P_PALLETNO, 
                para.P_OPERATOR, 
                para.P_REMARK
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WARP_CLEARPALLET",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new WARP_CLEARPALLETResult();
            }

            return result;
        }

        #endregion

        #region WARP_CHECKPALLET

        public List<WARP_CHECKPALLETResult> WARP_CHECKPALLET(WARP_CHECKPALLETParameter para)
        {
            List<WARP_CHECKPALLETResult> results = new List<WARP_CHECKPALLETResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_PALLETNO"
            };
            object[] paraValues = new object[]
            {
                para.P_PALLETNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WARP_CHECKPALLET",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        WARP_CHECKPALLETResult result =
                            new WARP_CHECKPALLETResult();

                        result.ITM_YARN = row.Field<System.String>("ITM_YARN");
                        result.RECEIVEDATE = row.Field<System.DateTime?>("RECEIVEDATE");
                        result.PALLETNO = row.Field<System.String>("PALLETNO");
                        result.RECEIVEWEIGHT = row.Field<System.Decimal?>("RECEIVEWEIGHT");
                        result.RECEIVECH = row.Field<System.Decimal?>("RECEIVECH");
                        result.USEDWEIGHT = row.Field<System.Decimal?>("USEDWEIGHT");
                        result.USEDCH = row.Field<System.Decimal?>("USEDCH");
                        result.VERIFY = row.Field<System.String>("VERIFY");
                        result.REJECTID = row.Field<System.String>("REJECTID");
                        result.FINISHFLAG = row.Field<System.String>("FINISHFLAG");
                        result.RETURNFLAG = row.Field<System.String>("RETURNFLAG");
                        result.REJECTCH = row.Field<System.Decimal?>("REJECTCH");
                        result.CREATEDATE = row.Field<System.DateTime?>("CREATEDATE");
                        result.CREATEBY = row.Field<System.String>("CREATEBY");
                        result.CLEARBY = row.Field<System.String>("CLEARBY");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.CLEARDATE = row.Field<System.DateTime?>("CLEARDATE");
                        result.KGPERCH = row.Field<System.Decimal?>("KGPERCH");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region WARP_CANCELCREELSETUP

        public WARP_CANCELCREELSETUPResult WARP_CANCELCREELSETUP(WARP_CANCELCREELSETUPParameter para)
        {
            WARP_CANCELCREELSETUPResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_WARPHEADNO", 
                "P_WARPMC", 
                "P_SIDE", 
                "P_OPERATOR"
            };
            object[] paraValues = new object[]
            {
                para.P_WARPHEADNO, 
                para.P_WARPMC, 
                para.P_SIDE, 
                para.P_OPERATOR
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "WARP_CANCELCREELSETUP",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new WARP_CANCELCREELSETUPResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region UPDATEINSPECTIONPROCESS

        public UPDATEINSPECTIONPROCESSResult UPDATEINSPECTIONPROCESS(UPDATEINSPECTIONPROCESSParameter para)
        {
            UPDATEINSPECTIONPROCESSResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_INSLOT", 
                "P_ENDDATE", 
                "P_GLENGHT", 
                "P_NLENGTH", 
                "P_GRADE", 
                "P_GWEIGHT", 
                "P_NWEIGHT", 
                "P_REMARK", 
                "P_FLAG", 
                "P_SUSPENDDATE", 
                "P_SUSPENDBY", 
                "P_STARTDATE1", 
                "P_STARTDATE", 
                "P_CLEARBY", 
                "P_CLEARREMARK", 
                "P_CUSTOMERTYPE", 
                "P_DEFECTFILE", 
                "P_PRODUCTTYPEID", 
                "P_PACK", 
                "P_GROUP", 
                "P_LOADTYPE"
            };
            object[] paraValues = new object[]
            {
                para.P_INSLOT, 
                para.P_ENDDATE, 
                para.P_GLENGHT, 
                para.P_NLENGTH, 
                para.P_GRADE, 
                para.P_GWEIGHT, 
                para.P_NWEIGHT, 
                para.P_REMARK, 
                para.P_FLAG, 
                para.P_SUSPENDDATE, 
                para.P_SUSPENDBY, 
                para.P_STARTDATE1, 
                para.P_STARTDATE, 
                para.P_CLEARBY, 
                para.P_CLEARREMARK, 
                para.P_CUSTOMERTYPE, 
                para.P_DEFECTFILE, 
                para.P_PRODUCTTYPEID, 
                para.P_PACK, 
                para.P_GROUP, 
                para.P_LOADTYPE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "UPDATEINSPECTIONPROCESS",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new UPDATEINSPECTIONPROCESSResult();
            }

            return result;
        }

        #endregion

        #region TGMO_GETDETAIL

        public List<TGMO_GETDETAILResult> TGMO_GETDETAIL(TGMO_GETDETAILParameter para)
        {
            List<TGMO_GETDETAILResult> results = new List<TGMO_GETDETAILResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMCODE"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "TGMO_GETDETAIL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        TGMO_GETDETAILResult result =
                            new TGMO_GETDETAILResult();

                        result.ITEMCODE = row.Field<System.String>("ITEMCODE");
                        result.TGCODE = row.Field<System.String>("TGCODE");
                        result.KANBAN = row.Field<System.String>("KANBAN");
                        result.DESCRIPTION = row.Field<System.String>("DESCRIPTION");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region QA_SEARCHCHECKINGDATA

        public List<QA_SEARCHCHECKINGDATAResult> QA_SEARCHCHECKINGDATA(QA_SEARCHCHECKINGDATAParameter para)
        {
            List<QA_SEARCHCHECKINGDATAResult> results = new List<QA_SEARCHCHECKINGDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_CUSID", 
                "P_DATE", 
                "P_LABITMCODE", 
                "P_RESULT"
            };
            object[] paraValues = new object[]
            {
                para.P_CUSID, 
                para.P_DATE, 
                para.P_LABITMCODE, 
                para.P_RESULT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "QA_SEARCHCHECKINGDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        QA_SEARCHCHECKINGDATAResult result =
                            new QA_SEARCHCHECKINGDATAResult();

                        result.CUSTOMERID = row.Field<System.String>("CUSTOMERID");
                        result.LAB_ITMCODE = row.Field<System.String>("LAB_ITMCODE");
                        result.LAB_LOT = row.Field<System.String>("LAB_LOT");
                        result.LAB_BATCHNO = row.Field<System.String>("LAB_BATCHNO");
                        result.INS_ITMCODE = row.Field<System.String>("INS_ITMCODE");
                        result.INS_LOT = row.Field<System.String>("INS_LOT");
                        result.INS_BATCHNO = row.Field<System.String>("INS_BATCHNO");
                        result.CUS_CODE = row.Field<System.String>("CUS_CODE");
                        result.CHECK_RESULT = row.Field<System.String>("CHECK_RESULT");
                        result.CHECKDATE = row.Field<System.DateTime?>("CHECKDATE");
                        result.CHECKEDBY = row.Field<System.String>("CHECKEDBY");
                        result.DELETEFLAG = row.Field<System.String>("DELETEFLAG");
                        result.DELETEBY = row.Field<System.String>("DELETEBY");
                        result.DELETEDATE = row.Field<System.DateTime?>("DELETEDATE");
                        result.SHIFT = row.Field<System.String>("SHIFT");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.CUSTOMERNAME = row.Field<System.String>("CUSTOMERNAME");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region QA_INSERTCHECKINGDATA

        public QA_INSERTCHECKINGDATAResult QA_INSERTCHECKINGDATA(QA_INSERTCHECKINGDATAParameter para)
        {
            QA_INSERTCHECKINGDATAResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_CUSTOMERID", 
                "P_LABITMCODE", 
                "P_LABLOT", 
                "P_LABBATCHNO", 
                "P_INSITMCODE", 
                "P_INSLOT", 
                "P_INSBATCHNO", 
                "P_CUSCODE", 
                "P_RESULT", 
                "P_CHECKDATE", 
                "P_CHECKEDBY", 
                "P_SHIFT", 
                "P_REMARK"
            };
            object[] paraValues = new object[]
            {
                para.P_CUSTOMERID, 
                para.P_LABITMCODE, 
                para.P_LABLOT, 
                para.P_LABBATCHNO, 
                para.P_INSITMCODE, 
                para.P_INSLOT, 
                para.P_INSBATCHNO, 
                para.P_CUSCODE, 
                para.P_RESULT, 
                para.P_CHECKDATE, 
                para.P_CHECKEDBY, 
                para.P_SHIFT, 
                para.P_REMARK
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "QA_INSERTCHECKINGDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new QA_INSERTCHECKINGDATAResult();
            }

            return result;
        }

        #endregion

        #region QA_DELETECHECKINGDATA

        public QA_DELETECHECKINGDATAResult QA_DELETECHECKINGDATA(QA_DELETECHECKINGDATAParameter para)
        {
            QA_DELETECHECKINGDATAResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_LABITMCODE", 
                "P_LABLOT", 
                "P_LABBATCHNO", 
                "P_CHECKDATE", 
                "P_DELETEBY", 
                "P_DELETEDATE"
            };
            object[] paraValues = new object[]
            {
                para.P_LABITMCODE, 
                para.P_LABLOT, 
                para.P_LABBATCHNO, 
                para.P_CHECKDATE, 
                para.P_DELETEBY, 
                para.P_DELETEDATE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "QA_DELETECHECKINGDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new QA_DELETECHECKINGDATAResult();
            }

            return result;
        }

        #endregion

        #region PCKPRFTP_UPDATESCAN

        public PCKPRFTP_UPDATESCANResult PCKPRFTP_UPDATESCAN(PCKPRFTP_UPDATESCANParameter para)
        {
            PCKPRFTP_UPDATESCANResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_INVNO", 
                "P_CDEL0", 
                "P_SCANBY", 
                "P_RUNNO"
            };
            object[] paraValues = new object[]
            {
                para.P_INVNO, 
                para.P_CDEL0, 
                para.P_SCANBY, 
                para.P_RUNNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "PCKPRFTP_UPDATESCAN",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new PCKPRFTP_UPDATESCANResult();
                if (ret.Result.OutParameters["R_RESULT"] != DBNull.Value)
                    result.R_RESULT = (System.String)ret.Result.OutParameters["R_RESULT"];
            }

            return result;
        }

        #endregion

        #region PCKPRFTP_UPDATERUNNO

        public PCKPRFTP_UPDATERUNNOResult PCKPRFTP_UPDATERUNNO(PCKPRFTP_UPDATERUNNOParameter para)
        {
            PCKPRFTP_UPDATERUNNOResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_INVNO", 
                "P_CDEL0", 
                "P_RUNNO", 
                "P_EDITBY", 
                "P_INUSE"
            };
            object[] paraValues = new object[]
            {
                para.P_INVNO, 
                para.P_CDEL0, 
                para.P_RUNNO, 
                para.P_EDITBY, 
                para.P_INUSE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "PCKPRFTP_UPDATERUNNO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new PCKPRFTP_UPDATERUNNOResult();
                if (ret.Result.OutParameters["R_RESULT"] != DBNull.Value)
                    result.R_RESULT = (System.String)ret.Result.OutParameters["R_RESULT"];
            }

            return result;
        }

        #endregion

        #region PCKPRFTP_UPDATEINUSE

        public PCKPRFTP_UPDATEINUSEResult PCKPRFTP_UPDATEINUSE(PCKPRFTP_UPDATEINUSEParameter para)
        {
            PCKPRFTP_UPDATEINUSEResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_INVNO", 
                "P_CDEL0", 
                "P_EDITBY", 
                "P_INUSE"
            };
            object[] paraValues = new object[]
            {
                para.P_INVNO, 
                para.P_CDEL0, 
                para.P_EDITBY, 
                para.P_INUSE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "PCKPRFTP_UPDATEINUSE",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new PCKPRFTP_UPDATEINUSEResult();
                if (ret.Result.OutParameters["R_RESULT"] != DBNull.Value)
                    result.R_RESULT = (System.String)ret.Result.OutParameters["R_RESULT"];
            }

            return result;
        }

        #endregion

        #region PCKPRFTP_UPDATECUSNO

        public PCKPRFTP_UPDATECUSNOResult PCKPRFTP_UPDATECUSNO(PCKPRFTP_UPDATECUSNOParameter para)
        {
            PCKPRFTP_UPDATECUSNOResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_CDEL0", 
                "P_CUSNO", 
                "P_EDITBY", 
                "P_INUSE"
            };
            object[] paraValues = new object[]
            {
                para.P_CDEL0, 
                para.P_CUSNO, 
                para.P_EDITBY, 
                para.P_INUSE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "PCKPRFTP_UPDATECUSNO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new PCKPRFTP_UPDATECUSNOResult();
                if (ret.Result.OutParameters["R_RESULT"] != DBNull.Value)
                    result.R_RESULT = (System.String)ret.Result.OutParameters["R_RESULT"];
            }

            return result;
        }

        #endregion

        #region PCKPRFTP_INSERTUPDATE

        public PCKPRFTP_INSERTUPDATEResult PCKPRFTP_INSERTUPDATE(PCKPRFTP_INSERTUPDATEParameter para)
        {
            PCKPRFTP_INSERTUPDATEResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ANNUL", 
                "P_CDDIV", 
                "P_INVTY", 
                "P_INVNO", 
                "P_CDORD", 
                "P_RELNO", 
                "P_CUSCD", 
                "P_CUSNM", 
                "P_RECTY", 
                "P_CDKE1", 
                "P_CDKE2", 
                "P_CSITM", 
                "P_CDCON", 
                "P_CDEL0", 
                "P_GRADE", 
                "P_PIELN", 
                "P_NETWH", 
                "P_GRSWH", 
                "P_GRSLN", 
                "P_PALSZ", 
                "P_DTTRA", 
                "P_DTORA", 
                "P_AS400NO", 
                "P_OPERATORID", 
                "P_INUSE"
            };
            object[] paraValues = new object[]
            {
                para.P_ANNUL, 
                para.P_CDDIV, 
                para.P_INVTY, 
                para.P_INVNO, 
                para.P_CDORD, 
                para.P_RELNO, 
                para.P_CUSCD, 
                para.P_CUSNM, 
                para.P_RECTY, 
                para.P_CDKE1, 
                para.P_CDKE2, 
                para.P_CSITM, 
                para.P_CDCON, 
                para.P_CDEL0, 
                para.P_GRADE, 
                para.P_PIELN, 
                para.P_NETWH, 
                para.P_GRSWH, 
                para.P_GRSLN, 
                para.P_PALSZ, 
                para.P_DTTRA, 
                para.P_DTORA, 
                para.P_AS400NO, 
                para.P_OPERATORID, 
                para.P_INUSE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "PCKPRFTP_INSERTUPDATE",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new PCKPRFTP_INSERTUPDATEResult();
                if (ret.Result.OutParameters["R_RESULT"] != DBNull.Value)
                    result.R_RESULT = (System.String)ret.Result.OutParameters["R_RESULT"];
            }

            return result;
        }

        #endregion

        #region PCKPRFTP_GETINVNO

        public List<PCKPRFTP_GETINVNOResult> PCKPRFTP_GETINVNO(PCKPRFTP_GETINVNOParameter para)
        {
            List<PCKPRFTP_GETINVNOResult> results = new List<PCKPRFTP_GETINVNOResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
            };
            object[] paraValues = new object[]
            {
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "PCKPRFTP_GETINVNO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        PCKPRFTP_GETINVNOResult result =
                            new PCKPRFTP_GETINVNOResult();

                        result.INVNO = row.Field<System.String>("INVNO");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region PCKPRFTP_GETDATA

        public List<PCKPRFTP_GETDATAResult> PCKPRFTP_GETDATA(PCKPRFTP_GETDATAParameter para)
        {
            List<PCKPRFTP_GETDATAResult> results = new List<PCKPRFTP_GETDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_INVNO", 
                "P_CDEL0", 
                "P_RUNNO"
            };
            object[] paraValues = new object[]
            {
                para.P_INVNO, 
                para.P_CDEL0, 
                para.P_RUNNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "PCKPRFTP_GETDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        PCKPRFTP_GETDATAResult result =
                            new PCKPRFTP_GETDATAResult();

                        result.ANNUL = row.Field<System.String>("ANNUL");
                        result.CDDIV = row.Field<System.String>("CDDIV");
                        result.INVTY = row.Field<System.String>("INVTY");
                        result.INVNO = row.Field<System.String>("INVNO");
                        result.CDORD = row.Field<System.String>("CDORD");
                        result.RELNO = row.Field<System.Decimal?>("RELNO");
                        result.CUSCD = row.Field<System.String>("CUSCD");
                        result.CUSNM = row.Field<System.String>("CUSNM");
                        result.RECTY = row.Field<System.String>("RECTY");
                        result.CDKE1 = row.Field<System.String>("CDKE1");
                        result.CDKE2 = row.Field<System.String>("CDKE2");
                        result.CSITM = row.Field<System.String>("CSITM");
                        result.CDCON = row.Field<System.String>("CDCON");
                        result.CDEL0 = row.Field<System.String>("CDEL0");
                        result.GRADE = row.Field<System.String>("GRADE");
                        result.PIELN = row.Field<System.Decimal?>("PIELN");
                        result.NETWH = row.Field<System.Decimal?>("NETWH");
                        result.GRSWH = row.Field<System.Decimal?>("GRSWH");
                        result.GRSLN = row.Field<System.Decimal?>("GRSLN");
                        result.PALSZ = row.Field<System.String>("PALSZ");
                        result.DTTRA = row.Field<System.Decimal?>("DTTRA");
                        result.DTORA = row.Field<System.Decimal?>("DTORA");
                        result.RUNNO = row.Field<System.Decimal?>("RUNNO");
                        result.AS400NO = row.Field<System.Decimal?>("AS400NO");
                        result.CUSNO = row.Field<System.Decimal?>("CUSNO");
                        result.INSERTBY = row.Field<System.String>("INSERTBY");
                        result.INSERTDATE = row.Field<System.DateTime?>("INSERTDATE");
                        result.EDITBY = row.Field<System.String>("EDITBY");
                        result.EDITDATE = row.Field<System.DateTime?>("EDITDATE");
                        result.INUSE = row.Field<System.Decimal?>("INUSE");
                        result.SCANBY = row.Field<System.String>("SCANBY");
                        result.SCANDATE = row.Field<System.DateTime?>("SCANDATE");
                        result.CHKNETWEIGHT = row.Field<System.Decimal?>("CHKNETWEIGHT");
                        result.CHKGROSSWEIGHT = row.Field<System.Decimal?>("CHKGROSSWEIGHT");
                        result.CHKNETLENGTH = row.Field<System.Decimal?>("CHKNETLENGTH");
                        result.CHKGROSSLENGTH = row.Field<System.Decimal?>("CHKGROSSLENGTH");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region PACK_UPDATEPACKINGPALLET

        public PACK_UPDATEPACKINGPALLETResult PACK_UPDATEPACKINGPALLET(PACK_UPDATEPACKINGPALLETParameter para)
        {
            PACK_UPDATEPACKINGPALLETResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_PALLET", 
                "P_OPERATOR", 
                "P_CHECKDATE", 
                "P_LAB", 
                "P_AS400", 
                "P_REMARK", 
                "P_FLAG"
            };
            object[] paraValues = new object[]
            {
                para.P_PALLET, 
                para.P_OPERATOR, 
                para.P_CHECKDATE, 
                para.P_LAB, 
                para.P_AS400, 
                para.P_REMARK, 
                para.P_FLAG
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "PACK_UPDATEPACKINGPALLET",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new PACK_UPDATEPACKINGPALLETResult();
            }

            return result;
        }

        #endregion

        #region PACK_SEARCHPALLETLIST

        public List<PACK_SEARCHPALLETLISTResult> PACK_SEARCHPALLETLIST(PACK_SEARCHPALLETLISTParameter para)
        {
            List<PACK_SEARCHPALLETLISTResult> results = new List<PACK_SEARCHPALLETLISTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_PALLET", 
                "P_DATE", 
                "P_STATUS"
            };
            object[] paraValues = new object[]
            {
                para.P_PALLET, 
                para.P_DATE, 
                para.P_STATUS
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "PACK_SEARCHPALLETLIST",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        PACK_SEARCHPALLETLISTResult result =
                            new PACK_SEARCHPALLETLISTResult();

                        result.PALLETNO = row.Field<System.String>("PALLETNO");
                        result.PACKINGDATE = row.Field<System.DateTime?>("PACKINGDATE");
                        result.PACKINGBY = row.Field<System.String>("PACKINGBY");
                        result.CHECKBY = row.Field<System.String>("CHECKBY");
                        result.CHECKINGDATE = row.Field<System.DateTime?>("CHECKINGDATE");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.COMPLETELAB = row.Field<System.String>("COMPLETELAB");
                        result.TRANSFERAS400 = row.Field<System.String>("TRANSFERAS400");
                        result.FLAG = row.Field<System.String>("FLAG");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region PACK_SEARCHINSPECTIONDATA

        public List<PACK_SEARCHINSPECTIONDATAResult> PACK_SEARCHINSPECTIONDATA(PACK_SEARCHINSPECTIONDATAParameter para)
        {
            List<PACK_SEARCHINSPECTIONDATAResult> results = new List<PACK_SEARCHINSPECTIONDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_DATE", 
                "P_GRADE", 
                "P_ITMCODE", 
                "P_INSLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_DATE, 
                para.P_GRADE, 
                para.P_ITMCODE, 
                para.P_INSLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "PACK_SEARCHINSPECTIONDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        PACK_SEARCHINSPECTIONDATAResult result =
                            new PACK_SEARCHINSPECTIONDATAResult();

                        result.INSPECTIONLOT = row.Field<System.String>("INSPECTIONLOT");
                        result.ITEMCODE = row.Field<System.String>("ITEMCODE");
                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.GROSSLENGTH = row.Field<System.Decimal?>("GROSSLENGTH");
                        result.NETLENGTH = row.Field<System.Decimal?>("NETLENGTH");
                        result.CUSTOMERID = row.Field<System.String>("CUSTOMERID");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.GRADE = row.Field<System.String>("GRADE");
                        result.GROSSWEIGHT = row.Field<System.Decimal?>("GROSSWEIGHT");
                        result.NETWEIGHT = row.Field<System.Decimal?>("NETWEIGHT");
                        result.PEINSPECTIONLOT = row.Field<System.String>("PEINSPECTIONLOT");
                        result.DEFECTID = row.Field<System.String>("DEFECTID");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.ATTACHID = row.Field<System.String>("ATTACHID");
                        result.TESTRECORDID = row.Field<System.String>("TESTRECORDID");
                        result.INSPECTEDBY = row.Field<System.String>("INSPECTEDBY");
                        result.MCNO = row.Field<System.String>("MCNO");
                        result.FINISHFLAG = row.Field<System.String>("FINISHFLAG");
                        result.SUSPENDDATE = row.Field<System.DateTime?>("SUSPENDDATE");
                        result.INSPECTIONID = row.Field<System.String>("INSPECTIONID");
                        result.RETEST = row.Field<System.String>("RETEST");
                        result.PREITEMCODE = row.Field<System.String>("PREITEMCODE");
                        result.CLEARBY = row.Field<System.String>("CLEARBY");
                        result.CLEARREMARK = row.Field<System.String>("CLEARREMARK");
                        result.SUSPENDBY = row.Field<System.String>("SUSPENDBY");
                        result.STARTDATE1 = row.Field<System.DateTime?>("STARTDATE1");
                        result.CUSTOMERTYPE = row.Field<System.String>("CUSTOMERTYPE");
                        result.DEFECTFILENAME = row.Field<System.String>("DEFECTFILENAME");
                        result.ISPACKED = row.Field<System.String>("ISPACKED");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.OPERATOR_GROUP = row.Field<System.String>("OPERATOR_GROUP");
                        result.DF_CODE = row.Field<System.String>("DF_CODE");
                        result.DF_AMOUNT = row.Field<System.Decimal?>("DF_AMOUNT");
                        result.DF_POINT = row.Field<System.Decimal?>("DF_POINT");
                        result.ITM_GROUP = row.Field<System.String>("ITM_GROUP");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region PACK_PRINTLABEL

        public List<PACK_PRINTLABELResult> PACK_PRINTLABEL(PACK_PRINTLABELParameter para)
        {
            List<PACK_PRINTLABELResult> results = new List<PACK_PRINTLABELResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_INSLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_INSLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "PACK_PRINTLABEL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        PACK_PRINTLABELResult result =
                            new PACK_PRINTLABELResult();

                        result.INSPECTIONLOT = row.Field<System.String>("INSPECTIONLOT");
                        result.QUANTITY = row.Field<System.Decimal?>("QUANTITY");
                        result.GROSSWEIGHT = row.Field<System.Decimal?>("GROSSWEIGHT");
                        result.NETWEIGHT = row.Field<System.Decimal?>("NETWEIGHT");
                        result.GRADE = row.Field<System.String>("GRADE");
                        result.ITEMCODE = row.Field<System.String>("ITEMCODE");
                        result.DESCRIPTION = row.Field<System.String>("DESCRIPTION");
                        result.SUPPLIERCODE = row.Field<System.String>("SUPPLIERCODE");
                        result.BARCODEBACTHNO = row.Field<System.String>("BARCODEBACTHNO");
                        result.CUSTOMERPARTNO = row.Field<System.String>("CUSTOMERPARTNO");
                        result.BATCHNO = row.Field<System.String>("BATCHNO");
                        result.PDATE = row.Field<System.String>("PDATE");
                        result.CUSTOMERID = row.Field<System.String>("CUSTOMERID");

                        //INC เพิ่มเอง
                        result.FINISHINGPROCESS = row.Field<System.String>("FINISHINGPROCESS");

                        result.DBARCODE = row.Field<System.String>("DBARCODE");
                        result.BDate = row.Field<System.String>("BDate");
                        result.CUSPARTNO2D = row.Field<System.String>("CUSPARTNO2D");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region PACK_PALLETSHEET

        public List<PACK_PALLETSHEETResult> PACK_PALLETSHEET(PACK_PALLETSHEETParameter para)
        {
            List<PACK_PALLETSHEETResult> results = new List<PACK_PALLETSHEETResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_PALLET"
            };
            object[] paraValues = new object[]
            {
                para.P_PALLET
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "PACK_PALLETSHEET", 
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        PACK_PALLETSHEETResult result = 
                            new PACK_PALLETSHEETResult();

                        result.PALLETNO = row.Field<System.String>("PALLETNO");
                        result.ITEMCODE = row.Field<System.String>("ITEMCODE");
                        result.CUSTOMERTYPE = row.Field<System.String>("CUSTOMERTYPE");
                        result.INSPECTIONLOT = row.Field<System.String>("INSPECTIONLOT");
                        result.GRADE = row.Field<System.String>("GRADE");
                        result.GROSSWEIGHT = row.Field<System.Decimal?>("GROSSWEIGHT");
                        result.NETLENGTH = row.Field<System.Decimal?>("NETLENGTH");
                        result.NETWEIGHT = row.Field<System.Decimal?>("NETWEIGHT");
                        result.PACKINGDATE = row.Field<System.DateTime?>("PACKINGDATE");
                        result.PACKINGBY = row.Field<System.String>("PACKINGBY");
                        result.CHECKBY = row.Field<System.String>("CHECKBY");
                        result.CHECKINGDATE = row.Field<System.DateTime?>("CHECKINGDATE");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");
                        result.YARNCODE = row.Field<System.String>("YARNCODE");
                        result.ORDERNO = row.Field<System.Decimal?>("ORDERNO");

                        results.Add(result);
                    }
                }
            }

            return results;        }

        #endregion

        #region PACK_INSPACKINGPALLETDETAIL

        public PACK_INSPACKINGPALLETDETAILResult PACK_INSPACKINGPALLETDETAIL(PACK_INSPACKINGPALLETDETAILParameter para)
        {
            PACK_INSPACKINGPALLETDETAILResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_PALLETNO", 
                "P_ORDERNO", 
                "P_INSLOT", 
                "P_ITMCODE", 
                "P_GRADE", 
                "P_NETLENGTH", 
                "P_GROSSLENGTH", 
                "P_NETWEIGHT", 
                "P_GROSSWEIGHT", 
                "P_CUSTYPE", 
                "P_INSPECTDATE", 
                "P_LOADTYPE"
            };
            object[] paraValues = new object[]
            {
                para.P_PALLETNO, 
                para.P_ORDERNO, 
                para.P_INSLOT, 
                para.P_ITMCODE, 
                para.P_GRADE, 
                para.P_NETLENGTH, 
                para.P_GROSSLENGTH, 
                para.P_NETWEIGHT, 
                para.P_GROSSWEIGHT, 
                para.P_CUSTYPE, 
                para.P_INSPECTDATE, 
                para.P_LOADTYPE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "PACK_INSPACKINGPALLETDETAIL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new PACK_INSPACKINGPALLETDETAILResult();
            }

            return result;
        }

        #endregion

        #region PACK_INSERTPACKINGPALLET

        public PACK_INSERTPACKINGPALLETResult PACK_INSERTPACKINGPALLET(PACK_INSERTPACKINGPALLETParameter para)
        {
            PACK_INSERTPACKINGPALLETResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_OPERATOR"
            };
            object[] paraValues = new object[]
            {
                para.P_OPERATOR
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "PACK_INSERTPACKINGPALLET",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new PACK_INSERTPACKINGPALLETResult();
                if (ret.Result.OutParameters["R_PALLETNO"] != DBNull.Value)
                    result.R_PALLETNO = (System.String)ret.Result.OutParameters["R_PALLETNO"];
            }

            return result;
        }

        #endregion

        #region PACK_GETPALLETDETAIL

        public List<PACK_GETPALLETDETAILResult> PACK_GETPALLETDETAIL(PACK_GETPALLETDETAILParameter para)
        {
            List<PACK_GETPALLETDETAILResult> results = new List<PACK_GETPALLETDETAILResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_PALLET"
            };
            object[] paraValues = new object[]
            {
                para.P_PALLET
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "PACK_GETPALLETDETAIL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        PACK_GETPALLETDETAILResult result =
                            new PACK_GETPALLETDETAILResult();

                        result.PALLETNO = row.Field<System.String>("PALLETNO");
                        result.INSPECTIONLOT = row.Field<System.String>("INSPECTIONLOT");
                        result.ITEMCODE = row.Field<System.String>("ITEMCODE");
                        result.NETLENGTH = row.Field<System.Decimal?>("NETLENGTH");
                        result.GROSSWEIGHT = row.Field<System.Decimal?>("GROSSWEIGHT");
                        result.NETWEIGHT = row.Field<System.Decimal?>("NETWEIGHT");
                        result.GRADE = row.Field<System.String>("GRADE");
                        result.CUSTOMERTYPE = row.Field<System.String>("CUSTOMERTYPE");
                        result.ISLAB = row.Field<System.String>("ISLAB");
                        result.INSPECTIONDATE = row.Field<System.DateTime?>("INSPECTIONDATE");
                        result.FLAG = row.Field<System.String>("FLAG");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.STOCK = row.Field<System.String>("STOCK");
                        result.GROSSLENGTH = row.Field<System.Decimal?>("GROSSLENGTH");
                        result.ORDERNO = row.Field<System.Decimal?>("ORDERNO");
                        result.ITM_GROUP = row.Field<System.String>("ITM_GROUP");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region PACK_EDITPACKINGPALLETDETAIL

        public PACK_EDITPACKINGPALLETDETAILResult PACK_EDITPACKINGPALLETDETAIL(PACK_EDITPACKINGPALLETDETAILParameter para)
        {
            PACK_EDITPACKINGPALLETDETAILResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_PALLETNO", 
                "P_ORDERNO", 
                "P_INSLOT_OLD", 
                "P_INSLOT_NEW", 
                "P_ITMCODE", 
                "P_GRADE", 
                "P_NETLENGTH", 
                "P_GROSSLENGTH", 
                "P_NETWEIGHT", 
                "P_GROSSWEIGHT", 
                "P_CUSTYPE", 
                "P_INSPECTDATE", 
                "P_LOADTYPE"
            };
            object[] paraValues = new object[]
            {
                para.P_PALLETNO, 
                para.P_ORDERNO, 
                para.P_INSLOT_OLD, 
                para.P_INSLOT_NEW, 
                para.P_ITMCODE, 
                para.P_GRADE, 
                para.P_NETLENGTH, 
                para.P_GROSSLENGTH, 
                para.P_NETWEIGHT, 
                para.P_GROSSWEIGHT, 
                para.P_CUSTYPE, 
                para.P_INSPECTDATE, 
                para.P_LOADTYPE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "PACK_EDITPACKINGPALLETDETAIL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new PACK_EDITPACKINGPALLETDETAILResult();
            }

            return result;
        }

        #endregion

        #region PACK_CHECKPRINTLABEL

        public PACK_CHECKPRINTLABELResult PACK_CHECKPRINTLABEL(PACK_CHECKPRINTLABELParameter para)
        {
            PACK_CHECKPRINTLABELResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_INSLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_INSLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "PACK_CHECKPRINTLABEL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new PACK_CHECKPRINTLABELResult();
                if (ret.Result.OutParameters["PRINTDATE"] != DBNull.Value)
                    result.PRINTDATE = (System.DateTime)ret.Result.OutParameters["PRINTDATE"];
            }

            return result;
        }

        #endregion

        #region PACK_CANCELPALLET

        public PACK_CANCELPALLETResult PACK_CANCELPALLET(PACK_CANCELPALLETParameter para)
        {
            PACK_CANCELPALLETResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_PALLETNO"
            };
            object[] paraValues = new object[]
            {
                para.P_PALLETNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "PACK_CANCELPALLET",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new PACK_CANCELPALLETResult();
            }

            return result;
        }

        #endregion

        #region OPERATOR_SEARCH

        public List<OPERATOR_SEARCHResult> OPERATOR_SEARCH(OPERATOR_SEARCHParameter para)
        {
            List<OPERATOR_SEARCHResult> results = new List<OPERATOR_SEARCHResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_OPID", 
                "P_TITLE", 
                "P_FNAME", 
                "P_LNAME", 
                "P_PROCESSID", 
                "P_POSITION"
            };
            object[] paraValues = new object[]
            {
                para.P_OPID, 
                para.P_TITLE, 
                para.P_FNAME, 
                para.P_LNAME, 
                para.P_PROCESSID, 
                para.P_POSITION
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "OPERATOR_SEARCH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        OPERATOR_SEARCHResult result =
                            new OPERATOR_SEARCHResult();

                        result.OPERATORID = row.Field<System.String>("OPERATORID");
                        result.TITLE = row.Field<System.String>("TITLE");
                        result.FNAME = row.Field<System.String>("FNAME");
                        result.LNAME = row.Field<System.String>("LNAME");
                        result.USERNAME = row.Field<System.String>("USERNAME");
                        result.PASSWORD = row.Field<System.String>("PASSWORD");
                        result.DELETEFLAG = row.Field<System.String>("DELETEFLAG");
                        result.POSITIONLEVEL = row.Field<System.String>("POSITIONLEVEL");
                        result.PROCESSID = row.Field<System.String>("PROCESSID");
                        result.CREATEDDATE = row.Field<System.DateTime?>("CREATEDDATE");
                        result.CREATEDBY = row.Field<System.String>("CREATEDBY");
                        result.WEB = row.Field<System.String>("WEB");
                        result.STOCK = row.Field<System.String>("STOCK");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region OPERATOR_INSERTUPDATE

        public OPERATOR_INSERTUPDATEResult OPERATOR_INSERTUPDATE(OPERATOR_INSERTUPDATEParameter para)
        {
            OPERATOR_INSERTUPDATEResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_OPID", 
                "P_FNAME", 
                "P_LNAME", 
                "P_PROCESSID", 
                "P_USER", 
                "P_PASSWORD", 
                "P_TITLE", 
                "P_FLAG", 
                "P_POSITION", 
                "P_CREATEBY", 
                "P_WEB", 
                "P_WIP"
            };
            object[] paraValues = new object[]
            {
                para.P_OPID, 
                para.P_FNAME, 
                para.P_LNAME, 
                para.P_PROCESSID, 
                para.P_USER, 
                para.P_PASSWORD, 
                para.P_TITLE, 
                para.P_FLAG, 
                para.P_POSITION, 
                para.P_CREATEBY, 
                para.P_WEB, 
                para.P_WIP
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "OPERATOR_INSERTUPDATE",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new OPERATOR_INSERTUPDATEResult();
                if (ret.Result.OutParameters["R_RESULT"] != DBNull.Value)
                    result.R_RESULT = (System.String)ret.Result.OutParameters["R_RESULT"];
            }

            return result;
        }

        #endregion

        // -- Update 15/06/18 -- //

        #region MC_GETLOOMLIST

        public List<MC_GETLOOMLISTResult> MC_GETLOOMLIST(MC_GETLOOMLISTParameter para)
        {
            List<MC_GETLOOMLISTResult> results = new List<MC_GETLOOMLISTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
            };
            object[] paraValues = new object[]
            {
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "MC_GETLOOMLIST",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        MC_GETLOOMLISTResult result =
                            new MC_GETLOOMLISTResult();

                        result.MCNAME = row.Field<System.String>("MCNAME");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        //----------------------//

        #region MASTER_POSITIONLIST

        public List<MASTER_POSITIONLISTResult> MASTER_POSITIONLIST(MASTER_POSITIONLISTParameter para)
        {
            List<MASTER_POSITIONLISTResult> results = new List<MASTER_POSITIONLISTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
            };
            object[] paraValues = new object[]
            {
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "MASTER_POSITIONLIST",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        MASTER_POSITIONLISTResult result =
                            new MASTER_POSITIONLISTResult();

                        result.POSITIONLEVEL = row.Field<System.String>("POSITIONLEVEL");
                        result.POSITIONNAME = row.Field<System.String>("POSITIONNAME");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region MASTER_GETLOADINGBYCUSTYPE

        public List<MASTER_GETLOADINGBYCUSTYPEResult> MASTER_GETLOADINGBYCUSTYPE(MASTER_GETLOADINGBYCUSTYPEParameter para)
        {
            List<MASTER_GETLOADINGBYCUSTYPEResult> results = new List<MASTER_GETLOADINGBYCUSTYPEResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_CUSTYPE"
            };
            object[] paraValues = new object[]
            {
                para.P_CUSTYPE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "MASTER_GETLOADINGBYCUSTYPE",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        MASTER_GETLOADINGBYCUSTYPEResult result =
                            new MASTER_GETLOADINGBYCUSTYPEResult();

                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region MASTER_EDITCUSLOADTYPE

        public MASTER_EDITCUSLOADTYPEResult MASTER_EDITCUSLOADTYPE(MASTER_EDITCUSLOADTYPEParameter para)
        {
            MASTER_EDITCUSLOADTYPEResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_CUSTYPE", 
                "P_LOADTYPE", 
                "P_OPERATOR"
            };
            object[] paraValues = new object[]
            {
                para.P_CUSTYPE, 
                para.P_LOADTYPE, 
                para.P_OPERATOR
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "MASTER_EDITCUSLOADTYPE",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new MASTER_EDITCUSLOADTYPEResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region MASTER_DELETECUSLOADTYPE

        public MASTER_DELETECUSLOADTYPEResult MASTER_DELETECUSLOADTYPE(MASTER_DELETECUSLOADTYPEParameter para)
        {
            MASTER_DELETECUSLOADTYPEResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_CUSTYPE", 
                "P_LOADTYPE"
            };
            object[] paraValues = new object[]
            {
                para.P_CUSTYPE, 
                para.P_LOADTYPE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "MASTER_DELETECUSLOADTYPE",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new MASTER_DELETECUSLOADTYPEResult();
            }

            return result;
        }

        #endregion

        #region MASTER_CUSTOMERTYPELIST

        public List<MASTER_CUSTOMERTYPELISTResult> MASTER_CUSTOMERTYPELIST(MASTER_CUSTOMERTYPELISTParameter para)
        {
            List<MASTER_CUSTOMERTYPELISTResult> results = new List<MASTER_CUSTOMERTYPELISTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
            };
            object[] paraValues = new object[]
            {
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "MASTER_CUSTOMERTYPELIST",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        MASTER_CUSTOMERTYPELISTResult result =
                            new MASTER_CUSTOMERTYPELISTResult();

                        result.CUSTOMERTYPE = row.Field<System.String>("CUSTOMERTYPE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region MASTER_AIRBAGPROCESSLIST

        public List<MASTER_AIRBAGPROCESSLISTResult> MASTER_AIRBAGPROCESSLIST(MASTER_AIRBAGPROCESSLISTParameter para)
        {
            List<MASTER_AIRBAGPROCESSLISTResult> results = new List<MASTER_AIRBAGPROCESSLISTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
            };
            object[] paraValues = new object[]
            {
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "MASTER_AIRBAGPROCESSLIST",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        MASTER_AIRBAGPROCESSLISTResult result =
                            new MASTER_AIRBAGPROCESSLISTResult();

                        result.PROCESSID = row.Field<System.String>("PROCESSID");
                        result.PROCESSDESCRIPTION = row.Field<System.String>("PROCESSDESCRIPTION");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region LAB_WEAVINGHISTORY

        public List<LAB_WEAVINGHISTORYResult> LAB_WEAVINGHISTORY(LAB_WEAVINGHISTORYParameter para)
        {
            List<LAB_WEAVINGHISTORYResult> results = new List<LAB_WEAVINGHISTORYResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WEAVINGLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_WEAVINGLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_WEAVINGHISTORY",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        LAB_WEAVINGHISTORYResult result =
                            new LAB_WEAVINGHISTORYResult();

                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");
                        result.LENGTH = row.Field<System.Decimal?>("LENGTH");
                        result.LOOMNO = row.Field<System.String>("LOOMNO");
                        result.WEAVINGDATE = row.Field<System.DateTime?>("WEAVINGDATE");
                        result.SHIFT = row.Field<System.String>("SHIFT");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.CREATEDATE = row.Field<System.DateTime?>("CREATEDATE");
                        result.WIDTH = row.Field<System.Decimal?>("WIDTH");
                        result.PREPAREBY = row.Field<System.String>("PREPAREBY");
                        result.WEAVINGNO = row.Field<System.String>("WEAVINGNO");
                        result.BEAMLOT = row.Field<System.String>("BEAMLOT");
                        result.DOFFNO = row.Field<System.Decimal?>("DOFFNO");
                        result.DENSITY_WARP = row.Field<System.Decimal?>("DENSITY_WARP");
                        result.TENSION = row.Field<System.Decimal?>("TENSION");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.DOFFBY = row.Field<System.String>("DOFFBY");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.WASTE = row.Field<System.Decimal?>("WASTE");
                        result.DENSITY_WEFT = row.Field<System.Decimal?>("DENSITY_WEFT");
                        result.DELETEFLAG = row.Field<System.String>("DELETEFLAG");
                        result.DELETEBY = row.Field<System.String>("DELETEBY");
                        result.DELETEDATE = row.Field<System.DateTime?>("DELETEDATE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region LAB_UPDATEMASSPROSTOCK

        public LAB_UPDATEMASSPROSTOCKResult LAB_UPDATEMASSPROSTOCK(LAB_UPDATEMASSPROSTOCKParameter para)
        {
            LAB_UPDATEMASSPROSTOCKResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_WEAVELOT", 
                "P_FINISHLOT", 
                "P_ITMCODE", 
                "P_RECEIVEDATE", 
                "P_RECEIVEBY", 
                "P_STATUS", 
                "P_CONDITONTIME", 
                "P_TESTBY", 
                "P_APPROVESTATUS", 
                "P_APPROVEBY", 
                "P_APPROVEDATE", 
                "P_REMARK"
            };
            object[] paraValues = new object[]
            {
                para.P_WEAVELOT, 
                para.P_FINISHLOT, 
                para.P_ITMCODE, 
                para.P_RECEIVEDATE, 
                para.P_RECEIVEBY, 
                para.P_STATUS, 
                para.P_CONDITONTIME, 
                para.P_TESTBY, 
                para.P_APPROVESTATUS, 
                para.P_APPROVEBY, 
                para.P_APPROVEDATE, 
                para.P_REMARK
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_UPDATEMASSPROSTOCK",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new LAB_UPDATEMASSPROSTOCKResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region LAB_UPDATEGREIGESTOCK

        public LAB_UPDATEGREIGESTOCKResult LAB_UPDATEGREIGESTOCK(LAB_UPDATEGREIGESTOCKParameter para)
        {
            LAB_UPDATEGREIGESTOCKResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_BEAMERROLL", 
                "P_LOOMNO", 
                "P_TESTNO", 
                "P_RECEIVEDATE", 
                "P_RECEIVEBY", 
                "P_STATUS", 
                "P_CONDITONTIME", 
                "P_TESTBY", 
                "P_APPROVESTATUS", 
                "P_APPROVEBY", 
                "P_APPROVEDATE", 
                "P_REMARK"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERROLL, 
                para.P_LOOMNO, 
                para.P_TESTNO, 
                para.P_RECEIVEDATE, 
                para.P_RECEIVEBY, 
                para.P_STATUS, 
                para.P_CONDITONTIME, 
                para.P_TESTBY, 
                para.P_APPROVESTATUS, 
                para.P_APPROVEBY, 
                para.P_APPROVEDATE, 
                para.P_REMARK
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_UPDATEGREIGESTOCK",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new LAB_UPDATEGREIGESTOCKResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region LAB_SEARCHLABMASSPRO

        public List<LAB_SEARCHLABMASSPROResult> LAB_SEARCHLABMASSPRO(LAB_SEARCHLABMASSPROParameter para)
        {
            List<LAB_SEARCHLABMASSPROResult> results = new List<LAB_SEARCHLABMASSPROResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WEAVELOT", 
                "P_ITMCODE", 
                "P_FABRICTPE", 
                "P_SENDDATE", 
                "P_TESTRESULT"
            };
            object[] paraValues = new object[]
            {
                para.P_WEAVELOT, 
                para.P_ITMCODE, 
                para.P_FABRICTPE, 
                para.P_SENDDATE, 
                para.P_TESTRESULT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_SEARCHLABMASSPRO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        LAB_SEARCHLABMASSPROResult result =
                            new LAB_SEARCHLABMASSPROResult();

                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.RECEIVEDATE = row.Field<System.DateTime?>("RECEIVEDATE");
                        result.RECEIVEBY = row.Field<System.String>("RECEIVEBY");
                        result.STATUS = row.Field<System.String>("STATUS");
                        result.CONDITIONINGTIME = row.Field<System.DateTime?>("CONDITIONINGTIME");
                        result.TESTDATE = row.Field<System.DateTime?>("TESTDATE");
                        result.TESTRESULT = row.Field<System.String>("TESTRESULT");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.TESTBY = row.Field<System.String>("TESTBY");
                        result.APPROVESTATUS = row.Field<System.String>("APPROVESTATUS");
                        result.APPROVEBY = row.Field<System.String>("APPROVEBY");
                        result.SENDDATE = row.Field<System.DateTime?>("SENDDATE");
                        result.APPROVEDATE = row.Field<System.DateTime?>("APPROVEDATE");
                        result.FABRICTYPE = row.Field<System.String>("FABRICTYPE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region LAB_SEARCHLABGREIGE

        public List<LAB_SEARCHLABGREIGEResult> LAB_SEARCHLABGREIGE(LAB_SEARCHLABGREIGEParameter para)
        {
            List<LAB_SEARCHLABGREIGEResult> results = new List<LAB_SEARCHLABGREIGEResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMERROLL", 
                "P_LOOM", 
                "P_ITMWEAVE", 
                "P_SETTINGDATE", 
                "P_SENDDATE", 
                "P_TESTRESULT"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERROLL, 
                para.P_LOOM, 
                para.P_ITMWEAVE, 
                para.P_SETTINGDATE, 
                para.P_SENDDATE, 
                para.P_TESTRESULT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_SEARCHLABGREIGE",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        LAB_SEARCHLABGREIGEResult result =
                            new LAB_SEARCHLABGREIGEResult();

                        result.BEAMERROLL = row.Field<System.String>("BEAMERROLL");
                        result.LOOMNO = row.Field<System.String>("LOOMNO");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");
                        result.TESTNO = row.Field<System.Decimal?>("TESTNO");
                        result.RECEIVEDATE = row.Field<System.DateTime?>("RECEIVEDATE");
                        result.RECEIVEBY = row.Field<System.String>("RECEIVEBY");
                        result.STATUS = row.Field<System.String>("STATUS");
                        result.CONDITIONINGTIME = row.Field<System.DateTime?>("CONDITIONINGTIME");
                        result.TESTDATE = row.Field<System.DateTime?>("TESTDATE");
                        result.TESTRESULT = row.Field<System.String>("TESTRESULT");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.TESTBY = row.Field<System.String>("TESTBY");
                        result.APPROVESTATUS = row.Field<System.String>("APPROVESTATUS");
                        result.APPROVEBY = row.Field<System.String>("APPROVEBY");
                        result.SENDDATE = row.Field<System.DateTime?>("SENDDATE");
                        result.APPROVEDATE = row.Field<System.DateTime?>("APPROVEDATE");
                        result.SETTINGDATE = row.Field<System.DateTime?>("SETTINGDATE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        // -- Update 26/10/20 -- //

        #region LAB_UPLOADREPORT

        public LAB_UPLOADREPORTResult LAB_UPLOADREPORT(LAB_UPLOADREPORTParameter para)
        {
            LAB_UPLOADREPORTResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_WEAVINGLOG", 
                "P_FINISHINGLOT", 
                "P_ENTRYDATE", 
                "P_FILENAME", 
                "P_UPLOADDATE", 
                "P_UPLOADBY"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_WEAVINGLOG, 
                para.P_FINISHINGLOT, 
                para.P_ENTRYDATE, 
                para.P_FILENAME, 
                para.P_UPLOADDATE, 
                para.P_UPLOADBY
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_UPLOADREPORT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new LAB_UPLOADREPORTResult();
                if (ret.Result.OutParameters["P_RETURN"] != DBNull.Value)
                    result.P_RETURN = (System.String)ret.Result.OutParameters["P_RETURN"];
            }

            return result;
        }

        #endregion

        // -- Update 15/06/18 -- //

        #region LAB_SEARCHLABENTRYPRODUCTION

        public List<LAB_SEARCHLABENTRYPRODUCTIONResult> LAB_SEARCHLABENTRYPRODUCTION(LAB_SEARCHLABENTRYPRODUCTIONParameter para)
        {
            List<LAB_SEARCHLABENTRYPRODUCTIONResult> results = new List<LAB_SEARCHLABENTRYPRODUCTIONResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_ENTRYSTARTDATE", 
                "P_ENTRYENDDATE", 
                "P_LOOM", 
                "P_FINISHPROCESS"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_ENTRYSTARTDATE, 
                para.P_ENTRYENDDATE, 
                para.P_LOOM, 
                para.P_FINISHPROCESS
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_SEARCHLABENTRYPRODUCTION",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        LAB_SEARCHLABENTRYPRODUCTIONResult result =
                            new LAB_SEARCHLABENTRYPRODUCTIONResult();

                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.ENTRYDATE = row.Field<System.DateTime?>("ENTRYDATE");
                        result.ENTEYBY = row.Field<System.String>("ENTEYBY");
                        result.WIDTH = row.Field<System.Decimal?>("WIDTH");
                        result.USABLE_WIDTH1 = row.Field<System.Decimal?>("USABLE_WIDTH1");
                        result.USABLE_WIDTH2 = row.Field<System.Decimal?>("USABLE_WIDTH2");
                        result.USABLE_WIDTH3 = row.Field<System.Decimal?>("USABLE_WIDTH3");
                        result.WIDTH_SILICONE1 = row.Field<System.Decimal?>("WIDTH_SILICONE1");
                        result.WIDTH_SILICONE2 = row.Field<System.Decimal?>("WIDTH_SILICONE2");
                        result.WIDTH_SILICONE3 = row.Field<System.Decimal?>("WIDTH_SILICONE3");
                        result.NUMTHREADS_W1 = row.Field<System.Decimal?>("NUMTHREADS_W1");
                        result.NUMTHREADS_W2 = row.Field<System.Decimal?>("NUMTHREADS_W2");
                        result.NUMTHREADS_W3 = row.Field<System.Decimal?>("NUMTHREADS_W3");
                        result.NUMTHREADS_F1 = row.Field<System.Decimal?>("NUMTHREADS_F1");
                        result.NUMTHREADS_F2 = row.Field<System.Decimal?>("NUMTHREADS_F2");
                        result.NUMTHREADS_F3 = row.Field<System.Decimal?>("NUMTHREADS_F3");
                        result.TOTALWEIGHT1 = row.Field<System.Decimal?>("TOTALWEIGHT1");
                        result.TOTALWEIGHT2 = row.Field<System.Decimal?>("TOTALWEIGHT2");
                        result.TOTALWEIGHT3 = row.Field<System.Decimal?>("TOTALWEIGHT3");
                        result.TOTALWEIGHT4 = row.Field<System.Decimal?>("TOTALWEIGHT4");
                        result.TOTALWEIGHT5 = row.Field<System.Decimal?>("TOTALWEIGHT5");
                        result.TOTALWEIGHT6 = row.Field<System.Decimal?>("TOTALWEIGHT6");
                        result.UNCOATEDWEIGHT1 = row.Field<System.Decimal?>("UNCOATEDWEIGHT1");
                        result.UNCOATEDWEIGHT2 = row.Field<System.Decimal?>("UNCOATEDWEIGHT2");
                        result.UNCOATEDWEIGHT3 = row.Field<System.Decimal?>("UNCOATEDWEIGHT3");
                        result.UNCOATEDWEIGHT4 = row.Field<System.Decimal?>("UNCOATEDWEIGHT4");
                        result.UNCOATEDWEIGHT5 = row.Field<System.Decimal?>("UNCOATEDWEIGHT5");
                        result.UNCOATEDWEIGHT6 = row.Field<System.Decimal?>("UNCOATEDWEIGHT6");
                        result.COATINGWEIGHT1 = row.Field<System.Decimal?>("COATINGWEIGHT1");
                        result.COATINGWEIGHT2 = row.Field<System.Decimal?>("COATINGWEIGHT2");
                        result.COATINGWEIGHT3 = row.Field<System.Decimal?>("COATINGWEIGHT3");
                        result.COATINGWEIGHT4 = row.Field<System.Decimal?>("COATINGWEIGHT4");
                        result.COATINGWEIGHT5 = row.Field<System.Decimal?>("COATINGWEIGHT5");
                        result.COATINGWEIGHT6 = row.Field<System.Decimal?>("COATINGWEIGHT6");
                        result.THICKNESS1 = row.Field<System.Decimal?>("THICKNESS1");
                        result.THICKNESS2 = row.Field<System.Decimal?>("THICKNESS2");
                        result.THICKNESS3 = row.Field<System.Decimal?>("THICKNESS3");
                        result.MAXFORCE_W1 = row.Field<System.Decimal?>("MAXFORCE_W1");
                        result.MAXFORCE_W2 = row.Field<System.Decimal?>("MAXFORCE_W2");
                        result.MAXFORCE_W3 = row.Field<System.Decimal?>("MAXFORCE_W3");
                        result.MAXFORCE_F1 = row.Field<System.Decimal?>("MAXFORCE_F1");
                        result.MAXFORCE_F2 = row.Field<System.Decimal?>("MAXFORCE_F2");
                        result.MAXFORCE_F3 = row.Field<System.Decimal?>("MAXFORCE_F3");
                        result.ELONGATIONFORCE_W1 = row.Field<System.Decimal?>("ELONGATIONFORCE_W1");
                        result.ELONGATIONFORCE_W2 = row.Field<System.Decimal?>("ELONGATIONFORCE_W2");
                        result.ELONGATIONFORCE_W3 = row.Field<System.Decimal?>("ELONGATIONFORCE_W3");
                        result.ELONGATIONFORCE_F1 = row.Field<System.Decimal?>("ELONGATIONFORCE_F1");
                        result.ELONGATIONFORCE_F2 = row.Field<System.Decimal?>("ELONGATIONFORCE_F2");
                        result.ELONGATIONFORCE_F3 = row.Field<System.Decimal?>("ELONGATIONFORCE_F3");
                        result.FLAMMABILITY_W = row.Field<System.Decimal?>("FLAMMABILITY_W");
                        result.FLAMMABILITY_F = row.Field<System.Decimal?>("FLAMMABILITY_F");
                        result.EDGECOMB_W1 = row.Field<System.Decimal?>("EDGECOMB_W1");
                        result.EDGECOMB_W2 = row.Field<System.Decimal?>("EDGECOMB_W2");
                        result.EDGECOMB_W3 = row.Field<System.Decimal?>("EDGECOMB_W3");
                        result.EDGECOMB_F1 = row.Field<System.Decimal?>("EDGECOMB_F1");
                        result.EDGECOMB_F2 = row.Field<System.Decimal?>("EDGECOMB_F2");
                        result.EDGECOMB_F3 = row.Field<System.Decimal?>("EDGECOMB_F3");
                        result.STIFFNESS_W1 = row.Field<System.Decimal?>("STIFFNESS_W1");
                        result.STIFFNESS_W2 = row.Field<System.Decimal?>("STIFFNESS_W2");
                        result.STIFFNESS_W3 = row.Field<System.Decimal?>("STIFFNESS_W3");
                        result.STIFFNESS_F1 = row.Field<System.Decimal?>("STIFFNESS_F1");
                        result.STIFFNESS_F2 = row.Field<System.Decimal?>("STIFFNESS_F2");
                        result.STIFFNESS_F3 = row.Field<System.Decimal?>("STIFFNESS_F3");
                        result.TEAR_W1 = row.Field<System.Decimal?>("TEAR_W1");
                        result.TEAR_W2 = row.Field<System.Decimal?>("TEAR_W2");
                        result.TEAR_W3 = row.Field<System.Decimal?>("TEAR_W3");
                        result.TEAR_F1 = row.Field<System.Decimal?>("TEAR_F1");
                        result.TEAR_F2 = row.Field<System.Decimal?>("TEAR_F2");
                        result.TEAR_F3 = row.Field<System.Decimal?>("TEAR_F3");
                        result.STATIC_AIR1 = row.Field<System.Decimal?>("STATIC_AIR1");
                        result.STATIC_AIR2 = row.Field<System.Decimal?>("STATIC_AIR2");
                        result.STATIC_AIR3 = row.Field<System.Decimal?>("STATIC_AIR3");
                        result.DYNAMIC_AIR1 = row.Field<System.Decimal?>("DYNAMIC_AIR1");
                        result.DYNAMIC_AIR2 = row.Field<System.Decimal?>("DYNAMIC_AIR2");
                        result.DYNAMIC_AIR3 = row.Field<System.Decimal?>("DYNAMIC_AIR3");
                        result.EXPONENT1 = row.Field<System.Decimal?>("EXPONENT1");
                        result.EXPONENT2 = row.Field<System.Decimal?>("EXPONENT2");
                        result.EXPONENT3 = row.Field<System.Decimal?>("EXPONENT3");
                        result.DIMENSCHANGE_W1 = row.Field<System.Decimal?>("DIMENSCHANGE_W1");
                        result.DIMENSCHANGE_W2 = row.Field<System.Decimal?>("DIMENSCHANGE_W2");
                        result.DIMENSCHANGE_W3 = row.Field<System.Decimal?>("DIMENSCHANGE_W3");
                        result.DIMENSCHANGE_F1 = row.Field<System.Decimal?>("DIMENSCHANGE_F1");
                        result.DIMENSCHANGE_F2 = row.Field<System.Decimal?>("DIMENSCHANGE_F2");
                        result.DIMENSCHANGE_F3 = row.Field<System.Decimal?>("DIMENSCHANGE_F3");
                        result.FLEXABRASION_W1 = row.Field<System.Decimal?>("FLEXABRASION_W1");
                        result.FLEXABRASION_W2 = row.Field<System.Decimal?>("FLEXABRASION_W2");
                        result.FLEXABRASION_W3 = row.Field<System.Decimal?>("FLEXABRASION_W3");
                        result.FLEXABRASION_F1 = row.Field<System.Decimal?>("FLEXABRASION_F1");
                        result.FLEXABRASION_F2 = row.Field<System.Decimal?>("FLEXABRASION_F2");
                        result.FLEXABRASION_F3 = row.Field<System.Decimal?>("FLEXABRASION_F3");
                        result.BOW1 = row.Field<System.Decimal?>("BOW1");
                        result.SKEW1 = row.Field<System.Decimal?>("SKEW1");
                        result.STATUS = row.Field<System.String>("STATUS");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.APPROVEBY = row.Field<System.String>("APPROVEBY");
                        result.APPROVEDATE = row.Field<System.DateTime?>("APPROVEDATE");
                        result.CREATEDATE = row.Field<System.DateTime?>("CREATEDATE");
                        result.BOW2 = row.Field<System.Decimal?>("BOW2");
                        result.BOW3 = row.Field<System.Decimal?>("BOW3");
                        result.SKEW2 = row.Field<System.Decimal?>("SKEW2");
                        result.SKEW3 = row.Field<System.Decimal?>("SKEW3");
                        result.BENDING_W1 = row.Field<System.Decimal?>("BENDING_W1");
                        result.BENDING_W2 = row.Field<System.Decimal?>("BENDING_W2");
                        result.BENDING_W3 = row.Field<System.Decimal?>("BENDING_W3");
                        result.BENDING_F1 = row.Field<System.Decimal?>("BENDING_F1");
                        result.BENDING_F2 = row.Field<System.Decimal?>("BENDING_F2");
                        result.BENDING_F3 = row.Field<System.Decimal?>("BENDING_F3");
                        result.FLEX_SCOTT_W1 = row.Field<System.Decimal?>("FLEX_SCOTT_W1");
                        result.FLEX_SCOTT_W2 = row.Field<System.Decimal?>("FLEX_SCOTT_W2");
                        result.FLEX_SCOTT_W3 = row.Field<System.Decimal?>("FLEX_SCOTT_W3");
                        result.FLEX_SCOTT_F1 = row.Field<System.Decimal?>("FLEX_SCOTT_F1");
                        result.FLEX_SCOTT_F2 = row.Field<System.Decimal?>("FLEX_SCOTT_F2");
                        result.FLEX_SCOTT_F3 = row.Field<System.Decimal?>("FLEX_SCOTT_F3");
                        result.STATIC_AIR4 = row.Field<System.Decimal?>("STATIC_AIR4");
                        result.STATIC_AIR5 = row.Field<System.Decimal?>("STATIC_AIR5");
                        result.STATIC_AIR6 = row.Field<System.Decimal?>("STATIC_AIR6");
                        result.FILENAME = row.Field<System.String>("FILENAME");
                        result.UPLOADDATE = row.Field<System.DateTime?>("UPLOADDATE");
                        result.UPLOADBY = row.Field<System.String>("UPLOADBY");
                        result.FLAMMABILITY_W2 = row.Field<System.Decimal?>("FLAMMABILITY_W2");
                        result.FLAMMABILITY_W3 = row.Field<System.Decimal?>("FLAMMABILITY_W3");
                        result.FLAMMABILITY_W4 = row.Field<System.Decimal?>("FLAMMABILITY_W4");
                        result.FLAMMABILITY_W5 = row.Field<System.Decimal?>("FLAMMABILITY_W5");
                        result.FLAMMABILITY_F2 = row.Field<System.Decimal?>("FLAMMABILITY_F2");
                        result.FLAMMABILITY_F3 = row.Field<System.Decimal?>("FLAMMABILITY_F3");
                        result.FLAMMABILITY_F4 = row.Field<System.Decimal?>("FLAMMABILITY_F4");
                        result.FLAMMABILITY_F5 = row.Field<System.Decimal?>("FLAMMABILITY_F5");
                        result.ITM_CODE_H = row.Field<System.String>("ITM_CODE_H");
                        result.FINISHLENGTH = row.Field<System.Decimal?>("FINISHLENGTH");
                        result.FINISHINGPROCESS = row.Field<System.String>("FINISHINGPROCESS");
                        result.ITEMLOT = row.Field<System.String>("ITEMLOT");
                        result.LOOMNO = row.Field<System.String>("LOOMNO");
                        result.FINISHINGMC = row.Field<System.String>("FINISHINGMC");
                        result.BATCHNO = row.Field<System.String>("BATCHNO");
                        result.CUSTOMERID = row.Field<System.String>("CUSTOMERID");
                        result.PARTNO = row.Field<System.String>("PARTNO");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        //----------------------//

        // -- Update 26/10/20 -- //

        #region LAB_SEARCHAPPROVELAB

        public List<LAB_SEARCHAPPROVELABResult> LAB_SEARCHAPPROVELAB(LAB_SEARCHAPPROVELABParameter para)
        {
            List<LAB_SEARCHAPPROVELABResult> results = new List<LAB_SEARCHAPPROVELABResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_ENTRYSTARTDATE", 
                "P_ENTRYENDDATE", 
                "P_LOOM", 
                "P_FINISHPROCESS"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_ENTRYSTARTDATE, 
                para.P_ENTRYENDDATE, 
                para.P_LOOM, 
                para.P_FINISHPROCESS
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_SEARCHAPPROVELAB",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        LAB_SEARCHAPPROVELABResult result =
                            new LAB_SEARCHAPPROVELABResult();

                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.ENTRYDATE = row.Field<System.DateTime?>("ENTRYDATE");
                        result.ENTEYBY = row.Field<System.String>("ENTEYBY");
                        result.WIDTH = row.Field<System.Decimal?>("WIDTH");
                        result.USABLE_WIDTH1 = row.Field<System.Decimal?>("USABLE_WIDTH1");
                        result.USABLE_WIDTH2 = row.Field<System.Decimal?>("USABLE_WIDTH2");
                        result.USABLE_WIDTH3 = row.Field<System.Decimal?>("USABLE_WIDTH3");
                        result.WIDTH_SILICONE1 = row.Field<System.Decimal?>("WIDTH_SILICONE1");
                        result.WIDTH_SILICONE2 = row.Field<System.Decimal?>("WIDTH_SILICONE2");
                        result.WIDTH_SILICONE3 = row.Field<System.Decimal?>("WIDTH_SILICONE3");
                        result.NUMTHREADS_W1 = row.Field<System.Decimal?>("NUMTHREADS_W1");
                        result.NUMTHREADS_W2 = row.Field<System.Decimal?>("NUMTHREADS_W2");
                        result.NUMTHREADS_W3 = row.Field<System.Decimal?>("NUMTHREADS_W3");
                        result.NUMTHREADS_F1 = row.Field<System.Decimal?>("NUMTHREADS_F1");
                        result.NUMTHREADS_F2 = row.Field<System.Decimal?>("NUMTHREADS_F2");
                        result.NUMTHREADS_F3 = row.Field<System.Decimal?>("NUMTHREADS_F3");
                        result.TOTALWEIGHT1 = row.Field<System.Decimal?>("TOTALWEIGHT1");
                        result.TOTALWEIGHT2 = row.Field<System.Decimal?>("TOTALWEIGHT2");
                        result.TOTALWEIGHT3 = row.Field<System.Decimal?>("TOTALWEIGHT3");
                        result.TOTALWEIGHT4 = row.Field<System.Decimal?>("TOTALWEIGHT4");
                        result.TOTALWEIGHT5 = row.Field<System.Decimal?>("TOTALWEIGHT5");
                        result.TOTALWEIGHT6 = row.Field<System.Decimal?>("TOTALWEIGHT6");
                        result.UNCOATEDWEIGHT1 = row.Field<System.Decimal?>("UNCOATEDWEIGHT1");
                        result.UNCOATEDWEIGHT2 = row.Field<System.Decimal?>("UNCOATEDWEIGHT2");
                        result.UNCOATEDWEIGHT3 = row.Field<System.Decimal?>("UNCOATEDWEIGHT3");
                        result.UNCOATEDWEIGHT4 = row.Field<System.Decimal?>("UNCOATEDWEIGHT4");
                        result.UNCOATEDWEIGHT5 = row.Field<System.Decimal?>("UNCOATEDWEIGHT5");
                        result.UNCOATEDWEIGHT6 = row.Field<System.Decimal?>("UNCOATEDWEIGHT6");
                        result.COATINGWEIGHT1 = row.Field<System.Decimal?>("COATINGWEIGHT1");
                        result.COATINGWEIGHT2 = row.Field<System.Decimal?>("COATINGWEIGHT2");
                        result.COATINGWEIGHT3 = row.Field<System.Decimal?>("COATINGWEIGHT3");
                        result.COATINGWEIGHT4 = row.Field<System.Decimal?>("COATINGWEIGHT4");
                        result.COATINGWEIGHT5 = row.Field<System.Decimal?>("COATINGWEIGHT5");
                        result.COATINGWEIGHT6 = row.Field<System.Decimal?>("COATINGWEIGHT6");
                        result.THICKNESS1 = row.Field<System.Decimal?>("THICKNESS1");
                        result.THICKNESS2 = row.Field<System.Decimal?>("THICKNESS2");
                        result.THICKNESS3 = row.Field<System.Decimal?>("THICKNESS3");
                        result.MAXFORCE_W1 = row.Field<System.Decimal?>("MAXFORCE_W1");
                        result.MAXFORCE_W2 = row.Field<System.Decimal?>("MAXFORCE_W2");
                        result.MAXFORCE_W3 = row.Field<System.Decimal?>("MAXFORCE_W3");
                        result.MAXFORCE_F1 = row.Field<System.Decimal?>("MAXFORCE_F1");
                        result.MAXFORCE_F2 = row.Field<System.Decimal?>("MAXFORCE_F2");
                        result.MAXFORCE_F3 = row.Field<System.Decimal?>("MAXFORCE_F3");
                        result.ELONGATIONFORCE_W1 = row.Field<System.Decimal?>("ELONGATIONFORCE_W1");
                        result.ELONGATIONFORCE_W2 = row.Field<System.Decimal?>("ELONGATIONFORCE_W2");
                        result.ELONGATIONFORCE_W3 = row.Field<System.Decimal?>("ELONGATIONFORCE_W3");
                        result.ELONGATIONFORCE_F1 = row.Field<System.Decimal?>("ELONGATIONFORCE_F1");
                        result.ELONGATIONFORCE_F2 = row.Field<System.Decimal?>("ELONGATIONFORCE_F2");
                        result.ELONGATIONFORCE_F3 = row.Field<System.Decimal?>("ELONGATIONFORCE_F3");
                        result.FLAMMABILITY_W = row.Field<System.Decimal?>("FLAMMABILITY_W");
                        result.FLAMMABILITY_F = row.Field<System.Decimal?>("FLAMMABILITY_F");
                        result.EDGECOMB_W1 = row.Field<System.Decimal?>("EDGECOMB_W1");
                        result.EDGECOMB_W2 = row.Field<System.Decimal?>("EDGECOMB_W2");
                        result.EDGECOMB_W3 = row.Field<System.Decimal?>("EDGECOMB_W3");
                        result.EDGECOMB_F1 = row.Field<System.Decimal?>("EDGECOMB_F1");
                        result.EDGECOMB_F2 = row.Field<System.Decimal?>("EDGECOMB_F2");
                        result.EDGECOMB_F3 = row.Field<System.Decimal?>("EDGECOMB_F3");
                        result.STIFFNESS_W1 = row.Field<System.Decimal?>("STIFFNESS_W1");
                        result.STIFFNESS_W2 = row.Field<System.Decimal?>("STIFFNESS_W2");
                        result.STIFFNESS_W3 = row.Field<System.Decimal?>("STIFFNESS_W3");
                        result.STIFFNESS_F1 = row.Field<System.Decimal?>("STIFFNESS_F1");
                        result.STIFFNESS_F2 = row.Field<System.Decimal?>("STIFFNESS_F2");
                        result.STIFFNESS_F3 = row.Field<System.Decimal?>("STIFFNESS_F3");
                        result.TEAR_W1 = row.Field<System.Decimal?>("TEAR_W1");
                        result.TEAR_W2 = row.Field<System.Decimal?>("TEAR_W2");
                        result.TEAR_W3 = row.Field<System.Decimal?>("TEAR_W3");
                        result.TEAR_F1 = row.Field<System.Decimal?>("TEAR_F1");
                        result.TEAR_F2 = row.Field<System.Decimal?>("TEAR_F2");
                        result.TEAR_F3 = row.Field<System.Decimal?>("TEAR_F3");
                        result.STATIC_AIR1 = row.Field<System.Decimal?>("STATIC_AIR1");
                        result.STATIC_AIR2 = row.Field<System.Decimal?>("STATIC_AIR2");
                        result.STATIC_AIR3 = row.Field<System.Decimal?>("STATIC_AIR3");
                        result.DYNAMIC_AIR1 = row.Field<System.Decimal?>("DYNAMIC_AIR1");
                        result.DYNAMIC_AIR2 = row.Field<System.Decimal?>("DYNAMIC_AIR2");
                        result.DYNAMIC_AIR3 = row.Field<System.Decimal?>("DYNAMIC_AIR3");
                        result.EXPONENT1 = row.Field<System.Decimal?>("EXPONENT1");
                        result.EXPONENT2 = row.Field<System.Decimal?>("EXPONENT2");
                        result.EXPONENT3 = row.Field<System.Decimal?>("EXPONENT3");
                        result.DIMENSCHANGE_W1 = row.Field<System.Decimal?>("DIMENSCHANGE_W1");
                        result.DIMENSCHANGE_W2 = row.Field<System.Decimal?>("DIMENSCHANGE_W2");
                        result.DIMENSCHANGE_W3 = row.Field<System.Decimal?>("DIMENSCHANGE_W3");
                        result.DIMENSCHANGE_F1 = row.Field<System.Decimal?>("DIMENSCHANGE_F1");
                        result.DIMENSCHANGE_F2 = row.Field<System.Decimal?>("DIMENSCHANGE_F2");
                        result.DIMENSCHANGE_F3 = row.Field<System.Decimal?>("DIMENSCHANGE_F3");
                        result.FLEXABRASION_W1 = row.Field<System.Decimal?>("FLEXABRASION_W1");
                        result.FLEXABRASION_W2 = row.Field<System.Decimal?>("FLEXABRASION_W2");
                        result.FLEXABRASION_W3 = row.Field<System.Decimal?>("FLEXABRASION_W3");
                        result.FLEXABRASION_F1 = row.Field<System.Decimal?>("FLEXABRASION_F1");
                        result.FLEXABRASION_F2 = row.Field<System.Decimal?>("FLEXABRASION_F2");
                        result.FLEXABRASION_F3 = row.Field<System.Decimal?>("FLEXABRASION_F3");
                        result.BOW1 = row.Field<System.Decimal?>("BOW1");
                        result.SKEW1 = row.Field<System.Decimal?>("SKEW1");
                        result.STATUS = row.Field<System.String>("STATUS");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.APPROVEBY = row.Field<System.String>("APPROVEBY");
                        result.APPROVEDATE = row.Field<System.DateTime?>("APPROVEDATE");
                        result.CREATEDATE = row.Field<System.DateTime?>("CREATEDATE");
                        result.BOW2 = row.Field<System.Decimal?>("BOW2");
                        result.BOW3 = row.Field<System.Decimal?>("BOW3");
                        result.SKEW2 = row.Field<System.Decimal?>("SKEW2");
                        result.SKEW3 = row.Field<System.Decimal?>("SKEW3");
                        result.BENDING_W1 = row.Field<System.Decimal?>("BENDING_W1");
                        result.BENDING_W2 = row.Field<System.Decimal?>("BENDING_W2");
                        result.BENDING_W3 = row.Field<System.Decimal?>("BENDING_W3");
                        result.BENDING_F1 = row.Field<System.Decimal?>("BENDING_F1");
                        result.BENDING_F2 = row.Field<System.Decimal?>("BENDING_F2");
                        result.BENDING_F3 = row.Field<System.Decimal?>("BENDING_F3");
                        result.FLEX_SCOTT_W1 = row.Field<System.Decimal?>("FLEX_SCOTT_W1");
                        result.FLEX_SCOTT_W2 = row.Field<System.Decimal?>("FLEX_SCOTT_W2");
                        result.FLEX_SCOTT_W3 = row.Field<System.Decimal?>("FLEX_SCOTT_W3");
                        result.FLEX_SCOTT_F1 = row.Field<System.Decimal?>("FLEX_SCOTT_F1");
                        result.FLEX_SCOTT_F2 = row.Field<System.Decimal?>("FLEX_SCOTT_F2");
                        result.FLEX_SCOTT_F3 = row.Field<System.Decimal?>("FLEX_SCOTT_F3");
                        result.STATIC_AIR4 = row.Field<System.Decimal?>("STATIC_AIR4");
                        result.STATIC_AIR5 = row.Field<System.Decimal?>("STATIC_AIR5");
                        result.STATIC_AIR6 = row.Field<System.Decimal?>("STATIC_AIR6");
                        result.FILENAME = row.Field<System.String>("FILENAME");
                        result.UPLOADDATE = row.Field<System.DateTime?>("UPLOADDATE");
                        result.UPLOADBY = row.Field<System.String>("UPLOADBY");
                        result.FLAMMABILITY_W2 = row.Field<System.Decimal?>("FLAMMABILITY_W2");
                        result.FLAMMABILITY_W3 = row.Field<System.Decimal?>("FLAMMABILITY_W3");
                        result.FLAMMABILITY_W4 = row.Field<System.Decimal?>("FLAMMABILITY_W4");
                        result.FLAMMABILITY_W5 = row.Field<System.Decimal?>("FLAMMABILITY_W5");
                        result.FLAMMABILITY_F2 = row.Field<System.Decimal?>("FLAMMABILITY_F2");
                        result.FLAMMABILITY_F3 = row.Field<System.Decimal?>("FLAMMABILITY_F3");
                        result.FLAMMABILITY_F4 = row.Field<System.Decimal?>("FLAMMABILITY_F4");
                        result.FLAMMABILITY_F5 = row.Field<System.Decimal?>("FLAMMABILITY_F5");
                        result.FINISHLENGTH = row.Field<System.Decimal?>("FINISHLENGTH");
                        result.FINISHINGPROCESS = row.Field<System.String>("FINISHINGPROCESS");
                        result.ITEMLOT = row.Field<System.String>("ITEMLOT");
                        result.LOOMNO = row.Field<System.String>("LOOMNO");
                        result.FINISHINGMC = row.Field<System.String>("FINISHINGMC");
                        result.BATCHNO = row.Field<System.String>("BATCHNO");
                        result.CUSTOMERID = row.Field<System.String>("CUSTOMERID");
                        result.PARTNO = row.Field<System.String>("PARTNO");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        //----------------------//

        // New 1/9/22

        #region LAB_SAVEREPLCWEIGHT

        public LAB_SAVEREPLCWEIGHTResult LAB_SAVEREPLCWEIGHT(LAB_SAVEREPLCWEIGHTParameter para)
        {
            LAB_SAVEREPLCWEIGHTResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_PRODUCTIONLOT", 
                "P_TYPE", 
                "P_WEIGHT1", 
                "P_WEIGHT2", 
                "P_WEIGHT3", 
                "P_WEIGHT4", 
                "P_WEIGHT5", 
                "P_WEIGHT6", 
                "P_WEIGHTDATE", 
                "P_WEIGHTBY"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_PRODUCTIONLOT, 
                para.P_TYPE, 
                para.P_WEIGHT1, 
                para.P_WEIGHT2, 
                para.P_WEIGHT3, 
                para.P_WEIGHT4, 
                para.P_WEIGHT5, 
                para.P_WEIGHT6, 
                para.P_WEIGHTDATE, 
                para.P_WEIGHTBY
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_SAVEREPLCWEIGHT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new LAB_SAVEREPLCWEIGHTResult();
                if (ret.Result.OutParameters["P_RETURN"] != DBNull.Value)
                    result.P_RETURN = (System.String)ret.Result.OutParameters["P_RETURN"];
            }

            return result;
        }

        #endregion

        #region LAB_SAVEREPLCSTIFFNESS

        public LAB_SAVEREPLCSTIFFNESSResult LAB_SAVEREPLCSTIFFNESS(LAB_SAVEREPLCSTIFFNESSParameter para)
        {
            LAB_SAVEREPLCSTIFFNESSResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_PRODUCTIONLOT", 
                "P_STIFFNESS_W1", 
                "P_STIFFNESS_W2", 
                "P_STIFFNESS_W3", 
                "P_STIFFNESS_F1", 
                "P_STIFFNESS_F2", 
                "P_STIFFNESS_F3", 
                "P_STIFFNESSDATE", 
                "P_STIFFNESSBY"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_PRODUCTIONLOT, 
                para.P_STIFFNESS_W1, 
                para.P_STIFFNESS_W2, 
                para.P_STIFFNESS_W3, 
                para.P_STIFFNESS_F1, 
                para.P_STIFFNESS_F2, 
                para.P_STIFFNESS_F3, 
                para.P_STIFFNESSDATE, 
                para.P_STIFFNESSBY
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_SAVEREPLCSTIFFNESS",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new LAB_SAVEREPLCSTIFFNESSResult();
                if (ret.Result.OutParameters["P_RETURN"] != DBNull.Value)
                    result.P_RETURN = (System.String)ret.Result.OutParameters["P_RETURN"];
            }

            return result;
        }

        #endregion

        #region LAB_SAVEREPLCSTATICAIR

        public LAB_SAVEREPLCSTATICAIRResult LAB_SAVEREPLCSTATICAIR(LAB_SAVEREPLCSTATICAIRParameter para)
        {
            LAB_SAVEREPLCSTATICAIRResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_PRODUCTIONLOT", 
                "P_STATIC_AIR1", 
                "P_STATIC_AIR2", 
                "P_STATIC_AIR3", 
                "P_STATIC_AIR4", 
                "P_STATIC_AIR5", 
                "P_STATIC_AIR6", 
                "P_STATICAIRDATE", 
                "P_STATICAIRBY"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_PRODUCTIONLOT, 
                para.P_STATIC_AIR1, 
                para.P_STATIC_AIR2, 
                para.P_STATIC_AIR3, 
                para.P_STATIC_AIR4, 
                para.P_STATIC_AIR5, 
                para.P_STATIC_AIR6, 
                para.P_STATICAIRDATE, 
                para.P_STATICAIRBY
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_SAVEREPLCSTATICAIR",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new LAB_SAVEREPLCSTATICAIRResult();
                if (ret.Result.OutParameters["P_RETURN"] != DBNull.Value)
                    result.P_RETURN = (System.String)ret.Result.OutParameters["P_RETURN"];
            }

            return result;
        }

        #endregion

        #region LAB_SAVEREPLCDYNAMICAIR

        public LAB_SAVEREPLCDYNAMICAIRResult LAB_SAVEREPLCDYNAMICAIR(LAB_SAVEREPLCDYNAMICAIRParameter para)
        {
            LAB_SAVEREPLCDYNAMICAIRResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_PRODUCTIONLOT", 
                "P_DYNAMIC_AIR1", 
                "P_DYNAMIC_AIR2", 
                "P_DYNAMIC_AIR3", 
                "P_EXPONENT1", 
                "P_EXPONENT2", 
                "P_EXPONENT3", 
                "P_DYNAMICDATE", 
                "P_DYNAMICBY"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_PRODUCTIONLOT, 
                para.P_DYNAMIC_AIR1, 
                para.P_DYNAMIC_AIR2, 
                para.P_DYNAMIC_AIR3, 
                para.P_EXPONENT1, 
                para.P_EXPONENT2, 
                para.P_EXPONENT3, 
                para.P_DYNAMICDATE, 
                para.P_DYNAMICBY
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_SAVEREPLCDYNAMICAIR",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new LAB_SAVEREPLCDYNAMICAIRResult();
                if (ret.Result.OutParameters["P_RETURN"] != DBNull.Value)
                    result.P_RETURN = (System.String)ret.Result.OutParameters["P_RETURN"];
            }

            return result;
        }

        #endregion

        //----------------------//

        #region LAB_SAVELABRESULT

        public LAB_SAVELABRESULTResult LAB_SAVELABRESULT(LAB_SAVELABRESULTParameter para)
        {
            LAB_SAVELABRESULTResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_INSLOT", 
                "P_RESULT"
            };
            object[] paraValues = new object[]
            {
                para.P_INSLOT, 
                para.P_RESULT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_SAVELABRESULT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new LAB_SAVELABRESULTResult();
            }

            return result;
        }

        #endregion

        #region LAB_SAVELABMASSPRORESULT

        public LAB_SAVELABMASSPRORESULTResult LAB_SAVELABMASSPRORESULT(LAB_SAVELABMASSPRORESULTParameter para)
        {
            LAB_SAVELABMASSPRORESULTResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_WEAVELOT", 
                "P_ITMCODE", 
                "P_FINISHINGLOT", 
                "P_TESTRESULT"
            };
            object[] paraValues = new object[]
            {
                para.P_WEAVELOT, 
                para.P_ITMCODE, 
                para.P_FINISHINGLOT, 
                para.P_TESTRESULT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_SAVELABMASSPRORESULT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new LAB_SAVELABMASSPRORESULTResult();
            }

            return result;
        }

        #endregion

        #region LAB_SAVELABGREIGERESULT

        public LAB_SAVELABGREIGERESULTResult LAB_SAVELABGREIGERESULT(LAB_SAVELABGREIGERESULTParameter para)
        {
            LAB_SAVELABGREIGERESULTResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_BEAMERROLL", 
                "P_LOOM", 
                "P_ITMWEAVE", 
                "P_TESTRESULT", 
                "P_TESTNO"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERROLL, 
                para.P_LOOM, 
                para.P_ITMWEAVE, 
                para.P_TESTRESULT, 
                para.P_TESTNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_SAVELABGREIGERESULT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new LAB_SAVELABGREIGERESULTResult();
            }

            return result;
        }

        #endregion

        //-- Lab --//

        #region LAB_SAVEAPPROVEPRODUCTION

        public LAB_SAVEAPPROVEPRODUCTIONResult LAB_SAVEAPPROVEPRODUCTION(LAB_SAVEAPPROVEPRODUCTIONParameter para)
        {
            LAB_SAVEAPPROVEPRODUCTIONResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_WEAVINGLOG", 
                "P_FINISHINGLOT", 
                "P_ENTRYDATE", 
                "P_WIDTH", 
                "P_USEWIDTH1", 
                "P_USEWIDTH2", 
                "P_USEWIDTH3", 
                "P_WIDTHSILICONE1", 
                "P_WIDTHSILICONE2", 
                "P_WIDTHSILICONE3", 
                "P_NUMTHREADS_W1", 
                "P_NUMTHREADS_W2", 
                "P_NUMTHREADS_W3", 
                "P_NUMTHREADS_F1", 
                "P_NUMTHREADS_F2", 
                "P_NUMTHREADS_F3", 
                "P_TOTALWEIGHT1", 
                "P_TOTALWEIGHT2", 
                "P_TOTALWEIGHT3", 
                "P_TOTALWEIGHT4", 
                "P_TOTALWEIGHT5", 
                "P_TOTALWEIGHT6", 
                "P_UNCOATEDWEIGHT1", 
                "P_UNCOATEDWEIGHT2", 
                "P_UNCOATEDWEIGHT3", 
                "P_UNCOATEDWEIGHT4", 
                "P_UNCOATEDWEIGHT5", 
                "P_UNCOATEDWEIGHT6", 
                "P_COATWEIGHT1", 
                "P_COATWEIGHT2", 
                "P_COATWEIGHT3", 
                "P_COATWEIGHT4", 
                "P_COATWEIGHT5", 
                "P_COATWEIGHT6", 
                "P_THICKNESS1", 
                "P_THICKNESS2", 
                "P_THICKNESS3", 
                "P_MAXFORCE_W1", 
                "P_MAXFORCE_W2", 
                "P_MAXFORCE_W3", 
                "P_MAXFORCE_W4", 
                "P_MAXFORCE_W5", 
                "P_MAXFORCE_W6", 
                "P_MAXFORCE_F1", 
                "P_MAXFORCE_F2", 
                "P_MAXFORCE_F3", 
                "P_MAXFORCE_F4", 
                "P_MAXFORCE_F5", 
                "P_MAXFORCE_F6", 
                "P_ELOGATION_W1", 
                "P_ELOGATION_W2", 
                "P_ELOGATION_W3", 
                "P_ELOGATION_W4", 
                "P_ELOGATION_W5", 
                "P_ELOGATION_W6", 
                "P_ELOGATION_F1", 
                "P_ELOGATION_F2", 
                "P_ELOGATION_F3", 
                "P_ELOGATION_F4", 
                "P_ELOGATION_F5", 
                "P_ELOGATION_F6", 
                "P_FLAMMABILITY_W", 
                "P_FLAMMABILITY_W2", 
                "P_FLAMMABILITY_W3", 
                "P_FLAMMABILITY_W4", 
                "P_FLAMMABILITY_W5", 
                "P_FLAMMABILITY_F", 
                "P_FLAMMABILITY_F2", 
                "P_FLAMMABILITY_F3", 
                "P_FLAMMABILITY_F4", 
                "P_FLAMMABILITY_F5", 
                "P_EDGECOMB_W1", 
                "P_EDGECOMB_W2", 
                "P_EDGECOMB_W3", 
                "P_EDGECOMB_F1", 
                "P_EDGECOMB_F2", 
                "P_EDGECOMB_F3", 
                "P_STIFFNESS_W1", 
                "P_STIFFNESS_W2", 
                "P_STIFFNESS_W3", 
                "P_STIFFNESS_F1", 
                "P_STIFFNESS_F2", 
                "P_STIFFNESS_F3", 
                "P_TEAR_W1", 
                "P_TEAR_W2", 
                "P_TEAR_W3", 
                "P_TEAR_F1", 
                "P_TEAR_F2", 
                "P_TEAR_F3", 
                "P_STATIC_AIR1", 
                "P_STATIC_AIR2", 
                "P_STATIC_AIR3", 
                "P_STATIC_AIR4", 
                "P_STATIC_AIR5", 
                "P_STATIC_AIR6", 
                "P_DYNAMIC_AIR1", 
                "P_DYNAMIC_AIR2", 
                "P_DYNAMIC_AIR3", 
                "P_EXPONENT1", 
                "P_EXPONENT2", 
                "P_EXPONENT3", 
                "P_DIMENSCHANGE_W1", 
                "P_DIMENSCHANGE_W2", 
                "P_DIMENSCHANGE_W3", 
                "P_DIMENSCHANGE_F1", 
                "P_DIMENSCHANGE_F2", 
                "P_DIMENSCHANGE_F3", 
                "P_FLEXABRASION_W1", 
                "P_FLEXABRASION_W2", 
                "P_FLEXABRASION_W3", 
                "P_FLEXABRASION_F1", 
                "P_FLEXABRASION_F2", 
                "P_FLEXABRASION_F3", 
                "P_BOW1", 
                "P_BOW2", 
                "P_BOW3", 
                "P_SKEW1", 
                "P_SKEW2", 
                "P_SKEW3", 
                "P_BENDING_W1", 
                "P_BENDING_W2", 
                "P_BENDING_W3", 
                "P_BENDING_F1", 
                "P_BENDING_F2", 
                "P_BENDING_F3", 
                "P_FLEX_SCOTT_W1", 
                "P_FLEX_SCOTT_W2", 
                "P_FLEX_SCOTT_W3", 
                "P_FLEX_SCOTT_F1", 
                "P_FLEX_SCOTT_F2", 
                "P_FLEX_SCOTT_F3", 
                "P_STATUS", 
                "P_REMARK", 
                "P_APPROVEBY", 
                "P_APPROVEDATE"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_WEAVINGLOG, 
                para.P_FINISHINGLOT, 
                para.P_ENTRYDATE, 
                para.P_WIDTH, 
                para.P_USEWIDTH1, 
                para.P_USEWIDTH2, 
                para.P_USEWIDTH3, 
                para.P_WIDTHSILICONE1, 
                para.P_WIDTHSILICONE2, 
                para.P_WIDTHSILICONE3, 
                para.P_NUMTHREADS_W1, 
                para.P_NUMTHREADS_W2, 
                para.P_NUMTHREADS_W3, 
                para.P_NUMTHREADS_F1, 
                para.P_NUMTHREADS_F2, 
                para.P_NUMTHREADS_F3, 
                para.P_TOTALWEIGHT1, 
                para.P_TOTALWEIGHT2, 
                para.P_TOTALWEIGHT3, 
                para.P_TOTALWEIGHT4, 
                para.P_TOTALWEIGHT5, 
                para.P_TOTALWEIGHT6, 
                para.P_UNCOATEDWEIGHT1, 
                para.P_UNCOATEDWEIGHT2, 
                para.P_UNCOATEDWEIGHT3, 
                para.P_UNCOATEDWEIGHT4, 
                para.P_UNCOATEDWEIGHT5, 
                para.P_UNCOATEDWEIGHT6, 
                para.P_COATWEIGHT1, 
                para.P_COATWEIGHT2, 
                para.P_COATWEIGHT3, 
                para.P_COATWEIGHT4, 
                para.P_COATWEIGHT5, 
                para.P_COATWEIGHT6, 
                para.P_THICKNESS1, 
                para.P_THICKNESS2, 
                para.P_THICKNESS3, 
                para.P_MAXFORCE_W1, 
                para.P_MAXFORCE_W2, 
                para.P_MAXFORCE_W3, 
                para.P_MAXFORCE_W4, 
                para.P_MAXFORCE_W5, 
                para.P_MAXFORCE_W6, 
                para.P_MAXFORCE_F1, 
                para.P_MAXFORCE_F2, 
                para.P_MAXFORCE_F3, 
                para.P_MAXFORCE_F4, 
                para.P_MAXFORCE_F5, 
                para.P_MAXFORCE_F6, 
                para.P_ELOGATION_W1, 
                para.P_ELOGATION_W2, 
                para.P_ELOGATION_W3, 
                para.P_ELOGATION_W4, 
                para.P_ELOGATION_W5, 
                para.P_ELOGATION_W6, 
                para.P_ELOGATION_F1, 
                para.P_ELOGATION_F2, 
                para.P_ELOGATION_F3, 
                para.P_ELOGATION_F4, 
                para.P_ELOGATION_F5, 
                para.P_ELOGATION_F6, 
                para.P_FLAMMABILITY_W, 
                para.P_FLAMMABILITY_W2, 
                para.P_FLAMMABILITY_W3, 
                para.P_FLAMMABILITY_W4, 
                para.P_FLAMMABILITY_W5, 
                para.P_FLAMMABILITY_F, 
                para.P_FLAMMABILITY_F2, 
                para.P_FLAMMABILITY_F3, 
                para.P_FLAMMABILITY_F4, 
                para.P_FLAMMABILITY_F5, 
                para.P_EDGECOMB_W1, 
                para.P_EDGECOMB_W2, 
                para.P_EDGECOMB_W3, 
                para.P_EDGECOMB_F1, 
                para.P_EDGECOMB_F2, 
                para.P_EDGECOMB_F3, 
                para.P_STIFFNESS_W1, 
                para.P_STIFFNESS_W2, 
                para.P_STIFFNESS_W3, 
                para.P_STIFFNESS_F1, 
                para.P_STIFFNESS_F2, 
                para.P_STIFFNESS_F3, 
                para.P_TEAR_W1, 
                para.P_TEAR_W2, 
                para.P_TEAR_W3, 
                para.P_TEAR_F1, 
                para.P_TEAR_F2, 
                para.P_TEAR_F3, 
                para.P_STATIC_AIR1, 
                para.P_STATIC_AIR2, 
                para.P_STATIC_AIR3, 
                para.P_STATIC_AIR4, 
                para.P_STATIC_AIR5, 
                para.P_STATIC_AIR6, 
                para.P_DYNAMIC_AIR1, 
                para.P_DYNAMIC_AIR2, 
                para.P_DYNAMIC_AIR3, 
                para.P_EXPONENT1, 
                para.P_EXPONENT2, 
                para.P_EXPONENT3, 
                para.P_DIMENSCHANGE_W1, 
                para.P_DIMENSCHANGE_W2, 
                para.P_DIMENSCHANGE_W3, 
                para.P_DIMENSCHANGE_F1, 
                para.P_DIMENSCHANGE_F2, 
                para.P_DIMENSCHANGE_F3, 
                para.P_FLEXABRASION_W1, 
                para.P_FLEXABRASION_W2, 
                para.P_FLEXABRASION_W3, 
                para.P_FLEXABRASION_F1, 
                para.P_FLEXABRASION_F2, 
                para.P_FLEXABRASION_F3, 
                para.P_BOW1, 
                para.P_BOW2, 
                para.P_BOW3, 
                para.P_SKEW1, 
                para.P_SKEW2, 
                para.P_SKEW3, 
                para.P_BENDING_W1, 
                para.P_BENDING_W2, 
                para.P_BENDING_W3, 
                para.P_BENDING_F1, 
                para.P_BENDING_F2, 
                para.P_BENDING_F3, 
                para.P_FLEX_SCOTT_W1, 
                para.P_FLEX_SCOTT_W2, 
                para.P_FLEX_SCOTT_W3, 
                para.P_FLEX_SCOTT_F1, 
                para.P_FLEX_SCOTT_F2, 
                para.P_FLEX_SCOTT_F3, 
                para.P_STATUS, 
                para.P_REMARK, 
                para.P_APPROVEBY, 
                para.P_APPROVEDATE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_SAVEAPPROVEPRODUCTION",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new LAB_SAVEAPPROVEPRODUCTIONResult();
                if (ret.Result.OutParameters["P_RETURN"] != DBNull.Value)
                    result.P_RETURN = (System.String)ret.Result.OutParameters["P_RETURN"];
            }

            return result;
        }

        #endregion

        //--------//

        #region LAB_RETESTRECORD_INSERTUPDATE

        public LAB_RETESTRECORD_INSERTUPDATEResult LAB_RETESTRECORD_INSERTUPDATE(LAB_RETESTRECORD_INSERTUPDATEParameter para)
        {
            LAB_RETESTRECORD_INSERTUPDATEResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITM_CODE", 
                "P_WEAVINGLOT", 
                "P_FINISHINGLOT", 
                "P_PROPERTY", 
                "P_YARNTYPE", 
                "P_TESTNO", 
                "P_N1", 
                "P_N2", 
                "P_N3", 
                "P_N4", 
                "P_N5", 
                "P_OPERATORID"
            };
            object[] paraValues = new object[]
            {
                para.P_ITM_CODE, 
                para.P_WEAVINGLOT, 
                para.P_FINISHINGLOT, 
                para.P_PROPERTY, 
                para.P_YARNTYPE, 
                para.P_TESTNO, 
                para.P_N1, 
                para.P_N2, 
                para.P_N3, 
                para.P_N4, 
                para.P_N5, 
                para.P_OPERATORID
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_RETESTRECORD_INSERTUPDATE",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new LAB_RETESTRECORD_INSERTUPDATEResult();
                if (ret.Result.OutParameters["R_RESULT"] != DBNull.Value)
                    result.R_RESULT = (System.String)ret.Result.OutParameters["R_RESULT"];
            }

            return result;
        }

        #endregion

        #region LAB_MASSPROSTOCKSTATUS

        public List<LAB_MASSPROSTOCKSTATUSResult> LAB_MASSPROSTOCKSTATUS(LAB_MASSPROSTOCKSTATUSParameter para)
        {
            List<LAB_MASSPROSTOCKSTATUSResult> results = new List<LAB_MASSPROSTOCKSTATUSResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WEAVELOT", 
                "P_RECEIVEDATE"
            };
            object[] paraValues = new object[]
            {
                para.P_WEAVELOT, 
                para.P_RECEIVEDATE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_MASSPROSTOCKSTATUS",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        LAB_MASSPROSTOCKSTATUSResult result =
                            new LAB_MASSPROSTOCKSTATUSResult();

                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.RECEIVEDATE = row.Field<System.DateTime?>("RECEIVEDATE");
                        result.RECEIVEBY = row.Field<System.String>("RECEIVEBY");
                        result.STATUS = row.Field<System.String>("STATUS");
                        result.CONDITIONINGTIME = row.Field<System.String>("CONDITIONINGTIME");
                        result.TESTDATE = row.Field<System.DateTime?>("TESTDATE");
                        result.TESTRESULT = row.Field<System.String>("TESTRESULT");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.TESTBY = row.Field<System.String>("TESTBY");
                        result.APPROVESTATUS = row.Field<System.String>("APPROVESTATUS");
                        result.APPROVEBY = row.Field<System.String>("APPROVEBY");
                        result.SENDDATE = row.Field<System.DateTime?>("SENDDATE");
                        result.APPROVEDATE = row.Field<System.DateTime?>("APPROVEDATE");
                        result.LABFORM = row.Field<System.String>("LABFORM");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        //-- Lab --//

        #region LAB_INSERTUPDATETENSILE

        public LAB_INSERTUPDATETENSILEResult LAB_INSERTUPDATETENSILE(LAB_INSERTUPDATETENSILEParameter para)
        {
            LAB_INSERTUPDATETENSILEResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_WEAVINGLOG", 
                "P_FINISHINGLOT", 
                "P_OPERATOR", 
                "P_TESTDATE", 
                "P_TESTTIME", 
                "P_YARN", 
                "P_TENSILE1", 
                "P_TENSILE2", 
                "P_TENSILE3", 
                "P_ELONG1", 
                "P_ELONG2", 
                "P_ELONG3", 
                "P_UPLOADDATE", 
                "P_UPLOADBY"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_WEAVINGLOG, 
                para.P_FINISHINGLOT, 
                para.P_OPERATOR, 
                para.P_TESTDATE, 
                para.P_TESTTIME, 
                para.P_YARN, 
                para.P_TENSILE1, 
                para.P_TENSILE2, 
                para.P_TENSILE3, 
                para.P_ELONG1, 
                para.P_ELONG2, 
                para.P_ELONG3, 
                para.P_UPLOADDATE, 
                para.P_UPLOADBY
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_INSERTUPDATETENSILE",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new LAB_INSERTUPDATETENSILEResult();
                if (ret.Result.OutParameters["P_RETURN"] != DBNull.Value)
                    result.P_RETURN = (System.String)ret.Result.OutParameters["P_RETURN"];
            }

            return result;
        }

        #endregion

        #region LAB_INSERTUPDATETEAR

        public LAB_INSERTUPDATETEARResult LAB_INSERTUPDATETEAR(LAB_INSERTUPDATETEARParameter para)
        {
            LAB_INSERTUPDATETEARResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_WEAVINGLOG", 
                "P_FINISHINGLOT", 
                "P_OPERATOR", 
                "P_YARN", 
                "P_TEAR1", 
                "P_TEAR2", 
                "P_TEAR3", 
                "P_UPLOADDATE", 
                "P_UPLOADBY"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_WEAVINGLOG, 
                para.P_FINISHINGLOT, 
                para.P_OPERATOR, 
                para.P_YARN, 
                para.P_TEAR1, 
                para.P_TEAR2, 
                para.P_TEAR3, 
                para.P_UPLOADDATE, 
                para.P_UPLOADBY
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_INSERTUPDATETEAR",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new LAB_INSERTUPDATETEARResult();
                if (ret.Result.OutParameters["P_RETURN"] != DBNull.Value)
                    result.P_RETURN = (System.String)ret.Result.OutParameters["P_RETURN"];
            }

            return result;
        }

        #endregion

        #region LAB_INSERTUPDATEREPORTINFO

        public LAB_INSERTUPDATEREPORTINFOResult LAB_INSERTUPDATEREPORTINFO(LAB_INSERTUPDATEREPORTINFOParameter para)
        {
            LAB_INSERTUPDATEREPORTINFOResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_CUSTOMERID", 
                "P_REPORTID", 
                "P_REVERSION", 
                "P_YARNTYPE", 
                "P_WEIGHT", 
                "P_COATWEIGHT", 
                "P_NUMTHREADS", 
                "P_USEWIDTH", 
                "P_THICKNESS", 
                "P_MAXFORCE", 
                "P_ELOGATION", 
                "P_FLAMMABILITY", 
                "P_EDGECOMB", 
                "P_STIFFNESS", 
                "P_TEAR", 
                "P_STATIC_AIR", 
                "P_DYNAMIC_AIR", 
                "P_EXPONENT", 
                "P_DIMENSCHANGE", 
                "P_FLEXABRASION", 
                "P_FLEX_SCOTT", 
                "P_BOW", 
                "P_SKEW", 
                "P_BENDING"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_CUSTOMERID, 
                para.P_REPORTID, 
                para.P_REVERSION, 
                para.P_YARNTYPE, 
                para.P_WEIGHT, 
                para.P_COATWEIGHT, 
                para.P_NUMTHREADS, 
                para.P_USEWIDTH, 
                para.P_THICKNESS, 
                para.P_MAXFORCE, 
                para.P_ELOGATION, 
                para.P_FLAMMABILITY, 
                para.P_EDGECOMB, 
                para.P_STIFFNESS, 
                para.P_TEAR, 
                para.P_STATIC_AIR, 
                para.P_DYNAMIC_AIR, 
                para.P_EXPONENT, 
                para.P_DIMENSCHANGE, 
                para.P_FLEXABRASION, 
                para.P_FLEX_SCOTT, 
                para.P_BOW, 
                para.P_SKEW, 
                para.P_BENDING
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_INSERTUPDATEREPORTINFO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new LAB_INSERTUPDATEREPORTINFOResult();
                if (ret.Result.OutParameters["P_RETURN"] != DBNull.Value)
                    result.P_RETURN = (System.String)ret.Result.OutParameters["P_RETURN"];
            }

            return result;
        }

        #endregion

        #region LAB_INSERTUPDATEITEMSPEC

        public LAB_INSERTUPDATEITEMSPECResult LAB_INSERTUPDATEITEMSPEC(LAB_INSERTUPDATEITEMSPECParameter para)
        {
            LAB_INSERTUPDATEITEMSPECResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_WIDTH_NO", 
                "P_WIDTH", 
                "P_USEWIDTH_NO", 
                "P_USEWIDTH", 
                "P_USEWIDTH_TOR", 
                "P_WIDTHSILICONE_NO", 
                "P_WIDTHSILICONE", 
                "P_WIDTHSILICONE_TOR", 
                "P_NUMTHREADS_W_NO", 
                "P_NUMTHREADS_W", 
                "P_NUMTHREADS_W_TOR", 
                "P_NUMTHREADS_F_NO", 
                "P_NUMTHREADS_F", 
                "P_NUMTHREADS_F_TOR", 
                "P_TOTALWEIGHT_NO", 
                "P_TOTALWEIGHT", 
                "P_TOTALWEIGHT_TOR", 
                "P_UNCOATEDWEIGHT_NO", 
                "P_UNCOATEDWEIGHT", 
                "P_UNCOATEDWEIGHT_TOR", 
                "P_COATWEIGHT_NO", 
                "P_COATWEIGHT", 
                "P_COATWEIGHT_TOR", 
                "P_THICKNESS_NO", 
                "P_THICKNESS", 
                "P_THICKNESS_TOR", 
                "P_MAXFORCE_W_NO", 
                "P_MAXFORCE_W", 
                "P_MAXFORCE_W_TOR", 
                "P_MAXFORCE_F_NO", 
                "P_MAXFORCE_F", 
                "P_MAXFORCE_F_TOR", 
                "P_ELOGATION_W_NO", 
                "P_ELOGATION_W", 
                "P_ELOGATION_W_TOR", 
                "P_ELOGATION_F_NO", 
                "P_ELOGATION_F", 
                "P_ELOGATION_F_TOR", 
                "P_FLAMMABILITY_W_NO", 
                "P_FLAMMABILITY_W", 
                "P_FLAMMABILITY_W_TOR", 
                "P_FLAMMABILITY_F_NO", 
                "P_FLAMMABILITY_F", 
                "P_FLAMMABILITY_F_TOR", 
                "P_EDGECOMB_W_NO", 
                "P_EDGECOMB_W", 
                "P_EDGECOMB_W_TOR", 
                "P_EDGECOMB_F_NO", 
                "P_EDGECOMB_F", 
                "P_EDGECOMB_F_TOR", 
                "P_STIFFNESS_W_NO", 
                "P_STIFFNESS_W", 
                "P_STIFFNESS_W_TOR", 
                "P_STIFFNESS_F_NO", 
                "P_STIFFNESS_F", 
                "P_STIFFNESS_F_TOR", 
                "P_TEAR_W_NO", 
                "P_TEAR_W", 
                "P_TEAR_W_TOR", 
                "P_TEAR_F_NO", 
                "P_TEAR_F", 
                "P_TEAR_F_TOR", 
                "P_STATIC_AIR_NO", 
                "P_STATIC_AIR", 
                "P_STATIC_AIR_TOR", 
                "P_DYNAMIC_AIR_NO", 
                "P_DYNAMIC_AIR", 
                "P_DYNAMIC_AIR_TOR", 
                "P_EXPONENT_NO", 
                "P_EXPONENT", 
                "P_EXPONENT_TOR", 
                "P_DIMENSCHANGE_W_NO", 
                "P_DIMENSCHANGE_W", 
                "P_DIMENSCHANGE_W_TOR", 
                "P_DIMENSCHANGE_F_NO", 
                "P_DIMENSCHANGE_F", 
                "P_DIMENSCHANGE_F_TOR", 
                "P_FLEXABRASION_W_NO", 
                "P_FLEXABRASION_W", 
                "P_FLEXABRASION_W_TOR", 
                "P_FLEXABRASION_F_NO", 
                "P_FLEXABRASION_F", 
                "P_FLEXABRASION_F_TOR", 
                "P_BOW_NO", 
                "P_BOW", 
                "P_BOW_TOR", 
                "P_SKEW_NO", 
                "P_SKEW", 
                "P_SKEW_TOR", 
                "P_BENDING_W_NO", 
                "P_BENDING_W", 
                "P_BENDING_W_TOR", 
                "P_BENDING_F_NO", 
                "P_BENDING_F", 
                "P_BENDING_F_TOR", 
                "P_FLEX_SCOTT_W_NO", 
                "P_FLEX_SCOTT_W", 
                "P_FLEX_SCOTT_W_TOR", 
                "P_FLEX_SCOTT_F_NO", 
                "P_FLEX_SCOTT_F", 
                "P_FLEX_SCOTT_F_TOR"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_WIDTH_NO, 
                para.P_WIDTH, 
                para.P_USEWIDTH_NO, 
                para.P_USEWIDTH, 
                para.P_USEWIDTH_TOR, 
                para.P_WIDTHSILICONE_NO, 
                para.P_WIDTHSILICONE, 
                para.P_WIDTHSILICONE_TOR, 
                para.P_NUMTHREADS_W_NO, 
                para.P_NUMTHREADS_W, 
                para.P_NUMTHREADS_W_TOR, 
                para.P_NUMTHREADS_F_NO, 
                para.P_NUMTHREADS_F, 
                para.P_NUMTHREADS_F_TOR, 
                para.P_TOTALWEIGHT_NO, 
                para.P_TOTALWEIGHT, 
                para.P_TOTALWEIGHT_TOR, 
                para.P_UNCOATEDWEIGHT_NO, 
                para.P_UNCOATEDWEIGHT, 
                para.P_UNCOATEDWEIGHT_TOR, 
                para.P_COATWEIGHT_NO, 
                para.P_COATWEIGHT, 
                para.P_COATWEIGHT_TOR, 
                para.P_THICKNESS_NO, 
                para.P_THICKNESS, 
                para.P_THICKNESS_TOR, 
                para.P_MAXFORCE_W_NO, 
                para.P_MAXFORCE_W, 
                para.P_MAXFORCE_W_TOR, 
                para.P_MAXFORCE_F_NO, 
                para.P_MAXFORCE_F, 
                para.P_MAXFORCE_F_TOR, 
                para.P_ELOGATION_W_NO, 
                para.P_ELOGATION_W, 
                para.P_ELOGATION_W_TOR, 
                para.P_ELOGATION_F_NO, 
                para.P_ELOGATION_F, 
                para.P_ELOGATION_F_TOR, 
                para.P_FLAMMABILITY_W_NO, 
                para.P_FLAMMABILITY_W, 
                para.P_FLAMMABILITY_W_TOR, 
                para.P_FLAMMABILITY_F_NO, 
                para.P_FLAMMABILITY_F, 
                para.P_FLAMMABILITY_F_TOR, 
                para.P_EDGECOMB_W_NO, 
                para.P_EDGECOMB_W, 
                para.P_EDGECOMB_W_TOR, 
                para.P_EDGECOMB_F_NO, 
                para.P_EDGECOMB_F, 
                para.P_EDGECOMB_F_TOR, 
                para.P_STIFFNESS_W_NO, 
                para.P_STIFFNESS_W, 
                para.P_STIFFNESS_W_TOR, 
                para.P_STIFFNESS_F_NO, 
                para.P_STIFFNESS_F, 
                para.P_STIFFNESS_F_TOR, 
                para.P_TEAR_W_NO, 
                para.P_TEAR_W, 
                para.P_TEAR_W_TOR, 
                para.P_TEAR_F_NO, 
                para.P_TEAR_F, 
                para.P_TEAR_F_TOR, 
                para.P_STATIC_AIR_NO, 
                para.P_STATIC_AIR, 
                para.P_STATIC_AIR_TOR, 
                para.P_DYNAMIC_AIR_NO, 
                para.P_DYNAMIC_AIR, 
                para.P_DYNAMIC_AIR_TOR, 
                para.P_EXPONENT_NO, 
                para.P_EXPONENT, 
                para.P_EXPONENT_TOR, 
                para.P_DIMENSCHANGE_W_NO, 
                para.P_DIMENSCHANGE_W, 
                para.P_DIMENSCHANGE_W_TOR, 
                para.P_DIMENSCHANGE_F_NO, 
                para.P_DIMENSCHANGE_F, 
                para.P_DIMENSCHANGE_F_TOR, 
                para.P_FLEXABRASION_W_NO, 
                para.P_FLEXABRASION_W, 
                para.P_FLEXABRASION_W_TOR, 
                para.P_FLEXABRASION_F_NO, 
                para.P_FLEXABRASION_F, 
                para.P_FLEXABRASION_F_TOR, 
                para.P_BOW_NO, 
                para.P_BOW, 
                para.P_BOW_TOR, 
                para.P_SKEW_NO, 
                para.P_SKEW, 
                para.P_SKEW_TOR, 
                para.P_BENDING_W_NO, 
                para.P_BENDING_W, 
                para.P_BENDING_W_TOR, 
                para.P_BENDING_F_NO, 
                para.P_BENDING_F, 
                para.P_BENDING_F_TOR, 
                para.P_FLEX_SCOTT_W_NO, 
                para.P_FLEX_SCOTT_W, 
                para.P_FLEX_SCOTT_W_TOR, 
                para.P_FLEX_SCOTT_F_NO, 
                para.P_FLEX_SCOTT_F, 
                para.P_FLEX_SCOTT_F_TOR
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_INSERTUPDATEITEMSPEC",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new LAB_INSERTUPDATEITEMSPECResult();
                if (ret.Result.OutParameters["P_RETURN"] != DBNull.Value)
                    result.P_RETURN = (System.String)ret.Result.OutParameters["P_RETURN"];
            }

            return result;
        }

        #endregion

        #region LAB_INSERTUPDATEEDGECOMB

        public LAB_INSERTUPDATEEDGECOMBResult LAB_INSERTUPDATEEDGECOMB(LAB_INSERTUPDATEEDGECOMBParameter para)
        {
            LAB_INSERTUPDATEEDGECOMBResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_WEAVINGLOG", 
                "P_FINISHINGLOT", 
                "P_OPERATOR", 
                "P_TESTDATE", 
                "P_TESTTIME", 
                "P_YARN", 
                "P_EDGECOMB1", 
                "P_EDGECOMB2", 
                "P_EDGECOMB3", 
                "P_UPLOADDATE", 
                "P_UPLOADBY"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_WEAVINGLOG, 
                para.P_FINISHINGLOT, 
                para.P_OPERATOR, 
                para.P_TESTDATE, 
                para.P_TESTTIME, 
                para.P_YARN, 
                para.P_EDGECOMB1, 
                para.P_EDGECOMB2, 
                para.P_EDGECOMB3, 
                para.P_UPLOADDATE, 
                para.P_UPLOADBY
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_INSERTUPDATEEDGECOMB",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new LAB_INSERTUPDATEEDGECOMBResult();
                if (ret.Result.OutParameters["P_RETURN"] != DBNull.Value)
                    result.P_RETURN = (System.String)ret.Result.OutParameters["P_RETURN"];
            }

            return result;
        }

        #endregion

        #region LAB_INSERTPRODUCTION

        public LAB_INSERTPRODUCTIONResult LAB_INSERTPRODUCTION(LAB_INSERTPRODUCTIONParameter para)
        {
            LAB_INSERTPRODUCTIONResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_WEAVINGLOG", 
                "P_FINISHINGLOT", 
                "P_ENTRYDATE", 
                "P_ENTRYBY", 
                "P_WIDTH", 
                "P_USEWIDTH1", 
                "P_USEWIDTH2", 
                "P_USEWIDTH3", 
                "P_WIDTHSILICONE1", 
                "P_WIDTHSILICONE2", 
                "P_WIDTHSILICONE3", 
                "P_NUMTHREADS_W1", 
                "P_NUMTHREADS_W2", 
                "P_NUMTHREADS_W3", 
                "P_NUMTHREADS_F1", 
                "P_NUMTHREADS_F2", 
                "P_NUMTHREADS_F3", 
                "P_TOTALWEIGHT1", 
                "P_TOTALWEIGHT2", 
                "P_TOTALWEIGHT3", 
                "P_TOTALWEIGHT4", 
                "P_TOTALWEIGHT5", 
                "P_TOTALWEIGHT6", 
                "P_UNCOATEDWEIGHT1", 
                "P_UNCOATEDWEIGHT2", 
                "P_UNCOATEDWEIGHT3", 
                "P_UNCOATEDWEIGHT4", 
                "P_UNCOATEDWEIGHT5", 
                "P_UNCOATEDWEIGHT6", 
                "P_COATWEIGHT1", 
                "P_COATWEIGHT2", 
                "P_COATWEIGHT3", 
                "P_COATWEIGHT4", 
                "P_COATWEIGHT5", 
                "P_COATWEIGHT6", 
                "P_THICKNESS1", 
                "P_THICKNESS2", 
                "P_THICKNESS3", 
                "P_MAXFORCE_W1", 
                "P_MAXFORCE_W2", 
                "P_MAXFORCE_W3", 
                "P_MAXFORCE_W4", 
                "P_MAXFORCE_W5", 
                "P_MAXFORCE_W6", 
                "P_MAXFORCE_F1", 
                "P_MAXFORCE_F2", 
                "P_MAXFORCE_F3", 
                "P_MAXFORCE_F4", 
                "P_MAXFORCE_F5", 
                "P_MAXFORCE_F6", 
                "P_ELOGATION_W1", 
                "P_ELOGATION_W2", 
                "P_ELOGATION_W3", 
                "P_ELOGATION_W4", 
                "P_ELOGATION_W5", 
                "P_ELOGATION_W6", 
                "P_ELOGATION_F1", 
                "P_ELOGATION_F2", 
                "P_ELOGATION_F3", 
                "P_ELOGATION_F4", 
                "P_ELOGATION_F5", 
                "P_ELOGATION_F6", 
                "P_FLAMMABILITY_W", 
                "P_FLAMMABILITY_W2", 
                "P_FLAMMABILITY_W3", 
                "P_FLAMMABILITY_W4", 
                "P_FLAMMABILITY_W5", 
                "P_FLAMMABILITY_F", 
                "P_FLAMMABILITY_F2", 
                "P_FLAMMABILITY_F3", 
                "P_FLAMMABILITY_F4", 
                "P_FLAMMABILITY_F5", 
                "P_EDGECOMB_W1", 
                "P_EDGECOMB_W2", 
                "P_EDGECOMB_W3", 
                "P_EDGECOMB_F1", 
                "P_EDGECOMB_F2", 
                "P_EDGECOMB_F3", 
                "P_STIFFNESS_W1", 
                "P_STIFFNESS_W2", 
                "P_STIFFNESS_W3", 
                "P_STIFFNESS_F1", 
                "P_STIFFNESS_F2", 
                "P_STIFFNESS_F3", 
                "P_TEAR_W1", 
                "P_TEAR_W2", 
                "P_TEAR_W3", 
                "P_TEAR_F1", 
                "P_TEAR_F2", 
                "P_TEAR_F3", 
                "P_STATIC_AIR1", 
                "P_STATIC_AIR2", 
                "P_STATIC_AIR3", 
                "P_STATIC_AIR4", 
                "P_STATIC_AIR5", 
                "P_STATIC_AIR6", 
                "P_DYNAMIC_AIR1", 
                "P_DYNAMIC_AIR2", 
                "P_DYNAMIC_AIR3", 
                "P_EXPONENT1", 
                "P_EXPONENT2", 
                "P_EXPONENT3", 
                "P_DIMENSCHANGE_W1", 
                "P_DIMENSCHANGE_W2", 
                "P_DIMENSCHANGE_W3", 
                "P_DIMENSCHANGE_F1", 
                "P_DIMENSCHANGE_F2", 
                "P_DIMENSCHANGE_F3", 
                "P_FLEXABRASION_W1", 
                "P_FLEXABRASION_W2", 
                "P_FLEXABRASION_W3", 
                "P_FLEXABRASION_F1", 
                "P_FLEXABRASION_F2", 
                "P_FLEXABRASION_F3", 
                "P_BOW1", 
                "P_BOW2", 
                "P_BOW3", 
                "P_SKEW1", 
                "P_SKEW2", 
                "P_SKEW3", 
                "P_BENDING_W1", 
                "P_BENDING_W2", 
                "P_BENDING_W3", 
                "P_BENDING_F1", 
                "P_BENDING_F2", 
                "P_BENDING_F3", 
                "P_FLEX_SCOTT_W1", 
                "P_FLEX_SCOTT_W2", 
                "P_FLEX_SCOTT_W3", 
                "P_FLEX_SCOTT_F1", 
                "P_FLEX_SCOTT_F2", 
                "P_FLEX_SCOTT_F3", 
                "P_STATUS", 
                "P_REMARK", 
                "P_APPROVEBY", 
                "P_APPROVEDATE"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_WEAVINGLOG, 
                para.P_FINISHINGLOT, 
                para.P_ENTRYDATE, 
                para.P_ENTRYBY, 
                para.P_WIDTH, 
                para.P_USEWIDTH1, 
                para.P_USEWIDTH2, 
                para.P_USEWIDTH3, 
                para.P_WIDTHSILICONE1, 
                para.P_WIDTHSILICONE2, 
                para.P_WIDTHSILICONE3, 
                para.P_NUMTHREADS_W1, 
                para.P_NUMTHREADS_W2, 
                para.P_NUMTHREADS_W3, 
                para.P_NUMTHREADS_F1, 
                para.P_NUMTHREADS_F2, 
                para.P_NUMTHREADS_F3, 
                para.P_TOTALWEIGHT1, 
                para.P_TOTALWEIGHT2, 
                para.P_TOTALWEIGHT3, 
                para.P_TOTALWEIGHT4, 
                para.P_TOTALWEIGHT5, 
                para.P_TOTALWEIGHT6, 
                para.P_UNCOATEDWEIGHT1, 
                para.P_UNCOATEDWEIGHT2, 
                para.P_UNCOATEDWEIGHT3, 
                para.P_UNCOATEDWEIGHT4, 
                para.P_UNCOATEDWEIGHT5, 
                para.P_UNCOATEDWEIGHT6, 
                para.P_COATWEIGHT1, 
                para.P_COATWEIGHT2, 
                para.P_COATWEIGHT3, 
                para.P_COATWEIGHT4, 
                para.P_COATWEIGHT5, 
                para.P_COATWEIGHT6, 
                para.P_THICKNESS1, 
                para.P_THICKNESS2, 
                para.P_THICKNESS3, 
                para.P_MAXFORCE_W1, 
                para.P_MAXFORCE_W2, 
                para.P_MAXFORCE_W3, 
                para.P_MAXFORCE_W4, 
                para.P_MAXFORCE_W5, 
                para.P_MAXFORCE_W6, 
                para.P_MAXFORCE_F1, 
                para.P_MAXFORCE_F2, 
                para.P_MAXFORCE_F3, 
                para.P_MAXFORCE_F4, 
                para.P_MAXFORCE_F5, 
                para.P_MAXFORCE_F6, 
                para.P_ELOGATION_W1, 
                para.P_ELOGATION_W2, 
                para.P_ELOGATION_W3, 
                para.P_ELOGATION_W4, 
                para.P_ELOGATION_W5, 
                para.P_ELOGATION_W6, 
                para.P_ELOGATION_F1, 
                para.P_ELOGATION_F2, 
                para.P_ELOGATION_F3, 
                para.P_ELOGATION_F4, 
                para.P_ELOGATION_F5, 
                para.P_ELOGATION_F6, 
                para.P_FLAMMABILITY_W, 
                para.P_FLAMMABILITY_W2, 
                para.P_FLAMMABILITY_W3, 
                para.P_FLAMMABILITY_W4, 
                para.P_FLAMMABILITY_W5, 
                para.P_FLAMMABILITY_F, 
                para.P_FLAMMABILITY_F2, 
                para.P_FLAMMABILITY_F3, 
                para.P_FLAMMABILITY_F4, 
                para.P_FLAMMABILITY_F5, 
                para.P_EDGECOMB_W1, 
                para.P_EDGECOMB_W2, 
                para.P_EDGECOMB_W3, 
                para.P_EDGECOMB_F1, 
                para.P_EDGECOMB_F2, 
                para.P_EDGECOMB_F3, 
                para.P_STIFFNESS_W1, 
                para.P_STIFFNESS_W2, 
                para.P_STIFFNESS_W3, 
                para.P_STIFFNESS_F1, 
                para.P_STIFFNESS_F2, 
                para.P_STIFFNESS_F3, 
                para.P_TEAR_W1, 
                para.P_TEAR_W2, 
                para.P_TEAR_W3, 
                para.P_TEAR_F1, 
                para.P_TEAR_F2, 
                para.P_TEAR_F3, 
                para.P_STATIC_AIR1, 
                para.P_STATIC_AIR2, 
                para.P_STATIC_AIR3, 
                para.P_STATIC_AIR4, 
                para.P_STATIC_AIR5, 
                para.P_STATIC_AIR6, 
                para.P_DYNAMIC_AIR1, 
                para.P_DYNAMIC_AIR2, 
                para.P_DYNAMIC_AIR3, 
                para.P_EXPONENT1, 
                para.P_EXPONENT2, 
                para.P_EXPONENT3, 
                para.P_DIMENSCHANGE_W1, 
                para.P_DIMENSCHANGE_W2, 
                para.P_DIMENSCHANGE_W3, 
                para.P_DIMENSCHANGE_F1, 
                para.P_DIMENSCHANGE_F2, 
                para.P_DIMENSCHANGE_F3, 
                para.P_FLEXABRASION_W1, 
                para.P_FLEXABRASION_W2, 
                para.P_FLEXABRASION_W3, 
                para.P_FLEXABRASION_F1, 
                para.P_FLEXABRASION_F2, 
                para.P_FLEXABRASION_F3, 
                para.P_BOW1, 
                para.P_BOW2, 
                para.P_BOW3, 
                para.P_SKEW1, 
                para.P_SKEW2, 
                para.P_SKEW3, 
                para.P_BENDING_W1, 
                para.P_BENDING_W2, 
                para.P_BENDING_W3, 
                para.P_BENDING_F1, 
                para.P_BENDING_F2, 
                para.P_BENDING_F3, 
                para.P_FLEX_SCOTT_W1, 
                para.P_FLEX_SCOTT_W2, 
                para.P_FLEX_SCOTT_W3, 
                para.P_FLEX_SCOTT_F1, 
                para.P_FLEX_SCOTT_F2, 
                para.P_FLEX_SCOTT_F3, 
                para.P_STATUS, 
                para.P_REMARK, 
                para.P_APPROVEBY, 
                para.P_APPROVEDATE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_INSERTPRODUCTION",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new LAB_INSERTPRODUCTIONResult();
                if (ret.Result.OutParameters["P_RETURN"] != DBNull.Value)
                    result.P_RETURN = (System.String)ret.Result.OutParameters["P_RETURN"];
            }

            return result;
        }

        #endregion

        //--------//

        #region LAB_GREIGESTOCKSTATUS

        public List<LAB_GREIGESTOCKSTATUSResult> LAB_GREIGESTOCKSTATUS(LAB_GREIGESTOCKSTATUSParameter para)
        {
            List<LAB_GREIGESTOCKSTATUSResult> results = new List<LAB_GREIGESTOCKSTATUSResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMERROLL", 
                "P_LOOMNO", 
                "P_RECEIVEDATE"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERROLL, 
                para.P_LOOMNO, 
                para.P_RECEIVEDATE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_GREIGESTOCKSTATUS",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        LAB_GREIGESTOCKSTATUSResult result =
                            new LAB_GREIGESTOCKSTATUSResult();

                        result.BEAMERROLL = row.Field<System.String>("BEAMERROLL");
                        result.LOOMNO = row.Field<System.String>("LOOMNO");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");
                        result.RECEIVEDATE = row.Field<System.DateTime?>("RECEIVEDATE");
                        result.RECEIVEBY = row.Field<System.String>("RECEIVEBY");
                        result.STATUS = row.Field<System.String>("STATUS");
                        result.CONDITIONINGTIME = row.Field<System.Decimal?>("CONDITIONINGTIME");
                        result.TESTDATE = row.Field<System.DateTime?>("TESTDATE");
                        result.TESTRESULT = row.Field<System.String>("TESTRESULT");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.TESTBY = row.Field<System.String>("TESTBY");
                        result.APPROVESTATUS = row.Field<System.String>("APPROVESTATUS");
                        result.APPROVEBY = row.Field<System.String>("APPROVEBY");
                        result.SENDDATE = row.Field<System.DateTime?>("SENDDATE");
                        result.APPROVEDATE = row.Field<System.DateTime?>("APPROVEDATE");
                        result.TESTNO = row.Field<System.Decimal?>("TESTNO");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region LAB_GETWEAVINGSAMPLING

        public List<LAB_GETWEAVINGSAMPLINGResult> LAB_GETWEAVINGSAMPLING(LAB_GETWEAVINGSAMPLINGParameter para)
        {
            List<LAB_GETWEAVINGSAMPLINGResult> results = new List<LAB_GETWEAVINGSAMPLINGResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMERROLL", 
                "P_LOOMNO"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERROLL, 
                para.P_LOOMNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_GETWEAVINGSAMPLING",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        LAB_GETWEAVINGSAMPLINGResult result =
                            new LAB_GETWEAVINGSAMPLINGResult();

                        result.BEAMERROLL = row.Field<System.String>("BEAMERROLL");
                        result.LOOMNO = row.Field<System.String>("LOOMNO");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");
                        result.SETTINGDATE = row.Field<System.DateTime?>("SETTINGDATE");
                        result.BARNO = row.Field<System.String>("BARNO");
                        result.SPIRAL_L = row.Field<System.Decimal?>("SPIRAL_L");
                        result.SPIRAL_R = row.Field<System.Decimal?>("SPIRAL_R");
                        result.STSAMPLING = row.Field<System.Decimal?>("STSAMPLING");
                        result.RECUTSAMPLING = row.Field<System.Decimal?>("RECUTSAMPLING");
                        result.STSAMPLINGBY = row.Field<System.String>("STSAMPLINGBY");
                        result.RECUTBY = row.Field<System.String>("RECUTBY");
                        result.STDATE = row.Field<System.DateTime?>("STDATE");
                        result.RECUTDATE = row.Field<System.DateTime?>("RECUTDATE");
                        result.REMARK = row.Field<System.String>("REMARK");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        // -- Update 28/10/20 -- //
        #region LAB_GETWEAVINGLOTLIST

        public List<LAB_GETWEAVINGLOTLISTResult> LAB_GETWEAVINGLOTLIST(LAB_GETWEAVINGLOTLISTParameter para)
        {
            List<LAB_GETWEAVINGLOTLISTResult> results = new List<LAB_GETWEAVINGLOTLISTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_FINISHINGLOT", 
                "P_ITEMCODE", 
                "P_PROCESS"
            };
            object[] paraValues = new object[]
            {
                para.P_FINISHINGLOT, 
                para.P_ITEMCODE, 
                para.P_PROCESS
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_GETWEAVINGLOTLIST",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        LAB_GETWEAVINGLOTLISTResult result =
                            new LAB_GETWEAVINGLOTLISTResult();

                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion


        // New 1/9/22
        #region LAB_GETWEIGHTDATA

        public List<LAB_GETWEIGHTDATAResult> LAB_GETWEIGHTDATA(LAB_GETWEIGHTDATAParameter para)
        {
            List<LAB_GETWEIGHTDATAResult> results = new List<LAB_GETWEIGHTDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_PRODUCTIONLOT", 
                "P_TYPE"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_PRODUCTIONLOT, 
                para.P_TYPE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_GETWEIGHTDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        LAB_GETWEIGHTDATAResult result =
                            new LAB_GETWEIGHTDATAResult();

                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.WEIGHT1 = row.Field<System.Decimal?>("WEIGHT1");
                        result.WEIGHT2 = row.Field<System.Decimal?>("WEIGHT2");
                        result.WEIGHT3 = row.Field<System.Decimal?>("WEIGHT3");
                        result.WEIGHT4 = row.Field<System.Decimal?>("WEIGHT4");
                        result.WEIGHT5 = row.Field<System.Decimal?>("WEIGHT5");
                        result.WEIGHT6 = row.Field<System.Decimal?>("WEIGHT6");
                        result.WEIGHTDATE = row.Field<System.DateTime?>("WEIGHTDATE");
                        result.WEIGHT_BY = row.Field<System.String>("WEIGHT_BY");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region LAB_GETSTIFFNESSDATA

        public List<LAB_GETSTIFFNESSDATAResult> LAB_GETSTIFFNESSDATA(LAB_GETSTIFFNESSDATAParameter para)
        {
            List<LAB_GETSTIFFNESSDATAResult> results = new List<LAB_GETSTIFFNESSDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_PRODUCTIONLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_PRODUCTIONLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_GETSTIFFNESSDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        LAB_GETSTIFFNESSDATAResult result =
                            new LAB_GETSTIFFNESSDATAResult();

                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.STIFFNESS_W1 = row.Field<System.Decimal?>("STIFFNESS_W1");
                        result.STIFFNESS_W2 = row.Field<System.Decimal?>("STIFFNESS_W2");
                        result.STIFFNESS_W3 = row.Field<System.Decimal?>("STIFFNESS_W3");
                        result.STIFFNESS_F1 = row.Field<System.Decimal?>("STIFFNESS_F1");
                        result.STIFFNESS_F2 = row.Field<System.Decimal?>("STIFFNESS_F2");
                        result.STIFFNESS_F3 = row.Field<System.Decimal?>("STIFFNESS_F3");
                        result.STIFFNESSDATE = row.Field<System.DateTime?>("STIFFNESSDATE");
                        result.STIFFNESS_BY = row.Field<System.String>("STIFFNESS_BY");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region LAB_GETSTATICAIRDATA

        public List<LAB_GETSTATICAIRDATAResult> LAB_GETSTATICAIRDATA(LAB_GETSTATICAIRDATAParameter para)
        {
            List<LAB_GETSTATICAIRDATAResult> results = new List<LAB_GETSTATICAIRDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_PRODUCTIONLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_PRODUCTIONLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_GETSTATICAIRDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        LAB_GETSTATICAIRDATAResult result =
                            new LAB_GETSTATICAIRDATAResult();

                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.STATIC_AIR1 = row.Field<System.Decimal?>("STATIC_AIR1");
                        result.STATIC_AIR2 = row.Field<System.Decimal?>("STATIC_AIR2");
                        result.STATIC_AIR3 = row.Field<System.Decimal?>("STATIC_AIR3");
                        result.STATIC_AIR4 = row.Field<System.Decimal?>("STATIC_AIR4");
                        result.STATIC_AIR5 = row.Field<System.Decimal?>("STATIC_AIR5");
                        result.STATIC_AIR6 = row.Field<System.Decimal?>("STATIC_AIR6");
                        result.STATICAIRDATE = row.Field<System.DateTime?>("STATICAIRDATE");
                        result.STATICAIR_BY = row.Field<System.String>("STATICAIR_BY");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region LAB_GETDYNAMICAIRDATA

        public List<LAB_GETDYNAMICAIRDATAResult> LAB_GETDYNAMICAIRDATA(LAB_GETDYNAMICAIRDATAParameter para)
        {
            List<LAB_GETDYNAMICAIRDATAResult> results = new List<LAB_GETDYNAMICAIRDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_PRODUCTIONLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_PRODUCTIONLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_GETDYNAMICAIRDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        LAB_GETDYNAMICAIRDATAResult result =
                            new LAB_GETDYNAMICAIRDATAResult();

                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.EXPONENT1 = row.Field<System.Decimal?>("EXPONENT1");
                        result.EXPONENT2 = row.Field<System.Decimal?>("EXPONENT2");
                        result.EXPONENT3 = row.Field<System.Decimal?>("EXPONENT3");
                        result.DYNAMIC_AIR1 = row.Field<System.Decimal?>("DYNAMIC_AIR1");
                        result.DYNAMIC_AIR2 = row.Field<System.Decimal?>("DYNAMIC_AIR2");
                        result.DYNAMIC_AIR3 = row.Field<System.Decimal?>("DYNAMIC_AIR3");
                        result.DYNAMICDATE = row.Field<System.DateTime?>("DYNAMICDATE");
                        result.DYNAMIC_BY = row.Field<System.String>("DYNAMIC_BY");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        // -- Update 31/08/20 -- //

        #region LAB_GETREPORTINFO

        public List<LAB_GETREPORTINFOResult> LAB_GETREPORTINFO(LAB_GETREPORTINFOParameter para)
        {
            List<LAB_GETREPORTINFOResult> results = new List<LAB_GETREPORTINFOResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_CUSTOMERID"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_CUSTOMERID
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_GETREPORTINFO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        LAB_GETREPORTINFOResult result =
                            new LAB_GETREPORTINFOResult();

                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.REPORT_ID = row.Field<System.String>("REPORT_ID");
                        result.REVESION = row.Field<System.String>("REVESION");
                        result.CUSTOMERID = row.Field<System.String>("CUSTOMERID");
                        result.YARNTYPE = row.Field<System.String>("YARNTYPE");
                        result.WEIGHT = row.Field<System.String>("WEIGHT");
                        result.COATWEIGHT = row.Field<System.String>("COATWEIGHT");
                        result.NUMTHREADS = row.Field<System.String>("NUMTHREADS");
                        result.USABLE_WIDTH = row.Field<System.String>("USABLE_WIDTH");
                        result.THICKNESS = row.Field<System.String>("THICKNESS");
                        result.MAXFORCE = row.Field<System.String>("MAXFORCE");
                        result.ELONGATIONFORCE = row.Field<System.String>("ELONGATIONFORCE");
                        result.FLAMMABILITY = row.Field<System.String>("FLAMMABILITY");
                        result.EDGECOMB = row.Field<System.String>("EDGECOMB");
                        result.STIFFNESS = row.Field<System.String>("STIFFNESS");
                        result.TEAR = row.Field<System.String>("TEAR");
                        result.STATIC_AIR = row.Field<System.String>("STATIC_AIR");
                        result.DYNAMIC_AIR = row.Field<System.String>("DYNAMIC_AIR");
                        result.EXPONENT = row.Field<System.String>("EXPONENT");
                        result.DIMENSCHANGE = row.Field<System.String>("DIMENSCHANGE");
                        result.FLEXABRASION = row.Field<System.String>("FLEXABRASION");
                        result.BENDING = row.Field<System.String>("BENDING");
                        result.FLEX_SCOTT = row.Field<System.String>("FLEX_SCOTT");
                        result.BOW = row.Field<System.String>("BOW");
                        result.SKEW = row.Field<System.String>("SKEW");
                        result.EFFECTIVE_DATE = row.Field<System.DateTime?>("EFFECTIVE_DATE");
                        result.REPORT_NAME = row.Field<System.String>("REPORT_NAME");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region LAB_GETREPORTIDLIST

        public List<LAB_GETREPORTIDLISTResult> LAB_GETREPORTIDLIST(LAB_GETREPORTIDLISTParameter para)
        {
            List<LAB_GETREPORTIDLISTResult> results = new List<LAB_GETREPORTIDLISTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
            };
            object[] paraValues = new object[]
            {
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_GETREPORTIDLIST",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        LAB_GETREPORTIDLISTResult result =
                            new LAB_GETREPORTIDLISTResult();

                        result.REPORT_ID = row.Field<System.String>("REPORT_ID");
                        result.REPORT_NAME = row.Field<System.String>("REPORT_NAME");
                        result.EFFECTIVE_DATE = row.Field<System.DateTime?>("EFFECTIVE_DATE");
                        result.USE_FLAG = row.Field<System.String>("USE_FLAG");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        //----------------------//

        //-- Lab --//

        #region LAB_GETPDFDATA

        public List<LAB_GETPDFDATAResult> LAB_GETPDFDATA(LAB_GETPDFDATAParameter para)
        {
            List<LAB_GETPDFDATAResult> results = new List<LAB_GETPDFDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_WEAVINGLOG", 
                "P_FINISHINGLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_WEAVINGLOG, 
                para.P_FINISHINGLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_GETPDFDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        LAB_GETPDFDATAResult result =
                            new LAB_GETPDFDATAResult();

                        result.PROPERTY = row.Field<System.String>("PROPERTY");
                        result.YARNTYPE = row.Field<System.String>("YARNTYPE");
                        result.N1 = row.Field<System.Decimal?>("N1");
                        result.N2 = row.Field<System.Decimal?>("N2");
                        result.N3 = row.Field<System.Decimal?>("N3");
                        result.N4 = row.Field<System.Decimal?>("N4");
                        result.N5 = row.Field<System.Decimal?>("N5");
                        result.N6 = row.Field<System.Decimal?>("N6");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        // -- Update 26/10/20 -- //

        #region LAB_GETLABDETAIL

        public List<LAB_GETLABDETAILResult> LAB_GETLABDETAIL(LAB_GETLABDETAILParameter para)
        {
            List<LAB_GETLABDETAILResult> results = new List<LAB_GETLABDETAILResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_WEAVINGLOG", 
                "P_FINISHINGLOT", 
                "P_ENTRYDATE"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_WEAVINGLOG, 
                para.P_FINISHINGLOT, 
                para.P_ENTRYDATE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_GETLABDETAIL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        LAB_GETLABDETAILResult result =
                            new LAB_GETLABDETAILResult();

                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.ENTRYDATE = row.Field<System.DateTime?>("ENTRYDATE");
                        result.ENTEYBY = row.Field<System.String>("ENTEYBY");
                        result.WIDTH = row.Field<System.Decimal?>("WIDTH");
                        result.USABLE_WIDTH1 = row.Field<System.Decimal?>("USABLE_WIDTH1");
                        result.USABLE_WIDTH2 = row.Field<System.Decimal?>("USABLE_WIDTH2");
                        result.USABLE_WIDTH3 = row.Field<System.Decimal?>("USABLE_WIDTH3");
                        result.WIDTH_SILICONE1 = row.Field<System.Decimal?>("WIDTH_SILICONE1");
                        result.WIDTH_SILICONE2 = row.Field<System.Decimal?>("WIDTH_SILICONE2");
                        result.WIDTH_SILICONE3 = row.Field<System.Decimal?>("WIDTH_SILICONE3");
                        result.NUMTHREADS_W1 = row.Field<System.Decimal?>("NUMTHREADS_W1");
                        result.NUMTHREADS_W2 = row.Field<System.Decimal?>("NUMTHREADS_W2");
                        result.NUMTHREADS_W3 = row.Field<System.Decimal?>("NUMTHREADS_W3");
                        result.NUMTHREADS_F1 = row.Field<System.Decimal?>("NUMTHREADS_F1");
                        result.NUMTHREADS_F2 = row.Field<System.Decimal?>("NUMTHREADS_F2");
                        result.NUMTHREADS_F3 = row.Field<System.Decimal?>("NUMTHREADS_F3");
                        result.TOTALWEIGHT1 = row.Field<System.Decimal?>("TOTALWEIGHT1");
                        result.TOTALWEIGHT2 = row.Field<System.Decimal?>("TOTALWEIGHT2");
                        result.TOTALWEIGHT3 = row.Field<System.Decimal?>("TOTALWEIGHT3");
                        result.TOTALWEIGHT4 = row.Field<System.Decimal?>("TOTALWEIGHT4");
                        result.TOTALWEIGHT5 = row.Field<System.Decimal?>("TOTALWEIGHT5");
                        result.TOTALWEIGHT6 = row.Field<System.Decimal?>("TOTALWEIGHT6");
                        result.UNCOATEDWEIGHT1 = row.Field<System.Decimal?>("UNCOATEDWEIGHT1");
                        result.UNCOATEDWEIGHT2 = row.Field<System.Decimal?>("UNCOATEDWEIGHT2");
                        result.UNCOATEDWEIGHT3 = row.Field<System.Decimal?>("UNCOATEDWEIGHT3");
                        result.UNCOATEDWEIGHT4 = row.Field<System.Decimal?>("UNCOATEDWEIGHT4");
                        result.UNCOATEDWEIGHT5 = row.Field<System.Decimal?>("UNCOATEDWEIGHT5");
                        result.UNCOATEDWEIGHT6 = row.Field<System.Decimal?>("UNCOATEDWEIGHT6");
                        result.COATINGWEIGHT1 = row.Field<System.Decimal?>("COATINGWEIGHT1");
                        result.COATINGWEIGHT2 = row.Field<System.Decimal?>("COATINGWEIGHT2");
                        result.COATINGWEIGHT3 = row.Field<System.Decimal?>("COATINGWEIGHT3");
                        result.COATINGWEIGHT4 = row.Field<System.Decimal?>("COATINGWEIGHT4");
                        result.COATINGWEIGHT5 = row.Field<System.Decimal?>("COATINGWEIGHT5");
                        result.COATINGWEIGHT6 = row.Field<System.Decimal?>("COATINGWEIGHT6");
                        result.THICKNESS1 = row.Field<System.Decimal?>("THICKNESS1");
                        result.THICKNESS2 = row.Field<System.Decimal?>("THICKNESS2");
                        result.THICKNESS3 = row.Field<System.Decimal?>("THICKNESS3");
                        result.MAXFORCE_W1 = row.Field<System.Decimal?>("MAXFORCE_W1");
                        result.MAXFORCE_W2 = row.Field<System.Decimal?>("MAXFORCE_W2");
                        result.MAXFORCE_W3 = row.Field<System.Decimal?>("MAXFORCE_W3");
                        result.MAXFORCE_F1 = row.Field<System.Decimal?>("MAXFORCE_F1");
                        result.MAXFORCE_F2 = row.Field<System.Decimal?>("MAXFORCE_F2");
                        result.MAXFORCE_F3 = row.Field<System.Decimal?>("MAXFORCE_F3");
                        result.ELONGATIONFORCE_W1 = row.Field<System.Decimal?>("ELONGATIONFORCE_W1");
                        result.ELONGATIONFORCE_W2 = row.Field<System.Decimal?>("ELONGATIONFORCE_W2");
                        result.ELONGATIONFORCE_W3 = row.Field<System.Decimal?>("ELONGATIONFORCE_W3");
                        result.ELONGATIONFORCE_F1 = row.Field<System.Decimal?>("ELONGATIONFORCE_F1");
                        result.ELONGATIONFORCE_F2 = row.Field<System.Decimal?>("ELONGATIONFORCE_F2");
                        result.ELONGATIONFORCE_F3 = row.Field<System.Decimal?>("ELONGATIONFORCE_F3");
                        result.FLAMMABILITY_W = row.Field<System.Decimal?>("FLAMMABILITY_W");
                        result.FLAMMABILITY_F = row.Field<System.Decimal?>("FLAMMABILITY_F");
                        result.EDGECOMB_W1 = row.Field<System.Decimal?>("EDGECOMB_W1");
                        result.EDGECOMB_W2 = row.Field<System.Decimal?>("EDGECOMB_W2");
                        result.EDGECOMB_W3 = row.Field<System.Decimal?>("EDGECOMB_W3");
                        result.EDGECOMB_F1 = row.Field<System.Decimal?>("EDGECOMB_F1");
                        result.EDGECOMB_F2 = row.Field<System.Decimal?>("EDGECOMB_F2");
                        result.EDGECOMB_F3 = row.Field<System.Decimal?>("EDGECOMB_F3");
                        result.STIFFNESS_W1 = row.Field<System.Decimal?>("STIFFNESS_W1");
                        result.STIFFNESS_W2 = row.Field<System.Decimal?>("STIFFNESS_W2");
                        result.STIFFNESS_W3 = row.Field<System.Decimal?>("STIFFNESS_W3");
                        result.STIFFNESS_F1 = row.Field<System.Decimal?>("STIFFNESS_F1");
                        result.STIFFNESS_F2 = row.Field<System.Decimal?>("STIFFNESS_F2");
                        result.STIFFNESS_F3 = row.Field<System.Decimal?>("STIFFNESS_F3");
                        result.TEAR_W1 = row.Field<System.Decimal?>("TEAR_W1");
                        result.TEAR_W2 = row.Field<System.Decimal?>("TEAR_W2");
                        result.TEAR_W3 = row.Field<System.Decimal?>("TEAR_W3");
                        result.TEAR_F1 = row.Field<System.Decimal?>("TEAR_F1");
                        result.TEAR_F2 = row.Field<System.Decimal?>("TEAR_F2");
                        result.TEAR_F3 = row.Field<System.Decimal?>("TEAR_F3");
                        result.STATIC_AIR1 = row.Field<System.Decimal?>("STATIC_AIR1");
                        result.STATIC_AIR2 = row.Field<System.Decimal?>("STATIC_AIR2");
                        result.STATIC_AIR3 = row.Field<System.Decimal?>("STATIC_AIR3");
                        result.DYNAMIC_AIR1 = row.Field<System.Decimal?>("DYNAMIC_AIR1");
                        result.DYNAMIC_AIR2 = row.Field<System.Decimal?>("DYNAMIC_AIR2");
                        result.DYNAMIC_AIR3 = row.Field<System.Decimal?>("DYNAMIC_AIR3");
                        result.EXPONENT1 = row.Field<System.Decimal?>("EXPONENT1");
                        result.EXPONENT2 = row.Field<System.Decimal?>("EXPONENT2");
                        result.EXPONENT3 = row.Field<System.Decimal?>("EXPONENT3");
                        result.DIMENSCHANGE_W1 = row.Field<System.Decimal?>("DIMENSCHANGE_W1");
                        result.DIMENSCHANGE_W2 = row.Field<System.Decimal?>("DIMENSCHANGE_W2");
                        result.DIMENSCHANGE_W3 = row.Field<System.Decimal?>("DIMENSCHANGE_W3");
                        result.DIMENSCHANGE_F1 = row.Field<System.Decimal?>("DIMENSCHANGE_F1");
                        result.DIMENSCHANGE_F2 = row.Field<System.Decimal?>("DIMENSCHANGE_F2");
                        result.DIMENSCHANGE_F3 = row.Field<System.Decimal?>("DIMENSCHANGE_F3");
                        result.FLEXABRASION_W1 = row.Field<System.Decimal?>("FLEXABRASION_W1");
                        result.FLEXABRASION_W2 = row.Field<System.Decimal?>("FLEXABRASION_W2");
                        result.FLEXABRASION_W3 = row.Field<System.Decimal?>("FLEXABRASION_W3");
                        result.FLEXABRASION_F1 = row.Field<System.Decimal?>("FLEXABRASION_F1");
                        result.FLEXABRASION_F2 = row.Field<System.Decimal?>("FLEXABRASION_F2");
                        result.FLEXABRASION_F3 = row.Field<System.Decimal?>("FLEXABRASION_F3");
                        result.BOW1 = row.Field<System.Decimal?>("BOW1");
                        result.SKEW1 = row.Field<System.Decimal?>("SKEW1");
                        result.STATUS = row.Field<System.String>("STATUS");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.APPROVEBY = row.Field<System.String>("APPROVEBY");
                        result.APPROVEDATE = row.Field<System.DateTime?>("APPROVEDATE");
                        result.CREATEDATE = row.Field<System.DateTime?>("CREATEDATE");
                        result.BOW2 = row.Field<System.Decimal?>("BOW2");
                        result.BOW3 = row.Field<System.Decimal?>("BOW3");
                        result.SKEW2 = row.Field<System.Decimal?>("SKEW2");
                        result.SKEW3 = row.Field<System.Decimal?>("SKEW3");
                        result.BENDING_W1 = row.Field<System.Decimal?>("BENDING_W1");
                        result.BENDING_W2 = row.Field<System.Decimal?>("BENDING_W2");
                        result.BENDING_W3 = row.Field<System.Decimal?>("BENDING_W3");
                        result.BENDING_F1 = row.Field<System.Decimal?>("BENDING_F1");
                        result.BENDING_F2 = row.Field<System.Decimal?>("BENDING_F2");
                        result.BENDING_F3 = row.Field<System.Decimal?>("BENDING_F3");
                        result.FLEX_SCOTT_W1 = row.Field<System.Decimal?>("FLEX_SCOTT_W1");
                        result.FLEX_SCOTT_W2 = row.Field<System.Decimal?>("FLEX_SCOTT_W2");
                        result.FLEX_SCOTT_W3 = row.Field<System.Decimal?>("FLEX_SCOTT_W3");
                        result.FLEX_SCOTT_F1 = row.Field<System.Decimal?>("FLEX_SCOTT_F1");
                        result.FLEX_SCOTT_F2 = row.Field<System.Decimal?>("FLEX_SCOTT_F2");
                        result.FLEX_SCOTT_F3 = row.Field<System.Decimal?>("FLEX_SCOTT_F3");
                        result.STATIC_AIR4 = row.Field<System.Decimal?>("STATIC_AIR4");
                        result.STATIC_AIR5 = row.Field<System.Decimal?>("STATIC_AIR5");
                        result.STATIC_AIR6 = row.Field<System.Decimal?>("STATIC_AIR6");
                        result.FILENAME = row.Field<System.String>("FILENAME");
                        result.UPLOADDATE = row.Field<System.DateTime?>("UPLOADDATE");
                        result.UPLOADBY = row.Field<System.String>("UPLOADBY");
                        result.FLAMMABILITY_W2 = row.Field<System.Decimal?>("FLAMMABILITY_W2");
                        result.FLAMMABILITY_W3 = row.Field<System.Decimal?>("FLAMMABILITY_W3");
                        result.FLAMMABILITY_W4 = row.Field<System.Decimal?>("FLAMMABILITY_W4");
                        result.FLAMMABILITY_W5 = row.Field<System.Decimal?>("FLAMMABILITY_W5");
                        result.FLAMMABILITY_F2 = row.Field<System.Decimal?>("FLAMMABILITY_F2");
                        result.FLAMMABILITY_F3 = row.Field<System.Decimal?>("FLAMMABILITY_F3");
                        result.FLAMMABILITY_F4 = row.Field<System.Decimal?>("FLAMMABILITY_F4");
                        result.FLAMMABILITY_F5 = row.Field<System.Decimal?>("FLAMMABILITY_F5");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        //----------------------//

        #region LAB_GETITEMTESTSPECIFICATION

        public List<LAB_GETITEMTESTSPECIFICATIONResult> LAB_GETITEMTESTSPECIFICATION(LAB_GETITEMTESTSPECIFICATIONParameter para)
        {
            List<LAB_GETITEMTESTSPECIFICATIONResult> results = new List<LAB_GETITEMTESTSPECIFICATIONResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMCODE"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_GETITEMTESTSPECIFICATION",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        LAB_GETITEMTESTSPECIFICATIONResult result =
                            new LAB_GETITEMTESTSPECIFICATIONResult();

                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.WIDTH = row.Field<System.Decimal?>("WIDTH");
                        result.USABLE_WIDTH = row.Field<System.Decimal?>("USABLE_WIDTH");
                        result.USABLE_WIDTH_TOR = row.Field<System.String>("USABLE_WIDTH_TOR");
                        result.NUMTHREADS_W = row.Field<System.Decimal?>("NUMTHREADS_W");
                        result.NUMTHREADS_W_TOR = row.Field<System.Decimal?>("NUMTHREADS_W_TOR");
                        result.NUMTHREADS_F = row.Field<System.Decimal?>("NUMTHREADS_F");
                        result.NUMTHREADS_F_TOR = row.Field<System.Decimal?>("NUMTHREADS_F_TOR");
                        result.WIDTH_SILICONE = row.Field<System.Decimal?>("WIDTH_SILICONE");
                        result.WIDTH_SILICONE_TOR = row.Field<System.String>("WIDTH_SILICONE_TOR");
                        result.TOTALWEIGHT = row.Field<System.Decimal?>("TOTALWEIGHT");
                        result.TOTALWEIGHT_TOR = row.Field<System.Decimal?>("TOTALWEIGHT_TOR");
                        result.UNCOATEDWEIGHT = row.Field<System.Decimal?>("UNCOATEDWEIGHT");
                        result.UNCOATEDWEIGHT_TOR = row.Field<System.Decimal?>("UNCOATEDWEIGHT_TOR");
                        result.COATINGWEIGHT = row.Field<System.Decimal?>("COATINGWEIGHT");
                        result.COATINGWEIGHT_TOR = row.Field<System.Decimal?>("COATINGWEIGHT_TOR");
                        result.THICKNESS = row.Field<System.Decimal?>("THICKNESS");
                        result.THICKNESS_TOR = row.Field<System.Decimal?>("THICKNESS_TOR");
                        result.MAXFORCE_W = row.Field<System.Decimal?>("MAXFORCE_W");
                        result.MAXFORCE_W_TOR = row.Field<System.String>("MAXFORCE_W_TOR");
                        result.MAXFORCE_F = row.Field<System.Decimal?>("MAXFORCE_F");
                        result.MAXFORCE_F_TOR = row.Field<System.String>("MAXFORCE_F_TOR");
                        result.ELONGATIONFORCE_W = row.Field<System.Decimal?>("ELONGATIONFORCE_W");
                        result.ELONGATIONFORCE_W_TOR = row.Field<System.String>("ELONGATIONFORCE_W_TOR");
                        result.ELONGATIONFORCE_F = row.Field<System.Decimal?>("ELONGATIONFORCE_F");
                        result.ELONGATIONFORCE_F_TOR = row.Field<System.String>("ELONGATIONFORCE_F_TOR");
                        result.FLAMMABILITY_W = row.Field<System.Decimal?>("FLAMMABILITY_W");
                        result.FLAMMABILITY_W_TOR = row.Field<System.String>("FLAMMABILITY_W_TOR");
                        result.FLAMMABILITY_F = row.Field<System.Decimal?>("FLAMMABILITY_F");
                        result.FLAMMABILITY_F_TOR = row.Field<System.String>("FLAMMABILITY_F_TOR");
                        result.EDGECOMB_W = row.Field<System.Decimal?>("EDGECOMB_W");
                        result.EDGECOMB_W_TOR = row.Field<System.String>("EDGECOMB_W_TOR");
                        result.EDGECOMB_F = row.Field<System.Decimal?>("EDGECOMB_F");
                        result.EDGECOMB_F_TOR = row.Field<System.String>("EDGECOMB_F_TOR");
                        result.STIFFNESS_W = row.Field<System.Decimal?>("STIFFNESS_W");
                        result.STIFFNESS_W_TOR = row.Field<System.String>("STIFFNESS_W_TOR");
                        result.STIFFNESS_F = row.Field<System.Decimal?>("STIFFNESS_F");
                        result.STIFFNESS_F_TOR = row.Field<System.String>("STIFFNESS_F_TOR");
                        result.TEAR_W = row.Field<System.Decimal?>("TEAR_W");
                        result.TEAR_W_TOR = row.Field<System.String>("TEAR_W_TOR");
                        result.TEAR_F = row.Field<System.Decimal?>("TEAR_F");
                        result.TEAR_F_TOR = row.Field<System.String>("TEAR_F_TOR");
                        result.STATIC_AIR = row.Field<System.Decimal?>("STATIC_AIR");
                        result.STATIC_AIR_TOR = row.Field<System.String>("STATIC_AIR_TOR");
                        result.DYNAMIC_AIR = row.Field<System.Decimal?>("DYNAMIC_AIR");
                        result.DYNAMIC_AIR_TOR = row.Field<System.Decimal?>("DYNAMIC_AIR_TOR");
                        result.EXPONENT = row.Field<System.Decimal?>("EXPONENT");
                        result.EXPONENT_TOR = row.Field<System.Decimal?>("EXPONENT_TOR");
                        result.DIMENSCHANGE_W = row.Field<System.Decimal?>("DIMENSCHANGE_W");
                        result.DIMENSCHANGE_W_TOR = row.Field<System.String>("DIMENSCHANGE_W_TOR");
                        result.DIMENSCHANGE_F = row.Field<System.Decimal?>("DIMENSCHANGE_F");
                        result.DIMENSCHANGE_F_TOR = row.Field<System.String>("DIMENSCHANGE_F_TOR");
                        result.FLEXABRASION_W = row.Field<System.Decimal?>("FLEXABRASION_W");
                        result.FLEXABRASION_W_TOR = row.Field<System.String>("FLEXABRASION_W_TOR");
                        result.FLEXABRASION_F = row.Field<System.Decimal?>("FLEXABRASION_F");
                        result.FLEXABRASION_F_TOR = row.Field<System.String>("FLEXABRASION_F_TOR");
                        result.BOW = row.Field<System.Decimal?>("BOW");
                        result.BOW_TOR = row.Field<System.String>("BOW_TOR");
                        result.SKEW = row.Field<System.Decimal?>("SKEW");
                        result.SKEW_TOR = row.Field<System.String>("SKEW_TOR");
                        result.BENDING_W = row.Field<System.Decimal?>("BENDING_W");
                        result.BENDING_W_TOR = row.Field<System.String>("BENDING_W_TOR");
                        result.BENDING_F = row.Field<System.Decimal?>("BENDING_F");
                        result.BENDING_F_TOR = row.Field<System.String>("BENDING_F_TOR");
                        result.FLEX_SCOTT_W = row.Field<System.Decimal?>("FLEX_SCOTT_W");
                        result.FLEX_SCOTT_W_TOR = row.Field<System.String>("FLEX_SCOTT_W_TOR");
                        result.FLEX_SCOTT_F = row.Field<System.Decimal?>("FLEX_SCOTT_F");
                        result.FLEX_SCOTT_F_TOR = row.Field<System.String>("FLEX_SCOTT_F_TOR");
                        result.USABLE_WIDTH_LCL = row.Field<System.Decimal?>("USABLE_WIDTH_LCL");
                        result.USABLE_WIDTH_UCL = row.Field<System.Decimal?>("USABLE_WIDTH_UCL");
                        result.TOTALWEIGHT_LCL = row.Field<System.Decimal?>("TOTALWEIGHT_LCL");
                        result.TOTALWEIGHT_UCL = row.Field<System.Decimal?>("TOTALWEIGHT_UCL");
                        result.NUMTHREADS_W_LCL = row.Field<System.Decimal?>("NUMTHREADS_W_LCL");
                        result.NUMTHREADS_W_UCL = row.Field<System.Decimal?>("NUMTHREADS_W_UCL");
                        result.NUMTHREADS_F_LCL = row.Field<System.Decimal?>("NUMTHREADS_F_LCL");
                        result.NUMTHREADS_F_UCL = row.Field<System.Decimal?>("NUMTHREADS_F_UCL");
                        result.MAXFORCE_W_LCL = row.Field<System.Decimal?>("MAXFORCE_W_LCL");
                        result.MAXFORCE_W_UCL = row.Field<System.Decimal?>("MAXFORCE_W_UCL");
                        result.MAXFORCE_F_LCL = row.Field<System.Decimal?>("MAXFORCE_F_LCL");
                        result.MAXFORCE_F_UCL = row.Field<System.Decimal?>("MAXFORCE_F_UCL");
                        result.ELONGATIONFORCE_W_LCL = row.Field<System.Decimal?>("ELONGATIONFORCE_W_LCL");
                        result.ELONGATIONFORCE_W_UCL = row.Field<System.Decimal?>("ELONGATIONFORCE_W_UCL");
                        result.ELONGATIONFORCE_F_LCL = row.Field<System.Decimal?>("ELONGATIONFORCE_F_LCL");
                        result.ELONGATIONFORCE_F_UCL = row.Field<System.Decimal?>("ELONGATIONFORCE_F_UCL");
                        result.EDGECOMB_W_LCL = row.Field<System.Decimal?>("EDGECOMB_W_LCL");
                        result.EDGECOMB_W_UCL = row.Field<System.Decimal?>("EDGECOMB_W_UCL");
                        result.EDGECOMB_F_LCL = row.Field<System.Decimal?>("EDGECOMB_F_LCL");
                        result.EDGECOMB_F_UCL = row.Field<System.Decimal?>("EDGECOMB_F_UCL");
                        result.TEAR_W_LCL = row.Field<System.Decimal?>("TEAR_W_LCL");
                        result.TEAR_W_UCL = row.Field<System.Decimal?>("TEAR_W_UCL");
                        result.TEAR_F_LCL = row.Field<System.Decimal?>("TEAR_F_LCL");
                        result.TEAR_F_UCL = row.Field<System.Decimal?>("TEAR_F_UCL");
                        result.STATIC_AIR_LCL = row.Field<System.Decimal?>("STATIC_AIR_LCL");
                        result.STATIC_AIR_UCL = row.Field<System.Decimal?>("STATIC_AIR_UCL");
                        result.DYNAMIC_AIR_LCL = row.Field<System.Decimal?>("DYNAMIC_AIR_LCL");
                        result.DYNAMIC_AIR_UCL = row.Field<System.Decimal?>("DYNAMIC_AIR_UCL");
                        result.EXPONENT_LCL = row.Field<System.Decimal?>("EXPONENT_LCL");
                        result.EXPONENT_UCL = row.Field<System.Decimal?>("EXPONENT_UCL");
                        result.CUSTOMERID = row.Field<System.String>("CUSTOMERID");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region LAB_GETITEMTESTPROPERTY

        public List<LAB_GETITEMTESTPROPERTYResult> LAB_GETITEMTESTPROPERTY(LAB_GETITEMTESTPROPERTYParameter para)
        {
            List<LAB_GETITEMTESTPROPERTYResult> results = new List<LAB_GETITEMTESTPROPERTYResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMCODE"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_GETITEMTESTPROPERTY",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        LAB_GETITEMTESTPROPERTYResult result =
                            new LAB_GETITEMTESTPROPERTYResult();

                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.WIDTH = row.Field<System.Decimal?>("WIDTH");
                        result.USABLE_WIDTH = row.Field<System.Decimal?>("USABLE_WIDTH");
                        result.WIDTH_SILICONE = row.Field<System.Decimal?>("WIDTH_SILICONE");
                        result.NUMTHREADS_W = row.Field<System.Decimal?>("NUMTHREADS_W");
                        result.NUMTHREADS_F = row.Field<System.Decimal?>("NUMTHREADS_F");
                        result.TOTALWEIGHT = row.Field<System.Decimal?>("TOTALWEIGHT");
                        result.UNCOATEDWEIGHT = row.Field<System.Decimal?>("UNCOATEDWEIGHT");
                        result.COATINGWEIGHT = row.Field<System.Decimal?>("COATINGWEIGHT");
                        result.THICKNESS = row.Field<System.Decimal?>("THICKNESS");
                        result.MAXFORCE_W = row.Field<System.Decimal?>("MAXFORCE_W");
                        result.MAXFORCE_F = row.Field<System.Decimal?>("MAXFORCE_F");
                        result.ELONGATIONFORCE_W = row.Field<System.Decimal?>("ELONGATIONFORCE_W");
                        result.ELONGATIONFORCE_F = row.Field<System.Decimal?>("ELONGATIONFORCE_F");
                        result.FLAMMABILITY_W = row.Field<System.Decimal?>("FLAMMABILITY_W");
                        result.FLAMMABILITY_F = row.Field<System.Decimal?>("FLAMMABILITY_F");
                        result.EDGECOMB_W = row.Field<System.Decimal?>("EDGECOMB_W");
                        result.EDGECOMB_F = row.Field<System.Decimal?>("EDGECOMB_F");
                        result.STIFFNESS_W = row.Field<System.Decimal?>("STIFFNESS_W");
                        result.STIFFNESS_F = row.Field<System.Decimal?>("STIFFNESS_F");
                        result.TEAR_W = row.Field<System.Decimal?>("TEAR_W");
                        result.TEAR_F = row.Field<System.Decimal?>("TEAR_F");
                        result.STATIC_AIR = row.Field<System.Decimal?>("STATIC_AIR");
                        result.DYNAMIC_AIR = row.Field<System.Decimal?>("DYNAMIC_AIR");
                        result.EXPONENT = row.Field<System.Decimal?>("EXPONENT");
                        result.DIMENSCHANGE_W = row.Field<System.Decimal?>("DIMENSCHANGE_W");
                        result.DIMENSCHANGE_F = row.Field<System.Decimal?>("DIMENSCHANGE_F");
                        result.FLEXABRASION_W = row.Field<System.Decimal?>("FLEXABRASION_W");
                        result.FLEXABRASION_F = row.Field<System.Decimal?>("FLEXABRASION_F");
                        result.BOW = row.Field<System.Decimal?>("BOW");
                        result.SKEW = row.Field<System.Decimal?>("SKEW");
                        result.BENDING_W = row.Field<System.Decimal?>("BENDING_W");
                        result.BENDING_F = row.Field<System.Decimal?>("BENDING_F");
                        result.FLEX_SCOTT_W = row.Field<System.Decimal?>("FLEX_SCOTT_W");
                        result.FLEX_SCOTT_F = row.Field<System.Decimal?>("FLEX_SCOTT_F");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        //--------//

        #region LAB_GETINSPECTIONLIST

        public List<LAB_GETINSPECTIONLISTResult> LAB_GETINSPECTIONLIST(LAB_GETINSPECTIONLISTParameter para)
        {
            List<LAB_GETINSPECTIONLISTResult> results = new List<LAB_GETINSPECTIONLISTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_INSLOT", 
                "P_DATE"
            };
            object[] paraValues = new object[]
            {
                para.P_INSLOT, 
                para.P_DATE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_GETINSPECTIONLIST",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        LAB_GETINSPECTIONLISTResult result =
                            new LAB_GETINSPECTIONLISTResult();

                        result.PALLETNO = row.Field<System.String>("PALLETNO");
                        result.INSPECTIONLOT = row.Field<System.String>("INSPECTIONLOT");
                        result.ITEMCODE = row.Field<System.String>("ITEMCODE");
                        result.NETLENGTH = row.Field<System.Decimal?>("NETLENGTH");
                        result.GROSSWEIGHT = row.Field<System.Decimal?>("GROSSWEIGHT");
                        result.NETWEIGHT = row.Field<System.Decimal?>("NETWEIGHT");
                        result.GRADE = row.Field<System.String>("GRADE");
                        result.CUSTOMERTYPE = row.Field<System.String>("CUSTOMERTYPE");
                        result.ISLAB = row.Field<System.String>("ISLAB");
                        result.INSPECTIONDATE = row.Field<System.DateTime?>("INSPECTIONDATE");
                        result.FLAG = row.Field<System.String>("FLAG");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.STOCK = row.Field<System.String>("STOCK");
                        result.GROSSLENGTH = row.Field<System.Decimal?>("GROSSLENGTH");
                        result.ORDERNO = row.Field<System.Decimal?>("ORDERNO");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region LAB_GETFINISHINGSAMPLING

        public List<LAB_GETFINISHINGSAMPLINGResult> LAB_GETFINISHINGSAMPLING(LAB_GETFINISHINGSAMPLINGParameter para)
        {
            List<LAB_GETFINISHINGSAMPLINGResult> results = new List<LAB_GETFINISHINGSAMPLINGResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WEAVLOT", 
                "P_ITEMCODE"
            };
            object[] paraValues = new object[]
            {
                para.P_WEAVLOT, 
                para.P_ITEMCODE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_GETFINISHINGSAMPLING",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        LAB_GETFINISHINGSAMPLINGResult result =
                            new LAB_GETFINISHINGSAMPLINGResult();

                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.CREATEDATE = row.Field<System.DateTime?>("CREATEDATE");
                        result.CREATEBY = row.Field<System.String>("CREATEBY");
                        result.PRODUCTID = row.Field<System.String>("PRODUCTID");
                        result.SAMPLING_WIDTH = row.Field<System.Decimal?>("SAMPLING_WIDTH");
                        result.SAMPLING_LENGTH = row.Field<System.Decimal?>("SAMPLING_LENGTH");
                        result.PROCESS = row.Field<System.String>("PROCESS");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.FABRICTYPE = row.Field<System.String>("FABRICTYPE");
                        result.RETESTFLAG = row.Field<System.String>("RETESTFLAG");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region LAB_CHECKRECEIVESAMPLING

        public LAB_CHECKRECEIVESAMPLINGResult LAB_CHECKRECEIVESAMPLING(LAB_CHECKRECEIVESAMPLINGParameter para)
        {
            LAB_CHECKRECEIVESAMPLINGResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_WEAVLOT", 
                "P_ITEMCODE"
            };
            object[] paraValues = new object[]
            {
                para.P_WEAVLOT, 
                para.P_ITEMCODE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_CHECKRECEIVESAMPLING",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new LAB_CHECKRECEIVESAMPLINGResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region LAB_CHECKRECEIVEGREIGESAMPLING

        public LAB_CHECKRECEIVEGREIGESAMPLINGResult LAB_CHECKRECEIVEGREIGESAMPLING(LAB_CHECKRECEIVEGREIGESAMPLINGParameter para)
        {
            LAB_CHECKRECEIVEGREIGESAMPLINGResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_BEAMERROLL", 
                "P_LOOMNO"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERROLL, 
                para.P_LOOMNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_CHECKRECEIVEGREIGESAMPLING",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new LAB_CHECKRECEIVEGREIGESAMPLINGResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        // -- Update 15/06/18 -- //

        #region LAB_APPROVELABDATA

        public LAB_APPROVELABDATAResult LAB_APPROVELABDATA(LAB_APPROVELABDATAParameter para)
        {
            LAB_APPROVELABDATAResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_WEAVINGLOG", 
                "P_FINISHINGLOT", 
                "P_ENTRYDATE", 
                "P_STATUS", 
                "P_REMARK", 
                "P_APPROVEBY", 
                "P_APPROVEDATE"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_WEAVINGLOG, 
                para.P_FINISHINGLOT, 
                para.P_ENTRYDATE, 
                para.P_STATUS, 
                para.P_REMARK, 
                para.P_APPROVEBY, 
                para.P_APPROVEDATE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_APPROVELABDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new LAB_APPROVELABDATAResult();
                if (ret.Result.OutParameters["P_RETURN"] != DBNull.Value)
                    result.P_RETURN = (System.String)ret.Result.OutParameters["P_RETURN"];
            }

            return result;
        }

        #endregion

        //----------------------//

        // -- Update 01/07/18 -- //

        #region LAB_INSERTSAMPLEDATA

        public LAB_INSERTSAMPLEDATAResult LAB_INSERTSAMPLEDATA(LAB_INSERTSAMPLEDATAParameter para)
        {
            LAB_INSERTSAMPLEDATAResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_PRODUCTIONLOT", 
                "P_FINISHINGLOT", 
                "P_ENTRYDATE", 
                "P_ENTRYBY", 
                "P_YARN", 
                "P_METHOD", 
                "P_NO", 
                "P_VALUE"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_PRODUCTIONLOT, 
                para.P_FINISHINGLOT, 
                para.P_ENTRYDATE, 
                para.P_ENTRYBY, 
                para.P_YARN, 
                para.P_METHOD, 
                para.P_NO, 
                para.P_VALUE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_INSERTSAMPLEDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new LAB_INSERTSAMPLEDATAResult();
                if (ret.Result.OutParameters["P_RETURN"] != DBNull.Value)
                    result.P_RETURN = (System.String)ret.Result.OutParameters["P_RETURN"];
            }

            return result;
        }

        #endregion

        #region LAB_GETNOSAMPLEBYMETHOD

        public List<LAB_GETNOSAMPLEBYMETHODResult> LAB_GETNOSAMPLEBYMETHOD(LAB_GETNOSAMPLEBYMETHODParameter para)
        {
            List<LAB_GETNOSAMPLEBYMETHODResult> results = new List<LAB_GETNOSAMPLEBYMETHODResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_PRODUCTIONLOT", 
                "P_FINISHINGLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_PRODUCTIONLOT, 
                para.P_FINISHINGLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_GETNOSAMPLEBYMETHOD",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        LAB_GETNOSAMPLEBYMETHODResult result =
                            new LAB_GETNOSAMPLEBYMETHODResult();

                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.PRODUCTIONLOT = row.Field<System.String>("PRODUCTIONLOT");
                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.METHOD = row.Field<System.String>("METHOD");
                        result.ENTRYDATE = row.Field<System.DateTime?>("ENTRYDATE");
                        result.N = row.Field<System.Decimal?>("N");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        //----------------------//

        // -- Update 20/09/18 -- //

        #region LAB_SEARCHLABSAMPLEDATA

        public List<LAB_SEARCHLABSAMPLEDATAResult> LAB_SEARCHLABSAMPLEDATA(LAB_SEARCHLABSAMPLEDATAParameter para)
        {
            List<LAB_SEARCHLABSAMPLEDATAResult> results = new List<LAB_SEARCHLABSAMPLEDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_ENTRYSTARTDATE", 
                "P_ENTRYENDDATE"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_ENTRYSTARTDATE, 
                para.P_ENTRYENDDATE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_SEARCHLABSAMPLEDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        LAB_SEARCHLABSAMPLEDATAResult result =
                            new LAB_SEARCHLABSAMPLEDATAResult();

                        result.PRODUCTIONLOT = row.Field<System.String>("PRODUCTIONLOT");
                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.ENTRYDATE = row.Field<System.DateTime?>("ENTRYDATE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region LAB_SAVEPLCDATA

        public LAB_SAVEPLCDATAResult LAB_SAVEPLCDATA(LAB_SAVEPLCDATAParameter para)
        {
            LAB_SAVEPLCDATAResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_PRODUCTIONLOT", 
                "P_TOTALWEIGHT1", 
                "P_TOTALWEIGHT2", 
                "P_TOTALWEIGHT3", 
                "P_TOTALWEIGHT4", 
                "P_TOTALWEIGHT5", 
                "P_TOTALWEIGHT6", 
                "P_UNCOATEDWEIGHT1", 
                "P_UNCOATEDWEIGHT2", 
                "P_UNCOATEDWEIGHT3", 
                "P_UNCOATEDWEIGHT4", 
                "P_UNCOATEDWEIGHT5", 
                "P_UNCOATEDWEIGHT6", 
                "P_COATWEIGHT1", 
                "P_COATWEIGHT2", 
                "P_COATWEIGHT3", 
                "P_COATWEIGHT4", 
                "P_COATWEIGHT5", 
                "P_COATWEIGHT6", 
                "P_STIFFNESS_W1", 
                "P_STIFFNESS_W2", 
                "P_STIFFNESS_W3", 
                "P_STIFFNESS_F1", 
                "P_STIFFNESS_F2", 
                "P_STIFFNESS_F3", 
                "P_STATIC_AIR1", 
                "P_STATIC_AIR2", 
                "P_STATIC_AIR3", 
                "P_STATIC_AIR4", 
                "P_STATIC_AIR5", 
                "P_STATIC_AIR6", 
                "P_DYNAMIC_AIR1", 
                "P_DYNAMIC_AIR2", 
                "P_DYNAMIC_AIR3", 
                "P_EXPONENT1", 
                "P_EXPONENT2", 
                "P_EXPONENT3", 
                "P_WEIGHTDATE", 
                "P_WEIGHTBY", 
                "P_STIFFNESSDATE", 
                "P_STIFFNESSBY", 
                "P_STATICAIRDATE", 
                "P_STATICAIRBY", 
                "P_DYNAMICDATE", 
                "P_DYNAMICBY"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_PRODUCTIONLOT, 
                para.P_TOTALWEIGHT1, 
                para.P_TOTALWEIGHT2, 
                para.P_TOTALWEIGHT3, 
                para.P_TOTALWEIGHT4, 
                para.P_TOTALWEIGHT5, 
                para.P_TOTALWEIGHT6, 
                para.P_UNCOATEDWEIGHT1, 
                para.P_UNCOATEDWEIGHT2, 
                para.P_UNCOATEDWEIGHT3, 
                para.P_UNCOATEDWEIGHT4, 
                para.P_UNCOATEDWEIGHT5, 
                para.P_UNCOATEDWEIGHT6, 
                para.P_COATWEIGHT1, 
                para.P_COATWEIGHT2, 
                para.P_COATWEIGHT3, 
                para.P_COATWEIGHT4, 
                para.P_COATWEIGHT5, 
                para.P_COATWEIGHT6, 
                para.P_STIFFNESS_W1, 
                para.P_STIFFNESS_W2, 
                para.P_STIFFNESS_W3, 
                para.P_STIFFNESS_F1, 
                para.P_STIFFNESS_F2, 
                para.P_STIFFNESS_F3, 
                para.P_STATIC_AIR1, 
                para.P_STATIC_AIR2, 
                para.P_STATIC_AIR3, 
                para.P_STATIC_AIR4, 
                para.P_STATIC_AIR5, 
                para.P_STATIC_AIR6, 
                para.P_DYNAMIC_AIR1, 
                para.P_DYNAMIC_AIR2, 
                para.P_DYNAMIC_AIR3, 
                para.P_EXPONENT1, 
                para.P_EXPONENT2, 
                para.P_EXPONENT3, 
                para.P_WEIGHTDATE, 
                para.P_WEIGHTBY, 
                para.P_STIFFNESSDATE, 
                para.P_STIFFNESSBY, 
                para.P_STATICAIRDATE, 
                para.P_STATICAIRBY, 
                para.P_DYNAMICDATE, 
                para.P_DYNAMICBY
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_SAVEPLCDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new LAB_SAVEPLCDATAResult();
                if (ret.Result.OutParameters["P_RETURN"] != DBNull.Value)
                    result.P_RETURN = (System.String)ret.Result.OutParameters["P_RETURN"];
            }

            return result;
        }

        #endregion

        #region LAB_GETSAMPLEDATABYMETHOD

        public List<LAB_GETSAMPLEDATABYMETHODResult> LAB_GETSAMPLEDATABYMETHOD(LAB_GETSAMPLEDATABYMETHODParameter para)
        {
            List<LAB_GETSAMPLEDATABYMETHODResult> results = new List<LAB_GETSAMPLEDATABYMETHODResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_PRODUCTIONLOT", 
                "P_FINISHINGLOT", 
                "P_METHOD"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_PRODUCTIONLOT, 
                para.P_FINISHINGLOT, 
                para.P_METHOD
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_GETSAMPLEDATABYMETHOD",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        LAB_GETSAMPLEDATABYMETHODResult result =
                            new LAB_GETSAMPLEDATABYMETHODResult();

                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.PRODUCTIONLOT = row.Field<System.String>("PRODUCTIONLOT");
                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.ENTRYDATE = row.Field<System.DateTime?>("ENTRYDATE");
                        result.ENTRYBY = row.Field<System.String>("ENTRYBY");
                        result.METHOD = row.Field<System.String>("METHOD");
                        result.YARN = row.Field<System.String>("YARN");
                        result.NO = row.Field<System.Decimal?>("NO");
                        result.VALUE = row.Field<System.Decimal?>("VALUE");
                        result.CREATEDDATE = row.Field<System.DateTime?>("CREATEDDATE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region LAB_GETPLCDATA

        public List<LAB_GETPLCDATAResult> LAB_GETPLCDATA(LAB_GETPLCDATAParameter para)
        {
            List<LAB_GETPLCDATAResult> results = new List<LAB_GETPLCDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_PRODUCTIONLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_PRODUCTIONLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LAB_GETPLCDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        LAB_GETPLCDATAResult result =
                            new LAB_GETPLCDATAResult();

                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.TOTALWEIGHT1 = row.Field<System.Decimal?>("TOTALWEIGHT1");
                        result.TOTALWEIGHT2 = row.Field<System.Decimal?>("TOTALWEIGHT2");
                        result.TOTALWEIGHT3 = row.Field<System.Decimal?>("TOTALWEIGHT3");
                        result.TOTALWEIGHT4 = row.Field<System.Decimal?>("TOTALWEIGHT4");
                        result.TOTALWEIGHT5 = row.Field<System.Decimal?>("TOTALWEIGHT5");
                        result.TOTALWEIGHT6 = row.Field<System.Decimal?>("TOTALWEIGHT6");
                        result.UNCOATEDWEIGHT1 = row.Field<System.Decimal?>("UNCOATEDWEIGHT1");
                        result.UNCOATEDWEIGHT2 = row.Field<System.Decimal?>("UNCOATEDWEIGHT2");
                        result.UNCOATEDWEIGHT3 = row.Field<System.Decimal?>("UNCOATEDWEIGHT3");
                        result.UNCOATEDWEIGHT4 = row.Field<System.Decimal?>("UNCOATEDWEIGHT4");
                        result.UNCOATEDWEIGHT5 = row.Field<System.Decimal?>("UNCOATEDWEIGHT5");
                        result.UNCOATEDWEIGHT6 = row.Field<System.Decimal?>("UNCOATEDWEIGHT6");
                        result.COATINGWEIGHT1 = row.Field<System.Decimal?>("COATINGWEIGHT1");
                        result.COATINGWEIGHT2 = row.Field<System.Decimal?>("COATINGWEIGHT2");
                        result.COATINGWEIGHT3 = row.Field<System.Decimal?>("COATINGWEIGHT3");
                        result.COATINGWEIGHT4 = row.Field<System.Decimal?>("COATINGWEIGHT4");
                        result.COATINGWEIGHT5 = row.Field<System.Decimal?>("COATINGWEIGHT5");
                        result.COATINGWEIGHT6 = row.Field<System.Decimal?>("COATINGWEIGHT6");
                        result.STIFFNESS_W1 = row.Field<System.Decimal?>("STIFFNESS_W1");
                        result.STIFFNESS_W2 = row.Field<System.Decimal?>("STIFFNESS_W2");
                        result.STIFFNESS_W3 = row.Field<System.Decimal?>("STIFFNESS_W3");
                        result.STIFFNESS_F1 = row.Field<System.Decimal?>("STIFFNESS_F1");
                        result.STIFFNESS_F2 = row.Field<System.Decimal?>("STIFFNESS_F2");
                        result.STIFFNESS_F3 = row.Field<System.Decimal?>("STIFFNESS_F3");
                        result.STATIC_AIR1 = row.Field<System.Decimal?>("STATIC_AIR1");
                        result.STATIC_AIR2 = row.Field<System.Decimal?>("STATIC_AIR2");
                        result.STATIC_AIR3 = row.Field<System.Decimal?>("STATIC_AIR3");
                        result.STATIC_AIR4 = row.Field<System.Decimal?>("STATIC_AIR4");
                        result.STATIC_AIR5 = row.Field<System.Decimal?>("STATIC_AIR5");
                        result.STATIC_AIR6 = row.Field<System.Decimal?>("STATIC_AIR6");
                        result.WEIGHTDATE = row.Field<System.DateTime?>("WEIGHTDATE");
                        result.WEIGHT_BY = row.Field<System.String>("WEIGHT_BY");
                        result.STIFFNESSDATE = row.Field<System.DateTime?>("STIFFNESSDATE");
                        result.STIFFNESS_BY = row.Field<System.String>("STIFFNESS_BY");
                        result.STATICAIRDATE = row.Field<System.DateTime?>("STATICAIRDATE");
                        result.STATICAIR_BY = row.Field<System.String>("STATICAIR_BY");
                        result.EXPONENT1 = row.Field<System.Decimal?>("EXPONENT1");
                        result.EXPONENT2 = row.Field<System.Decimal?>("EXPONENT2");
                        result.EXPONENT3 = row.Field<System.Decimal?>("EXPONENT3");
                        result.DYNAMIC_AIR1 = row.Field<System.Decimal?>("DYNAMIC_AIR1");
                        result.DYNAMIC_AIR2 = row.Field<System.Decimal?>("DYNAMIC_AIR2");
                        result.DYNAMIC_AIR3 = row.Field<System.Decimal?>("DYNAMIC_AIR3");
                        result.DYNAMICDATE = row.Field<System.DateTime?>("DYNAMICDATE");
                        result.DYNAMIC_BY = row.Field<System.String>("DYNAMIC_BY");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion
        
        //----------------------//

        #region LOG_INSERT

        public LOG_INSERTResult LOG_INSERT(LOG_INSERTParameter para)
        {
            LOG_INSERTResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_PROCESSID", 
                "P_OPERATION", 
                "P_LOT", 
                "P_OPERATORID", 
                "P_COMPUTORNAME", 
                "P_DATE"
            };
            object[] paraValues = new object[]
            {
                para.P_PROCESSID, 
                para.P_OPERATION, 
                para.P_LOT, 
                para.P_OPERATORID, 
                para.P_COMPUTORNAME, 
                para.P_DATE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "LOG_INSERT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new LOG_INSERTResult();
            }

            return result;
        }

        #endregion

        #region ITM_UPDATE100MRECORD

        public ITM_UPDATE100MRECORDResult ITM_UPDATE100MRECORD(ITM_UPDATE100MRECORDParameter para)
        {
            ITM_UPDATE100MRECORDResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITEMCODE", 
                "P_DENW", 
                "P_DENF", 
                "P_WIDTHALL", 
                "P_WIDTHPIN", 
                "P_WIDTHCOAT", 
                "P_WIDTHSELVAGEL", 
                "P_WIDTHSELVAGER", 

                "P_TRIML", 
                "P_TRIMR", 
                "P_FLOPPYL", 
                "P_FLOPPYR", 
                "P_UNWINDER", 
                "P_WINDER", 
                "P_HARDNESSL", 
                "P_HARDNESSC", 
                "P_HARDNESSR"
            };
            object[] paraValues = new object[]
            {
                para.P_ITEMCODE, 
                para.P_DENW, 
                para.P_DENF, 
                para.P_WIDTHALL, 
                para.P_WIDTHPIN, 
                para.P_WIDTHCOAT, 
                para.P_WIDTHSELVAGEL, 
                para.P_WIDTHSELVAGER, 
                para.P_TRIML, 
                para.P_TRIMR, 
                para.P_FLOPPYL, 
                para.P_FLOPPYR, 
                para.P_UNWINDER, 
                para.P_WINDER, 
                para.P_HARDNESSL, 
                para.P_HARDNESSC, 
                para.P_HARDNESSR
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "ITM_UPDATE100MRECORD",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new ITM_UPDATE100MRECORDResult();
            }

            return result;
        }

        #endregion

        #region ITM_SEARCHITEMCODE

        public List<ITM_SEARCHITEMCODEResult> ITM_SEARCHITEMCODE(ITM_SEARCHITEMCODEParameter para)
        {
            List<ITM_SEARCHITEMCODEResult> results = new List<ITM_SEARCHITEMCODEResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITEMCODE", 
                "P_ITEMWEAV", 
                "P_ITEMPREPARE", 
                "P_ITEMYARN", 
                "P_YARNCODE"
            };
            object[] paraValues = new object[]
            {
                para.P_ITEMCODE, 
                para.P_ITEMWEAV, 
                para.P_ITEMPREPARE, 
                para.P_ITEMYARN, 
                para.P_YARNCODE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "ITM_SEARCHITEMCODE",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        ITM_SEARCHITEMCODEResult result =
                            new ITM_SEARCHITEMCODEResult();

                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");
                        result.ITM_YARN = row.Field<System.String>("ITM_YARN");
                        result.ITM_WIDTH = row.Field<System.Decimal?>("ITM_WIDTH");
                        result.ITM_PROC1 = row.Field<System.String>("ITM_PROC1");
                        result.ITM_PROC2 = row.Field<System.String>("ITM_PROC2");
                        result.ITM_PROC3 = row.Field<System.String>("ITM_PROC3");
                        result.ITM_PROC4 = row.Field<System.String>("ITM_PROC4");
                        result.ITM_PROC5 = row.Field<System.String>("ITM_PROC5");
                        result.ITM_PROC6 = row.Field<System.String>("ITM_PROC6");
                        result.CREATEDATE = row.Field<System.DateTime?>("CREATEDATE");
                        result.CREATEBY = row.Field<System.String>("CREATEBY");
                        result.EDITDATE = row.Field<System.DateTime?>("EDITDATE");
                        result.EDITBY = row.Field<System.String>("EDITBY");
                        result.ITM_PREPARE = row.Field<System.String>("ITM_PREPARE");
                        result.COREWEIGHT = row.Field<System.Decimal?>("COREWEIGHT");
                        result.FULLWEIGHT = row.Field<System.Decimal?>("FULLWEIGHT");
                        result.ITM_GROUP = row.Field<System.String>("ITM_GROUP");
                        result.YARNCODE = row.Field<System.String>("YARNCODE");
                        result.WIDTHCODE = row.Field<System.String>("WIDTHCODE");
                        result.WIDTHWEAVING = row.Field<System.Decimal?>("WIDTHWEAVING");
                        result.LABFORM = row.Field<System.String>("LABFORM");
                        result.WEAVE_TYPE = row.Field<System.String>("WEAVE_TYPE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region ITM_INSERTUPDATEITEMCODE

        public ITM_INSERTUPDATEITEMCODEResult ITM_INSERTUPDATEITEMCODE(ITM_INSERTUPDATEITEMCODEParameter para)
        {
            ITM_INSERTUPDATEITEMCODEResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITEMCODE", 
                "P_ITEMWEAV", 
                "P_ITEMPREPARE", 
                "P_ITEMYARN", 
                "P_WIDTH", 
                "P_WEAVEWIDTH", 
                "P_COREWEIGHT", 
                "P_YARNCODE", 
                "P_PROC1", 
                "P_PROC2", 
                "P_PROC3", 
                "P_PROC4", 
                "P_PROC5", 
                "P_PROC6", 
                "P_OPERATOR"
            };
            object[] paraValues = new object[]
            {
                para.P_ITEMCODE, 
                para.P_ITEMWEAV, 
                para.P_ITEMPREPARE, 
                para.P_ITEMYARN, 
                para.P_WIDTH, 
                para.P_WEAVEWIDTH, 
                para.P_COREWEIGHT, 
                para.P_YARNCODE, 
                para.P_PROC1, 
                para.P_PROC2, 
                para.P_PROC3, 
                para.P_PROC4, 
                para.P_PROC5, 
                para.P_PROC6, 
                para.P_OPERATOR
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "ITM_INSERTUPDATEITEMCODE",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new ITM_INSERTUPDATEITEMCODEResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region ITM_GETITEMYARNLIST

        public List<ITM_GETITEMYARNLISTResult> ITM_GETITEMYARNLIST(ITM_GETITEMYARNLISTParameter para)
        {
            List<ITM_GETITEMYARNLISTResult> results = new List<ITM_GETITEMYARNLISTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
            };
            object[] paraValues = new object[]
            {
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "ITM_GETITEMYARNLIST",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        ITM_GETITEMYARNLISTResult result =
                            new ITM_GETITEMYARNLISTResult();

                        result.ITM_YARN = row.Field<System.String>("ITM_YARN");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region ITM_GETITEMYARN400

        public List<ITM_GETITEMYARN400Result> ITM_GETITEMYARN400(ITM_GETITEMYARN400Parameter para)
        {
            List<ITM_GETITEMYARN400Result> results = new List<ITM_GETITEMYARN400Result>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITEMYARN"
            };
            object[] paraValues = new object[]
            {
                para.P_ITEMYARN
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "ITM_GETITEMYARN400",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        ITM_GETITEMYARN400Result result =
                            new ITM_GETITEMYARN400Result();

                        result.ITM_YARN = row.Field<System.String>("ITM_YARN");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region ITM_GETITEMPREPARELIST

        public List<ITM_GETITEMPREPARELISTResult> ITM_GETITEMPREPARELIST(ITM_GETITEMPREPARELISTParameter para)
        {
            List<ITM_GETITEMPREPARELISTResult> results = new List<ITM_GETITEMPREPARELISTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
            };
            object[] paraValues = new object[]
            {
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "ITM_GETITEMPREPARELIST",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        ITM_GETITEMPREPARELISTResult result =
                            new ITM_GETITEMPREPARELISTResult();

                        result.ITM_PREPARE = row.Field<System.String>("ITM_PREPARE");
                        result.ITM_YARN = row.Field<System.String>("ITM_YARN");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region ITM_GETITEMCODELIST

        public List<ITM_GETITEMCODELISTResult> ITM_GETITEMCODELIST(ITM_GETITEMCODELISTParameter para)
        {
            List<ITM_GETITEMCODELISTResult> results = new List<ITM_GETITEMCODELISTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
            };
            object[] paraValues = new object[]
            {
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "ITM_GETITEMCODELIST",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        ITM_GETITEMCODELISTResult result =
                            new ITM_GETITEMCODELISTResult();

                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region ITM_GETITEMBYITEMCODEANDCUSID

        public List<ITM_GETITEMBYITEMCODEANDCUSIDResult> ITM_GETITEMBYITEMCODEANDCUSID(ITM_GETITEMBYITEMCODEANDCUSIDParameter para)
        {
            List<ITM_GETITEMBYITEMCODEANDCUSIDResult> results = new List<ITM_GETITEMBYITEMCODEANDCUSIDResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_CUSTOMERID", 
                "P_ITMCODE"
            };
            object[] paraValues = new object[]
            {
                para.P_CUSTOMERID, 
                para.P_ITMCODE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "ITM_GETITEMBYITEMCODEANDCUSID",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        ITM_GETITEMBYITEMCODEANDCUSIDResult result =
                            new ITM_GETITEMBYITEMCODEANDCUSIDResult();

                        result.CUSTOMERID = row.Field<System.String>("CUSTOMERID");
                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.PARTNO = row.Field<System.String>("PARTNO");
                        result.FABRIC = row.Field<System.String>("FABRIC");
                        result.LENGTH = row.Field<System.Decimal?>("LENGTH");
                        result.DENSITY_W = row.Field<System.String>("DENSITY_W");
                        result.DENSITY_F = row.Field<System.String>("DENSITY_F");
                        result.WIDTH_ALL = row.Field<System.String>("WIDTH_ALL");
                        result.WIDTH_PIN = row.Field<System.String>("WIDTH_PIN");
                        result.WIDTH_COAT = row.Field<System.String>("WIDTH_COAT");
                        result.TRIM_L = row.Field<System.String>("TRIM_L");
                        result.TRIM_R = row.Field<System.String>("TRIM_R");
                        result.FLOPPY_L = row.Field<System.String>("FLOPPY_L");
                        result.FLOPPY_R = row.Field<System.String>("FLOPPY_R");
                        result.HARDNESS_L = row.Field<System.String>("HARDNESS_L");
                        result.HARDNESS_C = row.Field<System.String>("HARDNESS_C");
                        result.HARDNESS_R = row.Field<System.String>("HARDNESS_R");
                        result.UNWINDER = row.Field<System.String>("UNWINDER");
                        result.WINDER = row.Field<System.String>("WINDER");
                        result.FINISHINGCUSTOMER = row.Field<System.String>("FINISHINGCUSTOMER");
                        result.DESCRIPTION = row.Field<System.String>("DESCRIPTION");
                        result.SUPPLIERCODE = row.Field<System.String>("SUPPLIERCODE");
                        result.WIDTH = row.Field<System.String>("WIDTH");
                        result.WIDTH_SELVAGEL = row.Field<System.String>("WIDTH_SELVAGEL");
                        result.WIDTH_SELVAGER = row.Field<System.String>("WIDTH_SELVAGER");
                        result.RESETSTARTLENGTH = row.Field<System.Decimal?>("RESETSTARTLENGTH");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region INS_SHIFTREMARK

        public INS_SHIFTREMARKResult INS_SHIFTREMARK(INS_SHIFTREMARKParameter para)
        {
            INS_SHIFTREMARKResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_INSLOT", 
                "P_STARTDATE", 
                "P_SHIFTREMARK", 
                "P_SHIFTID", 
                "P_SHIFTDATE"
            };
            object[] paraValues = new object[]
            {
                para.P_INSLOT, 
                para.P_STARTDATE, 
                para.P_SHIFTREMARK, 
                para.P_SHIFTID, 
                para.P_SHIFTDATE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INS_SHIFTREMARK",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new INS_SHIFTREMARKResult();
                if (ret.Result.OutParameters["R_RESULT"] != DBNull.Value)
                    result.R_RESULT = (System.String)ret.Result.OutParameters["R_RESULT"];
            }

            return result;
        }

        #endregion

        #region INS_SEARCHINSPECTIONDATA

        public List<INS_SEARCHINSPECTIONDATAResult> INS_SEARCHINSPECTIONDATA(INS_SEARCHINSPECTIONDATAParameter para)
        {
            List<INS_SEARCHINSPECTIONDATAResult> results = new List<INS_SEARCHINSPECTIONDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_DATE", 
                "P_MC"
            };
            object[] paraValues = new object[]
            {
                para.P_DATE, 
                para.P_MC
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INS_SEARCHINSPECTIONDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        INS_SEARCHINSPECTIONDATAResult result =
                            new INS_SEARCHINSPECTIONDATAResult();

                        result.INSPECTIONLOT = row.Field<System.String>("INSPECTIONLOT");
                        result.ITEMCODE = row.Field<System.String>("ITEMCODE");
                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.GROSSLENGTH = row.Field<System.Decimal?>("GROSSLENGTH");
                        result.NETLENGTH = row.Field<System.Decimal?>("NETLENGTH");
                        result.CUSTOMERID = row.Field<System.String>("CUSTOMERID");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.GRADE = row.Field<System.String>("GRADE");
                        result.GROSSWEIGHT = row.Field<System.Decimal?>("GROSSWEIGHT");
                        result.NETWEIGHT = row.Field<System.Decimal?>("NETWEIGHT");
                        result.PEINSPECTIONLOT = row.Field<System.String>("PEINSPECTIONLOT");
                        result.DEFECTID = row.Field<System.String>("DEFECTID");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.ATTACHID = row.Field<System.String>("ATTACHID");
                        result.TESTRECORDID = row.Field<System.String>("TESTRECORDID");
                        result.INSPECTEDBY = row.Field<System.String>("INSPECTEDBY");
                        result.MCNO = row.Field<System.String>("MCNO");
                        result.FINISHFLAG = row.Field<System.String>("FINISHFLAG");
                        result.SUSPENDDATE = row.Field<System.DateTime?>("SUSPENDDATE");
                        result.INSPECTIONID = row.Field<System.String>("INSPECTIONID");
                        result.RETEST = row.Field<System.String>("RETEST");
                        result.PREITEMCODE = row.Field<System.String>("PREITEMCODE");
                        result.SUSPENDBY = row.Field<System.String>("SUSPENDBY");
                        result.STARTDATE1 = row.Field<System.DateTime?>("STARTDATE1");
                        result.CLEARBY = row.Field<System.String>("CLEARBY");
                        result.CLEARREMARK = row.Field<System.String>("CLEARREMARK");
                        result.CUSTOMERTYPE = row.Field<System.String>("CUSTOMERTYPE");
                        result.DEFECTFILENAME = row.Field<System.String>("DEFECTFILENAME");
                        result.ISPACKED = row.Field<System.String>("ISPACKED");
                        result.DF_CODE = row.Field<System.String>("DF_CODE");
                        result.DF_AMOUNT = row.Field<System.Decimal?>("DF_AMOUNT");
                        result.DF_POINT = row.Field<System.Decimal?>("DF_POINT");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.OPERATOR_GROUP = row.Field<System.String>("OPERATOR_GROUP");
                        result.RETYPE = row.Field<System.String>("RETYPE");
                        result.SHIFT_REMARK = row.Field<System.String>("SHIFT_REMARK");
                        result.SHIFT_ID = row.Field<System.String>("SHIFT_ID");
                        result.SHIFT_REMARK_DATE = row.Field<System.DateTime?>("SHIFT_REMARK_DATE");
                        result.CONFIRMSTARTLENGTH = row.Field<System.Decimal?>("CONFIRMSTARTLENGTH");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region INS_REWAREHOUSE

        public INS_REWAREHOUSEResult INS_REWAREHOUSE(INS_REWAREHOUSEParameter para)
        {
            INS_REWAREHOUSEResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_INSOLD", 
                "P_DEFECTID", 
                "P_TESTID", 
                "P_INSNEW"
            };
            object[] paraValues = new object[]
            {
                para.P_INSOLD, 
                para.P_DEFECTID, 
                para.P_TESTID, 
                para.P_INSNEW
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INS_REWAREHOUSE",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new INS_REWAREHOUSEResult();
            }

            return result;
        }

        #endregion

        #region INS_REPORTSUMDEFECT

        public List<INS_REPORTSUMDEFECTResult> INS_REPORTSUMDEFECT(INS_REPORTSUMDEFECTParameter para)
        {
            List<INS_REPORTSUMDEFECTResult> results = new List<INS_REPORTSUMDEFECTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_DEFECTID"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_DEFECTID
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INS_REPORTSUMDEFECT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        INS_REPORTSUMDEFECTResult result =
                            new INS_REPORTSUMDEFECTResult();

                        result.TOTALPOINT = row.Field<System.Decimal?>("TOTALPOINT");
                        result.SHORTDEFECT = row.Field<System.Decimal?>("SHORTDEFECT");
                        result.LONGDEFECT = row.Field<System.Decimal?>("LONGDEFECT");
                        result.COMLONGDEFECT = row.Field<System.Decimal?>("COMLONGDEFECT");
                        result.COMSHORTDEFECT = row.Field<System.Decimal?>("COMSHORTDEFECT");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region INS_INSERTCONFIRMSTARTING

        public INS_INSERTCONFIRMSTARTINGResult INS_INSERTCONFIRMSTARTING(INS_INSERTCONFIRMSTARTINGParameter para)
        {
            INS_INSERTCONFIRMSTARTINGResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_INSID", 
                "P_INSLOT", 
                "P_CONFIRMSTART"
            };
            object[] paraValues = new object[]
            {
                para.P_INSID, 
                para.P_INSLOT, 
                para.P_CONFIRMSTART
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INS_INSERTCONFIRMSTARTING",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new INS_INSERTCONFIRMSTARTINGResult();
            }

            return result;
        }

        #endregion

        #region INS_INSERTMANUALINSPECTDATA

        public INS_INSERTMANUALINSPECTDATAResult INS_INSERTMANUALINSPECTDATA(INS_INSERTMANUALINSPECTDATAParameter para)
        {
            INS_INSERTMANUALINSPECTDATAResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_INSLOT", 
                "P_ITMCODE", 
                "P_FINISHLOT", 
                "P_STARTDATE", 
                "P_ENDDATE", 
                "P_CUSTOMERID", 
                "P_PRODUCTTYPEID", 
                "P_INSPECTEDBY", 
                "P_MCNO", 
                "P_CUSTOMERTYPE", 
                "P_LOADTYPE", 
                "P_GLENGHT", 
                "P_NLENGTH", 
                "P_GRADE", 
                "P_GWEIGHT", 
                "P_NWEIGHT", 
                "P_REMARK", 
                "P_OPERATOR", 
                "P_GROUP"
            };
            object[] paraValues = new object[]
            {
                para.P_INSLOT, 
                para.P_ITMCODE, 
                para.P_FINISHLOT, 
                para.P_STARTDATE, 
                para.P_ENDDATE, 
                para.P_CUSTOMERID, 
                para.P_PRODUCTTYPEID, 
                para.P_INSPECTEDBY, 
                para.P_MCNO, 
                para.P_CUSTOMERTYPE, 
                para.P_LOADTYPE, 
                para.P_GLENGHT, 
                para.P_NLENGTH, 
                para.P_GRADE, 
                para.P_GWEIGHT, 
                para.P_NWEIGHT, 
                para.P_REMARK, 
                para.P_OPERATOR, 
                para.P_GROUP
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INS_INSERTMANUALINSPECTDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new INS_INSERTMANUALINSPECTDATAResult();
                if (ret.Result.OutParameters["R_INSID"] != DBNull.Value)
                    result.R_INSID = (System.String)ret.Result.OutParameters["R_INSID"];
            }

            return result;
        }

        #endregion

        #region INS_GETTOTALDEFECTBYINSLOT

        public INS_GETTOTALDEFECTBYINSLOTResult INS_GETTOTALDEFECTBYINSLOT(INS_GETTOTALDEFECTBYINSLOTParameter para)
        {
            INS_GETTOTALDEFECTBYINSLOTResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_INSLOT", 
                "P_DEFECTID"
            };
            object[] paraValues = new object[]
            {
                para.P_INSLOT, 
                para.P_DEFECTID
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INS_GETTOTALDEFECTBYINSLOT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new INS_GETTOTALDEFECTBYINSLOTResult();
                if (ret.Result.OutParameters["TOTAL"] != DBNull.Value)
                    result.TOTAL = (System.Decimal)ret.Result.OutParameters["TOTAL"];
            }

            return result;
        }

        #endregion

        #region INS_GETRESETSTARTLENGTH

        public List<INS_GETRESETSTARTLENGTHResult> INS_GETRESETSTARTLENGTH(INS_GETRESETSTARTLENGTHParameter para)
        {
            List<INS_GETRESETSTARTLENGTHResult> results = new List<INS_GETRESETSTARTLENGTHResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_CUSTOMERID"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_CUSTOMERID
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INS_GETRESETSTARTLENGTH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        INS_GETRESETSTARTLENGTHResult result =
                            new INS_GETRESETSTARTLENGTHResult();

                        result.RESETSTARTLENGTH = row.Field<System.Decimal?>("RESETSTARTLENGTH");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region INS_GETNETLENGTH

        public INS_GETNETLENGTHResult INS_GETNETLENGTH(INS_GETNETLENGTHParameter para)
        {
            INS_GETNETLENGTHResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_CUSID", 
                "P_ITMCODE", 
                "P_LENGTH", 
                "P_GRADE", 
                "P_DEFECTID"
            };
            object[] paraValues = new object[]
            {
                para.P_CUSID, 
                para.P_ITMCODE, 
                para.P_LENGTH, 
                para.P_GRADE, 
                para.P_DEFECTID
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INS_GETNETLENGTH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new INS_GETNETLENGTHResult();
                if (ret.Result.OutParameters["NETLENGTH"] != DBNull.Value)
                    result.NETLENGTH = (System.Decimal)ret.Result.OutParameters["NETLENGTH"];
            }

            return result;
        }

        #endregion

        #region INS_GETMCSUSPENDDATA

        public List<INS_GETMCSUSPENDDATAResult> INS_GETMCSUSPENDDATA(INS_GETMCSUSPENDDATAParameter para)
        {
            List<INS_GETMCSUSPENDDATAResult> results = new List<INS_GETMCSUSPENDDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_INSMC"
            };
            object[] paraValues = new object[]
            {
                para.P_INSMC
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INS_GETMCSUSPENDDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        INS_GETMCSUSPENDDATAResult result =
                            new INS_GETMCSUSPENDDATAResult();

                        result.INSPECTIONLOT = row.Field<System.String>("INSPECTIONLOT");
                        result.ITEMCODE = row.Field<System.String>("ITEMCODE");
                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.GROSSLENGTH = row.Field<System.Decimal?>("GROSSLENGTH");
                        result.NETLENGTH = row.Field<System.Decimal?>("NETLENGTH");
                        result.CUSTOMERID = row.Field<System.String>("CUSTOMERID");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.GRADE = row.Field<System.String>("GRADE");
                        result.GROSSWEIGHT = row.Field<System.Decimal?>("GROSSWEIGHT");
                        result.NETWEIGHT = row.Field<System.Decimal?>("NETWEIGHT");
                        result.PEINSPECTIONLOT = row.Field<System.String>("PEINSPECTIONLOT");
                        result.DEFECTID = row.Field<System.String>("DEFECTID");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.ATTACHID = row.Field<System.String>("ATTACHID");
                        result.TESTRECORDID = row.Field<System.String>("TESTRECORDID");
                        result.INSPECTEDBY = row.Field<System.String>("INSPECTEDBY");
                        result.MCNO = row.Field<System.String>("MCNO");
                        result.FINISHFLAG = row.Field<System.String>("FINISHFLAG");
                        result.SUSPENDDATE = row.Field<System.DateTime?>("SUSPENDDATE");
                        result.INSPECTIONID = row.Field<System.String>("INSPECTIONID");
                        result.RETEST = row.Field<System.String>("RETEST");
                        result.PREITEMCODE = row.Field<System.String>("PREITEMCODE");
                        result.SUSPENDBY = row.Field<System.String>("SUSPENDBY");
                        result.STARTDATE1 = row.Field<System.DateTime?>("STARTDATE1");
                        result.CLEARBY = row.Field<System.String>("CLEARBY");
                        result.CLEARREMARK = row.Field<System.String>("CLEARREMARK");
                        result.CUSTOMERTYPE = row.Field<System.String>("CUSTOMERTYPE");
                        result.DEFECTFILENAME = row.Field<System.String>("DEFECTFILENAME");
                        result.ISPACKED = row.Field<System.String>("ISPACKED");
                        result.DF_CODE = row.Field<System.String>("DF_CODE");
                        result.DF_AMOUNT = row.Field<System.Decimal?>("DF_AMOUNT");
                        result.DF_POINT = row.Field<System.Decimal?>("DF_POINT");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.OPERATOR_GROUP = row.Field<System.String>("OPERATOR_GROUP");
                        result.RETYPE = row.Field<System.String>("RETYPE");
                        result.SHIFT_REMARK = row.Field<System.String>("SHIFT_REMARK");
                        result.SHIFT_ID = row.Field<System.String>("SHIFT_ID");
                        result.SHIFT_REMARK_DATE = row.Field<System.DateTime?>("SHIFT_REMARK_DATE");
                        result.CONFIRMSTARTLENGTH = row.Field<System.Decimal?>("CONFIRMSTARTLENGTH");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region INS_GETINSPECTIONREPORTDATA

        public List<INS_GETINSPECTIONREPORTDATAResult> INS_GETINSPECTIONREPORTDATA(INS_GETINSPECTIONREPORTDATAParameter para)
        {
            List<INS_GETINSPECTIONREPORTDATAResult> results = new List<INS_GETINSPECTIONREPORTDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_INS_LOT"
            };
            object[] paraValues = new object[]
            {
                para.P_INS_LOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INS_GETINSPECTIONREPORTDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        INS_GETINSPECTIONREPORTDATAResult result =
                            new INS_GETINSPECTIONREPORTDATAResult();

                        result.INSPECTIONLOT = row.Field<System.String>("INSPECTIONLOT");
                        result.ITEMCODE = row.Field<System.String>("ITEMCODE");
                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.GROSSLENGTH = row.Field<System.Decimal?>("GROSSLENGTH");
                        result.NETLENGTH = row.Field<System.Decimal?>("NETLENGTH");
                        result.CUSTOMERID = row.Field<System.String>("CUSTOMERID");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.GRADE = row.Field<System.String>("GRADE");
                        result.GROSSWEIGHT = row.Field<System.Decimal?>("GROSSWEIGHT");
                        result.NETWEIGHT = row.Field<System.Decimal?>("NETWEIGHT");
                        result.PEINSPECTIONLOT = row.Field<System.String>("PEINSPECTIONLOT");
                        result.DEFECTID = row.Field<System.String>("DEFECTID");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.SHIFT_ID = row.Field<System.String>("SHIFT_ID");
                        result.SHIFT_REMARK = row.Field<System.String>("SHIFT_REMARK");
                        result.ATTACHID = row.Field<System.String>("ATTACHID");
                        result.TESTRECORDID = row.Field<System.String>("TESTRECORDID");
                        result.INSPECTEDBY = row.Field<System.String>("INSPECTEDBY");
                        result.MCNO = row.Field<System.String>("MCNO");
                        result.FINISHFLAG = row.Field<System.String>("FINISHFLAG");
                        result.SUSPENDDATE = row.Field<System.DateTime?>("SUSPENDDATE");
                        result.INSPECTIONID = row.Field<System.String>("INSPECTIONID");
                        result.RETEST = row.Field<System.String>("RETEST");
                        result.PREITEMCODE = row.Field<System.String>("PREITEMCODE");
                        result.CLEARBY = row.Field<System.String>("CLEARBY");
                        result.CLEARREMARK = row.Field<System.String>("CLEARREMARK");
                        result.SUSPENDBY = row.Field<System.String>("SUSPENDBY");
                        result.STARTDATE1 = row.Field<System.DateTime?>("STARTDATE1");
                        result.CUSTOMERTYPE = row.Field<System.String>("CUSTOMERTYPE");
                        result.DEFECTFILENAME = row.Field<System.String>("DEFECTFILENAME");
                        result.PRODUCTNAME = row.Field<System.String>("PRODUCTNAME");
                        result.MCNAME = row.Field<System.String>("MCNAME");
                        result.CUSTOMERNAME = row.Field<System.String>("CUSTOMERNAME");
                        result.PARTNO = row.Field<System.String>("PARTNO");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");

                        //New 23/8/22
                        result.CONFIRMSTARTLENGTH = row.Field<System.Decimal?>("CONFIRMSTARTLENGTH");
                        result.CONFIRMSTDLENGTH = row.Field<System.String>("CONFIRMSTDLENGTH");

                        //New 17/10/22
                        result.RESETSTARTLENGTH = row.Field<System.Decimal?>("RESETSTARTLENGTH");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region INS_GETFINISHINSLOTDATA

        public List<INS_GETFINISHINSLOTDATAResult> INS_GETFINISHINSLOTDATA(INS_GETFINISHINSLOTDATAParameter para)
        {
            List<INS_GETFINISHINSLOTDATAResult> results = new List<INS_GETFINISHINSLOTDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_FINLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_FINLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INS_GETFINISHINSLOTDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        INS_GETFINISHINSLOTDATAResult result =
                            new INS_GETFINISHINSLOTDATAResult();

                        result.INSPECTIONLOT = row.Field<System.String>("INSPECTIONLOT");
                        result.ITEMCODE = row.Field<System.String>("ITEMCODE");
                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.GROSSLENGTH = row.Field<System.Decimal?>("GROSSLENGTH");
                        result.NETLENGTH = row.Field<System.Decimal?>("NETLENGTH");
                        result.CUSTOMERID = row.Field<System.String>("CUSTOMERID");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.GRADE = row.Field<System.String>("GRADE");
                        result.GROSSWEIGHT = row.Field<System.Decimal?>("GROSSWEIGHT");
                        result.NETWEIGHT = row.Field<System.Decimal?>("NETWEIGHT");
                        result.PEINSPECTIONLOT = row.Field<System.String>("PEINSPECTIONLOT");
                        result.DEFECTID = row.Field<System.String>("DEFECTID");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.ATTACHID = row.Field<System.String>("ATTACHID");
                        result.TESTRECORDID = row.Field<System.String>("TESTRECORDID");
                        result.INSPECTEDBY = row.Field<System.String>("INSPECTEDBY");
                        result.MCNO = row.Field<System.String>("MCNO");
                        result.FINISHFLAG = row.Field<System.String>("FINISHFLAG");
                        result.SUSPENDDATE = row.Field<System.DateTime?>("SUSPENDDATE");
                        result.INSPECTIONID = row.Field<System.String>("INSPECTIONID");
                        result.RETEST = row.Field<System.String>("RETEST");
                        result.PREITEMCODE = row.Field<System.String>("PREITEMCODE");
                        result.SUSPENDBY = row.Field<System.String>("SUSPENDBY");
                        result.STARTDATE1 = row.Field<System.DateTime?>("STARTDATE1");
                        result.CLEARBY = row.Field<System.String>("CLEARBY");
                        result.CLEARREMARK = row.Field<System.String>("CLEARREMARK");
                        result.CUSTOMERTYPE = row.Field<System.String>("CUSTOMERTYPE");
                        result.DEFECTFILENAME = row.Field<System.String>("DEFECTFILENAME");
                        result.ISPACKED = row.Field<System.String>("ISPACKED");
                        result.DF_CODE = row.Field<System.String>("DF_CODE");
                        result.DF_AMOUNT = row.Field<System.Decimal?>("DF_AMOUNT");
                        result.DF_POINT = row.Field<System.Decimal?>("DF_POINT");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.OPERATOR_GROUP = row.Field<System.String>("OPERATOR_GROUP");
                        result.RETYPE = row.Field<System.String>("RETYPE");
                        result.SHIFT_REMARK = row.Field<System.String>("SHIFT_REMARK");
                        result.SHIFT_ID = row.Field<System.String>("SHIFT_ID");
                        result.SHIFT_REMARK_DATE = row.Field<System.DateTime?>("SHIFT_REMARK_DATE");
                        result.CONFIRMSTARTLENGTH = row.Field<System.Decimal?>("CONFIRMSTARTLENGTH");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region INS_GETDEFECTLISTREPORT

        public List<INS_GETDEFECTLISTREPORTResult> INS_GETDEFECTLISTREPORT(INS_GETDEFECTLISTREPORTParameter para)
        {
            List<INS_GETDEFECTLISTREPORTResult> results = new List<INS_GETDEFECTLISTREPORTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_DEFECTID", 
                "P_INSLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_DEFECTID, 
                para.P_INSLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INS_GETDEFECTLISTREPORT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        INS_GETDEFECTLISTREPORTResult result =
                            new INS_GETDEFECTLISTREPORTResult();

                        result.DEFECTID = row.Field<System.String>("DEFECTID");
                        result.INSPECTIONLOT = row.Field<System.String>("INSPECTIONLOT");
                        result.DEFECTCODE = row.Field<System.String>("DEFECTCODE");
                        result.LENGTH1 = row.Field<System.Decimal?>("LENGTH1");
                        result.POSITION = row.Field<System.Decimal?>("POSITION");
                        result.FLAG = row.Field<System.String>("FLAG");
                        result.DEFECTPOINT = row.Field<System.Decimal?>("DEFECTPOINT");
                        result.LENGTH2 = row.Field<System.Decimal?>("LENGTH2");
                        result.DELETEBY = row.Field<System.String>("DELETEBY");
                        result.DELETEREMARK = row.Field<System.String>("DELETEREMARK");
                        result.COMPENSATELENGTH = row.Field<System.Decimal?>("COMPENSATELENGTH");
                        result.DEFECTPOINT100 = row.Field<System.Decimal?>("DEFECTPOINT100");
                        result.DESCRIPTION_EN = row.Field<System.String>("DESCRIPTION_EN");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region INS_GET100MDEFECTPOINT

        public INS_GET100MDEFECTPOINTResult INS_GET100MDEFECTPOINT(INS_GET100MDEFECTPOINTParameter para)
        {
            INS_GET100MDEFECTPOINTResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_INSLOT", 
                "P_DEFECTID", 
                "P_LENGTH1", 
                "P_LENGTH2"
            };
            object[] paraValues = new object[]
            {
                para.P_INSLOT, 
                para.P_DEFECTID, 
                para.P_LENGTH1, 
                para.P_LENGTH2
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INS_GET100MDEFECTPOINT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new INS_GET100MDEFECTPOINTResult();
                if (ret.Result.OutParameters["R_POINT"] != DBNull.Value)
                    result.R_POINT = (System.Decimal)ret.Result.OutParameters["R_POINT"];
            }

            return result;
        }

        #endregion

        #region INS_GETCUTSAMPLELIST

        public List<INS_GETCUTSAMPLELISTResult> INS_GETCUTSAMPLELIST(INS_GETCUTSAMPLELISTParameter para)
        {
            List<INS_GETCUTSAMPLELISTResult> results = new List<INS_GETCUTSAMPLELISTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_INS_LOT", 
                "P_STARTDATE"
            };
            object[] paraValues = new object[]
            {
                para.P_INS_LOT, 
                para.P_STARTDATE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INS_GETCUTSAMPLELIST",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        INS_GETCUTSAMPLELISTResult result =
                            new INS_GETCUTSAMPLELISTResult();

                        result.INSPECTIONLOT = row.Field<System.String>("INSPECTIONLOT");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ORDERNO = row.Field<System.Decimal?>("ORDERNO");
                        result.CUTLENGTH = row.Field<System.Decimal?>("CUTLENGTH");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.CUTDATE = row.Field<System.DateTime?>("CUTDATE");
                        result.CUTBY = row.Field<System.String>("CUTBY");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region INS_EDITDEFECT

        public INS_EDITDEFECTResult INS_EDITDEFECT(INS_EDITDEFECTParameter para)
        {
            INS_EDITDEFECTResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_DEFECTID", 
                "P_INSLOT", 
                "P_DEFECTCODE", 
                "P_LENGTH1", 
                "P_LENGTH2", 
                "P_POSITION", 
                "P_NDEFECTCODE", 
                "P_NLENGTH1", 
                "P_NLENGTH2", 
                "P_NPOSITION"
            };
            object[] paraValues = new object[]
            {
                para.P_DEFECTID, 
                para.P_INSLOT, 
                para.P_DEFECTCODE, 
                para.P_LENGTH1, 
                para.P_LENGTH2, 
                para.P_POSITION, 
                para.P_NDEFECTCODE, 
                para.P_NLENGTH1, 
                para.P_NLENGTH2, 
                para.P_NPOSITION
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INS_EDITDEFECT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new INS_EDITDEFECTResult();
            }

            return result;
        }

        #endregion

        #region INS_EDIT100TESTRECORD

        public INS_EDIT100TESTRECORDResult INS_EDIT100TESTRECORD(INS_EDIT100TESTRECORDParameter para)
        {
            INS_EDIT100TESTRECORDResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_TESTID", 
                "P_INSLOT", 
                "P_STDLENGTH", 
                "P_ACTLENGTH", 
                "P_NACTLENGTH", 
                "P_NDENW", 
                "P_NDENF", 
                "P_NWIDTHALL", 
                "P_NWIDTHPIN", 
                "P_NWIDTHCOAT", 
                "P_NTRIML", 
                "P_NTRIMR", 
                "P_NFLOPPYL", 
                "P_NFLOPPYR", 
                "P_NUNWINDERSET", 
                "P_NUNWINDERACT", 
                "P_NWINDERSET", 
                "P_NWINDERACT", 
                "P_NHARDNESSL", 
                "P_NHARDNESSC", 
                "P_NHARDNESSR"
            };
            object[] paraValues = new object[]
            {
                para.P_TESTID, 
                para.P_INSLOT, 
                para.P_STDLENGTH, 
                para.P_ACTLENGTH, 
                para.P_NACTLENGTH, 
                para.P_NDENW, 
                para.P_NDENF, 
                para.P_NWIDTHALL, 
                para.P_NWIDTHPIN, 
                para.P_NWIDTHCOAT, 
                para.P_NTRIML, 
                para.P_NTRIMR, 
                para.P_NFLOPPYL, 
                para.P_NFLOPPYR, 
                para.P_NUNWINDERSET, 
                para.P_NUNWINDERACT, 
                para.P_NWINDERSET, 
                para.P_NWINDERACT, 
                para.P_NHARDNESSL, 
                para.P_NHARDNESSC, 
                para.P_NHARDNESSR
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INS_EDIT100TESTRECORD",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new INS_EDIT100TESTRECORDResult();
            }

            return result;
        }

        #endregion

        #region INS_DELETEDEFECTBYLENGTH

        public INS_DELETEDEFECTBYLENGTHResult INS_DELETEDEFECTBYLENGTH(INS_DELETEDEFECTBYLENGTHParameter para)
        {
            INS_DELETEDEFECTBYLENGTHResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_DEFECTID", 
                "P_LENGTH", 
                "P_DELETEBY"
            };
            object[] paraValues = new object[]
            {
                para.P_DEFECTID, 
                para.P_LENGTH, 
                para.P_DELETEBY
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INS_DELETEDEFECTBYLENGTH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new INS_DELETEDEFECTBYLENGTHResult();
            }

            return result;
        }

        #endregion

        #region INS_DELETEDEFECT

        public INS_DELETEDEFECTResult INS_DELETEDEFECT(INS_DELETEDEFECTParameter para)
        {
            INS_DELETEDEFECTResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_DEFECTID", 
                "P_DEFECTCODE", 
                "P_LENGTH1", 
                "P_DELETEBY", 
                "P_DELETEREMARK"
            };
            object[] paraValues = new object[]
            {
                para.P_DEFECTID, 
                para.P_DEFECTCODE, 
                para.P_LENGTH1, 
                para.P_DELETEBY, 
                para.P_DELETEREMARK
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INS_DELETEDEFECT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new INS_DELETEDEFECTResult();
            }

            return result;
        }

        #endregion

        #region INS_DELETE100MRECORD

        public INS_DELETE100MRECORDResult INS_DELETE100MRECORD(INS_DELETE100MRECORDParameter para)
        {
            INS_DELETE100MRECORDResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_TESTID", 
                "P_STDLENGTH", 
                "P_ACTLENGTH", 
                "P_DELETEBY", 
                "P_DELETEREMARK"
            };
            object[] paraValues = new object[]
            {
                para.P_TESTID, 
                para.P_STDLENGTH, 
                para.P_ACTLENGTH, 
                para.P_DELETEBY, 
                para.P_DELETEREMARK
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INS_DELETE100MRECORD",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new INS_DELETE100MRECORDResult();
            }

            return result;
        }

        #endregion

        #region INS_CUTSAMPLE

        public INS_CUTSAMPLEResult INS_CUTSAMPLE(INS_CUTSAMPLEParameter para)
        {
            INS_CUTSAMPLEResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_INSLOT", 
                "P_STARTDATE", 
                "P_CUTLENGTH", 
                "P_REMARK", 
                "P_CUTBY"
            };
            object[] paraValues = new object[]
            {
                para.P_INSLOT, 
                para.P_STARTDATE, 
                para.P_CUTLENGTH, 
                para.P_REMARK, 
                para.P_CUTBY
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INS_CUTSAMPLE",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new INS_CUTSAMPLEResult();
            }

            return result;
        }

        #endregion

        #region INST_INSPECTIONGRADEHISTORY

        public INST_INSPECTIONGRADEHISTORYResult INST_INSPECTIONGRADEHISTORY(INST_INSPECTIONGRADEHISTORYParameter para)
        {
            INST_INSPECTIONGRADEHISTORYResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_INSLOT", 
                "P_STARTDATE", 
                "P_USER", 
                "P_PASS", 
                "P_REMARK", 
                "P_OLDGRADE", 
                "P_NEWGRADE"
            };
            object[] paraValues = new object[]
            {
                para.P_INSLOT, 
                para.P_STARTDATE, 
                para.P_USER, 
                para.P_PASS, 
                para.P_REMARK, 
                para.P_OLDGRADE, 
                para.P_NEWGRADE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INST_INSPECTIONGRADEHISTORY",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new INST_INSPECTIONGRADEHISTORYResult();
                if (ret.Result.OutParameters["R_RESULT"] != DBNull.Value)
                    result.R_RESULT = (System.String)ret.Result.OutParameters["R_RESULT"];
            }

            return result;
        }

        #endregion

        #region INSTINSPECTIONTESTRECORD

        public INSTINSPECTIONTESTRECORDResult INSTINSPECTIONTESTRECORD(INSTINSPECTIONTESTRECORDParameter para)
        {
            INSTINSPECTIONTESTRECORDResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_INSLOT", 
                "P_STDLENGTH", 
                "P_ACTUALLENGTH", 
                "P_DENW", 
                "P_DENF", 
                "P_WIDTHALL", 
                "P_WIDTHPIN", 
                "P_WIDTHCOAT", 
                "P_TRIML", 
                "P_TRIMR", 
                "P_FLOPPYL", 
                "P_FLOPPYR", 
                "P_UNWINDERSET", 
                "P_UNWINDERACT", 
                "P_WINDERSET", 
                "P_WINDERACT", 
                "P_POPUPDATE", 
                "P_SAVEDATE", 
                "P_HARDNESSL", 
                "P_HARDNESSC", 
                "P_HARDNESSR"
            };
            object[] paraValues = new object[]
            {
                para.P_INSLOT, 
                para.P_STDLENGTH, 
                para.P_ACTUALLENGTH, 
                para.P_DENW, 
                para.P_DENF, 
                para.P_WIDTHALL, 
                para.P_WIDTHPIN, 
                para.P_WIDTHCOAT, 
                para.P_TRIML, 
                para.P_TRIMR, 
                para.P_FLOPPYL, 
                para.P_FLOPPYR, 
                para.P_UNWINDERSET, 
                para.P_UNWINDERACT, 
                para.P_WINDERSET, 
                para.P_WINDERACT, 
                para.P_POPUPDATE, 
                para.P_SAVEDATE, 
                para.P_HARDNESSL, 
                para.P_HARDNESSC, 
                para.P_HARDNESSR
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INSTINSPECTIONTESTRECORD",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new INSTINSPECTIONTESTRECORDResult();
                if (ret.Result.OutParameters["R_TESTID"] != DBNull.Value)
                    result.R_TESTID = (System.String)ret.Result.OutParameters["R_TESTID"];
            }

            return result;
        }

        #endregion

        #region INSTINSPECTIONLOTDEFECT

        public INSTINSPECTIONLOTDEFECTResult INSTINSPECTIONLOTDEFECT(INSTINSPECTIONLOTDEFECTParameter para)
        {
            INSTINSPECTIONLOTDEFECTResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_INSLOT", 
                "P_DEFECTCODE", 
                "P_LENGTH1", 
                "P_LENGTH2", 
                "P_POINT", 
                "P_POSITION"
            };
            object[] paraValues = new object[]
            {
                para.P_INSLOT, 
                para.P_DEFECTCODE, 
                para.P_LENGTH1, 
                para.P_LENGTH2, 
                para.P_POINT, 
                para.P_POSITION
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INSTINSPECTIONLOTDEFECT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new INSTINSPECTIONLOTDEFECTResult();
                if (ret.Result.OutParameters["R_DEFECTID"] != DBNull.Value)
                    result.R_DEFECTID = (System.String)ret.Result.OutParameters["R_DEFECTID"];
            }

            return result;
        }

        #endregion

        #region INSERTUPDATEWEAVINGDATA

        public INSERTUPDATEWEAVINGDATAResult INSERTUPDATEWEAVINGDATA(INSERTUPDATEWEAVINGDATAParameter para)
        {
            INSERTUPDATEWEAVINGDATAResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_WEAVINGLOTNEW", 
                "P_WEAVINGLOTOLD", 
                "P_ITEMWEAVING", 
                "P_LENGHT", 
                "P_WEAVINGDATE", 
                "P_LOOM", 
                "P_SHIFT", 
                "P_WIDTH", 
                "P_REMARK", 
                "P_OPERATOR"
            };
            object[] paraValues = new object[]
            {
                para.P_WEAVINGLOTNEW, 
                para.P_WEAVINGLOTOLD, 
                para.P_ITEMWEAVING, 
                para.P_LENGHT, 
                para.P_WEAVINGDATE, 
                para.P_LOOM, 
                para.P_SHIFT, 
                para.P_WIDTH, 
                para.P_REMARK, 
                para.P_OPERATOR
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INSERTUPDATEWEAVINGDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new INSERTUPDATEWEAVINGDATAResult();
            }

            return result;
        }

        #endregion

        #region INSERTUPDATEOPERATOR

        public INSERTUPDATEOPERATORResult INSERTUPDATEOPERATOR(INSERTUPDATEOPERATORParameter para)
        {
            INSERTUPDATEOPERATORResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_OPID", 
                "P_TITLE", 
                "P_FNAME", 
                "P_LNAME", 
                "P_USERNAME", 
                "P_PASS", 
                "P_PROCESSID", 
                "P_FLAG", 
                "P_LEVEL", 
                "P_CREATEBY"
            };
            object[] paraValues = new object[]
            {
                para.P_OPID, 
                para.P_TITLE, 
                para.P_FNAME, 
                para.P_LNAME, 
                para.P_USERNAME, 
                para.P_PASS, 
                para.P_PROCESSID, 
                para.P_FLAG, 
                para.P_LEVEL, 
                para.P_CREATEBY
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INSERTUPDATEOPERATOR",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new INSERTUPDATEOPERATORResult();
                if (ret.Result.OutParameters["P_RETURN"] != DBNull.Value)
                    result.P_RETURN = (System.String)ret.Result.OutParameters["P_RETURN"];
            }

            return result;
        }

        #endregion

        #region INSERTUPDATEFINISHINGDATA

        public INSERTUPDATEFINISHINGDATAResult INSERTUPDATEFINISHINGDATA(INSERTUPDATEFINISHINGDATAParameter para)
        {
            INSERTUPDATEFINISHINGDATAResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_FINISHINGLOT", 
                "P_ITEMCODE", 
                "P_PARTNO", 
                "P_CUSID", 
                "P_LENGHT"
            };
            object[] paraValues = new object[]
            {
                para.P_FINISHINGLOT, 
                para.P_ITEMCODE, 
                para.P_PARTNO, 
                para.P_CUSID, 
                para.P_LENGHT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INSERTUPDATEFINISHINGDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new INSERTUPDATEFINISHINGDATAResult();
            }

            return result;
        }

        #endregion

        #region INSERTINSPECTIONPROCESS

        public INSERTINSPECTIONPROCESSResult INSERTINSPECTIONPROCESS(INSERTINSPECTIONPROCESSParameter para)
        {
            INSERTINSPECTIONPROCESSResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_INSLOT", 
                "P_ITMCODE", 
                "P_FINISHLOT", 
                "P_STARTDATE", 
                "P_CUSTOMERID", 
                "P_PRODUCTTYPEID", 
                "P_INSPECTEDBY", 
                "P_MCNO", 
                "P_PEINSPECTIONLOT", 
                "P_FLAG", 
                "P_RETEST", 
                "P_CUSTOMERTYPE", 
                "P_LOADTYPE", 
                "P_GROUP"
            };
            object[] paraValues = new object[]
            {
                para.P_INSLOT, 
                para.P_ITMCODE, 
                para.P_FINISHLOT, 
                para.P_STARTDATE, 
                para.P_CUSTOMERID, 
                para.P_PRODUCTTYPEID, 
                para.P_INSPECTEDBY, 
                para.P_MCNO, 
                para.P_PEINSPECTIONLOT, 
                para.P_FLAG, 
                para.P_RETEST, 
                para.P_CUSTOMERTYPE, 
                para.P_LOADTYPE, 
                para.P_GROUP
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "INSERTINSPECTIONPROCESS",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new INSERTINSPECTIONPROCESSResult();
                if (ret.Result.OutParameters["R_INSID"] != DBNull.Value)
                    result.R_INSID = (System.String)ret.Result.OutParameters["R_INSID"];
            }

            return result;
        }

        #endregion

        #region GETWEAVINGINGDATA

        public List<GETWEAVINGINGDATAResult> GETWEAVINGINGDATA(GETWEAVINGINGDATAParameter para)
        {
            List<GETWEAVINGINGDATAResult> results = new List<GETWEAVINGINGDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WEAVINGLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_WEAVINGLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "GETWEAVINGINGDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        GETWEAVINGINGDATAResult result =
                            new GETWEAVINGINGDATAResult();

                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");
                        result.LENGTH = row.Field<System.Decimal?>("LENGTH");
                        result.LOOMNO = row.Field<System.String>("LOOMNO");
                        result.WEAVINGDATE = row.Field<System.DateTime?>("WEAVINGDATE");
                        result.SHIFT = row.Field<System.String>("SHIFT");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.CREATEDATE = row.Field<System.DateTime?>("CREATEDATE");
                        result.WIDTH = row.Field<System.Decimal?>("WIDTH");
                        result.PREPAREBY = row.Field<System.String>("PREPAREBY");
                        result.WEAVINGNO = row.Field<System.String>("WEAVINGNO");
                        result.BEAMLOT = row.Field<System.String>("BEAMLOT");
                        result.DOFFNO = row.Field<System.Decimal?>("DOFFNO");
                        result.DENSITY_WARP = row.Field<System.Decimal?>("DENSITY_WARP");
                        result.TENSION = row.Field<System.Decimal?>("TENSION");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.DOFFBY = row.Field<System.String>("DOFFBY");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.WASTE = row.Field<System.Decimal?>("WASTE");
                        result.DENSITY_WEFT = row.Field<System.Decimal?>("DENSITY_WEFT");
                        result.DELETEFLAG = row.Field<System.String>("DELETEFLAG");
                        result.DELETEBY = row.Field<System.String>("DELETEBY");
                        result.DELETEDATE = row.Field<System.DateTime?>("DELETEDATE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region GETWARPINGREJECTDETAIL

        public List<GETWARPINGREJECTDETAILResult> GETWARPINGREJECTDETAIL(GETWARPINGREJECTDETAILParameter para)
        {
            List<GETWARPINGREJECTDETAILResult> results = new List<GETWARPINGREJECTDETAILResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_REJECTID"
            };
            object[] paraValues = new object[]
            {
                para.P_REJECTID
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "GETWARPINGREJECTDETAIL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        GETWARPINGREJECTDETAILResult result =
                            new GETWARPINGREJECTDETAILResult();

                        result.REJECTID = row.Field<System.String>("REJECTID");
                        result.REJECTCODE = row.Field<System.String>("REJECTCODE");
                        result.DESCRIPTION_EN = row.Field<System.String>("DESCRIPTION_EN");
                        result.DESCRIPTION_TH = row.Field<System.String>("DESCRIPTION_TH");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region GETREJECTLISTBYPROCESS

        public List<GETREJECTLISTBYPROCESSResult> GETREJECTLISTBYPROCESS(GETREJECTLISTBYPROCESSParameter para)
        {
            List<GETREJECTLISTBYPROCESSResult> results = new List<GETREJECTLISTBYPROCESSResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_PROCESSID"
            };
            object[] paraValues = new object[]
            {
                para.P_PROCESSID
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "GETREJECTLISTBYPROCESS",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        GETREJECTLISTBYPROCESSResult result =
                            new GETREJECTLISTBYPROCESSResult();

                        result.PROCESSID = row.Field<System.String>("PROCESSID");
                        result.REJECTCODE = row.Field<System.String>("REJECTCODE");
                        result.DESCRIPTION_TH = row.Field<System.String>("DESCRIPTION_TH");
                        result.DESCRIPTION_EN = row.Field<System.String>("DESCRIPTION_EN");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region GETOPERATORBYPROCESSID

        public List<GETOPERATORBYPROCESSIDResult> GETOPERATORBYPROCESSID(GETOPERATORBYPROCESSIDParameter para)
        {
            List<GETOPERATORBYPROCESSIDResult> results = new List<GETOPERATORBYPROCESSIDResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_OPID", 
                "P_PROCESSID", 
                "P_USER", 
                "P_PASS"
            };
            object[] paraValues = new object[]
            {
                para.P_OPID, 
                para.P_PROCESSID, 
                para.P_USER, 
                para.P_PASS
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "GETOPERATORBYPROCESSID",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        GETOPERATORBYPROCESSIDResult result =
                            new GETOPERATORBYPROCESSIDResult();

                        result.OPERATORID = row.Field<System.String>("OPERATORID");
                        result.TITLE = row.Field<System.String>("TITLE");
                        result.FNAME = row.Field<System.String>("FNAME");
                        result.LNAME = row.Field<System.String>("LNAME");
                        result.USERNAME = row.Field<System.String>("USERNAME");
                        result.PASSWORD = row.Field<System.String>("PASSWORD");
                        result.DELETEFLAG = row.Field<System.String>("DELETEFLAG");
                        result.POSITIONLEVEL = row.Field<System.String>("POSITIONLEVEL");
                        result.PROCESSID = row.Field<System.String>("PROCESSID");
                        result.CREATEDDATE = row.Field<System.DateTime?>("CREATEDDATE");
                        result.CREATEDBY = row.Field<System.String>("CREATEDBY");
                        result.WEB = row.Field<System.String>("WEB");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region GETMACHINELISTBYPROCESSID

        public List<GETMACHINELISTBYPROCESSIDResult> GETMACHINELISTBYPROCESSID(GETMACHINELISTBYPROCESSIDParameter para)
        {
            List<GETMACHINELISTBYPROCESSIDResult> results = new List<GETMACHINELISTBYPROCESSIDResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_PROCESSID"
            };
            object[] paraValues = new object[]
            {
                para.P_PROCESSID
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "GETMACHINELISTBYPROCESSID",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        GETMACHINELISTBYPROCESSIDResult result =
                            new GETMACHINELISTBYPROCESSIDResult();

                        result.PROCESSDESCRIPTION = row.Field<System.String>("PROCESSDESCRIPTION");
                        result.MACHINEID = row.Field<System.String>("MACHINEID");
                        result.MCNAME = row.Field<System.String>("MCNAME");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region GETITEMCODEDATA

        public List<GETITEMCODEDATAResult> GETITEMCODEDATA(GETITEMCODEDATAParameter para)
        {
            List<GETITEMCODEDATAResult> results = new List<GETITEMCODEDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMCODE", 
                "P_ITMWEAV", 
                "P_ITMYARN", 
                "P_ITMPREPARE"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE, 
                para.P_ITMWEAV, 
                para.P_ITMYARN, 
                para.P_ITMPREPARE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "GETITEMCODEDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        GETITEMCODEDATAResult result =
                            new GETITEMCODEDATAResult();

                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");
                        result.ITM_YARN = row.Field<System.String>("ITM_YARN");
                        result.ITM_WIDTH = row.Field<System.Decimal?>("ITM_WIDTH");
                        result.ITM_PROC1 = row.Field<System.String>("ITM_PROC1");
                        result.ITM_PROC2 = row.Field<System.String>("ITM_PROC2");
                        result.ITM_PROC3 = row.Field<System.String>("ITM_PROC3");
                        result.ITM_PROC4 = row.Field<System.String>("ITM_PROC4");
                        result.ITM_PROC5 = row.Field<System.String>("ITM_PROC5");
                        result.ITM_PROC6 = row.Field<System.String>("ITM_PROC6");
                        result.CREATEDATE = row.Field<System.DateTime?>("CREATEDATE");
                        result.CREATEBY = row.Field<System.String>("CREATEBY");
                        result.EDITDATE = row.Field<System.DateTime?>("EDITDATE");
                        result.EDITBY = row.Field<System.String>("EDITBY");
                        result.ITM_PREPARE = row.Field<System.String>("ITM_PREPARE");
                        result.COREWEIGHT = row.Field<System.Decimal?>("COREWEIGHT");
                        result.FULLWEIGHT = row.Field<System.Decimal?>("FULLWEIGHT");
                        result.ITM_GROUP = row.Field<System.String>("ITM_GROUP");
                        result.YARNCODE = row.Field<System.String>("YARNCODE");
                        result.WIDTHCODE = row.Field<System.String>("WIDTHCODE");
                        result.WIDTHWEAVING = row.Field<System.Decimal?>("WIDTHWEAVING");
                        result.LABFORM = row.Field<System.String>("LABFORM");
                        result.WEAVE_TYPE = row.Field<System.String>("WEAVE_TYPE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region GETINSTESTRECORDLIST

        public List<GETINSTESTRECORDLISTResult> GETINSTESTRECORDLIST(GETINSTESTRECORDLISTParameter para)
        {
            List<GETINSTESTRECORDLISTResult> results = new List<GETINSTESTRECORDLISTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_TESTID", 
                "P_INSLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_TESTID, 
                para.P_INSLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "GETINSTESTRECORDLIST",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        GETINSTESTRECORDLISTResult result =
                            new GETINSTESTRECORDLISTResult();

                        result.TESTRECORDID = row.Field<System.String>("TESTRECORDID");
                        result.STDLENGTH = row.Field<System.Decimal?>("STDLENGTH");
                        result.ACTUALLENGTH = row.Field<System.Decimal?>("ACTUALLENGTH");
                        result.DENSITYW = row.Field<System.Decimal?>("DENSITYW");
                        result.DENSITYF = row.Field<System.Decimal?>("DENSITYF");
                        result.WIDTHALL = row.Field<System.Decimal?>("WIDTHALL");
                        result.WIDTHPIN = row.Field<System.Decimal?>("WIDTHPIN");
                        result.WIDTHCOAT = row.Field<System.Decimal?>("WIDTHCOAT");
                        result.TRIML = row.Field<System.Decimal?>("TRIML");
                        result.TRIMR = row.Field<System.Decimal?>("TRIMR");
                        result.FLOPPYL = row.Field<System.String>("FLOPPYL");
                        result.FLOPPYR = row.Field<System.String>("FLOPPYR");
                        result.UNWINDERSET = row.Field<System.Decimal?>("UNWINDERSET");
                        result.UNWINDERACTUAL = row.Field<System.Decimal?>("UNWINDERACTUAL");
                        result.WINDERSET = row.Field<System.Decimal?>("WINDERSET");
                        result.WINDERACTUAL = row.Field<System.Decimal?>("WINDERACTUAL");
                        result.INSPECTIONLOT = row.Field<System.String>("INSPECTIONLOT");
                        result.POPUPDATE = row.Field<System.DateTime?>("POPUPDATE");
                        result.SAVEDATE = row.Field<System.DateTime?>("SAVEDATE");
                        result.FLAG = row.Field<System.String>("FLAG");
                        result.DELETEBY = row.Field<System.String>("DELETEBY");
                        result.DELETEREMARK = row.Field<System.String>("DELETEREMARK");
                        result.SELVAGEL = row.Field<System.Decimal?>("SELVAGEL");
                        result.SELVAGER = row.Field<System.Decimal?>("SELVAGER");
                        result.HARDNESS_L = row.Field<System.Decimal?>("HARDNESS_L");
                        result.HARDNESS_C = row.Field<System.Decimal?>("HARDNESS_C");
                        result.HARDNESS_R = row.Field<System.Decimal?>("HARDNESS_R");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region GETINSPECTIONREPORTDATA

        public List<GETINSPECTIONREPORTDATAResult> GETINSPECTIONREPORTDATA(GETINSPECTIONREPORTDATAParameter para)
        {
            List<GETINSPECTIONREPORTDATAResult> results = new List<GETINSPECTIONREPORTDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_INS_LOT"
            };
            object[] paraValues = new object[]
            {
                para.P_INS_LOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "GETINSPECTIONREPORTDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        GETINSPECTIONREPORTDATAResult result =
                            new GETINSPECTIONREPORTDATAResult();

                        result.INSPECTIONLOT = row.Field<System.String>("INSPECTIONLOT");
                        result.ITEMCODE = row.Field<System.String>("ITEMCODE");
                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.GROSSLENGTH = row.Field<System.Decimal?>("GROSSLENGTH");
                        result.NETLENGTH = row.Field<System.Decimal?>("NETLENGTH");
                        result.CUSTOMERID = row.Field<System.String>("CUSTOMERID");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.GRADE = row.Field<System.String>("GRADE");
                        result.GROSSWEIGHT = row.Field<System.Decimal?>("GROSSWEIGHT");
                        result.NETWEIGHT = row.Field<System.Decimal?>("NETWEIGHT");
                        result.PEINSPECTIONLOT = row.Field<System.String>("PEINSPECTIONLOT");
                        result.DEFECTID = row.Field<System.String>("DEFECTID");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.SHIFT_ID = row.Field<System.String>("SHIFT_ID");
                        result.SHIFT_REMARK = row.Field<System.String>("SHIFT_REMARK");
                        result.ATTACHID = row.Field<System.String>("ATTACHID");
                        result.TESTRECORDID = row.Field<System.String>("TESTRECORDID");
                        result.INSPECTEDBY = row.Field<System.String>("INSPECTEDBY");
                        result.MCNO = row.Field<System.String>("MCNO");
                        result.FINISHFLAG = row.Field<System.String>("FINISHFLAG");
                        result.SUSPENDDATE = row.Field<System.DateTime?>("SUSPENDDATE");
                        result.INSPECTIONID = row.Field<System.String>("INSPECTIONID");
                        result.RETEST = row.Field<System.String>("RETEST");
                        result.PREITEMCODE = row.Field<System.String>("PREITEMCODE");
                        result.CLEARBY = row.Field<System.String>("CLEARBY");
                        result.CLEARREMARK = row.Field<System.String>("CLEARREMARK");
                        result.SUSPENDBY = row.Field<System.String>("SUSPENDBY");
                        result.STARTDATE1 = row.Field<System.DateTime?>("STARTDATE1");
                        result.CUSTOMERTYPE = row.Field<System.String>("CUSTOMERTYPE");
                        result.DEFECTFILENAME = row.Field<System.String>("DEFECTFILENAME");
                        result.PRODUCTNAME = row.Field<System.String>("PRODUCTNAME");
                        result.MCNAME = row.Field<System.String>("MCNAME");
                        result.CUSTOMERNAME = row.Field<System.String>("CUSTOMERNAME");
                        result.BATCHNO = row.Field<System.String>("BATCHNO");
                        result.CUSTOMERITEM = row.Field<System.String>("CUSTOMERITEM");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region GETINSPECTIONLISTTESTBYITMCODE

        public List<GETINSPECTIONLISTTESTBYITMCODEResult> GETINSPECTIONLISTTESTBYITMCODE(GETINSPECTIONLISTTESTBYITMCODEParameter para)
        {
            List<GETINSPECTIONLISTTESTBYITMCODEResult> results = new List<GETINSPECTIONLISTTESTBYITMCODEResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMCODE"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "GETINSPECTIONLISTTESTBYITMCODE",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        GETINSPECTIONLISTTESTBYITMCODEResult result =
                            new GETINSPECTIONLISTTESTBYITMCODEResult();

                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.DENSITY_W = row.Field<System.String>("DENSITY_W");
                        result.DENSITY_F = row.Field<System.String>("DENSITY_F");
                        result.WIDTH_ALL = row.Field<System.String>("WIDTH_ALL");
                        result.WIDTH_PIN = row.Field<System.String>("WIDTH_PIN");
                        result.WIDTH_COAT = row.Field<System.String>("WIDTH_COAT");
                        result.WIDTH_SelvageL = row.Field<System.String>("WIDTH_SelvageL");
                        result.WIDTH_SelvageR = row.Field<System.String>("WIDTH_SelvageR");

                        result.TRIM_L = row.Field<System.String>("TRIM_L");
                        result.TRIM_R = row.Field<System.String>("TRIM_R");
                        result.FLOPPY_L = row.Field<System.String>("FLOPPY_L");
                        result.FLOPPY_R = row.Field<System.String>("FLOPPY_R");
                        result.HARDNESS_L = row.Field<System.String>("HARDNESS_L");
                        result.HARDNESS_C = row.Field<System.String>("HARDNESS_C");
                        result.HARDNESS_R = row.Field<System.String>("HARDNESS_R");
                        result.UNWINDER = row.Field<System.String>("UNWINDER");
                        result.WINDER = row.Field<System.String>("WINDER");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region GETINSPECTIONDATA

        public List<GETINSPECTIONDATAResult> GETINSPECTIONDATA(GETINSPECTIONDATAParameter para)
        {
            List<GETINSPECTIONDATAResult> results = new List<GETINSPECTIONDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_INS_LOT"
            };
            object[] paraValues = new object[]
            {
                para.P_INS_LOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "GETINSPECTIONDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        GETINSPECTIONDATAResult result =
                            new GETINSPECTIONDATAResult();

                        result.INSPECTIONLOT = row.Field<System.String>("INSPECTIONLOT");
                        result.ITEMCODE = row.Field<System.String>("ITEMCODE");
                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.GROSSLENGTH = row.Field<System.Decimal?>("GROSSLENGTH");
                        result.NETLENGTH = row.Field<System.Decimal?>("NETLENGTH");
                        result.CUSTOMERID = row.Field<System.String>("CUSTOMERID");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.GRADE = row.Field<System.String>("GRADE");
                        result.GROSSWEIGHT = row.Field<System.Decimal?>("GROSSWEIGHT");
                        result.NETWEIGHT = row.Field<System.Decimal?>("NETWEIGHT");
                        result.PEINSPECTIONLOT = row.Field<System.String>("PEINSPECTIONLOT");
                        result.DEFECTID = row.Field<System.String>("DEFECTID");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.ATTACHID = row.Field<System.String>("ATTACHID");
                        result.TESTRECORDID = row.Field<System.String>("TESTRECORDID");
                        result.INSPECTEDBY = row.Field<System.String>("INSPECTEDBY");
                        result.MCNO = row.Field<System.String>("MCNO");
                        result.FINISHFLAG = row.Field<System.String>("FINISHFLAG");
                        result.SUSPENDDATE = row.Field<System.DateTime?>("SUSPENDDATE");
                        result.INSPECTIONID = row.Field<System.String>("INSPECTIONID");
                        result.RETEST = row.Field<System.String>("RETEST");
                        result.PREITEMCODE = row.Field<System.String>("PREITEMCODE");
                        result.CLEARBY = row.Field<System.String>("CLEARBY");
                        result.CLEARREMARK = row.Field<System.String>("CLEARREMARK");
                        result.SUSPENDBY = row.Field<System.String>("SUSPENDBY");
                        result.STARTDATE1 = row.Field<System.DateTime?>("STARTDATE1");
                        result.CUSTOMERTYPE = row.Field<System.String>("CUSTOMERTYPE");
                        result.DEFECTFILENAME = row.Field<System.String>("DEFECTFILENAME");
                        result.ISPACKED = row.Field<System.String>("ISPACKED");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.OPERATOR_GROUP = row.Field<System.String>("OPERATOR_GROUP");
                        result.DF_CODE = row.Field<System.String>("DF_CODE");
                        result.DF_AMOUNT = row.Field<System.Decimal?>("DF_AMOUNT");
                        result.DF_POINT = row.Field<System.Decimal?>("DF_POINT");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region GETINSDEFECTLIST

        public List<GETINSDEFECTLISTResult> GETINSDEFECTLIST(GETINSDEFECTLISTParameter para)
        {
            List<GETINSDEFECTLISTResult> results = new List<GETINSDEFECTLISTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_DEFECTID", 
                "P_INSLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_DEFECTID, 
                para.P_INSLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "GETINSDEFECTLIST",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        GETINSDEFECTLISTResult result =
                            new GETINSDEFECTLISTResult();

                        result.DEFECTID = row.Field<System.String>("DEFECTID");
                        result.INSPECTIONLOT = row.Field<System.String>("INSPECTIONLOT");
                        result.DEFECTCODE = row.Field<System.String>("DEFECTCODE");
                        result.LENGTH1 = row.Field<System.Decimal?>("LENGTH1");
                        result.POSITION = row.Field<System.Decimal?>("POSITION");
                        result.FLAG = row.Field<System.String>("FLAG");
                        result.DEFECTPOINT = row.Field<System.Decimal?>("DEFECTPOINT");
                        result.LENGTH2 = row.Field<System.Decimal?>("LENGTH2");
                        result.DELETEBY = row.Field<System.String>("DELETEBY");
                        result.DELETEREMARK = row.Field<System.String>("DELETEREMARK");
                        result.COMPENSATELENGTH = row.Field<System.Decimal?>("COMPENSATELENGTH");
                        result.DEFECTPOINT100 = row.Field<System.Decimal?>("DEFECTPOINT100");
                        result.DESCRIPTION_EN = row.Field<System.String>("DESCRIPTION_EN");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region GETGRADE

        public GETGRADEResult GETGRADE(GETGRADEParameter para)
        {
            GETGRADEResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITEM_CODE", 
                "P_CUSID", 
                "P_LENGTH", 
                "P_INSLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_ITEM_CODE, 
                para.P_CUSID, 
                para.P_LENGTH, 
                para.P_INSLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "GETGRADE",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new GETGRADEResult();
                if (ret.Result.OutParameters["R_GRADE"] != DBNull.Value)
                    result.R_GRADE = (System.String)ret.Result.OutParameters["R_GRADE"];
            }

            return result;
        }

        #endregion

        #region GETFINISHINGDATA

        public List<GETFINISHINGDATAResult> GETFINISHINGDATA(GETFINISHINGDATAParameter para)
        {
            List<GETFINISHINGDATAResult> results = new List<GETFINISHINGDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_FINISHINGLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_FINISHINGLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "GETFINISHINGDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        GETFINISHINGDATAResult result =
                            new GETFINISHINGDATAResult();

                        result.ITEMLOT = row.Field<System.String>("ITEMLOT");
                        result.ITEMCODE = row.Field<System.String>("ITEMCODE");
                        result.PARTNO = row.Field<System.String>("PARTNO");
                        result.FINISHLENGTH = row.Field<System.Decimal?>("FINISHLENGTH");
                        result.CUSTOMERID = row.Field<System.String>("CUSTOMERID");
                        result.FINISHLOT = row.Field<System.String>("FINISHLOT");
                        result.FINISHINGPROCESS = row.Field<System.String>("FINISHINGPROCESS");
                        result.REPROCESS = row.Field<System.String>("REPROCESS");
                        result.SND_BARCODE = row.Field<System.String>("SND_BARCODE");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region GETDEFECTCODEDETAIL

        public List<GETDEFECTCODEDETAILResult> GETDEFECTCODEDETAIL(GETDEFECTCODEDETAILParameter para)
        {
            List<GETDEFECTCODEDETAILResult> results = new List<GETDEFECTCODEDETAILResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_DEFECTID"
            };
            object[] paraValues = new object[]
            {
                para.P_DEFECTID
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "GETDEFECTCODEDETAIL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        GETDEFECTCODEDETAILResult result =
                            new GETDEFECTCODEDETAILResult();

                        result.DEFECTCODE = row.Field<System.String>("DEFECTCODE");
                        result.DESCRIPTION_TH = row.Field<System.String>("DESCRIPTION_TH");
                        result.DESCRIPTION_EN = row.Field<System.String>("DESCRIPTION_EN");
                        result.PROCESSID = row.Field<System.String>("PROCESSID");
                        result.DEFECTPROCESSCODE = row.Field<System.String>("DEFECTPROCESSCODE");
                        result.POINT = row.Field<System.Decimal?>("POINT");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region GETCURRENTINSDATA

        public GETCURRENTINSDATAResult GETCURRENTINSDATA(GETCURRENTINSDATAParameter para)
        {
            GETCURRENTINSDATAResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_FINISHINGLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_FINISHINGLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "GETCURRENTINSDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new GETCURRENTINSDATAResult();
                if (ret.Result.OutParameters["ACTUALLENGTH"] != DBNull.Value)
                    result.ACTUALLENGTH = (System.Decimal)ret.Result.OutParameters["ACTUALLENGTH"];
                if (ret.Result.OutParameters["TOTALINS"] != DBNull.Value)
                    result.TOTALINS = (System.Decimal)ret.Result.OutParameters["TOTALINS"];
            }

            return result;
        }

        #endregion

        #region GETCOUNTDEFECT100M

        public GETCOUNTDEFECT100MResult GETCOUNTDEFECT100M(GETCOUNTDEFECT100MParameter para)
        {
            GETCOUNTDEFECT100MResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_DEFECTID", 
                "P_INSPECTIONLOT", 
                "STARTLENGTH", 
                "ENDLENGTH"
            };
            object[] paraValues = new object[]
            {
                para.P_DEFECTID, 
                para.P_INSPECTIONLOT, 
                para.STARTLENGTH, 
                para.ENDLENGTH
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "GETCOUNTDEFECT100M",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new GETCOUNTDEFECT100MResult();
                if (ret.Result.OutParameters["TOTAL"] != DBNull.Value)
                    result.TOTAL = (System.Decimal)ret.Result.OutParameters["TOTAL"];
            }

            return result;
        }

        #endregion

        #region GETAUTHORIZEBYPROCESSID

        public GETAUTHORIZEBYPROCESSIDResult GETAUTHORIZEBYPROCESSID(GETAUTHORIZEBYPROCESSIDParameter para)
        {
            GETAUTHORIZEBYPROCESSIDResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_PROCESSID", 
                "P_USER", 
                "P_PASS"
            };
            object[] paraValues = new object[]
            {
                para.P_PROCESSID, 
                para.P_USER, 
                para.P_PASS
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "GETAUTHORIZEBYPROCESSID",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new GETAUTHORIZEBYPROCESSIDResult();
                if (ret.Result.OutParameters["R_OUT"] != DBNull.Value)
                    result.R_OUT = (System.String)ret.Result.OutParameters["R_OUT"];
            }

            return result;
        }

        #endregion

        #region G3_UPDATEYARN

        public G3_UPDATEYARNResult G3_UPDATEYARN(G3_UPDATEYARNParameter para)
        {
            G3_UPDATEYARNResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_PATTETNO", 
                "P_LOTORDERNO", 
                "P_VERIFY", 
                "P_REMAINQTY", 
                "P_FLAG", 
                "P_OPERATORID", 
                "P_RECEIVEDATE", 
                "P_UPDATEDATE", 
                "P_TYPE", 
                "P_PACKAGING", 
                "P_CLEAN", 
                "P_TEARING", 
                "P_FALLDOWN", 
                "P_CERTIFICATION", 
                "P_INVOICE", 
                "P_IDENTIFYAREA", 
                "P_AMOUNTPALLET", 
                "P_OTHER", 
                "P_ACTION"
            };
            object[] paraValues = new object[]
            {
                para.P_PATTETNO, 
                para.P_LOTORDERNO, 
                para.P_VERIFY, 
                para.P_REMAINQTY, 
                para.P_FLAG, 
                para.P_OPERATORID, 
                para.P_RECEIVEDATE, 
                para.P_UPDATEDATE, 
                para.P_TYPE, 
                para.P_PACKAGING, 
                para.P_CLEAN, 
                para.P_TEARING, 
                para.P_FALLDOWN, 
                para.P_CERTIFICATION, 
                para.P_INVOICE, 
                para.P_IDENTIFYAREA, 
                para.P_AMOUNTPALLET, 
                para.P_OTHER, 
                para.P_ACTION
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "G3_UPDATEYARN",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new G3_UPDATEYARNResult();
            }

            return result;
        }

        #endregion

        #region G3_SEARCHYARNSTOCK

        public List<G3_SEARCHYARNSTOCKResult> G3_SEARCHYARNSTOCK(G3_SEARCHYARNSTOCKParameter para)
        {
            List<G3_SEARCHYARNSTOCKResult> results = new List<G3_SEARCHYARNSTOCKResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMYARN", 
                "P_RECDATE", 
                "P_YARNTYPE"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMYARN, 
                para.P_RECDATE, 
                para.P_YARNTYPE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "G3_SEARCHYARNSTOCK",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        G3_SEARCHYARNSTOCKResult result =
                            new G3_SEARCHYARNSTOCKResult();

                        result.ENTRYDATE = row.Field<System.DateTime?>("ENTRYDATE");
                        result.ITM_YARN = row.Field<System.String>("ITM_YARN");
                        result.PALLETNO = row.Field<System.String>("PALLETNO");
                        result.YARNTYPE = row.Field<System.String>("YARNTYPE");
                        result.WEIGHTQTY = row.Field<System.Decimal?>("WEIGHTQTY");
                        result.CONECH = row.Field<System.Decimal?>("CONECH");
                        result.VERIFY = row.Field<System.String>("VERIFY");
                        result.REMAINQTY = row.Field<System.Decimal?>("REMAINQTY");
                        result.RECEIVEBY = row.Field<System.String>("RECEIVEBY");
                        result.RECEIVEDATE = row.Field<System.DateTime?>("RECEIVEDATE");
                        result.FINISHFLAG = row.Field<System.String>("FINISHFLAG");
                        result.UPDATEDATE = row.Field<System.DateTime?>("UPDATEDATE");
                        result.PALLETTYPE = row.Field<System.String>("PALLETTYPE");
                        result.ITM400 = row.Field<System.String>("ITM400");
                        result.UM = row.Field<System.String>("UM");
                        result.PACKAING = row.Field<System.String>("PACKAING");
                        result.CLEAN = row.Field<System.String>("CLEAN");
                        result.TEARING = row.Field<System.String>("TEARING");
                        result.FALLDOWN = row.Field<System.String>("FALLDOWN");
                        result.CERTIFICATION = row.Field<System.String>("CERTIFICATION");
                        result.INVOICE = row.Field<System.String>("INVOICE");
                        result.IDENTIFYAREA = row.Field<System.String>("IDENTIFYAREA");
                        result.AMOUNTPALLET = row.Field<System.String>("AMOUNTPALLET");
                        result.OTHER = row.Field<System.String>("OTHER");
                        result.ACTION = row.Field<System.String>("ACTION");
                        result.MOVEMENTDATE = row.Field<System.DateTime?>("MOVEMENTDATE");
                        result.LOTNO = row.Field<System.String>("LOTNO");
                        result.TRACENO = row.Field<System.String>("TRACENO");
                        result.KGPERCH = row.Field<System.Decimal?>("KGPERCH");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region G3_SEARCHBYPALLETNO

        public List<G3_SEARCHBYPALLETNOResult> G3_SEARCHBYPALLETNO(G3_SEARCHBYPALLETNOParameter para)
        {
            List<G3_SEARCHBYPALLETNOResult> results = new List<G3_SEARCHBYPALLETNOResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_PALLETNO"
            };
            object[] paraValues = new object[]
            {
                para.P_PALLETNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "G3_SEARCHBYPALLETNO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        G3_SEARCHBYPALLETNOResult result =
                            new G3_SEARCHBYPALLETNOResult();

                        result.ENTRYDATE = row.Field<System.DateTime?>("ENTRYDATE");
                        result.ITM_YARN = row.Field<System.String>("ITM_YARN");
                        result.PALLETNO = row.Field<System.String>("PALLETNO");
                        result.YARNTYPE = row.Field<System.String>("YARNTYPE");
                        result.WEIGHTQTY = row.Field<System.Decimal?>("WEIGHTQTY");
                        result.CONECH = row.Field<System.Decimal?>("CONECH");
                        result.VERIFY = row.Field<System.String>("VERIFY");
                        result.REMAINQTY = row.Field<System.Decimal?>("REMAINQTY");
                        result.RECEIVEBY = row.Field<System.String>("RECEIVEBY");
                        result.RECEIVEDATE = row.Field<System.DateTime?>("RECEIVEDATE");
                        result.FINISHFLAG = row.Field<System.String>("FINISHFLAG");
                        result.UPDATEDATE = row.Field<System.DateTime?>("UPDATEDATE");
                        result.PALLETTYPE = row.Field<System.String>("PALLETTYPE");
                        result.ITM400 = row.Field<System.String>("ITM400");
                        result.UM = row.Field<System.String>("UM");
                        result.PACKAING = row.Field<System.String>("PACKAING");
                        result.CLEAN = row.Field<System.String>("CLEAN");
                        result.TEARING = row.Field<System.String>("TEARING");
                        result.FALLDOWN = row.Field<System.String>("FALLDOWN");
                        result.CERTIFICATION = row.Field<System.String>("CERTIFICATION");
                        result.INVOICE = row.Field<System.String>("INVOICE");
                        result.IDENTIFYAREA = row.Field<System.String>("IDENTIFYAREA");
                        result.AMOUNTPALLET = row.Field<System.String>("AMOUNTPALLET");
                        result.OTHER = row.Field<System.String>("OTHER");
                        result.ACTION = row.Field<System.String>("ACTION");
                        result.MOVEMENTDATE = row.Field<System.DateTime?>("MOVEMENTDATE");
                        result.LOTNO = row.Field<System.String>("LOTNO");
                        result.TRACENO = row.Field<System.String>("TRACENO");
                        result.KGPERCH = row.Field<System.Decimal?>("KGPERCH");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region G3_RECEIVEYARN

        public G3_RECEIVEYARNResult G3_RECEIVEYARN(G3_RECEIVEYARNParameter para)
        {
            G3_RECEIVEYARNResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_TRACENO", 
                "P_LOTNO", 
                "P_VERIFY", 
                "P_REMAINQTY", 
                "P_FLAG", 
                "P_OPERATORID", 
                "P_RECEIVEDATE", 
                "P_UPDATEDATE", 
                "P_TYPE", 
                "P_PACKAGING", 
                "P_CLEAN", 
                "P_TEARING", 
                "P_FALLDOWN", 
                "P_CERTIFICATION", 
                "P_INVOICE", 
                "P_IDENTIFYAREA", 
                "P_AMOUNTPALLET", 
                "P_OTHER", 
                "P_ACTION"
            };
            object[] paraValues = new object[]
            {
                para.P_TRACENO, 
                para.P_LOTNO, 
                para.P_VERIFY, 
                para.P_REMAINQTY, 
                para.P_FLAG, 
                para.P_OPERATORID, 
                para.P_RECEIVEDATE, 
                para.P_UPDATEDATE, 
                para.P_TYPE, 
                para.P_PACKAGING, 
                para.P_CLEAN, 
                para.P_TEARING, 
                para.P_FALLDOWN, 
                para.P_CERTIFICATION, 
                para.P_INVOICE, 
                para.P_IDENTIFYAREA, 
                para.P_AMOUNTPALLET, 
                para.P_OTHER, 
                para.P_ACTION
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "G3_RECEIVEYARN",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new G3_RECEIVEYARNResult();
            }

            return result;
        }

        #endregion

        #region G3_INSERTYARN

        public G3_INSERTYARNResult G3_INSERTYARN(G3_INSERTYARNParameter para)
        {
            G3_INSERTYARNResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_TRUCKNO", 
                "P_DESC", 
                "P_PATTETNO", 
                "P_CH", 
                "P_WEIGHT", 
                "P_LOTORDERNO", 
                "P_ITMORDER", 
                "P_RECEIVEDATE", 
                "P_UM", 
                "P_ITMYARN", 
                "P_TYPE"
            };
            object[] paraValues = new object[]
            {
                para.P_TRUCKNO, 
                para.P_DESC, 
                para.P_PATTETNO, 
                para.P_CH, 
                para.P_WEIGHT, 
                para.P_LOTORDERNO, 
                para.P_ITMORDER, 
                para.P_RECEIVEDATE, 
                para.P_UM, 
                para.P_ITMYARN, 
                para.P_TYPE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "G3_INSERTYARN",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new G3_INSERTYARNResult();
            }

            return result;
        }

        #endregion

        #region G3_INSERTUPDATEISSUEYARN

        public G3_INSERTUPDATEISSUEYARNResult G3_INSERTUPDATEISSUEYARN(G3_INSERTUPDATEISSUEYARNParameter para)
        {
            G3_INSERTUPDATEISSUEYARNResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_REQUESTNO", 
                "P_PATTETNO", 
                "P_TRACENO", 
                "P_CH", 
                "P_WEIGHT", 
                "P_ISSUEDATE", 
                "P_OPERATOR", 
                "P_PALLETTYPE", 
                "P_ISSUETO"
            };
            object[] paraValues = new object[]
            {
                para.P_REQUESTNO, 
                para.P_PATTETNO, 
                para.P_TRACENO, 
                para.P_CH, 
                para.P_WEIGHT, 
                para.P_ISSUEDATE, 
                para.P_OPERATOR, 
                para.P_PALLETTYPE, 
                para.P_ISSUETO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "G3_INSERTUPDATEISSUEYARN",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new G3_INSERTUPDATEISSUEYARNResult();
            }

            return result;
        }

        #endregion

        #region G3_INSERTRETURNYARN

        public G3_INSERTRETURNYARNResult G3_INSERTRETURNYARN(G3_INSERTRETURNYARNParameter para)
        {
            G3_INSERTRETURNYARNResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_TRACENO", 
                "P_NEWTRACENO", 
                "P_CH", 
                "P_WEIGHT", 
                "P_RECEIVEDATE", 
                "P_OPERATOR", 
                "P_ITEMYARN", 
                "P_YARNTYPE", 
                "P_RETURNBY"
            };
            object[] paraValues = new object[]
            {
                para.P_TRACENO, 
                para.P_NEWTRACENO, 
                para.P_CH, 
                para.P_WEIGHT, 
                para.P_RECEIVEDATE, 
                para.P_OPERATOR, 
                para.P_ITEMYARN, 
                para.P_YARNTYPE, 
                para.P_RETURNBY
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "G3_INSERTRETURNYARN",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new G3_INSERTRETURNYARNResult();
            }

            return result;
        }

        #endregion

        #region G3_GOLABEL

        public List<G3_GOLABELResult> G3_GOLABEL(G3_GOLABELParameter para)
        {
            List<G3_GOLABELResult> results = new List<G3_GOLABELResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_PALLETNO"
            };
            object[] paraValues = new object[]
            {
                para.P_PALLETNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "G3_GOLABEL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        G3_GOLABELResult result =
                            new G3_GOLABELResult();

                        result.ENTRYDATE = row.Field<System.DateTime?>("ENTRYDATE");
                        result.ITM_YARN = row.Field<System.String>("ITM_YARN");
                        result.PALLETNO = row.Field<System.String>("PALLETNO");
                        result.YARNTYPE = row.Field<System.String>("YARNTYPE");
                        result.WEIGHTQTY = row.Field<System.Decimal?>("WEIGHTQTY");
                        result.CONECH = row.Field<System.Decimal?>("CONECH");
                        result.VERIFY = row.Field<System.String>("VERIFY");
                        result.REMAINQTY = row.Field<System.Decimal?>("REMAINQTY");
                        result.RECEIVEBY = row.Field<System.String>("RECEIVEBY");
                        result.RECEIVEDATE = row.Field<System.DateTime?>("RECEIVEDATE");
                        result.FINISHFLAG = row.Field<System.String>("FINISHFLAG");
                        result.UPDATEDATE = row.Field<System.DateTime?>("UPDATEDATE");
                        result.PALLETTYPE = row.Field<System.String>("PALLETTYPE");
                        result.ITM400 = row.Field<System.String>("ITM400");
                        result.UM = row.Field<System.String>("UM");
                        result.PACKAING = row.Field<System.String>("PACKAING");
                        result.CLEAN = row.Field<System.String>("CLEAN");
                        result.TEARING = row.Field<System.String>("TEARING");
                        result.FALLDOWN = row.Field<System.String>("FALLDOWN");
                        result.CERTIFICATION = row.Field<System.String>("CERTIFICATION");
                        result.INVOICE = row.Field<System.String>("INVOICE");
                        result.IDENTIFYAREA = row.Field<System.String>("IDENTIFYAREA");
                        result.AMOUNTPALLET = row.Field<System.String>("AMOUNTPALLET");
                        result.OTHER = row.Field<System.String>("OTHER");
                        result.ACTION = row.Field<System.String>("ACTION");
                        result.MOVEMENTDATE = row.Field<System.DateTime?>("MOVEMENTDATE");
                        result.LOTNO = row.Field<System.String>("LOTNO");
                        result.TRACENO = row.Field<System.String>("TRACENO");
                        result.KGPERCH = row.Field<System.Decimal?>("KGPERCH");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region G3_GETREQUESTNODETAIL

        public List<G3_GETREQUESTNODETAILResult> G3_GETREQUESTNODETAIL(G3_GETREQUESTNODETAILParameter para)
        {
            List<G3_GETREQUESTNODETAILResult> results = new List<G3_GETREQUESTNODETAILResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_REQUESTNO"
            };
            object[] paraValues = new object[]
            {
                para.P_REQUESTNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "G3_GETREQUESTNODETAIL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        G3_GETREQUESTNODETAILResult result =
                            new G3_GETREQUESTNODETAILResult();

                        result.ISSUEDATE = row.Field<System.DateTime?>("ISSUEDATE");
                        result.PALLETNO = row.Field<System.String>("PALLETNO");
                        result.TRACENO = row.Field<System.String>("TRACENO");
                        result.WEIGHT = row.Field<System.Decimal?>("WEIGHT");
                        result.CH = row.Field<System.Decimal?>("CH");
                        result.ISSUEBY = row.Field<System.String>("ISSUEBY");
                        result.ISSUETO = row.Field<System.String>("ISSUETO");
                        result.REQUESTNO = row.Field<System.String>("REQUESTNO");
                        result.PALLETTYPE = row.Field<System.String>("PALLETTYPE");
                        result.DELETEFLAG = row.Field<System.String>("DELETEFLAG");
                        result.EDITDATE = row.Field<System.DateTime?>("EDITDATE");
                        result.EDITBY = row.Field<System.String>("EDITBY");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.ITM_YARN = row.Field<System.String>("ITM_YARN");
                        result.LOTNO = row.Field<System.String>("LOTNO");
                        result.YARNTYPE = row.Field<System.String>("YARNTYPE");
                        result.ITM400 = row.Field<System.String>("ITM400");
                        result.ENTRYDATE = row.Field<System.DateTime?>("ENTRYDATE");
                        result.PACKAING = row.Field<System.String>("PACKAING");
                        result.CLEAN = row.Field<System.String>("CLEAN");
                        result.FALLDOWN = row.Field<System.String>("FALLDOWN");
                        result.TEARING = row.Field<System.String>("TEARING");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region G3_GETPALLETDETAIL

        public List<G3_GETPALLETDETAILResult> G3_GETPALLETDETAIL(G3_GETPALLETDETAILParameter para)
        {
            List<G3_GETPALLETDETAILResult> results = new List<G3_GETPALLETDETAILResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_PALLETNO"
            };
            object[] paraValues = new object[]
            {
                para.P_PALLETNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "G3_GETPALLETDETAIL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        G3_GETPALLETDETAILResult result =
                            new G3_GETPALLETDETAILResult();

                        result.ENTRYDATE = row.Field<System.DateTime?>("ENTRYDATE");
                        result.ITM_YARN = row.Field<System.String>("ITM_YARN");
                        result.PALLETNO = row.Field<System.String>("PALLETNO");
                        result.YARNTYPE = row.Field<System.String>("YARNTYPE");
                        result.WEIGHTQTY = row.Field<System.Decimal?>("WEIGHTQTY");
                        result.CONECH = row.Field<System.Decimal?>("CONECH");
                        result.VERIFY = row.Field<System.String>("VERIFY");
                        result.REMAINQTY = row.Field<System.Decimal?>("REMAINQTY");
                        result.RECEIVEBY = row.Field<System.String>("RECEIVEBY");
                        result.RECEIVEDATE = row.Field<System.DateTime?>("RECEIVEDATE");
                        result.FINISHFLAG = row.Field<System.String>("FINISHFLAG");
                        result.UPDATEDATE = row.Field<System.DateTime?>("UPDATEDATE");
                        result.PALLETTYPE = row.Field<System.String>("PALLETTYPE");
                        result.ITM400 = row.Field<System.String>("ITM400");
                        result.UM = row.Field<System.String>("UM");
                        result.PACKAING = row.Field<System.String>("PACKAING");
                        result.CLEAN = row.Field<System.String>("CLEAN");
                        result.TEARING = row.Field<System.String>("TEARING");
                        result.FALLDOWN = row.Field<System.String>("FALLDOWN");
                        result.CERTIFICATION = row.Field<System.String>("CERTIFICATION");
                        result.INVOICE = row.Field<System.String>("INVOICE");
                        result.IDENTIFYAREA = row.Field<System.String>("IDENTIFYAREA");
                        result.AMOUNTPALLET = row.Field<System.String>("AMOUNTPALLET");
                        result.OTHER = row.Field<System.String>("OTHER");
                        result.ACTION = row.Field<System.String>("ACTION");
                        result.MOVEMENTDATE = row.Field<System.DateTime?>("MOVEMENTDATE");
                        result.LOTNO = row.Field<System.String>("LOTNO");
                        result.TRACENO = row.Field<System.String>("TRACENO");
                        result.KGPERCH = row.Field<System.Decimal?>("KGPERCH");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region G3_GETDATAD365

        public G3_GETDATAD365Result G3_GETDATAD365(G3_GETDATAD365Parameter para)
        {
            G3_GETDATAD365Result result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "DTTRA", 
                "DTINP", 
                "CDCON", 
                "BLELE", 
                "CDUM0", 
                "CDKE1", 
                "CDKE2", 
                "CDLOT", 
                "CDQUA", 
                "TECU1", 
                "TECU2", 
                "TECU3", 
                "TECU4", 
                "TECU5", 
                "TECU6"
            };
            object[] paraValues = new object[]
            {
                para.DTTRA, 
                para.DTINP, 
                para.CDCON, 
                para.BLELE, 
                para.CDUM0, 
                para.CDKE1, 
                para.CDKE2, 
                para.CDLOT, 
                para.CDQUA, 
                para.TECU1, 
                para.TECU2, 
                para.TECU3, 
                para.TECU4, 
                para.TECU5, 
                para.TECU6
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "G3_GETDATAD365",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new G3_GETDATAD365Result();
                if (ret.Result.OutParameters["R_RESULT"] != DBNull.Value)
                    result.R_RESULT = (System.String)ret.Result.OutParameters["R_RESULT"];
            }

            return result;
        }

        #endregion

        #region G3_GETDATAAS400

        public G3_GETDATAAS400Result G3_GETDATAAS400(G3_GETDATAAS400Parameter para)
        {
            G3_GETDATAAS400Result result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "DTTRA", 
                "DTINP", 
                "CDCON", 
                "BLELE", 
                "CDUM0", 
                "CDKE1", 
                "CDLOT", 
                "CDQUA", 
                "TECU1", 
                "TECU2", 
                "TECU3", 
                "TECU4", 
                "TECU5", 
                "TECU6"
            };
            object[] paraValues = new object[]
            {
                para.DTTRA, 
                para.DTINP, 
                para.CDCON, 
                para.BLELE, 
                para.CDUM0, 
                para.CDKE1, 
                para.CDLOT, 
                para.CDQUA, 
                para.TECU1, 
                para.TECU2, 
                para.TECU3, 
                para.TECU4, 
                para.TECU5, 
                para.TECU6
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "G3_GETDATAAS400",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new G3_GETDATAAS400Result();
                if (ret.Result.OutParameters["R_RESULT"] != DBNull.Value)
                    result.R_RESULT = (System.String)ret.Result.OutParameters["R_RESULT"];
            }

            return result;
        }

        #endregion

        #region G3_CANCELREQUESTNO

        public G3_CANCELREQUESTNOResult G3_CANCELREQUESTNO(G3_CANCELREQUESTNOParameter para)
        {
            G3_CANCELREQUESTNOResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_REQUESTNO", 
                "P_OPERATOR"
            };
            object[] paraValues = new object[]
            {
                para.P_REQUESTNO, 
                para.P_OPERATOR
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "G3_CANCELREQUESTNO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new G3_CANCELREQUESTNOResult();
            }

            return result;
        }

        #endregion

        #region G3_Delete

        public G3_DeleteResult G3_Delete(G3_DeleteParameter para)
        {
            G3_DeleteResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_PALLETNO", 
                "P_TRACENO", 
                "P_ITM_YARN",
                "P_LOTNO"
            };
            object[] paraValues = new object[]
            {
                para.PALLETNO, 
                para.TRACENO, 
                para.ITM_YARN,
                 para.LOTNO,
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "G3_DEL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new G3_DeleteResult();
            }

            return result;
        }

        #endregion

        #region FINISHING_UPDATESCOURINGDATA

        public FINISHING_UPDATESCOURINGDATAResult FINISHING_UPDATESCOURINGDATA(FINISHING_UPDATESCOURINGDATAParameter para)
        {
            FINISHING_UPDATESCOURINGDATAResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_FINISHLOT", 
                "P_FLAG", 
                "P_SAT", 
                "P_SAT_MIN", 
                "P_SAT_MAX", 
                "P_WASHING1", 
                "P_WASHING1_MIN", 
                "P_WASHING1_MAX", 
                "P_WASHING2", 
                "P_WASHING2_MIN", 
                "P_WASHING2_MAX", 
                "P_HOTFLUE", 
                "P_HOTFLUE_MIN", 
                "P_HOTFLUE_MAX", 
                "P_TEMP1", 
                "P_TEMP1_MIN", 
                "P_TEMP1_MAX", 
                "P_TEMP2", 
                "P_TEMP2_MIN", 
                "P_TEMP2_MAX", 
                "P_TEMP3", 
                "P_TEMP3_MIN", 
                "P_TEMP3_MAX", 
                "P_TEMP4", 
                "P_TEMP4_MIN", 
                "P_TEMP4_MAX", 
                "P_TEMP5", 
                "P_TEMP5_MIN", 
                "P_TEMP5_MAX", 
                "P_TEMP6", 
                "P_TEMP6_MIN", 
                "P_TEMP6_MAX", 
                "P_TEMP7", 
                "P_TEMP7_MIN", 
                "P_TEMP7_MAX", 
                "P_TEMP8", 
                "P_TEMP8_MIN", 
                "P_TEMP8_MAX", 
                "P_SPEED", 
                "P_SPEED_MIN", 
                "P_SPEED_MAX", 
                "P_MAINFRAMEWIDTH", 
                "P_WIDTH_BE", 
                "P_WIDTH_AF", 
                "P_PIN2PIN", 
                "P_FINISHBY", 
                "P_ENDDATE", 
                "P_LENGTH1", 
                "P_LENGTH2", 
                "P_LENGTH3", 
                "P_LENGTH4", 
                "P_LENGTH5", 
                "P_LENGTH6", 
                "P_LENGTH7", 
                "P_ITMCODE", 
                "P_WEAVINGLOT", 
                "P_CUSTOMER", 
                "P_STARTDATE", 
                "P_REMARK", 
                "P_HUMID_BF", 
                "P_HUMID_AF", 
                "P_GROUP"
            };
            object[] paraValues = new object[]
            {
                para.P_FINISHLOT, 
                para.P_FLAG, 
                para.P_SAT, 
                para.P_SAT_MIN, 
                para.P_SAT_MAX, 
                para.P_WASHING1, 
                para.P_WASHING1_MIN, 
                para.P_WASHING1_MAX, 
                para.P_WASHING2, 
                para.P_WASHING2_MIN, 
                para.P_WASHING2_MAX, 
                para.P_HOTFLUE, 
                para.P_HOTFLUE_MIN, 
                para.P_HOTFLUE_MAX, 
                para.P_TEMP1, 
                para.P_TEMP1_MIN, 
                para.P_TEMP1_MAX, 
                para.P_TEMP2, 
                para.P_TEMP2_MIN, 
                para.P_TEMP2_MAX, 
                para.P_TEMP3, 
                para.P_TEMP3_MIN, 
                para.P_TEMP3_MAX, 
                para.P_TEMP4, 
                para.P_TEMP4_MIN, 
                para.P_TEMP4_MAX, 
                para.P_TEMP5, 
                para.P_TEMP5_MIN, 
                para.P_TEMP5_MAX, 
                para.P_TEMP6, 
                para.P_TEMP6_MIN, 
                para.P_TEMP6_MAX, 
                para.P_TEMP7, 
                para.P_TEMP7_MIN, 
                para.P_TEMP7_MAX, 
                para.P_TEMP8, 
                para.P_TEMP8_MIN, 
                para.P_TEMP8_MAX, 
                para.P_SPEED, 
                para.P_SPEED_MIN, 
                para.P_SPEED_MAX, 
                para.P_MAINFRAMEWIDTH, 
                para.P_WIDTH_BE, 
                para.P_WIDTH_AF, 
                para.P_PIN2PIN, 
                para.P_FINISHBY, 
                para.P_ENDDATE, 
                para.P_LENGTH1, 
                para.P_LENGTH2, 
                para.P_LENGTH3, 
                para.P_LENGTH4, 
                para.P_LENGTH5, 
                para.P_LENGTH6, 
                para.P_LENGTH7, 
                para.P_ITMCODE, 
                para.P_WEAVINGLOT, 
                para.P_CUSTOMER, 
                para.P_STARTDATE, 
                para.P_REMARK, 
                para.P_HUMID_BF, 
                para.P_HUMID_AF, 
                para.P_GROUP
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_UPDATESCOURINGDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new FINISHING_UPDATESCOURINGDATAResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region FINISHING_UPDATESCOURING

        public FINISHING_UPDATESCOURINGResult FINISHING_UPDATESCOURING(FINISHING_UPDATESCOURINGParameter para)
        {
            FINISHING_UPDATESCOURINGResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_FINISHLOT", 
                "P_FLAG", 
                "P_SATURATOR_PV", 
                "P_SATURATOR_SP", 
                "P_WASHING1_PV", 
                "P_WASHING1_SP", 
                "P_WASHING2_PV", 
                "P_WASHING2_SP", 
                "P_HOTFLUE_PV", 
                "P_HOTFLUE_SP", 
                "P_TEMP1_PV", 
                "P_TEMP1_SP", 
                "P_TEMP2_PV", 
                "P_TEMP2_SP", 
                "P_TEMP3_PV", 
                "P_TEMP3_SP", 
                "P_TEMP4_PV", 
                "P_TEMP4_SP", 
                "P_TEMP5_PV", 
                "P_TEMP5_SP", 
                "P_TEMP6_PV", 
                "P_TEMP6_SP", 
                "P_TEMP7_PV", 
                "P_TEMP7_SP", 
                "P_TEMP8_PV", 
                "P_TEMP8_SP", 
                "P_TEMP9_PV", 
                "P_TEMP9_SP", 
                "P_TEMP10_PV", 
                "P_TEMP10_SP", 
                "P_SPEED_PV", 
                "P_SPEED_SP", 
                "P_MAINFRAMEWIDTH", 
                "P_WIDTH_BE", 
                "P_WIDTH_AF", 
                "P_PIN2PIN", 
                "P_CONDITIONBY", 
                "P_FINISHBY", 
                "P_ENDDATE", 
                "P_CONDITONDATE", 
                "P_LENGTH1", 
                "P_LENGTH2", 
                "P_LENGTH3", 
                "P_LENGTH4", 
                "P_LENGTH5", 
                "P_LENGTH6", 
                "P_LENGTH7", 
                "P_ITMCODE", 
                "P_WEAVINGLOT", 
                "P_CUSTOMER", 
                "P_STARTDATE", 
                "P_REMARK", 
                "P_HUMID_BF", 
                "P_HUMID_AF", 
                "P_GROUP"
            };
            object[] paraValues = new object[]
            {
                para.P_FINISHLOT, 
                para.P_FLAG, 
                para.P_SATURATOR_PV, 
                para.P_SATURATOR_SP, 
                para.P_WASHING1_PV, 
                para.P_WASHING1_SP, 
                para.P_WASHING2_PV, 
                para.P_WASHING2_SP, 
                para.P_HOTFLUE_PV, 
                para.P_HOTFLUE_SP, 
                para.P_TEMP1_PV, 
                para.P_TEMP1_SP, 
                para.P_TEMP2_PV, 
                para.P_TEMP2_SP, 
                para.P_TEMP3_PV, 
                para.P_TEMP3_SP, 
                para.P_TEMP4_PV, 
                para.P_TEMP4_SP, 
                para.P_TEMP5_PV, 
                para.P_TEMP5_SP, 
                para.P_TEMP6_PV, 
                para.P_TEMP6_SP, 
                para.P_TEMP7_PV, 
                para.P_TEMP7_SP, 
                para.P_TEMP8_PV, 
                para.P_TEMP8_SP, 
                para.P_TEMP9_PV, 
                para.P_TEMP9_SP, 
                para.P_TEMP10_PV, 
                para.P_TEMP10_SP, 
                para.P_SPEED_PV, 
                para.P_SPEED_SP, 
                para.P_MAINFRAMEWIDTH, 
                para.P_WIDTH_BE, 
                para.P_WIDTH_AF, 
                para.P_PIN2PIN, 
                para.P_CONDITIONBY, 
                para.P_FINISHBY, 
                para.P_ENDDATE, 
                para.P_CONDITONDATE, 
                para.P_LENGTH1, 
                para.P_LENGTH2, 
                para.P_LENGTH3, 
                para.P_LENGTH4, 
                para.P_LENGTH5, 
                para.P_LENGTH6, 
                para.P_LENGTH7, 
                para.P_ITMCODE, 
                para.P_WEAVINGLOT, 
                para.P_CUSTOMER, 
                para.P_STARTDATE, 
                para.P_REMARK, 
                para.P_HUMID_BF, 
                para.P_HUMID_AF, 
                para.P_GROUP
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_UPDATESCOURING",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new FINISHING_UPDATESCOURINGResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region FINISHING_UPDATEDRYERDATA

        public FINISHING_UPDATEDRYERDATAResult FINISHING_UPDATEDRYERDATA(FINISHING_UPDATEDRYERDATAParameter para)
        {
            FINISHING_UPDATEDRYERDATAResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_FINISHLOT", 
                "P_FLAG", 
                "P_HOTFLUE", 
                "P_HOTFLUE_MIN", 
                "P_HOTFLUE_MAX", 
                "P_SPEED", 
                "P_SPEED_MIN", 
                "P_SPEED_MAX", 
                "P_WIDTHBEHEAT", 
                "P_ACCPRESURE", 
                "P_ASSTENSION", 
                "P_ACCARIDENSER", 
                "P_CHIFROT", 
                "P_CHIREAR", 
                "P_STEAMPRESURE", 
                "P_DRYCIRCUFAN", 
                "P_EXHAUSTFAN", 
                "P_WIDTHAFHEAT", 
                "P_CONDITIONBY", 
                "P_FINISHBY", 
                "P_ENDDATE", 
                "P_CONDITONDATE", 
                "P_LENGTH1", 
                "P_LENGTH2", 
                "P_LENGTH3", 
                "P_LENGTH4", 
                "P_LENGTH5", 
                "P_LENGTH6", 
                "P_LENGTH7", 
                "P_ITMCODE", 
                "P_WEAVINGLOT", 
                "P_CUSTOMER", 
                "P_STARTDATE", 
                "P_REMARK", 
                "P_HUMID_BF", 
                "P_HUMID_AF", 
                "P_GROUP"
            };
            object[] paraValues = new object[]
            {
                para.P_FINISHLOT, 
                para.P_FLAG, 
                para.P_HOTFLUE, 
                para.P_HOTFLUE_MIN, 
                para.P_HOTFLUE_MAX, 
                para.P_SPEED, 
                para.P_SPEED_MIN, 
                para.P_SPEED_MAX, 
                para.P_WIDTHBEHEAT, 
                para.P_ACCPRESURE, 
                para.P_ASSTENSION, 
                para.P_ACCARIDENSER, 
                para.P_CHIFROT, 
                para.P_CHIREAR, 
                para.P_STEAMPRESURE, 
                para.P_DRYCIRCUFAN, 
                para.P_EXHAUSTFAN, 
                para.P_WIDTHAFHEAT, 
                para.P_CONDITIONBY, 
                para.P_FINISHBY, 
                para.P_ENDDATE, 
                para.P_CONDITONDATE, 
                para.P_LENGTH1, 
                para.P_LENGTH2, 
                para.P_LENGTH3, 
                para.P_LENGTH4, 
                para.P_LENGTH5, 
                para.P_LENGTH6, 
                para.P_LENGTH7, 
                para.P_ITMCODE, 
                para.P_WEAVINGLOT, 
                para.P_CUSTOMER, 
                para.P_STARTDATE, 
                para.P_REMARK, 
                para.P_HUMID_BF, 
                para.P_HUMID_AF, 
                para.P_GROUP
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_UPDATEDRYERDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new FINISHING_UPDATEDRYERDATAResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region FINISHING_UPDATEDRYER

        public FINISHING_UPDATEDRYERResult FINISHING_UPDATEDRYER(FINISHING_UPDATEDRYERParameter para)
        {
            FINISHING_UPDATEDRYERResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_FINISHLOT", 
                "P_FLAG", 
                "P_HOTFLUE_PV", 
                "P_HOTFLUE_SP", 
                "P_SPEED_PV", 
                "P_SPEED_SP", 
                "P_WIDTHBEHEAT", 
                "P_ACCPRESURE", 
                "P_ASSTENSION", 
                "P_ACCARIDENSER", 
                "P_CHIFROT", 
                "P_CHIREAR", 
                "P_STEAMPRESURE", 
                "P_DRYCIRCUFAN", 
                "P_EXHAUSTFAN", 
                "P_WIDTHAFHEAT", 
                "P_CONDITIONBY", 
                "P_FINISHBY", 
                "P_ENDDATE", 
                "P_CONDITONDATE", 
                "P_LENGTH1", 
                "P_LENGTH2", 
                "P_LENGTH3", 
                "P_LENGTH4", 
                "P_LENGTH5", 
                "P_LENGTH6", 
                "P_LENGTH7", 
                "P_ITMCODE", 
                "P_WEAVINGLOT", 
                "P_CUSTOMER", 
                "P_STARTDATE", 
                "P_REMARK", 
                "P_HUMID_BF", 
                "P_HUMID_AF", 
                "P_GROUP", 
                "P_SATURATOR_PV", 
                "P_SATURATOR_SP", 
                "P_WASHING1_PV", 
                "P_WASHING1_SP", 
                "P_WASHING2_PV", 
                "P_WASHING2_SP"
            };
            object[] paraValues = new object[]
            {
                para.P_FINISHLOT, 
                para.P_FLAG, 
                para.P_HOTFLUE_PV, 
                para.P_HOTFLUE_SP, 
                para.P_SPEED_PV, 
                para.P_SPEED_SP, 
                para.P_WIDTHBEHEAT, 
                para.P_ACCPRESURE, 
                para.P_ASSTENSION, 
                para.P_ACCARIDENSER, 
                para.P_CHIFROT, 
                para.P_CHIREAR, 
                para.P_STEAMPRESURE, 
                para.P_DRYCIRCUFAN, 
                para.P_EXHAUSTFAN, 
                para.P_WIDTHAFHEAT, 
                para.P_CONDITIONBY, 
                para.P_FINISHBY, 
                para.P_ENDDATE, 
                para.P_CONDITONDATE, 
                para.P_LENGTH1, 
                para.P_LENGTH2, 
                para.P_LENGTH3, 
                para.P_LENGTH4, 
                para.P_LENGTH5, 
                para.P_LENGTH6, 
                para.P_LENGTH7, 
                para.P_ITMCODE, 
                para.P_WEAVINGLOT, 
                para.P_CUSTOMER, 
                para.P_STARTDATE, 
                para.P_REMARK, 
                para.P_HUMID_BF, 
                para.P_HUMID_AF, 
                para.P_GROUP, 
                para.P_SATURATOR_PV, 
                para.P_SATURATOR_SP, 
                para.P_WASHING1_PV, 
                para.P_WASHING1_SP, 
                para.P_WASHING2_PV, 
                para.P_WASHING2_SP
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_UPDATEDRYER",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new FINISHING_UPDATEDRYERResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region FINISHING_UPDATECOATINGDATA

        public FINISHING_UPDATECOATINGDATAResult FINISHING_UPDATECOATINGDATA(FINISHING_UPDATECOATINGDATAParameter para)
        {
            FINISHING_UPDATECOATINGDATAResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_FINISHLOT", 
                "P_FLAG", 
                "P_SAT", 
                "P_SAT_MIN", 
                "P_SAT_MAX", 
                "P_WASHING1", 
                "P_WASHING1_MIN", 
                "P_WASHING1_MAX", 
                "P_WASHING2", 
                "P_WASHING2_MIN", 
                "P_WASHING2_MAX", 
                "P_HOTFLUE", 
                "P_HOTFLUE_MIN", 
                "P_HOTFLUE_MAX", 
                "P_TEMP1", 
                "P_TEMP1_MIN", 
                "P_TEMP1_MAX", 
                "P_TEMP2", 
                "P_TEMP2_MIN", 
                "P_TEMP2_MAX", 
                "P_TEMP3", 
                "P_TEMP3_MIN", 
                "P_TEMP3_MAX", 
                "P_TEMP4", 
                "P_TEMP4_MIN", 
                "P_TEMP4_MAX", 
                "P_TEMP5", 
                "P_TEMP5_MIN", 
                "P_TEMP5_MAX", 
                "P_TEMP6", 
                "P_TEMP6_MIN", 
                "P_TEMP6_MAX", 
                "P_TEMP7", 
                "P_TEMP7_MIN", 
                "P_TEMP7_MAX", 
                "P_TEMP8", 
                "P_TEMP8_MIN", 
                "P_TEMP8_MAX", 
                "P_TEMP9", 
                "P_TEMP9_MIN", 
                "P_TEMP9_MAX", 
                "P_TEMP10", 
                "P_TEMP10_MIN", 
                "P_TEMP10_MAX", 
                "P_SPEED", 
                "P_SPEED_MIN", 
                "P_SPEED_MAX", 
                "P_TENSIONUP", 
                "P_TENSIONUP_MIN", 
                "P_TENSIONUP_MAX", 
                "P_TENSIONDOWN", 
                "P_TENSIONDOWN_MIN", 
                "P_TENSIONDOWN_MAX", 
                "P_LENGTH1", 
                "P_LENGTH2", 
                "P_LENGTH3", 
                "P_LENGTH4", 
                "P_LENGTH5", 
                "P_LENGTH6", 
                "P_LENGTH7", 
                "P_ITMCODE", 
                "P_WEAVINGLOT", 
                "P_CUSTOMER", 
                "P_STARTDATE", 
                "P_BECOATWIDTH", 
                "P_FANRPM", 
                "P_EXFAN_FRONT_BACK", 
                "P_EXFAN_MIDDLE", 
                "P_ANGLEKNIFE", 
                "P_BLADENO", 
                "P_BLADEDIRECTION", 
                "P_FORN", 
                "P_TENTER", 
                "P_PATHLINE", 
                "P_FEEDIN", 
                "P_OVERFEED", 
                "P_WIDTHCOAT", 
                "P_WIDTHCOATALL", 
                "P_SILICONEA", 
                "P_SILICONEB", 
                "P_CWL", 
                "P_CWC", 
                "P_CWR", 
                "P_CONDITIONBY", 
                "P_FINISHBY", 
                "P_ENDDATE", 
                "P_CONDITONDATE", 
                "P_REMARK", 
                "P_HUMID_BF", 
                "P_HUMID_AF", 
                "P_GROUP"
            };
            object[] paraValues = new object[]
            {
                para.P_FINISHLOT, 
                para.P_FLAG, 
                para.P_SAT, 
                para.P_SAT_MIN, 
                para.P_SAT_MAX, 
                para.P_WASHING1, 
                para.P_WASHING1_MIN, 
                para.P_WASHING1_MAX, 
                para.P_WASHING2, 
                para.P_WASHING2_MIN, 
                para.P_WASHING2_MAX, 
                para.P_HOTFLUE, 
                para.P_HOTFLUE_MIN, 
                para.P_HOTFLUE_MAX, 
                para.P_TEMP1, 
                para.P_TEMP1_MIN, 
                para.P_TEMP1_MAX, 
                para.P_TEMP2, 
                para.P_TEMP2_MIN, 
                para.P_TEMP2_MAX, 
                para.P_TEMP3, 
                para.P_TEMP3_MIN, 
                para.P_TEMP3_MAX, 
                para.P_TEMP4, 
                para.P_TEMP4_MIN, 
                para.P_TEMP4_MAX, 
                para.P_TEMP5, 
                para.P_TEMP5_MIN, 
                para.P_TEMP5_MAX, 
                para.P_TEMP6, 
                para.P_TEMP6_MIN, 
                para.P_TEMP6_MAX, 
                para.P_TEMP7, 
                para.P_TEMP7_MIN, 
                para.P_TEMP7_MAX, 
                para.P_TEMP8, 
                para.P_TEMP8_MIN, 
                para.P_TEMP8_MAX, 
                para.P_TEMP9, 
                para.P_TEMP9_MIN, 
                para.P_TEMP9_MAX, 
                para.P_TEMP10, 
                para.P_TEMP10_MIN, 
                para.P_TEMP10_MAX, 
                para.P_SPEED, 
                para.P_SPEED_MIN, 
                para.P_SPEED_MAX, 
                para.P_TENSIONUP, 
                para.P_TENSIONUP_MIN, 
                para.P_TENSIONUP_MAX, 
                para.P_TENSIONDOWN, 
                para.P_TENSIONDOWN_MIN, 
                para.P_TENSIONDOWN_MAX, 
                para.P_LENGTH1, 
                para.P_LENGTH2, 
                para.P_LENGTH3, 
                para.P_LENGTH4, 
                para.P_LENGTH5, 
                para.P_LENGTH6, 
                para.P_LENGTH7, 
                para.P_ITMCODE, 
                para.P_WEAVINGLOT, 
                para.P_CUSTOMER, 
                para.P_STARTDATE, 
                para.P_BECOATWIDTH, 
                para.P_FANRPM, 
                para.P_EXFAN_FRONT_BACK, 
                para.P_EXFAN_MIDDLE, 
                para.P_ANGLEKNIFE, 
                para.P_BLADENO, 
                para.P_BLADEDIRECTION, 
                para.P_FORN, 
                para.P_TENTER, 
                para.P_PATHLINE, 
                para.P_FEEDIN, 
                para.P_OVERFEED, 
                para.P_WIDTHCOAT, 
                para.P_WIDTHCOATALL, 
                para.P_SILICONEA, 
                para.P_SILICONEB, 
                para.P_CWL, 
                para.P_CWC, 
                para.P_CWR, 
                para.P_CONDITIONBY, 
                para.P_FINISHBY, 
                para.P_ENDDATE, 
                para.P_CONDITONDATE, 
                para.P_REMARK, 
                para.P_HUMID_BF, 
                para.P_HUMID_AF, 
                para.P_GROUP
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_UPDATECOATINGDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new FINISHING_UPDATECOATINGDATAResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region FINISHING_UPDATECOATING

        public FINISHING_UPDATECOATINGResult FINISHING_UPDATECOATING(FINISHING_UPDATECOATINGParameter para)
        {
            FINISHING_UPDATECOATINGResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_FINISHLOT", 
                "P_FLAG", 
                "P_SATURATOR_PV", 
                "P_SATURATOR_SP", 
                "P_WASHING1_PV", 
                "P_WASHING1_SP", 
                "P_WASHING2_PV", 
                "P_WASHING2_SP", 
                "P_HOTFLUE_PV", 
                "P_HOTFLUE_SP", 
                "P_TEMP1_PV", 
                "P_TEMP1_SP", 
                "P_TEMP2_PV", 
                "P_TEMP2_SP", 
                "P_TEMP3_PV", 
                "P_TEMP3_SP", 
                "P_TEMP4_PV", 
                "P_TEMP4_SP", 
                "P_TEMP5_PV", 
                "P_TEMP5_SP", 
                "P_TEMP6_PV", 
                "P_TEMP6_SP", 
                "P_TEMP7_PV", 
                "P_TEMP7_SP", 
                "P_TEMP8_PV", 
                "P_TEMP8_SP", 
                "P_TEMP9_PV", 
                "P_TEMP9_SP", 
                "P_TEMP10_PV", 
                "P_TEMP10_SP", 
                "P_SPEED_PV", 
                "P_SPEED_SP", 
                "P_LENGTH1", 
                "P_LENGTH2", 
                "P_LENGTH3", 
                "P_LENGTH4", 
                "P_LENGTH5", 
                "P_LENGTH6", 
                "P_LENGTH7", 
                "P_ITMCODE", 
                "P_WEAVINGLOT", 
                "P_CUSTOMER", 
                "P_STARTDATE", 
                "P_BECOATWIDTH", 
                "P_FANRPM", 
                "P_EXFAN_FRONT_BACK", 
                "P_EXFAN_MIDDLE", 
                "P_ANGLEKNIFE", 
                "P_BLADENO", 
                "P_BLADEDIRECTION", 
                "P_TENSIONUP", 
                "P_TENSIONDOWN", 
                "P_FORN", 
                "P_TENTER", 
                "P_PATHLINE", 
                "P_FEEDIN", 
                "P_OVERFEED", 
                "P_WIDTHCOAT", 
                "P_WIDTHCOATALL", 
                "P_SILICONEA", 
                "P_SILICONEB", 
                "P_CWL", 
                "P_CWC", 
                "P_CWR", 
                "P_CONDITIONBY", 
                "P_FINISHBY", 
                "P_ENDDATE", 
                "P_CONDITONDATE", 
                "P_REMARK", 
                "P_HUMID_BF", 
                "P_HUMID_AF", 
                "P_GROUP"
            };
            object[] paraValues = new object[]
            {
                para.P_FINISHLOT, 
                para.P_FLAG, 
                para.P_SATURATOR_PV, 
                para.P_SATURATOR_SP, 
                para.P_WASHING1_PV, 
                para.P_WASHING1_SP, 
                para.P_WASHING2_PV, 
                para.P_WASHING2_SP, 
                para.P_HOTFLUE_PV, 
                para.P_HOTFLUE_SP, 
                para.P_TEMP1_PV, 
                para.P_TEMP1_SP, 
                para.P_TEMP2_PV, 
                para.P_TEMP2_SP, 
                para.P_TEMP3_PV, 
                para.P_TEMP3_SP, 
                para.P_TEMP4_PV, 
                para.P_TEMP4_SP, 
                para.P_TEMP5_PV, 
                para.P_TEMP5_SP, 
                para.P_TEMP6_PV, 
                para.P_TEMP6_SP, 
                para.P_TEMP7_PV, 
                para.P_TEMP7_SP, 
                para.P_TEMP8_PV, 
                para.P_TEMP8_SP, 
                para.P_TEMP9_PV, 
                para.P_TEMP9_SP, 
                para.P_TEMP10_PV, 
                para.P_TEMP10_SP, 
                para.P_SPEED_PV, 
                para.P_SPEED_SP, 
                para.P_LENGTH1, 
                para.P_LENGTH2, 
                para.P_LENGTH3, 
                para.P_LENGTH4, 
                para.P_LENGTH5, 
                para.P_LENGTH6, 
                para.P_LENGTH7, 
                para.P_ITMCODE, 
                para.P_WEAVINGLOT, 
                para.P_CUSTOMER, 
                para.P_STARTDATE, 
                para.P_BECOATWIDTH, 
                para.P_FANRPM, 
                para.P_EXFAN_FRONT_BACK, 
                para.P_EXFAN_MIDDLE, 
                para.P_ANGLEKNIFE, 
                para.P_BLADENO, 
                para.P_BLADEDIRECTION, 
                para.P_TENSIONUP, 
                para.P_TENSIONDOWN, 
                para.P_FORN, 
                para.P_TENTER, 
                para.P_PATHLINE, 
                para.P_FEEDIN, 
                para.P_OVERFEED, 
                para.P_WIDTHCOAT, 
                para.P_WIDTHCOATALL, 
                para.P_SILICONEA, 
                para.P_SILICONEB, 
                para.P_CWL, 
                para.P_CWC, 
                para.P_CWR, 
                para.P_CONDITIONBY, 
                para.P_FINISHBY, 
                para.P_ENDDATE, 
                para.P_CONDITONDATE, 
                para.P_REMARK, 
                para.P_HUMID_BF, 
                para.P_HUMID_AF, 
                para.P_GROUP
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_UPDATECOATING",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new FINISHING_UPDATECOATINGResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region FINISHING_SEARCHFINISHRECORD

        public List<FINISHING_SEARCHFINISHRECORDResult> FINISHING_SEARCHFINISHRECORD(FINISHING_SEARCHFINISHRECORDParameter para)
        {
            List<FINISHING_SEARCHFINISHRECORDResult> results = new List<FINISHING_SEARCHFINISHRECORDResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_DATE", 
                "P_MCNO", 
                "P_ITMCODE"
            };
            object[] paraValues = new object[]
            {
                para.P_DATE, 
                para.P_MCNO, 
                para.P_ITMCODE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_SEARCHFINISHRECORD",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        FINISHING_SEARCHFINISHRECORDResult result =
                            new FINISHING_SEARCHFINISHRECORDResult();

                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.FINISHBY = row.Field<System.String>("FINISHBY");
                        result.STARTBY = row.Field<System.String>("STARTBY");
                        result.CONDITIONBY = row.Field<System.String>("CONDITIONBY");
                        result.MCNO = row.Field<System.String>("MCNO");
                        result.MC = row.Field<System.String>("MC");
                        result.WEAVLENGTH = row.Field<System.Decimal?>("WEAVLENGTH");
                        result.WIDTH_BE = row.Field<System.Decimal?>("WIDTH_BE");
                        result.WIDTH_AF = row.Field<System.Decimal?>("WIDTH_AF");
                        result.OPERATOR_GROUP = row.Field<System.String>("OPERATOR_GROUP");
                        result.LENGTH1 = row.Field<System.Decimal?>("LENGTH1");
                        result.LENGTH2 = row.Field<System.Decimal?>("LENGTH2");
                        result.LENGTH3 = row.Field<System.Decimal?>("LENGTH3");
                        result.LENGTH4 = row.Field<System.Decimal?>("LENGTH4");
                        result.LENGTH5 = row.Field<System.Decimal?>("LENGTH5");
                        result.LENGTH6 = row.Field<System.Decimal?>("LENGTH6");
                        result.LENGTH7 = row.Field<System.Decimal?>("LENGTH7");
                        result.PRODUCTIONTYPE = row.Field<System.String>("PRODUCTIONTYPE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region FINISHING_SEARCHFINISHDATA

        public List<FINISHING_SEARCHFINISHDATAResult> FINISHING_SEARCHFINISHDATA(FINISHING_SEARCHFINISHDATAParameter para)
        {
            List<FINISHING_SEARCHFINISHDATAResult> results = new List<FINISHING_SEARCHFINISHDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_DATE", 
                "P_PROCESS"
            };
            object[] paraValues = new object[]
            {
                para.P_DATE, 
                para.P_PROCESS
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_SEARCHFINISHDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        FINISHING_SEARCHFINISHDATAResult result =
                            new FINISHING_SEARCHFINISHDATAResult();

                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.ITEMCODE = row.Field<System.String>("ITEMCODE");
                        result.TOTALLENGTH = row.Field<System.Decimal?>("TOTALLENGTH");
                        result.PROCESS = row.Field<System.String>("PROCESS");
                        result.FINISHINGDATE = row.Field<System.DateTime?>("FINISHINGDATE");
                        result.FINISHBY = row.Field<System.String>("FINISHBY");
                        result.FINISHINGCUSTOMER = row.Field<System.String>("FINISHINGCUSTOMER");
                        result.MC = row.Field<System.String>("MC");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.LENGTH1 = row.Field<System.Decimal?>("LENGTH1");
                        result.LENGTH2 = row.Field<System.Decimal?>("LENGTH2");
                        result.LENGTH3 = row.Field<System.Decimal?>("LENGTH3");
                        result.LENGTH4 = row.Field<System.Decimal?>("LENGTH4");
                        result.LENGTH5 = row.Field<System.Decimal?>("LENGTH5");
                        result.LENGTH6 = row.Field<System.Decimal?>("LENGTH6");
                        result.LENGTH7 = row.Field<System.Decimal?>("LENGTH7");
                        result.SAMPLING_WIDTH = row.Field<System.Decimal?>("SAMPLING_WIDTH");
                        result.SAMPLING_LENGTH = row.Field<System.Decimal?>("SAMPLING_LENGTH");
                        result.REMARK = row.Field<System.String>("REMARK");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region FINISHING_SCOURINGPLCDATA

        public List<FINISHING_SCOURINGPLCDATAResult> FINISHING_SCOURINGPLCDATA(FINISHING_SCOURINGPLCDATAParameter para)
        {
            List<FINISHING_SCOURINGPLCDATAResult> results = new List<FINISHING_SCOURINGPLCDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_MCNO", 
                "P_WEAVINGLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_MCNO, 
                para.P_WEAVINGLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_SCOURINGPLCDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        FINISHING_SCOURINGPLCDATAResult result =
                            new FINISHING_SCOURINGPLCDATAResult();

                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.TEMP1_MIN = row.Field<System.Decimal?>("TEMP1_MIN");
                        result.TEMP1_MAX = row.Field<System.Decimal?>("TEMP1_MAX");
                        result.TEMP1 = row.Field<System.Decimal?>("TEMP1");
                        result.TEMP2_MIN = row.Field<System.Decimal?>("TEMP2_MIN");
                        result.TEMP2_MAX = row.Field<System.Decimal?>("TEMP2_MAX");
                        result.TEMP2 = row.Field<System.Decimal?>("TEMP2");
                        result.TEMP3_MIN = row.Field<System.Decimal?>("TEMP3_MIN");
                        result.TEMP3_MAX = row.Field<System.Decimal?>("TEMP3_MAX");
                        result.TEMP3 = row.Field<System.Decimal?>("TEMP3");
                        result.TEMP4_MIN = row.Field<System.Decimal?>("TEMP4_MIN");
                        result.TEMP4_MAX = row.Field<System.Decimal?>("TEMP4_MAX");
                        result.TEMP4 = row.Field<System.Decimal?>("TEMP4");
                        result.TEMP5_MIN = row.Field<System.Decimal?>("TEMP5_MIN");
                        result.TEMP5_MAX = row.Field<System.Decimal?>("TEMP5_MAX");
                        result.TEMP5 = row.Field<System.Decimal?>("TEMP5");
                        result.TEMP6_MIN = row.Field<System.Decimal?>("TEMP6_MIN");
                        result.TEMP6_MAX = row.Field<System.Decimal?>("TEMP6_MAX");
                        result.TEMP6 = row.Field<System.Decimal?>("TEMP6");
                        result.TEMP7_MIN = row.Field<System.Decimal?>("TEMP7_MIN");
                        result.TEMP7_MAX = row.Field<System.Decimal?>("TEMP7_MAX");
                        result.TEMP7 = row.Field<System.Decimal?>("TEMP7");
                        result.TEMP8_MIN = row.Field<System.Decimal?>("TEMP8_MIN");
                        result.TEMP8_MAX = row.Field<System.Decimal?>("TEMP8_MAX");
                        result.TEMP8 = row.Field<System.Decimal?>("TEMP8");
                        result.SPEED_MIN = row.Field<System.Decimal?>("SPEED_MIN");
                        result.SPEED_MAX = row.Field<System.Decimal?>("SPEED_MAX");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.SAT_MIN = row.Field<System.Decimal?>("SAT_MIN");
                        result.SAT_MAX = row.Field<System.Decimal?>("SAT_MAX");
                        result.SAT = row.Field<System.Decimal?>("SAT");
                        result.HOTF_MIN = row.Field<System.Decimal?>("HOTF_MIN");
                        result.HOTF_MAX = row.Field<System.Decimal?>("HOTF_MAX");
                        result.HOTF = row.Field<System.Decimal?>("HOTF");
                        result.WASH1_MIN = row.Field<System.Decimal?>("WASH1_MIN");
                        result.WASH1_MAX = row.Field<System.Decimal?>("WASH1_MAX");
                        result.WASH1 = row.Field<System.Decimal?>("WASH1");
                        result.WASH2_MIN = row.Field<System.Decimal?>("WASH2_MIN");
                        result.WASH2_MAX = row.Field<System.Decimal?>("WASH2_MAX");
                        result.WASH2 = row.Field<System.Decimal?>("WASH2");

                        result.TEMP9 = row.Field<System.Decimal?>("TEMP9");
                        result.TEMP9 = row.Field<System.Decimal?>("TEMP9");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region FINISHING_SCOURINGDATABYLOT

        public List<FINISHING_SCOURINGDATABYLOTResult> FINISHING_SCOURINGDATABYLOT(FINISHING_SCOURINGDATABYLOTParameter para)
        {
            List<FINISHING_SCOURINGDATABYLOTResult> results = new List<FINISHING_SCOURINGDATABYLOTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_MCNO", 
                "P_WEAVINGLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_MCNO, 
                para.P_WEAVINGLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_SCOURINGDATABYLOT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        FINISHING_SCOURINGDATABYLOTResult result =
                            new FINISHING_SCOURINGDATABYLOTResult();

                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.FINISHINGCUSTOMER = row.Field<System.String>("FINISHINGCUSTOMER");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.LENGTH1 = row.Field<System.Decimal?>("LENGTH1");
                        result.LENGTH2 = row.Field<System.Decimal?>("LENGTH2");
                        result.LENGTH3 = row.Field<System.Decimal?>("LENGTH3");
                        result.LENGTH4 = row.Field<System.Decimal?>("LENGTH4");
                        result.LENGTH5 = row.Field<System.Decimal?>("LENGTH5");
                        result.MCNO = row.Field<System.String>("MCNO");
                        result.STATUSFLAG = row.Field<System.String>("STATUSFLAG");
                        result.SATURATOR_CHEM_PV = row.Field<System.Decimal?>("SATURATOR_CHEM_PV");
                        result.SATURATOR_CHEM_SP = row.Field<System.Decimal?>("SATURATOR_CHEM_SP");
                        result.WASHING1_PV = row.Field<System.Decimal?>("WASHING1_PV");
                        result.WASHING1_SP = row.Field<System.Decimal?>("WASHING1_SP");
                        result.WASHING2_PV = row.Field<System.Decimal?>("WASHING2_PV");
                        result.WASHING2_SP = row.Field<System.Decimal?>("WASHING2_SP");
                        result.HOTFLUE_PV = row.Field<System.Decimal?>("HOTFLUE_PV");
                        result.HOTFLUE_SP = row.Field<System.Decimal?>("HOTFLUE_SP");
                        result.TEMP1_PV = row.Field<System.Decimal?>("TEMP1_PV");
                        result.TEMP1_SP = row.Field<System.Decimal?>("TEMP1_SP");
                        result.TEMP2_PV = row.Field<System.Decimal?>("TEMP2_PV");
                        result.TEMP2_SP = row.Field<System.Decimal?>("TEMP2_SP");
                        result.TEMP3_PV = row.Field<System.Decimal?>("TEMP3_PV");
                        result.TEMP3_SP = row.Field<System.Decimal?>("TEMP3_SP");
                        result.TEMP4_PV = row.Field<System.Decimal?>("TEMP4_PV");
                        result.TEMP4_SP = row.Field<System.Decimal?>("TEMP4_SP");
                        result.TEMP5_PV = row.Field<System.Decimal?>("TEMP5_PV");
                        result.TEMP5_SP = row.Field<System.Decimal?>("TEMP5_SP");
                        result.TEMP6_PV = row.Field<System.Decimal?>("TEMP6_PV");
                        result.TEMP6_SP = row.Field<System.Decimal?>("TEMP6_SP");
                        result.TEMP7_PV = row.Field<System.Decimal?>("TEMP7_PV");
                        result.TEMP7_SP = row.Field<System.Decimal?>("TEMP7_SP");
                        result.TEMP8_PV = row.Field<System.Decimal?>("TEMP8_PV");
                        result.TEMP8_SP = row.Field<System.Decimal?>("TEMP8_SP");
                        result.SPEED_PV = row.Field<System.Decimal?>("SPEED_PV");
                        result.SPEED_SP = row.Field<System.Decimal?>("SPEED_SP");
                        result.MAINFRAMEWIDTH = row.Field<System.Decimal?>("MAINFRAMEWIDTH");
                        result.WIDTH_BE = row.Field<System.Decimal?>("WIDTH_BE");
                        result.WIDTH_AF = row.Field<System.Decimal?>("WIDTH_AF");
                        result.PIN2PIN = row.Field<System.Decimal?>("PIN2PIN");
                        result.CONDITIONBY = row.Field<System.String>("CONDITIONBY");
                        result.CONDITIONDATE = row.Field<System.DateTime?>("CONDITIONDATE");
                        result.FINISHBY = row.Field<System.String>("FINISHBY");
                        result.SAMPLINGID = row.Field<System.String>("SAMPLINGID");
                        result.STARTBY = row.Field<System.String>("STARTBY");
                        result.LENGTH6 = row.Field<System.Decimal?>("LENGTH6");
                        result.LENGTH7 = row.Field<System.Decimal?>("LENGTH7");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.HUMIDITY_BF = row.Field<System.Decimal?>("HUMIDITY_BF");
                        result.HUMIDITY_AF = row.Field<System.Decimal?>("HUMIDITY_AF");
                        result.REPROCESS = row.Field<System.String>("REPROCESS");
                        result.WEAVLENGTH = row.Field<System.Decimal?>("WEAVLENGTH");
                        result.OPERATOR_GROUP = row.Field<System.String>("OPERATOR_GROUP");
                        result.TEMP1_MIN = row.Field<System.Decimal?>("TEMP1_MIN");
                        result.TEMP1_MAX = row.Field<System.Decimal?>("TEMP1_MAX");
                        result.TEMP2_MIN = row.Field<System.Decimal?>("TEMP2_MIN");
                        result.TEMP2_MAX = row.Field<System.Decimal?>("TEMP2_MAX");
                        result.TEMP3_MIN = row.Field<System.Decimal?>("TEMP3_MIN");
                        result.TEMP3_MAX = row.Field<System.Decimal?>("TEMP3_MAX");
                        result.TEMP4_MIN = row.Field<System.Decimal?>("TEMP4_MIN");
                        result.TEMP4_MAX = row.Field<System.Decimal?>("TEMP4_MAX");
                        result.TEMP5_MIN = row.Field<System.Decimal?>("TEMP5_MIN");
                        result.TEMP5_MAX = row.Field<System.Decimal?>("TEMP5_MAX");
                        result.TEMP6_MIN = row.Field<System.Decimal?>("TEMP6_MIN");
                        result.TEMP6_MAX = row.Field<System.Decimal?>("TEMP6_MAX");
                        result.TEMP7_MIN = row.Field<System.Decimal?>("TEMP7_MIN");
                        result.TEMP7_MAX = row.Field<System.Decimal?>("TEMP7_MAX");
                        result.TEMP8_MIN = row.Field<System.Decimal?>("TEMP8_MIN");
                        result.TEMP8_MAX = row.Field<System.Decimal?>("TEMP8_MAX");
                        result.SAT_CHEM_MIN = row.Field<System.Decimal?>("SAT_CHEM_MIN");
                        result.SAT_CHEM_MAX = row.Field<System.Decimal?>("SAT_CHEM_MAX");
                        result.WASHING1_MIN = row.Field<System.Decimal?>("WASHING1_MIN");
                        result.WASHING1_MAX = row.Field<System.Decimal?>("WASHING1_MAX");
                        result.WASHING2_MIN = row.Field<System.Decimal?>("WASHING2_MIN");
                        result.WASHING2_MAX = row.Field<System.Decimal?>("WASHING2_MAX");
                        result.HOTFLUE_MIN = row.Field<System.Decimal?>("HOTFLUE_MIN");
                        result.HOTFLUE_MAX = row.Field<System.Decimal?>("HOTFLUE_MAX");
                        result.SPEED_MIN = row.Field<System.Decimal?>("SPEED_MIN");
                        result.SPEED_MAX = row.Field<System.Decimal?>("SPEED_MAX");
                        result.TEMP9_PV = row.Field<System.Decimal?>("TEMP9_PV");
                        result.TEMP9_SP = row.Field<System.Decimal?>("TEMP9_SP");
                        result.TEMP10_PV = row.Field<System.Decimal?>("TEMP10_PV");
                        result.TEMP10_SP = row.Field<System.Decimal?>("TEMP10_SP");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region FINISHING_SAMPLINGDATA

        public FINISHING_SAMPLINGDATAResult FINISHING_SAMPLINGDATA(FINISHING_SAMPLINGDATAParameter para)
        {
            FINISHING_SAMPLINGDATAResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_WEAVLOT", 
                "P_FINISHLOT", 
                "P_ITMCODE", 
                "P_FINISHCUSTOMER", 
                "P_PRODUCTTYPEID", 
                "P_OPERATORID", 
                "P_WIDTH", 
                "P_LENGTH", 
                "P_REMARK"
            };
            object[] paraValues = new object[]
            {
                para.P_WEAVLOT, 
                para.P_FINISHLOT, 
                para.P_ITMCODE, 
                para.P_FINISHCUSTOMER, 
                para.P_PRODUCTTYPEID, 
                para.P_OPERATORID, 
                para.P_WIDTH, 
                para.P_LENGTH, 
                para.P_REMARK
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_SAMPLINGDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new FINISHING_SAMPLINGDATAResult();
            }

            return result;
        }

        #endregion

        #region FINISHING_INSERTSCOURING

        public FINISHING_INSERTSCOURINGResult FINISHING_INSERTSCOURING(FINISHING_INSERTSCOURINGParameter para)
        {
            FINISHING_INSERTSCOURINGResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_WEAVLOT", 
                "P_ITMCODE", 
                "P_FINISHCUSTOMER", 
                "P_PRODUCTTYPEID", 
                "P_OPERATORID", 
                "P_MCNO", 
                "P_FLAG", 
                "P_SATURATOR_PV", 
                "P_SATURATOR_SP", 
                "P_WASHING1_PV", 
                "P_WASHING1_SP", 
                "P_WASHING2_PV", 
                "P_WASHING2_SP", 
                "P_HOTFLUE_PV", 
                "P_HOTFLUE_SP", 
                "P_TEMP1_PV", 
                "P_TEMP1_SP", 
                "P_TEMP2_PV", 
                "P_TEMP2_SP", 
                "P_TEMP3_PV", 
                "P_TEMP3_SP", 
                "P_TEMP4_PV", 
                "P_TEMP4_SP", 
                "P_TEMP5_PV", 
                "P_TEMP5_SP", 
                "P_TEMP6_PV", 
                "P_TEMP6_SP", 
                "P_TEMP7_PV", 
                "P_TEMP7_SP", 
                "P_TEMP8_PV", 
                "P_TEMP8_SP", 
                "P_TEMP9_PV", 
                "P_TEMP9_SP", 
                "P_TEMP10_PV", 
                "P_TEMP10_SP", 
                "P_SPEED_PV", 
                "P_SPEED_SP", 
                "P_MAINFRAMEWIDTH", 
                "P_WIDTH_BE", 
                "P_WIDTH_AF", 
                "P_PIN2PIN", 
                "P_HUMID_BF", 
                "P_HUMID_AF", 
                "P_REPROCESS", 
                "P_WEAVLENGTH", 
                "P_GROUP"
            };
            object[] paraValues = new object[]
            {
                para.P_WEAVLOT, 
                para.P_ITMCODE, 
                para.P_FINISHCUSTOMER, 
                para.P_PRODUCTTYPEID, 
                para.P_OPERATORID, 
                para.P_MCNO, 
                para.P_FLAG, 
                para.P_SATURATOR_PV, 
                para.P_SATURATOR_SP, 
                para.P_WASHING1_PV, 
                para.P_WASHING1_SP, 
                para.P_WASHING2_PV, 
                para.P_WASHING2_SP, 
                para.P_HOTFLUE_PV, 
                para.P_HOTFLUE_SP, 
                para.P_TEMP1_PV, 
                para.P_TEMP1_SP, 
                para.P_TEMP2_PV, 
                para.P_TEMP2_SP, 
                para.P_TEMP3_PV, 
                para.P_TEMP3_SP, 
                para.P_TEMP4_PV, 
                para.P_TEMP4_SP, 
                para.P_TEMP5_PV, 
                para.P_TEMP5_SP, 
                para.P_TEMP6_PV, 
                para.P_TEMP6_SP, 
                para.P_TEMP7_PV, 
                para.P_TEMP7_SP, 
                para.P_TEMP8_PV, 
                para.P_TEMP8_SP, 
                para.P_TEMP9_PV, 
                para.P_TEMP9_SP, 
                para.P_TEMP10_PV, 
                para.P_TEMP10_SP, 
                para.P_SPEED_PV, 
                para.P_SPEED_SP, 
                para.P_MAINFRAMEWIDTH, 
                para.P_WIDTH_BE, 
                para.P_WIDTH_AF, 
                para.P_PIN2PIN, 
                para.P_HUMID_BF, 
                para.P_HUMID_AF, 
                para.P_REPROCESS, 
                para.P_WEAVLENGTH, 
                para.P_GROUP
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_INSERTSCOURING",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new FINISHING_INSERTSCOURINGResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region FINISHING_INSERTDRYER

        public FINISHING_INSERTDRYERResult FINISHING_INSERTDRYER(FINISHING_INSERTDRYERParameter para)
        {
            FINISHING_INSERTDRYERResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_WEAVLOT", 
                "P_ITMCODE", 
                "P_FINISHCUSTOMER", 
                "P_PRODUCTTYPEID", 
                "P_OPERATORID", 
                "P_MCNO", 
                "P_FLAG", 
                "P_HOTFLUE_PV", 
                "P_HOTFLUE_SP", 
                "P_SPEED_PV", 
                "P_SPEED_SP", 
                "P_WIDTHBEHEAT", 
                "P_ACCPRESURE", 
                "P_ASSTENSION", 
                "P_ACCARIDENSER", 
                "P_CHIFROT", 
                "P_CHIREAR", 
                "P_STEAMPRESURE", 
                "P_DRYCIRCUFAN", 
                "P_EXHAUSTFAN", 
                "P_WIDTHAFHEAT", 
                "P_HUMID_BF", 
                "P_HUMID_AF", 
                "P_REPROCESS", 
                "P_WEAVLENGTH", 
                "P_GROUP", 
                "P_SATURATOR_PV", 
                "P_SATURATOR_SP", 
                "P_WASHING1_PV", 
                "P_WASHING1_SP", 
                "P_WASHING2_PV", 
                "P_WASHING2_SP"
            };
            object[] paraValues = new object[]
            {
                para.P_WEAVLOT, 
                para.P_ITMCODE, 
                para.P_FINISHCUSTOMER, 
                para.P_PRODUCTTYPEID, 
                para.P_OPERATORID, 
                para.P_MCNO, 
                para.P_FLAG, 
                para.P_HOTFLUE_PV, 
                para.P_HOTFLUE_SP, 
                para.P_SPEED_PV, 
                para.P_SPEED_SP, 
                para.P_WIDTHBEHEAT, 
                para.P_ACCPRESURE, 
                para.P_ASSTENSION, 
                para.P_ACCARIDENSER, 
                para.P_CHIFROT, 
                para.P_CHIREAR, 
                para.P_STEAMPRESURE, 
                para.P_DRYCIRCUFAN, 
                para.P_EXHAUSTFAN, 
                para.P_WIDTHAFHEAT, 
                para.P_HUMID_BF, 
                para.P_HUMID_AF, 
                para.P_REPROCESS, 
                para.P_WEAVLENGTH, 
                para.P_GROUP, 
                para.P_SATURATOR_PV, 
                para.P_SATURATOR_SP, 
                para.P_WASHING1_PV, 
                para.P_WASHING1_SP, 
                para.P_WASHING2_PV, 
                para.P_WASHING2_SP
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_INSERTDRYER",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new FINISHING_INSERTDRYERResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region FINISHING_INSERTCOATING

        public FINISHING_INSERTCOATINGResult FINISHING_INSERTCOATING(FINISHING_INSERTCOATINGParameter para)
        {
            FINISHING_INSERTCOATINGResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_WEAVLOT", 
                "P_ITMCODE", 
                "P_FINISHCUSTOMER", 
                "P_PRODUCTTYPEID", 
                "P_OPERATORID", 
                "P_MCNO", 
                "P_FLAG", 
                "P_SATURATOR_PV", 
                "P_SATURATOR_SP", 
                "P_WASHING1_PV", 
                "P_WASHING1_SP", 
                "P_WASHING2_PV", 
                "P_WASHING2_SP", 
                "P_HOTFLUE_PV", 
                "P_HOTFLUE_SP", 
                "P_TEMP1_PV", 
                "P_TEMP1_SP", 
                "P_TEMP2_PV", 
                "P_TEMP2_SP", 
                "P_TEMP3_PV", 
                "P_TEMP3_SP", 
                "P_TEMP4_PV", 
                "P_TEMP4_SP", 
                "P_TEMP5_PV", 
                "P_TEMP5_SP", 
                "P_TEMP6_PV", 
                "P_TEMP6_SP", 
                "P_TEMP7_PV", 
                "P_TEMP7_SP", 
                "P_TEMP8_PV", 
                "P_TEMP8_SP", 
                "P_TEMP9_PV", 
                "P_TEMP9_SP", 
                "P_TEMP10_PV", 
                "P_TEMP10_SP", 
                "P_SPEED_PV", 
                "P_SPEED_SP", 
                "P_BECOATWIDTH", 
                "P_FANRPM", 
                "P_EXFAN_FRONT_BACK", 
                "P_EXFAN_MIDDLE", 
                "P_ANGLEKNIFE", 
                "P_BLADENO", 
                "P_BLADEDIRECTION", 
                "P_TENSIONUP", 
                "P_TENSIONDOWN", 
                "P_FORN", 
                "P_TENTER", 
                "P_PATHLINE", 
                "P_FEEDIN", 
                "P_OVERFEED", 
                "P_WIDTHCOAT", 
                "P_WIDTHCOATALL", 
                "P_SILICONEA", 
                "P_SILICONEB", 
                "P_CWL", 
                "P_CWC", 
                "P_CWR", 
                "P_HUMID_BF", 
                "P_HUMID_AF", 
                "P_REPROCESS", 
                "P_WEAVLENGTH", 
                "P_GROUP"
            };
            object[] paraValues = new object[]
            {
                para.P_WEAVLOT, 
                para.P_ITMCODE, 
                para.P_FINISHCUSTOMER, 
                para.P_PRODUCTTYPEID, 
                para.P_OPERATORID, 
                para.P_MCNO, 
                para.P_FLAG, 
                para.P_SATURATOR_PV, 
                para.P_SATURATOR_SP, 
                para.P_WASHING1_PV, 
                para.P_WASHING1_SP, 
                para.P_WASHING2_PV, 
                para.P_WASHING2_SP, 
                para.P_HOTFLUE_PV, 
                para.P_HOTFLUE_SP, 
                para.P_TEMP1_PV, 
                para.P_TEMP1_SP, 
                para.P_TEMP2_PV, 
                para.P_TEMP2_SP, 
                para.P_TEMP3_PV, 
                para.P_TEMP3_SP, 
                para.P_TEMP4_PV, 
                para.P_TEMP4_SP, 
                para.P_TEMP5_PV, 
                para.P_TEMP5_SP, 
                para.P_TEMP6_PV, 
                para.P_TEMP6_SP, 
                para.P_TEMP7_PV, 
                para.P_TEMP7_SP, 
                para.P_TEMP8_PV, 
                para.P_TEMP8_SP, 
                para.P_TEMP9_PV, 
                para.P_TEMP9_SP, 
                para.P_TEMP10_PV, 
                para.P_TEMP10_SP, 
                para.P_SPEED_PV, 
                para.P_SPEED_SP, 
                para.P_BECOATWIDTH, 
                para.P_FANRPM, 
                para.P_EXFAN_FRONT_BACK, 
                para.P_EXFAN_MIDDLE, 
                para.P_ANGLEKNIFE, 
                para.P_BLADENO, 
                para.P_BLADEDIRECTION, 
                para.P_TENSIONUP, 
                para.P_TENSIONDOWN, 
                para.P_FORN, 
                para.P_TENTER, 
                para.P_PATHLINE, 
                para.P_FEEDIN, 
                para.P_OVERFEED, 
                para.P_WIDTHCOAT, 
                para.P_WIDTHCOATALL, 
                para.P_SILICONEA, 
                para.P_SILICONEB, 
                para.P_CWL, 
                para.P_CWC, 
                para.P_CWR, 
                para.P_HUMID_BF, 
                para.P_HUMID_AF, 
                para.P_REPROCESS, 
                para.P_WEAVLENGTH, 
                para.P_GROUP
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_INSERTCOATING",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new FINISHING_INSERTCOATINGResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region FINISHING_INPROCESSLIST

        public List<FINISHING_INPROCESSLISTResult> FINISHING_INPROCESSLIST(FINISHING_INPROCESSLISTParameter para)
        {
            List<FINISHING_INPROCESSLISTResult> results = new List<FINISHING_INPROCESSLISTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
            };
            object[] paraValues = new object[]
            {
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_INPROCESSLIST",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        FINISHING_INPROCESSLISTResult result =
                            new FINISHING_INPROCESSLISTResult();

                        result.MCNAME = row.Field<System.String>("MCNAME");
                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.OPERATOR_GROUP = row.Field<System.String>("OPERATOR_GROUP");
                        result.STATUS = row.Field<System.String>("STATUS");
                        result.FINISHINGCUSTOMER = row.Field<System.String>("FINISHINGCUSTOMER");
                        result.STARTBY = row.Field<System.String>("STARTBY");
                        result.CONDITIONBY = row.Field<System.String>("CONDITIONBY");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region FINISHING_GETSCOURINGREPORT

        public List<FINISHING_GETSCOURINGREPORTResult> FINISHING_GETSCOURINGREPORT(FINISHING_GETSCOURINGREPORTParameter para)
        {
            List<FINISHING_GETSCOURINGREPORTResult> results = new List<FINISHING_GETSCOURINGREPORTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WEAVINGLOT", 
                "P_FINLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_WEAVINGLOT, 
                para.P_FINLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_GETSCOURINGREPORT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        FINISHING_GETSCOURINGREPORTResult result =
                            new FINISHING_GETSCOURINGREPORTResult();

                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.FINISHINGCUSTOMER = row.Field<System.String>("FINISHINGCUSTOMER");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.LENGTH1 = row.Field<System.Decimal?>("LENGTH1");
                        result.LENGTH2 = row.Field<System.Decimal?>("LENGTH2");
                        result.LENGTH3 = row.Field<System.Decimal?>("LENGTH3");
                        result.LENGTH4 = row.Field<System.Decimal?>("LENGTH4");
                        result.LENGTH5 = row.Field<System.Decimal?>("LENGTH5");
                        result.MCNO = row.Field<System.String>("MCNO");
                        result.STATUSFLAG = row.Field<System.String>("STATUSFLAG");
                        result.SATURATOR_CHEM_PV = row.Field<System.Decimal?>("SATURATOR_CHEM_PV");
                        result.SATURATOR_CHEM_SP = row.Field<System.Decimal?>("SATURATOR_CHEM_SP");
                        result.WASHING1_PV = row.Field<System.Decimal?>("WASHING1_PV");
                        result.WASHING1_SP = row.Field<System.Decimal?>("WASHING1_SP");
                        result.WASHING2_PV = row.Field<System.Decimal?>("WASHING2_PV");
                        result.WASHING2_SP = row.Field<System.Decimal?>("WASHING2_SP");
                        result.HOTFLUE_PV = row.Field<System.Decimal?>("HOTFLUE_PV");
                        result.HOTFLUE_SP = row.Field<System.Decimal?>("HOTFLUE_SP");
                        result.TEMP1_PV = row.Field<System.Decimal?>("TEMP1_PV");
                        result.TEMP1_SP = row.Field<System.Decimal?>("TEMP1_SP");
                        result.TEMP2_PV = row.Field<System.Decimal?>("TEMP2_PV");
                        result.TEMP2_SP = row.Field<System.Decimal?>("TEMP2_SP");
                        result.TEMP3_PV = row.Field<System.Decimal?>("TEMP3_PV");
                        result.TEMP3_SP = row.Field<System.Decimal?>("TEMP3_SP");
                        result.TEMP4_PV = row.Field<System.Decimal?>("TEMP4_PV");
                        result.TEMP4_SP = row.Field<System.Decimal?>("TEMP4_SP");
                        result.TEMP5_PV = row.Field<System.Decimal?>("TEMP5_PV");
                        result.TEMP5_SP = row.Field<System.Decimal?>("TEMP5_SP");
                        result.TEMP6_PV = row.Field<System.Decimal?>("TEMP6_PV");
                        result.TEMP6_SP = row.Field<System.Decimal?>("TEMP6_SP");
                        result.TEMP7_PV = row.Field<System.Decimal?>("TEMP7_PV");
                        result.TEMP7_SP = row.Field<System.Decimal?>("TEMP7_SP");
                        result.TEMP8_PV = row.Field<System.Decimal?>("TEMP8_PV");
                        result.TEMP8_SP = row.Field<System.Decimal?>("TEMP8_SP");
                        result.TEMP9_PV = row.Field<System.Decimal?>("TEMP9_PV");
                        result.TEMP9_SP = row.Field<System.Decimal?>("TEMP9_SP");
                        result.TEMP10_PV = row.Field<System.Decimal?>("TEMP10_PV");
                        result.TEMP10_SP = row.Field<System.Decimal?>("TEMP10_SP");
                        result.SPEED_PV = row.Field<System.Decimal?>("SPEED_PV");
                        result.SPEED_SP = row.Field<System.Decimal?>("SPEED_SP");
                        result.MAINFRAMEWIDTH = row.Field<System.Decimal?>("MAINFRAMEWIDTH");
                        result.WIDTH_BE = row.Field<System.Decimal?>("WIDTH_BE");
                        result.WIDTH_AF = row.Field<System.Decimal?>("WIDTH_AF");
                        result.PIN2PIN = row.Field<System.Decimal?>("PIN2PIN");
                        result.CONDITIONBY = row.Field<System.String>("CONDITIONBY");
                        result.CONDITIONDATE = row.Field<System.DateTime?>("CONDITIONDATE");
                        result.FINISHBY = row.Field<System.String>("FINISHBY");
                        result.SAMPLINGID = row.Field<System.String>("SAMPLINGID");
                        result.STARTBY = row.Field<System.String>("STARTBY");
                        result.LENGTH6 = row.Field<System.Decimal?>("LENGTH6");
                        result.LENGTH7 = row.Field<System.Decimal?>("LENGTH7");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.HUMIDITY_BF = row.Field<System.Decimal?>("HUMIDITY_BF");
                        result.HUMIDITY_AF = row.Field<System.Decimal?>("HUMIDITY_AF");
                        result.REPROCESS = row.Field<System.String>("REPROCESS");
                        result.INPUTLENGTH = row.Field<System.Decimal?>("INPUTLENGTH");
                        result.OPERATOR_GROUP = row.Field<System.String>("OPERATOR_GROUP");
                        result.TEMP1_MIN = row.Field<System.Decimal?>("TEMP1_MIN");
                        result.TEMP1_MAX = row.Field<System.Decimal?>("TEMP1_MAX");
                        result.TEMP2_MIN = row.Field<System.Decimal?>("TEMP2_MIN");
                        result.TEMP2_MAX = row.Field<System.Decimal?>("TEMP2_MAX");
                        result.TEMP3_MIN = row.Field<System.Decimal?>("TEMP3_MIN");
                        result.TEMP3_MAX = row.Field<System.Decimal?>("TEMP3_MAX");
                        result.TEMP4_MIN = row.Field<System.Decimal?>("TEMP4_MIN");
                        result.TEMP4_MAX = row.Field<System.Decimal?>("TEMP4_MAX");
                        result.TEMP5_MIN = row.Field<System.Decimal?>("TEMP5_MIN");
                        result.TEMP5_MAX = row.Field<System.Decimal?>("TEMP5_MAX");
                        result.TEMP6_MIN = row.Field<System.Decimal?>("TEMP6_MIN");
                        result.TEMP6_MAX = row.Field<System.Decimal?>("TEMP6_MAX");
                        result.TEMP7_MIN = row.Field<System.Decimal?>("TEMP7_MIN");
                        result.TEMP7_MAX = row.Field<System.Decimal?>("TEMP7_MAX");
                        result.TEMP8_MIN = row.Field<System.Decimal?>("TEMP8_MIN");
                        result.TEMP8_MAX = row.Field<System.Decimal?>("TEMP8_MAX");
                        result.SAT_CHEM_MIN = row.Field<System.Decimal?>("SAT_CHEM_MIN");
                        result.SAT_CHEM_MAX = row.Field<System.Decimal?>("SAT_CHEM_MAX");
                        result.WASHING1_MIN = row.Field<System.Decimal?>("WASHING1_MIN");
                        result.WASHING1_MAX = row.Field<System.Decimal?>("WASHING1_MAX");
                        result.WASHING2_MIN = row.Field<System.Decimal?>("WASHING2_MIN");
                        result.WASHING2_MAX = row.Field<System.Decimal?>("WASHING2_MAX");
                        result.HOTFLUE_MIN = row.Field<System.Decimal?>("HOTFLUE_MIN");
                        result.HOTFLUE_MAX = row.Field<System.Decimal?>("HOTFLUE_MAX");
                        result.SPEED_MIN = row.Field<System.Decimal?>("SPEED_MIN");
                        result.SPEED_MAX = row.Field<System.Decimal?>("SPEED_MAX");
                        result.PARTNO = row.Field<System.String>("PARTNO");
                        result.FINISHLENGTH = row.Field<System.Decimal?>("FINISHLENGTH");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region FINISHING_GETSCOURINGDATA

        public List<FINISHING_GETSCOURINGDATAResult> FINISHING_GETSCOURINGDATA(FINISHING_GETSCOURINGDATAParameter para)
        {
            List<FINISHING_GETSCOURINGDATAResult> results = new List<FINISHING_GETSCOURINGDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_MCNO", 
                "P_FLAG"
            };
            object[] paraValues = new object[]
            {
                para.P_MCNO, 
                para.P_FLAG
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_GETSCOURINGDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        FINISHING_GETSCOURINGDATAResult result =
                            new FINISHING_GETSCOURINGDATAResult();

                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.FINISHINGCUSTOMER = row.Field<System.String>("FINISHINGCUSTOMER");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.LENGTH1 = row.Field<System.Decimal?>("LENGTH1");
                        result.LENGTH2 = row.Field<System.Decimal?>("LENGTH2");
                        result.LENGTH3 = row.Field<System.Decimal?>("LENGTH3");
                        result.LENGTH4 = row.Field<System.Decimal?>("LENGTH4");
                        result.LENGTH5 = row.Field<System.Decimal?>("LENGTH5");
                        result.MCNO = row.Field<System.String>("MCNO");
                        result.STATUSFLAG = row.Field<System.String>("STATUSFLAG");
                        result.SATURATOR_CHEM_PV = row.Field<System.Decimal?>("SATURATOR_CHEM_PV");
                        result.SATURATOR_CHEM_SP = row.Field<System.Decimal?>("SATURATOR_CHEM_SP");
                        result.WASHING1_PV = row.Field<System.Decimal?>("WASHING1_PV");
                        result.WASHING1_SP = row.Field<System.Decimal?>("WASHING1_SP");
                        result.WASHING2_PV = row.Field<System.Decimal?>("WASHING2_PV");
                        result.WASHING2_SP = row.Field<System.Decimal?>("WASHING2_SP");
                        result.HOTFLUE_PV = row.Field<System.Decimal?>("HOTFLUE_PV");
                        result.HOTFLUE_SP = row.Field<System.Decimal?>("HOTFLUE_SP");
                        result.TEMP1_PV = row.Field<System.Decimal?>("TEMP1_PV");
                        result.TEMP1_SP = row.Field<System.Decimal?>("TEMP1_SP");
                        result.TEMP2_PV = row.Field<System.Decimal?>("TEMP2_PV");
                        result.TEMP2_SP = row.Field<System.Decimal?>("TEMP2_SP");
                        result.TEMP3_PV = row.Field<System.Decimal?>("TEMP3_PV");
                        result.TEMP3_SP = row.Field<System.Decimal?>("TEMP3_SP");
                        result.TEMP4_PV = row.Field<System.Decimal?>("TEMP4_PV");
                        result.TEMP4_SP = row.Field<System.Decimal?>("TEMP4_SP");
                        result.TEMP5_PV = row.Field<System.Decimal?>("TEMP5_PV");
                        result.TEMP5_SP = row.Field<System.Decimal?>("TEMP5_SP");
                        result.TEMP6_PV = row.Field<System.Decimal?>("TEMP6_PV");
                        result.TEMP6_SP = row.Field<System.Decimal?>("TEMP6_SP");
                        result.TEMP7_PV = row.Field<System.Decimal?>("TEMP7_PV");
                        result.TEMP7_SP = row.Field<System.Decimal?>("TEMP7_SP");
                        result.TEMP8_PV = row.Field<System.Decimal?>("TEMP8_PV");
                        result.TEMP8_SP = row.Field<System.Decimal?>("TEMP8_SP");
                        result.TEMP9_PV = row.Field<System.Decimal?>("TEMP9_PV");
                        result.TEMP9_SP = row.Field<System.Decimal?>("TEMP9_SP");
                        result.TEMP10_PV = row.Field<System.Decimal?>("TEMP10_PV");
                        result.TEMP10_SP = row.Field<System.Decimal?>("TEMP10_SP");
                        result.SPEED_PV = row.Field<System.Decimal?>("SPEED_PV");
                        result.SPEED_SP = row.Field<System.Decimal?>("SPEED_SP");
                        result.MAINFRAMEWIDTH = row.Field<System.Decimal?>("MAINFRAMEWIDTH");
                        result.WIDTH_BE = row.Field<System.Decimal?>("WIDTH_BE");
                        result.WIDTH_AF = row.Field<System.Decimal?>("WIDTH_AF");
                        result.PIN2PIN = row.Field<System.Decimal?>("PIN2PIN");
                        result.CONDITIONBY = row.Field<System.String>("CONDITIONBY");
                        result.CONDITIONDATE = row.Field<System.DateTime?>("CONDITIONDATE");
                        result.FINISHBY = row.Field<System.String>("FINISHBY");
                        result.SAMPLINGID = row.Field<System.String>("SAMPLINGID");
                        result.STARTBY = row.Field<System.String>("STARTBY");
                        result.LENGTH6 = row.Field<System.Decimal?>("LENGTH6");
                        result.LENGTH7 = row.Field<System.Decimal?>("LENGTH7");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.HUMIDITY_BF = row.Field<System.Decimal?>("HUMIDITY_BF");
                        result.HUMIDITY_AF = row.Field<System.Decimal?>("HUMIDITY_AF");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");
                        result.WEAVINGLENGTH = row.Field<System.Decimal?>("WEAVINGLENGTH");
                        result.OPERATOR_GROUP = row.Field<System.String>("OPERATOR_GROUP");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region FINISHING_GETSCOURINGCONDITION

        public List<FINISHING_GETSCOURINGCONDITIONResult> FINISHING_GETSCOURINGCONDITION(FINISHING_GETSCOURINGCONDITIONParameter para)
        {
            List<FINISHING_GETSCOURINGCONDITIONResult> results = new List<FINISHING_GETSCOURINGCONDITIONResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITEMCODE", 
                "P_SCOURINGNO"
            };
            object[] paraValues = new object[]
            {
                para.P_ITEMCODE, 
                para.P_SCOURINGNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_GETSCOURINGCONDITION",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        FINISHING_GETSCOURINGCONDITIONResult result =
                            new FINISHING_GETSCOURINGCONDITIONResult();

                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.SATURATOR_CHEM = row.Field<System.Decimal?>("SATURATOR_CHEM");
                        result.SATURATOR_CHEM_MARGIN = row.Field<System.Decimal?>("SATURATOR_CHEM_MARGIN");
                        result.WASHING1 = row.Field<System.Decimal?>("WASHING1");
                        result.WASHING1_MARGIN = row.Field<System.Decimal?>("WASHING1_MARGIN");
                        result.WASHING2 = row.Field<System.Decimal?>("WASHING2");
                        result.WASHING2_MARGIN = row.Field<System.Decimal?>("WASHING2_MARGIN");
                        result.HOTFLUE = row.Field<System.Decimal?>("HOTFLUE");
                        result.HOTFLUE_MARGIN = row.Field<System.Decimal?>("HOTFLUE_MARGIN");
                        result.ROOMTEMP = row.Field<System.Decimal?>("ROOMTEMP");
                        result.ROOMTEMP_MARGIN = row.Field<System.Decimal?>("ROOMTEMP_MARGIN");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.SPEED_MARGIN = row.Field<System.Decimal?>("SPEED_MARGIN");
                        result.MAINFRAMEWIDTH = row.Field<System.Decimal?>("MAINFRAMEWIDTH");
                        result.MAINFRAMEWIDTH_MARGIN = row.Field<System.Decimal?>("MAINFRAMEWIDTH_MARGIN");
                        result.WIDTH_BE = row.Field<System.Decimal?>("WIDTH_BE");
                        result.WIDTH_BE_MARGIN = row.Field<System.Decimal?>("WIDTH_BE_MARGIN");
                        result.WIDTH_AF = row.Field<System.Decimal?>("WIDTH_AF");
                        result.WIDTH_AF_MARGIN = row.Field<System.Decimal?>("WIDTH_AF_MARGIN");
                        result.DENSITY_AF = row.Field<System.String>("DENSITY_AF");
                        result.DENSITY_MARGIN = row.Field<System.Decimal?>("DENSITY_MARGIN");
                        result.SCOURINGNO = row.Field<System.String>("SCOURINGNO");
                        result.NIPCHEMICAL = row.Field<System.Decimal?>("NIPCHEMICAL");
                        result.NIPROLLWASHER1 = row.Field<System.Decimal?>("NIPROLLWASHER1");
                        result.NIPROLLWASHER2 = row.Field<System.Decimal?>("NIPROLLWASHER2");
                        result.PIN2PIN = row.Field<System.Decimal?>("PIN2PIN");
                        result.PIN2PIN_MARGIN = row.Field<System.Decimal?>("PIN2PIN_MARGIN");
                        result.HUMIDITY_MAX = row.Field<System.Decimal?>("HUMIDITY_MAX");
                        result.HUMIDITY_MIN = row.Field<System.Decimal?>("HUMIDITY_MIN");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region FINISHING_GETSAMPLINGSHEET

        public List<FINISHING_GETSAMPLINGSHEETResult> FINISHING_GETSAMPLINGSHEET(FINISHING_GETSAMPLINGSHEETParameter para)
        {
            List<FINISHING_GETSAMPLINGSHEETResult> results = new List<FINISHING_GETSAMPLINGSHEETResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WEAVINGLOT", 
                "P_FINLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_WEAVINGLOT, 
                para.P_FINLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_GETSAMPLINGSHEET",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        FINISHING_GETSAMPLINGSHEETResult result =
                            new FINISHING_GETSAMPLINGSHEETResult();

                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.CREATEDATE = row.Field<System.DateTime?>("CREATEDATE");
                        result.CREATEBY = row.Field<System.String>("CREATEBY");
                        result.PRODUCTID = row.Field<System.String>("PRODUCTID");
                        result.SAMPLING_WIDTH = row.Field<System.Decimal?>("SAMPLING_WIDTH");
                        result.SAMPLING_LENGTH = row.Field<System.Decimal?>("SAMPLING_LENGTH");
                        result.PROCESS = row.Field<System.String>("PROCESS");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.FABRICTYPE = row.Field<System.String>("FABRICTYPE");
                        result.RETESTFLAG = row.Field<System.String>("RETESTFLAG");
                        result.PRODUCTNAME = row.Field<System.String>("PRODUCTNAME");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region FINISHING_GETITEMGOOD

        public List<FINISHING_GETITEMGOODResult> FINISHING_GETITEMGOOD(FINISHING_GETITEMGOODParameter para)
        {
            List<FINISHING_GETITEMGOODResult> results = new List<FINISHING_GETITEMGOODResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_CUSTOMER"
            };
            object[] paraValues = new object[]
            {
                para.P_CUSTOMER
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_GETITEMGOOD",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        FINISHING_GETITEMGOODResult result =
                            new FINISHING_GETITEMGOODResult();

                        result.CUSTOMERID = row.Field<System.String>("CUSTOMERID");
                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.PARTNO = row.Field<System.String>("PARTNO");
                        result.FABRIC = row.Field<System.String>("FABRIC");
                        result.LENGTH = row.Field<System.Decimal?>("LENGTH");
                        result.DENSITY_W = row.Field<System.String>("DENSITY_W");
                        result.DENSITY_F = row.Field<System.String>("DENSITY_F");
                        result.WIDTH_ALL = row.Field<System.String>("WIDTH_ALL");
                        result.WIDTH_PIN = row.Field<System.String>("WIDTH_PIN");
                        result.WIDTH_COAT = row.Field<System.String>("WIDTH_COAT");
                        result.TRIM_L = row.Field<System.String>("TRIM_L");
                        result.TRIM_R = row.Field<System.String>("TRIM_R");
                        result.FLOPPY_L = row.Field<System.String>("FLOPPY_L");
                        result.FLOPPY_R = row.Field<System.String>("FLOPPY_R");
                        result.HARDNESS_L = row.Field<System.String>("HARDNESS_L");
                        result.HARDNESS_C = row.Field<System.String>("HARDNESS_C");
                        result.HARDNESS_R = row.Field<System.String>("HARDNESS_R");
                        result.UNWINDER = row.Field<System.String>("UNWINDER");
                        result.WINDER = row.Field<System.String>("WINDER");
                        result.FINISHINGCUSTOMER = row.Field<System.String>("FINISHINGCUSTOMER");
                        result.DESCRIPTION = row.Field<System.String>("DESCRIPTION");
                        result.SUPPLIERCODE = row.Field<System.String>("SUPPLIERCODE");
                        result.WIDTH = row.Field<System.String>("WIDTH");
                        result.WIDTH_SELVAGEL = row.Field<System.String>("WIDTH_SELVAGEL");
                        result.WIDTH_SELVAGER = row.Field<System.String>("WIDTH_SELVAGER");
                        result.RESETSTARTLENGTH = row.Field<System.Decimal?>("RESETSTARTLENGTH");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region FINISHING_GETDRYERREPORT

        public List<FINISHING_GETDRYERREPORTResult> FINISHING_GETDRYERREPORT(FINISHING_GETDRYERREPORTParameter para)
        {
            List<FINISHING_GETDRYERREPORTResult> results = new List<FINISHING_GETDRYERREPORTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WEAVINGLOT", 
                "P_FINLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_WEAVINGLOT, 
                para.P_FINLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_GETDRYERREPORT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        FINISHING_GETDRYERREPORTResult result =
                            new FINISHING_GETDRYERREPORTResult();

                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.FINISHINGCUSTOMER = row.Field<System.String>("FINISHINGCUSTOMER");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.LENGTH1 = row.Field<System.Decimal?>("LENGTH1");
                        result.LENGTH2 = row.Field<System.Decimal?>("LENGTH2");
                        result.LENGTH3 = row.Field<System.Decimal?>("LENGTH3");
                        result.LENGTH4 = row.Field<System.Decimal?>("LENGTH4");
                        result.LENGTH5 = row.Field<System.Decimal?>("LENGTH5");
                        result.MCNO = row.Field<System.String>("MCNO");
                        result.STATUSFLAG = row.Field<System.String>("STATUSFLAG");
                        result.WIDTH_BE_HEAT = row.Field<System.Decimal?>("WIDTH_BE_HEAT");
                        result.ACCPRESURE = row.Field<System.Decimal?>("ACCPRESURE");
                        result.ASSTENSION = row.Field<System.Decimal?>("ASSTENSION");
                        result.ACCARIDENSER = row.Field<System.Decimal?>("ACCARIDENSER");
                        result.CHIFROT = row.Field<System.Decimal?>("CHIFROT");
                        result.CHIREAR = row.Field<System.Decimal?>("CHIREAR");
                        result.DRYERTEMP1_PV = row.Field<System.Decimal?>("DRYERTEMP1_PV");
                        result.DRYERTEMP1_SP = row.Field<System.Decimal?>("DRYERTEMP1_SP");
                        result.SPEED_PV = row.Field<System.Decimal?>("SPEED_PV");
                        result.SPEED_SP = row.Field<System.Decimal?>("SPEED_SP");
                        result.HOTFLUE_MIN = row.Field<System.Decimal?>("HOTFLUE_MIN");
                        result.HOTFLUE_MAX = row.Field<System.Decimal?>("HOTFLUE_MAX");
                        result.SPEED_MIN = row.Field<System.Decimal?>("SPEED_MIN");
                        result.SPEED_MAX = row.Field<System.Decimal?>("SPEED_MAX");
                        result.STEAMPRESSURE = row.Field<System.Decimal?>("STEAMPRESSURE");
                        result.DRYERCIRCUFAN = row.Field<System.Decimal?>("DRYERCIRCUFAN");
                        result.EXHAUSTFAN = row.Field<System.Decimal?>("EXHAUSTFAN");
                        result.WIDTH_AF_HEAT = row.Field<System.Decimal?>("WIDTH_AF_HEAT");
                        result.CONDITIONBY = row.Field<System.String>("CONDITIONBY");
                        result.CONDITIONDATE = row.Field<System.DateTime?>("CONDITIONDATE");
                        result.FINISHBY = row.Field<System.String>("FINISHBY");
                        result.SAMPLINGID = row.Field<System.String>("SAMPLINGID");
                        result.STARTBY = row.Field<System.String>("STARTBY");
                        result.LENGTH6 = row.Field<System.Decimal?>("LENGTH6");
                        result.LENGTH7 = row.Field<System.Decimal?>("LENGTH7");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.OPERATOR_GROUP = row.Field<System.String>("OPERATOR_GROUP");
                        result.HUMIDITY_BF = row.Field<System.Decimal?>("HUMIDITY_BF");
                        result.HUMIDITY_AF = row.Field<System.Decimal?>("HUMIDITY_AF");
                        result.PARTNO = row.Field<System.String>("PARTNO");
                        result.FINISHLENGTH = row.Field<System.Decimal?>("FINISHLENGTH");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");
                        result.INPUTLENGTH = row.Field<System.Decimal?>("INPUTLENGTH");
                        result.SATURATOR_CHEM_PV = row.Field<System.Decimal?>("SATURATOR_CHEM_PV");
                        result.SATURATOR_CHEM_SP = row.Field<System.Decimal?>("SATURATOR_CHEM_SP");
                        result.WASHING1_PV = row.Field<System.Decimal?>("WASHING1_PV");
                        result.WASHING1_SP = row.Field<System.Decimal?>("WASHING1_SP");
                        result.WASHING2_PV = row.Field<System.Decimal?>("WASHING2_PV");
                        result.WASHING2_SP = row.Field<System.Decimal?>("WASHING2_SP");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region FINISHING_GETDRYERDATA

        public List<FINISHING_GETDRYERDATAResult> FINISHING_GETDRYERDATA(FINISHING_GETDRYERDATAParameter para)
        {
            List<FINISHING_GETDRYERDATAResult> results = new List<FINISHING_GETDRYERDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_MCNO", 
                "P_FLAG"
            };
            object[] paraValues = new object[]
            {
                para.P_MCNO, 
                para.P_FLAG
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_GETDRYERDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        FINISHING_GETDRYERDATAResult result =
                            new FINISHING_GETDRYERDATAResult();

                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.FINISHINGCUSTOMER = row.Field<System.String>("FINISHINGCUSTOMER");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.LENGTH1 = row.Field<System.Decimal?>("LENGTH1");
                        result.LENGTH2 = row.Field<System.Decimal?>("LENGTH2");
                        result.LENGTH3 = row.Field<System.Decimal?>("LENGTH3");
                        result.LENGTH4 = row.Field<System.Decimal?>("LENGTH4");
                        result.LENGTH5 = row.Field<System.Decimal?>("LENGTH5");
                        result.MCNO = row.Field<System.String>("MCNO");
                        result.STATUSFLAG = row.Field<System.String>("STATUSFLAG");
                        result.WIDTH_BE_HEAT = row.Field<System.Decimal?>("WIDTH_BE_HEAT");
                        result.ACCPRESURE = row.Field<System.Decimal?>("ACCPRESURE");
                        result.ASSTENSION = row.Field<System.Decimal?>("ASSTENSION");
                        result.ACCARIDENSER = row.Field<System.Decimal?>("ACCARIDENSER");
                        result.CHIFROT = row.Field<System.Decimal?>("CHIFROT");
                        result.CHIREAR = row.Field<System.Decimal?>("CHIREAR");
                        result.DRYERTEMP1_PV = row.Field<System.Decimal?>("DRYERTEMP1_PV");
                        result.DRYERTEMP1_SP = row.Field<System.Decimal?>("DRYERTEMP1_SP");
                        result.SPEED_PV = row.Field<System.Decimal?>("SPEED_PV");
                        result.SPEED_SP = row.Field<System.Decimal?>("SPEED_SP");
                        result.STEAMPRESSURE = row.Field<System.Decimal?>("STEAMPRESSURE");
                        result.DRYERCIRCUFAN = row.Field<System.Decimal?>("DRYERCIRCUFAN");
                        result.EXHAUSTFAN = row.Field<System.Decimal?>("EXHAUSTFAN");
                        result.WIDTH_AF_HEAT = row.Field<System.Decimal?>("WIDTH_AF_HEAT");
                        result.CONDITIONBY = row.Field<System.String>("CONDITIONBY");
                        result.CONDITIONDATE = row.Field<System.DateTime?>("CONDITIONDATE");
                        result.FINISHBY = row.Field<System.String>("FINISHBY");
                        result.SAMPLINGID = row.Field<System.String>("SAMPLINGID");
                        result.STARTBY = row.Field<System.String>("STARTBY");
                        result.LENGTH6 = row.Field<System.Decimal?>("LENGTH6");
                        result.LENGTH7 = row.Field<System.Decimal?>("LENGTH7");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.HUMIDITY_BF = row.Field<System.Decimal?>("HUMIDITY_BF");
                        result.HUMIDITY_AF = row.Field<System.Decimal?>("HUMIDITY_AF");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");
                        result.WEAVINGLENGTH = row.Field<System.Decimal?>("WEAVINGLENGTH");
                        result.OPERATOR_GROUP = row.Field<System.String>("OPERATOR_GROUP");
                        result.SATURATOR_CHEM_PV = row.Field<System.Decimal?>("SATURATOR_CHEM_PV");
                        result.SATURATOR_CHEM_SP = row.Field<System.Decimal?>("SATURATOR_CHEM_SP");
                        result.WASHING1_PV = row.Field<System.Decimal?>("WASHING1_PV");
                        result.WASHING1_SP = row.Field<System.Decimal?>("WASHING1_SP");
                        result.WASHING2_PV = row.Field<System.Decimal?>("WASHING2_PV");
                        result.WASHING2_SP = row.Field<System.Decimal?>("WASHING2_SP");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region FINISHING_GETDRYERCONDITION

        public List<FINISHING_GETDRYERCONDITIONResult> FINISHING_GETDRYERCONDITION(FINISHING_GETDRYERCONDITIONParameter para)
        {
            List<FINISHING_GETDRYERCONDITIONResult> results = new List<FINISHING_GETDRYERCONDITIONResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITEMCODE", 
                "P_MCNO"
            };
            object[] paraValues = new object[]
            {
                para.P_ITEMCODE, 
                para.P_MCNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_GETDRYERCONDITION",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        FINISHING_GETDRYERCONDITIONResult result =
                            new FINISHING_GETDRYERCONDITIONResult();

                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.WIDTH_BE_HEAT_MAX = row.Field<System.Decimal?>("WIDTH_BE_HEAT_MAX");
                        result.WIDTH_BE_HEAT_MIN = row.Field<System.Decimal?>("WIDTH_BE_HEAT_MIN");
                        result.ACCPRESURE = row.Field<System.Decimal?>("ACCPRESURE");
                        result.ASSTENSION = row.Field<System.Decimal?>("ASSTENSION");
                        result.ACCARIDENSER = row.Field<System.Decimal?>("ACCARIDENSER");
                        result.CHIFROT = row.Field<System.Decimal?>("CHIFROT");
                        result.CHIREAR = row.Field<System.Decimal?>("CHIREAR");
                        result.DRYERTEMP1 = row.Field<System.Decimal?>("DRYERTEMP1");
                        result.DRYERTEMP1_MARGIN = row.Field<System.Decimal?>("DRYERTEMP1_MARGIN");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.SPEED_MARGIN = row.Field<System.Decimal?>("SPEED_MARGIN");
                        result.STEAMPRESSURE = row.Field<System.Decimal?>("STEAMPRESSURE");
                        result.DRYERUPCIRCUFAN = row.Field<System.Decimal?>("DRYERUPCIRCUFAN");
                        result.DRYERDOWNCIRCUFAN = row.Field<System.Decimal?>("DRYERDOWNCIRCUFAN");
                        result.EXHAUSTFAN = row.Field<System.Decimal?>("EXHAUSTFAN");
                        result.WIDTH_AF_HEAT = row.Field<System.Decimal?>("WIDTH_AF_HEAT");
                        result.WIDTH_AF_HEAT_MARGIN = row.Field<System.Decimal?>("WIDTH_AF_HEAT_MARGIN");
                        result.HUMIDITY_MAX = row.Field<System.Decimal?>("HUMIDITY_MAX");
                        result.HUMIDITY_MIN = row.Field<System.Decimal?>("HUMIDITY_MIN");
                        result.MCNO = row.Field<System.String>("MCNO");
                        result.SATURATOR_CHEM = row.Field<System.Decimal?>("SATURATOR_CHEM");
                        result.SATURATOR_CHEM_MARGIN = row.Field<System.Decimal?>("SATURATOR_CHEM_MARGIN");
                        result.WASHING1 = row.Field<System.Decimal?>("WASHING1");
                        result.WASHING1_MARGIN = row.Field<System.Decimal?>("WASHING1_MARGIN");
                        result.WASHING2 = row.Field<System.Decimal?>("WASHING2");
                        result.WASHING2_MARGIN = row.Field<System.Decimal?>("WASHING2_MARGIN");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region FINISHING_GETCUTOMERLIST

        public List<FINISHING_GETCUTOMERLISTResult> FINISHING_GETCUTOMERLIST(FINISHING_GETCUTOMERLISTParameter para)
        {
            List<FINISHING_GETCUTOMERLISTResult> results = new List<FINISHING_GETCUTOMERLISTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
            };
            object[] paraValues = new object[]
            {
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_GETCUTOMERLIST",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        FINISHING_GETCUTOMERLISTResult result =
                            new FINISHING_GETCUTOMERLISTResult();

                        result.FINISHINGCUSTOMER = row.Field<System.String>("FINISHINGCUSTOMER");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region FINISHING_GETCOATINGREPORT

        public List<FINISHING_GETCOATINGREPORTResult> FINISHING_GETCOATINGREPORT(FINISHING_GETCOATINGREPORTParameter para)
        {
            List<FINISHING_GETCOATINGREPORTResult> results = new List<FINISHING_GETCOATINGREPORTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WEAVINGLOT", 
                "P_FINLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_WEAVINGLOT, 
                para.P_FINLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_GETCOATINGREPORT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        FINISHING_GETCOATINGREPORTResult result =
                            new FINISHING_GETCOATINGREPORTResult();

                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.FINISHINGCUSTOMER = row.Field<System.String>("FINISHINGCUSTOMER");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.LENGTH1 = row.Field<System.Decimal?>("LENGTH1");
                        result.LENGTH2 = row.Field<System.Decimal?>("LENGTH2");
                        result.LENGTH3 = row.Field<System.Decimal?>("LENGTH3");
                        result.LENGTH4 = row.Field<System.Decimal?>("LENGTH4");
                        result.LENGTH5 = row.Field<System.Decimal?>("LENGTH5");
                        result.MCNO = row.Field<System.String>("MCNO");
                        result.STATUSFLAG = row.Field<System.String>("STATUSFLAG");
                        result.SATURATOR_CHEM_PV = row.Field<System.Decimal?>("SATURATOR_CHEM_PV");
                        result.SATURATOR_CHEM_SP = row.Field<System.Decimal?>("SATURATOR_CHEM_SP");
                        result.WASHING1_PV = row.Field<System.Decimal?>("WASHING1_PV");
                        result.WASHING1_SP = row.Field<System.Decimal?>("WASHING1_SP");
                        result.WASHING2_PV = row.Field<System.Decimal?>("WASHING2_PV");
                        result.WASHING2_SP = row.Field<System.Decimal?>("WASHING2_SP");
                        result.HOTFLUE_PV = row.Field<System.Decimal?>("HOTFLUE_PV");
                        result.HOTFLUE_SP = row.Field<System.Decimal?>("HOTFLUE_SP");
                        result.BE_COATWIDTH = row.Field<System.Decimal?>("BE_COATWIDTH");
                        result.TEMP1_PV = row.Field<System.Decimal?>("TEMP1_PV");
                        result.TEMP1_SP = row.Field<System.Decimal?>("TEMP1_SP");
                        result.TEMP2_PV = row.Field<System.Decimal?>("TEMP2_PV");
                        result.TEMP2_SP = row.Field<System.Decimal?>("TEMP2_SP");
                        result.TEMP3_PV = row.Field<System.Decimal?>("TEMP3_PV");
                        result.TEMP3_SP = row.Field<System.Decimal?>("TEMP3_SP");
                        result.TEMP4_PV = row.Field<System.Decimal?>("TEMP4_PV");
                        result.TEMP4_SP = row.Field<System.Decimal?>("TEMP4_SP");
                        result.TEMP5_PV = row.Field<System.Decimal?>("TEMP5_PV");
                        result.TEMP5_SP = row.Field<System.Decimal?>("TEMP5_SP");
                        result.TEMP6_PV = row.Field<System.Decimal?>("TEMP6_PV");
                        result.TEMP6_SP = row.Field<System.Decimal?>("TEMP6_SP");
                        result.TEMP7_PV = row.Field<System.Decimal?>("TEMP7_PV");
                        result.TEMP7_SP = row.Field<System.Decimal?>("TEMP7_SP");
                        result.TEMP8_PV = row.Field<System.Decimal?>("TEMP8_PV");
                        result.TEMP8_SP = row.Field<System.Decimal?>("TEMP8_SP");
                        result.TEMP9_PV = row.Field<System.Decimal?>("TEMP9_PV");
                        result.TEMP9_SP = row.Field<System.Decimal?>("TEMP9_SP");
                        result.TEMP10_PV = row.Field<System.Decimal?>("TEMP10_PV");
                        result.TEMP10_SP = row.Field<System.Decimal?>("TEMP10_SP");
                        result.FANRPM = row.Field<System.Decimal?>("FANRPM");
                        result.EXFAN_FRONT_BACK = row.Field<System.Decimal?>("EXFAN_FRONT_BACK");
                        result.EXFAN_MIDDLE = row.Field<System.Decimal?>("EXFAN_MIDDLE");
                        result.ANGLEKNIFE = row.Field<System.Decimal?>("ANGLEKNIFE");
                        result.BLADENO = row.Field<System.String>("BLADENO");
                        result.BLADEDIRECTION = row.Field<System.String>("BLADEDIRECTION");
                        result.CYLINDER_TENSIONUP = row.Field<System.Decimal?>("CYLINDER_TENSIONUP");
                        result.OPOLE_TENSIONDOWN = row.Field<System.Decimal?>("OPOLE_TENSIONDOWN");
                        result.FRAMEWIDTH_FORN = row.Field<System.Decimal?>("FRAMEWIDTH_FORN");
                        result.FRAMEWIDTH_TENTER = row.Field<System.Decimal?>("FRAMEWIDTH_TENTER");
                        result.PATHLINE = row.Field<System.Decimal?>("PATHLINE");
                        result.FEEDIN = row.Field<System.Decimal?>("FEEDIN");
                        result.OVERFEED = row.Field<System.Decimal?>("OVERFEED");
                        result.SPEED_PV = row.Field<System.Decimal?>("SPEED_PV");
                        result.SPEED_SP = row.Field<System.Decimal?>("SPEED_SP");
                        result.WIDTHCOAT = row.Field<System.Decimal?>("WIDTHCOAT");
                        result.WIDTHCOATALL = row.Field<System.Decimal?>("WIDTHCOATALL");
                        result.SILICONE_A = row.Field<System.String>("SILICONE_A");
                        result.SILICONE_B = row.Field<System.String>("SILICONE_B");
                        result.COATINGWEIGTH_L = row.Field<System.Decimal?>("COATINGWEIGTH_L");
                        result.COATINGWEIGTH_C = row.Field<System.Decimal?>("COATINGWEIGTH_C");
                        result.COATINGWEIGTH_R = row.Field<System.Decimal?>("COATINGWEIGTH_R");
                        result.CONDITIONBY = row.Field<System.String>("CONDITIONBY");
                        result.CONDITIONDATE = row.Field<System.DateTime?>("CONDITIONDATE");
                        result.FINISHBY = row.Field<System.String>("FINISHBY");
                        result.SAMPLINGID = row.Field<System.String>("SAMPLINGID");
                        result.STARTBY = row.Field<System.String>("STARTBY");
                        result.LENGTH6 = row.Field<System.Decimal?>("LENGTH6");
                        result.LENGTH7 = row.Field<System.Decimal?>("LENGTH7");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.HUMIDITY_BF = row.Field<System.Decimal?>("HUMIDITY_BF");
                        result.HUMIDITY_AF = row.Field<System.Decimal?>("HUMIDITY_AF");
                        result.REPROCESS = row.Field<System.String>("REPROCESS");
                        result.INPUTLENGTH = row.Field<System.Decimal?>("INPUTLENGTH");
                        result.OPERATOR_GROUP = row.Field<System.String>("OPERATOR_GROUP");
                        result.TEMP1_MIN = row.Field<System.Decimal?>("TEMP1_MIN");
                        result.TEMP1_MAX = row.Field<System.Decimal?>("TEMP1_MAX");
                        result.TEMP2_MIN = row.Field<System.Decimal?>("TEMP2_MIN");
                        result.TEMP2_MAX = row.Field<System.Decimal?>("TEMP2_MAX");
                        result.TEMP3_MIN = row.Field<System.Decimal?>("TEMP3_MIN");
                        result.TEMP3_MAX = row.Field<System.Decimal?>("TEMP3_MAX");
                        result.TEMP4_MIN = row.Field<System.Decimal?>("TEMP4_MIN");
                        result.TEMP4_MAX = row.Field<System.Decimal?>("TEMP4_MAX");
                        result.TEMP5_MIN = row.Field<System.Decimal?>("TEMP5_MIN");
                        result.TEMP5_MAX = row.Field<System.Decimal?>("TEMP5_MAX");
                        result.TEMP6_MIN = row.Field<System.Decimal?>("TEMP6_MIN");
                        result.TEMP6_MAX = row.Field<System.Decimal?>("TEMP6_MAX");
                        result.TEMP7_MIN = row.Field<System.Decimal?>("TEMP7_MIN");
                        result.TEMP7_MAX = row.Field<System.Decimal?>("TEMP7_MAX");
                        result.TEMP8_MIN = row.Field<System.Decimal?>("TEMP8_MIN");
                        result.TEMP8_MAX = row.Field<System.Decimal?>("TEMP8_MAX");
                        result.TEMP9_MIN = row.Field<System.Decimal?>("TEMP9_MIN");
                        result.TEMP9_MAX = row.Field<System.Decimal?>("TEMP9_MAX");
                        result.TEMP10_MIN = row.Field<System.Decimal?>("TEMP10_MIN");
                        result.TEMP10_MAX = row.Field<System.Decimal?>("TEMP10_MAX");
                        result.SAT_CHEM_MIN = row.Field<System.Decimal?>("SAT_CHEM_MIN");
                        result.SAT_CHEM_MAX = row.Field<System.Decimal?>("SAT_CHEM_MAX");
                        result.WASHING1_MIN = row.Field<System.Decimal?>("WASHING1_MIN");
                        result.WASHING1_MAX = row.Field<System.Decimal?>("WASHING1_MAX");
                        result.WASHING2_MIN = row.Field<System.Decimal?>("WASHING2_MIN");
                        result.WASHING2_MAX = row.Field<System.Decimal?>("WASHING2_MAX");
                        result.HOTFLUE_MIN = row.Field<System.Decimal?>("HOTFLUE_MIN");
                        result.HOTFLUE_MAX = row.Field<System.Decimal?>("HOTFLUE_MAX");
                        result.SPEED_MIN = row.Field<System.Decimal?>("SPEED_MIN");
                        result.SPEED_MAX = row.Field<System.Decimal?>("SPEED_MAX");
                        result.TENSIONUP_MIN = row.Field<System.Decimal?>("TENSIONUP_MIN");
                        result.TENSIONUP_MAX = row.Field<System.Decimal?>("TENSIONUP_MAX");
                        result.TENSIONDOWN_MIN = row.Field<System.Decimal?>("TENSIONDOWN_MIN");
                        result.TENSIONDOWN_MAX = row.Field<System.Decimal?>("TENSIONDOWN_MAX");
                        result.PARTNO = row.Field<System.String>("PARTNO");
                        result.FINISHLENGTH = row.Field<System.Decimal?>("FINISHLENGTH");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region FINISHING_GETCOATINGDATA

        public List<FINISHING_GETCOATINGDATAResult> FINISHING_GETCOATINGDATA(FINISHING_GETCOATINGDATAParameter para)
        {
            List<FINISHING_GETCOATINGDATAResult> results = new List<FINISHING_GETCOATINGDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_MCNO", 
                "P_FLAG"
            };
            object[] paraValues = new object[]
            {
                para.P_MCNO, 
                para.P_FLAG
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_GETCOATINGDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        FINISHING_GETCOATINGDATAResult result =
                            new FINISHING_GETCOATINGDATAResult();

                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.FINISHINGCUSTOMER = row.Field<System.String>("FINISHINGCUSTOMER");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.LENGTH1 = row.Field<System.Decimal?>("LENGTH1");
                        result.LENGTH2 = row.Field<System.Decimal?>("LENGTH2");
                        result.LENGTH3 = row.Field<System.Decimal?>("LENGTH3");
                        result.LENGTH4 = row.Field<System.Decimal?>("LENGTH4");
                        result.LENGTH5 = row.Field<System.Decimal?>("LENGTH5");
                        result.MCNO = row.Field<System.String>("MCNO");
                        result.STATUSFLAG = row.Field<System.String>("STATUSFLAG");
                        result.SATURATOR_CHEM_PV = row.Field<System.Decimal?>("SATURATOR_CHEM_PV");
                        result.SATURATOR_CHEM_SP = row.Field<System.Decimal?>("SATURATOR_CHEM_SP");
                        result.WASHING1_PV = row.Field<System.Decimal?>("WASHING1_PV");
                        result.WASHING1_SP = row.Field<System.Decimal?>("WASHING1_SP");
                        result.WASHING2_PV = row.Field<System.Decimal?>("WASHING2_PV");
                        result.WASHING2_SP = row.Field<System.Decimal?>("WASHING2_SP");
                        result.HOTFLUE_PV = row.Field<System.Decimal?>("HOTFLUE_PV");
                        result.HOTFLUE_SP = row.Field<System.Decimal?>("HOTFLUE_SP");
                        result.BE_COATWIDTH = row.Field<System.Decimal?>("BE_COATWIDTH");
                        result.TEMP1_PV = row.Field<System.Decimal?>("TEMP1_PV");
                        result.TEMP1_SP = row.Field<System.Decimal?>("TEMP1_SP");
                        result.TEMP2_PV = row.Field<System.Decimal?>("TEMP2_PV");
                        result.TEMP2_SP = row.Field<System.Decimal?>("TEMP2_SP");
                        result.TEMP3_PV = row.Field<System.Decimal?>("TEMP3_PV");
                        result.TEMP3_SP = row.Field<System.Decimal?>("TEMP3_SP");
                        result.TEMP4_PV = row.Field<System.Decimal?>("TEMP4_PV");
                        result.TEMP4_SP = row.Field<System.Decimal?>("TEMP4_SP");
                        result.TEMP5_PV = row.Field<System.Decimal?>("TEMP5_PV");
                        result.TEMP5_SP = row.Field<System.Decimal?>("TEMP5_SP");
                        result.TEMP6_PV = row.Field<System.Decimal?>("TEMP6_PV");
                        result.TEMP6_SP = row.Field<System.Decimal?>("TEMP6_SP");
                        result.TEMP7_PV = row.Field<System.Decimal?>("TEMP7_PV");
                        result.TEMP7_SP = row.Field<System.Decimal?>("TEMP7_SP");
                        result.TEMP8_PV = row.Field<System.Decimal?>("TEMP8_PV");
                        result.TEMP8_SP = row.Field<System.Decimal?>("TEMP8_SP");
                        result.TEMP9_PV = row.Field<System.Decimal?>("TEMP9_PV");
                        result.TEMP9_SP = row.Field<System.Decimal?>("TEMP9_SP");
                        result.TEMP10_PV = row.Field<System.Decimal?>("TEMP10_PV");
                        result.TEMP10_SP = row.Field<System.Decimal?>("TEMP10_SP");
                        result.FANRPM = row.Field<System.Decimal?>("FANRPM");
                        result.EXFAN_FRONT_BACK = row.Field<System.Decimal?>("EXFAN_FRONT_BACK");
                        result.EXFAN_MIDDLE = row.Field<System.Decimal?>("EXFAN_MIDDLE");
                        result.ANGLEKNIFE = row.Field<System.Decimal?>("ANGLEKNIFE");
                        result.BLADENO = row.Field<System.String>("BLADENO");
                        result.BLADEDIRECTION = row.Field<System.String>("BLADEDIRECTION");
                        result.CYLINDER_TENSIONUP = row.Field<System.Decimal?>("CYLINDER_TENSIONUP");
                        result.OPOLE_TENSIONDOWN = row.Field<System.Decimal?>("OPOLE_TENSIONDOWN");
                        result.FRAMEWIDTH_FORN = row.Field<System.Decimal?>("FRAMEWIDTH_FORN");
                        result.FRAMEWIDTH_TENTER = row.Field<System.Decimal?>("FRAMEWIDTH_TENTER");
                        result.PATHLINE = row.Field<System.Decimal?>("PATHLINE");
                        result.FEEDIN = row.Field<System.Decimal?>("FEEDIN");
                        result.OVERFEED = row.Field<System.Decimal?>("OVERFEED");
                        result.SPEED_PV = row.Field<System.Decimal?>("SPEED_PV");
                        result.SPEED_SP = row.Field<System.Decimal?>("SPEED_SP");
                        result.WIDTHCOAT = row.Field<System.Decimal?>("WIDTHCOAT");
                        result.WIDTHCOATALL = row.Field<System.Decimal?>("WIDTHCOATALL");
                        result.SILICONE_A = row.Field<System.String>("SILICONE_A");
                        result.SILICONE_B = row.Field<System.String>("SILICONE_B");
                        result.COATINGWEIGTH_L = row.Field<System.Decimal?>("COATINGWEIGTH_L");
                        result.COATINGWEIGTH_C = row.Field<System.Decimal?>("COATINGWEIGTH_C");
                        result.COATINGWEIGTH_R = row.Field<System.Decimal?>("COATINGWEIGTH_R");
                        result.CONDITIONBY = row.Field<System.String>("CONDITIONBY");
                        result.CONDITIONDATE = row.Field<System.DateTime?>("CONDITIONDATE");
                        result.FINISHBY = row.Field<System.String>("FINISHBY");
                        result.SAMPLINGID = row.Field<System.String>("SAMPLINGID");
                        result.STARTBY = row.Field<System.String>("STARTBY");
                        result.LENGTH6 = row.Field<System.Decimal?>("LENGTH6");
                        result.LENGTH7 = row.Field<System.Decimal?>("LENGTH7");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.HUMIDITY_BF = row.Field<System.Decimal?>("HUMIDITY_BF");
                        result.HUMIDITY_AF = row.Field<System.Decimal?>("HUMIDITY_AF");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");
                        result.WEAVINGLENGTH = row.Field<System.Decimal?>("WEAVINGLENGTH");
                        result.OPERATOR_GROUP = row.Field<System.String>("OPERATOR_GROUP");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region FINISHING_GETCOATINGCONDITION

        public List<FINISHING_GETCOATINGCONDITIONResult> FINISHING_GETCOATINGCONDITION(FINISHING_GETCOATINGCONDITIONParameter para)
        {
            List<FINISHING_GETCOATINGCONDITIONResult> results = new List<FINISHING_GETCOATINGCONDITIONResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITEMCODE", 
                "P_COATNO"
            };
            object[] paraValues = new object[]
            {
                para.P_ITEMCODE, 
                para.P_COATNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_GETCOATINGCONDITION",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        FINISHING_GETCOATINGCONDITIONResult result =
                            new FINISHING_GETCOATINGCONDITIONResult();

                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.SATURATOR_CHEM = row.Field<System.Decimal?>("SATURATOR_CHEM");
                        result.SATURATOR_CHEM_MARGIN = row.Field<System.Decimal?>("SATURATOR_CHEM_MARGIN");
                        result.WASHING1 = row.Field<System.Decimal?>("WASHING1");
                        result.WASHING1_MARGIN = row.Field<System.Decimal?>("WASHING1_MARGIN");
                        result.WASHING2 = row.Field<System.Decimal?>("WASHING2");
                        result.WASHING2_MARGIN = row.Field<System.Decimal?>("WASHING2_MARGIN");
                        result.HOTFLUE = row.Field<System.Decimal?>("HOTFLUE");
                        result.HOTFLUE_MARGIN = row.Field<System.Decimal?>("HOTFLUE_MARGIN");
                        result.BE_COATWIDTHMAX = row.Field<System.Decimal?>("BE_COATWIDTHMAX");
                        result.BE_COATWIDTHMIN = row.Field<System.Decimal?>("BE_COATWIDTHMIN");
                        result.ROOMTEMP = row.Field<System.Decimal?>("ROOMTEMP");
                        result.ROOMTEMP_MARGIN = row.Field<System.Decimal?>("ROOMTEMP_MARGIN");
                        result.FANRPM = row.Field<System.Decimal?>("FANRPM");
                        result.FANRPM_MARGIN = row.Field<System.Decimal?>("FANRPM_MARGIN");
                        result.EXFAN_FRONT_BACK = row.Field<System.Decimal?>("EXFAN_FRONT_BACK");
                        result.EXFAN_MARGIN = row.Field<System.Decimal?>("EXFAN_MARGIN");
                        result.ANGLEKNIFE = row.Field<System.Decimal?>("ANGLEKNIFE");
                        result.BLADENO = row.Field<System.String>("BLADENO");
                        result.BLADEDIRECTION = row.Field<System.String>("BLADEDIRECTION");
                        result.PATHLINE = row.Field<System.String>("PATHLINE");
                        result.FEEDIN_MAX = row.Field<System.Decimal?>("FEEDIN_MAX");
                        result.TENSION_UP = row.Field<System.Decimal?>("TENSION_UP");
                        result.TENSION_DOWN = row.Field<System.Decimal?>("TENSION_DOWN");
                        result.TENSION_DOWN_MARGIN = row.Field<System.Decimal?>("TENSION_DOWN_MARGIN");
                        result.FRAMEWIDTH_FORN = row.Field<System.Decimal?>("FRAMEWIDTH_FORN");
                        result.FRAMEWIDTH_TENTER = row.Field<System.Decimal?>("FRAMEWIDTH_TENTER");
                        result.OVERFEED = row.Field<System.String>("OVERFEED");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.SPEED_MARGIN = row.Field<System.Decimal?>("SPEED_MARGIN");
                        result.WIDTHCOAT = row.Field<System.Decimal?>("WIDTHCOAT");
                        result.WIDTHCOATALL_MAX = row.Field<System.Decimal?>("WIDTHCOATALL_MAX");
                        result.WIDTHCOATALL_MIN = row.Field<System.Decimal?>("WIDTHCOATALL_MIN");
                        result.COATINGWEIGTH_MAX = row.Field<System.Decimal?>("COATINGWEIGTH_MAX");
                        result.COATINGWEIGTH_MIN = row.Field<System.Decimal?>("COATINGWEIGTH_MIN");
                        result.EXFAN_MIDDLE = row.Field<System.Decimal?>("EXFAN_MIDDLE");
                        result.RATIOSILICONE = row.Field<System.String>("RATIOSILICONE");
                        result.COATNO = row.Field<System.String>("COATNO");
                        result.FEEDIN_MIN = row.Field<System.Decimal?>("FEEDIN_MIN");
                        result.TENSION_UP_MARGIN = row.Field<System.Decimal?>("TENSION_UP_MARGIN");
                        result.HUMIDITY_MAX = row.Field<System.Decimal?>("HUMIDITY_MAX");
                        result.HUMIDITY_MIN = row.Field<System.Decimal?>("HUMIDITY_MIN");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region FINISHING_EDITLENGTH

        public FINISHING_EDITLENGTHResult FINISHING_EDITLENGTH(FINISHING_EDITLENGTHParameter para)
        {
            FINISHING_EDITLENGTHResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_WEAVLOT", 
                "P_FINISHLOT", 
                "P_PROCESS", 
                "P_LENGTH1", 
                "P_LENGTH2", 
                "P_LENGTH3", 
                "P_LENGTH4", 
                "P_LENGTH5", 
                "P_LENGTH6", 
                "P_LENGTH7", 
                "P_TOTALLENGTH", 
                "P_OPERATOR"
            };
            object[] paraValues = new object[]
            {
                para.P_WEAVLOT, 
                para.P_FINISHLOT, 
                para.P_PROCESS, 
                para.P_LENGTH1, 
                para.P_LENGTH2, 
                para.P_LENGTH3, 
                para.P_LENGTH4, 
                para.P_LENGTH5, 
                para.P_LENGTH6, 
                para.P_LENGTH7, 
                para.P_TOTALLENGTH, 
                para.P_OPERATOR
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_EDITLENGTH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new FINISHING_EDITLENGTHResult();
            }

            return result;
        }

        #endregion

        #region FINISHING_DRYERPLCDATA

        public List<FINISHING_DRYERPLCDATAResult> FINISHING_DRYERPLCDATA(FINISHING_DRYERPLCDATAParameter para)
        {
            List<FINISHING_DRYERPLCDATAResult> results = new List<FINISHING_DRYERPLCDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_MCNO", 
                "P_WEAVINGLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_MCNO, 
                para.P_WEAVINGLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_DRYERPLCDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        FINISHING_DRYERPLCDATAResult result =
                            new FINISHING_DRYERPLCDATAResult();

                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.HOTF_MIN = row.Field<System.Decimal?>("HOTF_MIN");
                        result.HOTF_MAX = row.Field<System.Decimal?>("HOTF_MAX");
                        result.HOTF = row.Field<System.Decimal?>("HOTF");
                        result.SPEED_MIN = row.Field<System.Decimal?>("SPEED_MIN");
                        result.SPEED_MAX = row.Field<System.Decimal?>("SPEED_MAX");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region FINISHING_DRYERDATABYLOT

        public List<FINISHING_DRYERDATABYLOTResult> FINISHING_DRYERDATABYLOT(FINISHING_DRYERDATABYLOTParameter para)
        {
            List<FINISHING_DRYERDATABYLOTResult> results = new List<FINISHING_DRYERDATABYLOTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_MCNO", 
                "P_WEAVINGLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_MCNO, 
                para.P_WEAVINGLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_DRYERDATABYLOT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        FINISHING_DRYERDATABYLOTResult result =
                            new FINISHING_DRYERDATABYLOTResult();

                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.FINISHINGCUSTOMER = row.Field<System.String>("FINISHINGCUSTOMER");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.LENGTH1 = row.Field<System.Decimal?>("LENGTH1");
                        result.LENGTH2 = row.Field<System.Decimal?>("LENGTH2");
                        result.LENGTH3 = row.Field<System.Decimal?>("LENGTH3");
                        result.LENGTH4 = row.Field<System.Decimal?>("LENGTH4");
                        result.LENGTH5 = row.Field<System.Decimal?>("LENGTH5");
                        result.MCNO = row.Field<System.String>("MCNO");
                        result.STATUSFLAG = row.Field<System.String>("STATUSFLAG");
                        result.WIDTH_BE_HEAT = row.Field<System.Decimal?>("WIDTH_BE_HEAT");
                        result.ACCPRESURE = row.Field<System.Decimal?>("ACCPRESURE");
                        result.ASSTENSION = row.Field<System.Decimal?>("ASSTENSION");
                        result.ACCARIDENSER = row.Field<System.Decimal?>("ACCARIDENSER");
                        result.CHIFROT = row.Field<System.Decimal?>("CHIFROT");
                        result.CHIREAR = row.Field<System.Decimal?>("CHIREAR");
                        result.DRYERTEMP1_PV = row.Field<System.Decimal?>("DRYERTEMP1_PV");
                        result.DRYERTEMP1_SP = row.Field<System.Decimal?>("DRYERTEMP1_SP");
                        result.SPEED_PV = row.Field<System.Decimal?>("SPEED_PV");
                        result.SPEED_SP = row.Field<System.Decimal?>("SPEED_SP");
                        result.STEAMPRESSURE = row.Field<System.Decimal?>("STEAMPRESSURE");
                        result.DRYERCIRCUFAN = row.Field<System.Decimal?>("DRYERCIRCUFAN");
                        result.EXHAUSTFAN = row.Field<System.Decimal?>("EXHAUSTFAN");
                        result.WIDTH_AF_HEAT = row.Field<System.Decimal?>("WIDTH_AF_HEAT");
                        result.CONDITIONBY = row.Field<System.String>("CONDITIONBY");
                        result.CONDITIONDATE = row.Field<System.DateTime?>("CONDITIONDATE");
                        result.FINISHBY = row.Field<System.String>("FINISHBY");
                        result.SAMPLINGID = row.Field<System.String>("SAMPLINGID");
                        result.STARTBY = row.Field<System.String>("STARTBY");
                        result.LENGTH6 = row.Field<System.Decimal?>("LENGTH6");
                        result.LENGTH7 = row.Field<System.Decimal?>("LENGTH7");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.HUMIDITY_BF = row.Field<System.Decimal?>("HUMIDITY_BF");
                        result.HUMIDITY_AF = row.Field<System.Decimal?>("HUMIDITY_AF");
                        result.REPROCESS = row.Field<System.String>("REPROCESS");
                        result.WEAVLENGTH = row.Field<System.Decimal?>("WEAVLENGTH");
                        result.OPERATOR_GROUP = row.Field<System.String>("OPERATOR_GROUP");
                        result.HOTFLUE_MIN = row.Field<System.Decimal?>("HOTFLUE_MIN");
                        result.HOTFLUE_MAX = row.Field<System.Decimal?>("HOTFLUE_MAX");
                        result.SPEED_MIN = row.Field<System.Decimal?>("SPEED_MIN");
                        result.SPEED_MAX = row.Field<System.Decimal?>("SPEED_MAX");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region FINISHING_COATINGPLCDATA

        public List<FINISHING_COATINGPLCDATAResult> FINISHING_COATINGPLCDATA(FINISHING_COATINGPLCDATAParameter para)
        {
            List<FINISHING_COATINGPLCDATAResult> results = new List<FINISHING_COATINGPLCDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_MCNO", 
                "P_WEAVINGLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_MCNO, 
                para.P_WEAVINGLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_COATINGPLCDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        FINISHING_COATINGPLCDATAResult result =
                            new FINISHING_COATINGPLCDATAResult();

                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.TEMP1_MIN = row.Field<System.Decimal?>("TEMP1_MIN");
                        result.TEMP1_MAX = row.Field<System.Decimal?>("TEMP1_MAX");
                        result.TEMP1 = row.Field<System.Decimal?>("TEMP1");
                        result.TEMP2_MIN = row.Field<System.Decimal?>("TEMP2_MIN");
                        result.TEMP2_MAX = row.Field<System.Decimal?>("TEMP2_MAX");
                        result.TEMP2 = row.Field<System.Decimal?>("TEMP2");
                        result.TEMP3_MIN = row.Field<System.Decimal?>("TEMP3_MIN");
                        result.TEMP3_MAX = row.Field<System.Decimal?>("TEMP3_MAX");
                        result.TEMP3 = row.Field<System.Decimal?>("TEMP3");
                        result.TEMP4_MIN = row.Field<System.Decimal?>("TEMP4_MIN");
                        result.TEMP4_MAX = row.Field<System.Decimal?>("TEMP4_MAX");
                        result.TEMP4 = row.Field<System.Decimal?>("TEMP4");
                        result.TEMP5_MIN = row.Field<System.Decimal?>("TEMP5_MIN");
                        result.TEMP5_MAX = row.Field<System.Decimal?>("TEMP5_MAX");
                        result.TEMP5 = row.Field<System.Decimal?>("TEMP5");
                        result.TEMP6_MIN = row.Field<System.Decimal?>("TEMP6_MIN");
                        result.TEMP6_MAX = row.Field<System.Decimal?>("TEMP6_MAX");
                        result.TEMP6 = row.Field<System.Decimal?>("TEMP6");
                        result.TEMP7_MIN = row.Field<System.Decimal?>("TEMP7_MIN");
                        result.TEMP7_MAX = row.Field<System.Decimal?>("TEMP7_MAX");
                        result.TEMP7 = row.Field<System.Decimal?>("TEMP7");
                        result.TEMP8_MIN = row.Field<System.Decimal?>("TEMP8_MIN");
                        result.TEMP8_MAX = row.Field<System.Decimal?>("TEMP8_MAX");
                        result.TEMP8 = row.Field<System.Decimal?>("TEMP8");
                        result.TEMP9_MIN = row.Field<System.Decimal?>("TEMP9_MIN");
                        result.TEMP9_MAX = row.Field<System.Decimal?>("TEMP9_MAX");
                        result.TEMP9 = row.Field<System.Decimal?>("TEMP9");
                        result.TEMP10_MIN = row.Field<System.Decimal?>("TEMP10_MIN");
                        result.TEMP10_MAX = row.Field<System.Decimal?>("TEMP10_MAX");
                        result.TEMP10 = row.Field<System.Decimal?>("TEMP10");
                        result.SPEED_MIN = row.Field<System.Decimal?>("SPEED_MIN");
                        result.SPEED_MAX = row.Field<System.Decimal?>("SPEED_MAX");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.SAT_MIN = row.Field<System.Decimal?>("SAT_MIN");
                        result.SAT_MAX = row.Field<System.Decimal?>("SAT_MAX");
                        result.SAT = row.Field<System.Decimal?>("SAT");
                        result.HOTF_MIN = row.Field<System.Decimal?>("HOTF_MIN");
                        result.HOTF_MAX = row.Field<System.Decimal?>("HOTF_MAX");
                        result.HOTF = row.Field<System.Decimal?>("HOTF");
                        result.WASH1_MIN = row.Field<System.Decimal?>("WASH1_MIN");
                        result.WASH1_MAX = row.Field<System.Decimal?>("WASH1_MAX");
                        result.WASH1 = row.Field<System.Decimal?>("WASH1");
                        result.WASH2_MIN = row.Field<System.Decimal?>("WASH2_MIN");
                        result.WASH2_MAX = row.Field<System.Decimal?>("WASH2_MAX");
                        result.WASH2 = row.Field<System.Decimal?>("WASH2");
                        result.TENUP_MIN = row.Field<System.Decimal?>("TENUP_MIN");
                        result.TENUP_MAX = row.Field<System.Decimal?>("TENUP_MAX");
                        result.TENUP = row.Field<System.Decimal?>("TENUP");
                        result.TENDOWN_MIN = row.Field<System.Decimal?>("TENDOWN_MIN");
                        result.TENDOWN_MAX = row.Field<System.Decimal?>("TENDOWN_MAX");
                        result.TENDOWN = row.Field<System.Decimal?>("TENDOWN");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region FINISHING_COATINGDATABYLOT

        public List<FINISHING_COATINGDATABYLOTResult> FINISHING_COATINGDATABYLOT(FINISHING_COATINGDATABYLOTParameter para)
        {
            List<FINISHING_COATINGDATABYLOTResult> results = new List<FINISHING_COATINGDATABYLOTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_MCNO", 
                "P_WEAVINGLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_MCNO, 
                para.P_WEAVINGLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_COATINGDATABYLOT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        FINISHING_COATINGDATABYLOTResult result =
                            new FINISHING_COATINGDATABYLOTResult();

                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.WEAVINGLOT = row.Field<System.String>("WEAVINGLOT");
                        result.FINISHINGCUSTOMER = row.Field<System.String>("FINISHINGCUSTOMER");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.LENGTH1 = row.Field<System.Decimal?>("LENGTH1");
                        result.LENGTH2 = row.Field<System.Decimal?>("LENGTH2");
                        result.LENGTH3 = row.Field<System.Decimal?>("LENGTH3");
                        result.LENGTH4 = row.Field<System.Decimal?>("LENGTH4");
                        result.LENGTH5 = row.Field<System.Decimal?>("LENGTH5");
                        result.MCNO = row.Field<System.String>("MCNO");
                        result.STATUSFLAG = row.Field<System.String>("STATUSFLAG");
                        result.SATURATOR_CHEM_PV = row.Field<System.Decimal?>("SATURATOR_CHEM_PV");
                        result.SATURATOR_CHEM_SP = row.Field<System.Decimal?>("SATURATOR_CHEM_SP");
                        result.WASHING1_PV = row.Field<System.Decimal?>("WASHING1_PV");
                        result.WASHING1_SP = row.Field<System.Decimal?>("WASHING1_SP");
                        result.WASHING2_PV = row.Field<System.Decimal?>("WASHING2_PV");
                        result.WASHING2_SP = row.Field<System.Decimal?>("WASHING2_SP");
                        result.HOTFLUE_PV = row.Field<System.Decimal?>("HOTFLUE_PV");
                        result.HOTFLUE_SP = row.Field<System.Decimal?>("HOTFLUE_SP");
                        result.BE_COATWIDTH = row.Field<System.Decimal?>("BE_COATWIDTH");
                        result.TEMP1_PV = row.Field<System.Decimal?>("TEMP1_PV");
                        result.TEMP1_SP = row.Field<System.Decimal?>("TEMP1_SP");
                        result.TEMP2_PV = row.Field<System.Decimal?>("TEMP2_PV");
                        result.TEMP2_SP = row.Field<System.Decimal?>("TEMP2_SP");
                        result.TEMP3_PV = row.Field<System.Decimal?>("TEMP3_PV");
                        result.TEMP3_SP = row.Field<System.Decimal?>("TEMP3_SP");
                        result.TEMP4_PV = row.Field<System.Decimal?>("TEMP4_PV");
                        result.TEMP4_SP = row.Field<System.Decimal?>("TEMP4_SP");
                        result.TEMP5_PV = row.Field<System.Decimal?>("TEMP5_PV");
                        result.TEMP5_SP = row.Field<System.Decimal?>("TEMP5_SP");
                        result.TEMP6_PV = row.Field<System.Decimal?>("TEMP6_PV");
                        result.TEMP6_SP = row.Field<System.Decimal?>("TEMP6_SP");
                        result.TEMP7_PV = row.Field<System.Decimal?>("TEMP7_PV");
                        result.TEMP7_SP = row.Field<System.Decimal?>("TEMP7_SP");
                        result.TEMP8_PV = row.Field<System.Decimal?>("TEMP8_PV");
                        result.TEMP8_SP = row.Field<System.Decimal?>("TEMP8_SP");
                        result.TEMP9_PV = row.Field<System.Decimal?>("TEMP9_PV");
                        result.TEMP9_SP = row.Field<System.Decimal?>("TEMP9_SP");
                        result.TEMP10_PV = row.Field<System.Decimal?>("TEMP10_PV");
                        result.TEMP10_SP = row.Field<System.Decimal?>("TEMP10_SP");
                        result.FANRPM = row.Field<System.Decimal?>("FANRPM");
                        result.EXFAN_FRONT_BACK = row.Field<System.Decimal?>("EXFAN_FRONT_BACK");
                        result.EXFAN_MIDDLE = row.Field<System.Decimal?>("EXFAN_MIDDLE");
                        result.ANGLEKNIFE = row.Field<System.Decimal?>("ANGLEKNIFE");
                        result.BLADENO = row.Field<System.String>("BLADENO");
                        result.BLADEDIRECTION = row.Field<System.String>("BLADEDIRECTION");
                        result.CYLINDER_TENSIONUP = row.Field<System.Decimal?>("CYLINDER_TENSIONUP");
                        result.OPOLE_TENSIONDOWN = row.Field<System.Decimal?>("OPOLE_TENSIONDOWN");
                        result.FRAMEWIDTH_FORN = row.Field<System.Decimal?>("FRAMEWIDTH_FORN");
                        result.FRAMEWIDTH_TENTER = row.Field<System.Decimal?>("FRAMEWIDTH_TENTER");
                        result.PATHLINE = row.Field<System.Decimal?>("PATHLINE");
                        result.FEEDIN = row.Field<System.Decimal?>("FEEDIN");
                        result.OVERFEED = row.Field<System.Decimal?>("OVERFEED");
                        result.SPEED_PV = row.Field<System.Decimal?>("SPEED_PV");
                        result.SPEED_SP = row.Field<System.Decimal?>("SPEED_SP");
                        result.WIDTHCOAT = row.Field<System.Decimal?>("WIDTHCOAT");
                        result.WIDTHCOATALL = row.Field<System.Decimal?>("WIDTHCOATALL");
                        result.SILICONE_A = row.Field<System.String>("SILICONE_A");
                        result.SILICONE_B = row.Field<System.String>("SILICONE_B");
                        result.COATINGWEIGTH_L = row.Field<System.Decimal?>("COATINGWEIGTH_L");
                        result.COATINGWEIGTH_C = row.Field<System.Decimal?>("COATINGWEIGTH_C");
                        result.COATINGWEIGTH_R = row.Field<System.Decimal?>("COATINGWEIGTH_R");
                        result.CONDITIONBY = row.Field<System.String>("CONDITIONBY");
                        result.CONDITIONDATE = row.Field<System.DateTime?>("CONDITIONDATE");
                        result.FINISHBY = row.Field<System.String>("FINISHBY");
                        result.SAMPLINGID = row.Field<System.String>("SAMPLINGID");
                        result.STARTBY = row.Field<System.String>("STARTBY");
                        result.LENGTH6 = row.Field<System.Decimal?>("LENGTH6");
                        result.LENGTH7 = row.Field<System.Decimal?>("LENGTH7");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.HUMIDITY_BF = row.Field<System.Decimal?>("HUMIDITY_BF");
                        result.HUMIDITY_AF = row.Field<System.Decimal?>("HUMIDITY_AF");
                        result.REPROCESS = row.Field<System.String>("REPROCESS");
                        result.WEAVLENGTH = row.Field<System.Decimal?>("WEAVLENGTH");
                        result.OPERATOR_GROUP = row.Field<System.String>("OPERATOR_GROUP");
                        result.TEMP1_MIN = row.Field<System.Decimal?>("TEMP1_MIN");
                        result.TEMP1_MAX = row.Field<System.Decimal?>("TEMP1_MAX");
                        result.TEMP2_MIN = row.Field<System.Decimal?>("TEMP2_MIN");
                        result.TEMP2_MAX = row.Field<System.Decimal?>("TEMP2_MAX");
                        result.TEMP3_MIN = row.Field<System.Decimal?>("TEMP3_MIN");
                        result.TEMP3_MAX = row.Field<System.Decimal?>("TEMP3_MAX");
                        result.TEMP4_MIN = row.Field<System.Decimal?>("TEMP4_MIN");
                        result.TEMP4_MAX = row.Field<System.Decimal?>("TEMP4_MAX");
                        result.TEMP5_MIN = row.Field<System.Decimal?>("TEMP5_MIN");
                        result.TEMP5_MAX = row.Field<System.Decimal?>("TEMP5_MAX");
                        result.TEMP6_MIN = row.Field<System.Decimal?>("TEMP6_MIN");
                        result.TEMP6_MAX = row.Field<System.Decimal?>("TEMP6_MAX");
                        result.TEMP7_MIN = row.Field<System.Decimal?>("TEMP7_MIN");
                        result.TEMP7_MAX = row.Field<System.Decimal?>("TEMP7_MAX");
                        result.TEMP8_MIN = row.Field<System.Decimal?>("TEMP8_MIN");
                        result.TEMP8_MAX = row.Field<System.Decimal?>("TEMP8_MAX");
                        result.TEMP9_MIN = row.Field<System.Decimal?>("TEMP9_MIN");
                        result.TEMP9_MAX = row.Field<System.Decimal?>("TEMP9_MAX");
                        result.TEMP10_MIN = row.Field<System.Decimal?>("TEMP10_MIN");
                        result.TEMP10_MAX = row.Field<System.Decimal?>("TEMP10_MAX");
                        result.SAT_CHEM_MIN = row.Field<System.Decimal?>("SAT_CHEM_MIN");
                        result.SAT_CHEM_MAX = row.Field<System.Decimal?>("SAT_CHEM_MAX");
                        result.WASHING1_MIN = row.Field<System.Decimal?>("WASHING1_MIN");
                        result.WASHING1_MAX = row.Field<System.Decimal?>("WASHING1_MAX");
                        result.WASHING2_MIN = row.Field<System.Decimal?>("WASHING2_MIN");
                        result.WASHING2_MAX = row.Field<System.Decimal?>("WASHING2_MAX");
                        result.HOTFLUE_MIN = row.Field<System.Decimal?>("HOTFLUE_MIN");
                        result.HOTFLUE_MAX = row.Field<System.Decimal?>("HOTFLUE_MAX");
                        result.SPEED_MIN = row.Field<System.Decimal?>("SPEED_MIN");
                        result.SPEED_MAX = row.Field<System.Decimal?>("SPEED_MAX");
                        result.TENSIONUP_MIN = row.Field<System.Decimal?>("TENSIONUP_MIN");
                        result.TENSIONUP_MAX = row.Field<System.Decimal?>("TENSIONUP_MAX");
                        result.TENSIONDOWN_MIN = row.Field<System.Decimal?>("TENSIONDOWN_MIN");
                        result.TENSIONDOWN_MAX = row.Field<System.Decimal?>("TENSIONDOWN_MAX");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region FINISHING_CHECKITEMWEAVING

        public List<FINISHING_CHECKITEMWEAVINGResult> FINISHING_CHECKITEMWEAVING(FINISHING_CHECKITEMWEAVINGParameter para)
        {
            List<FINISHING_CHECKITEMWEAVINGResult> results = new List<FINISHING_CHECKITEMWEAVINGResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMWEAVING", 
                "P_ITMCODE"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMWEAVING, 
                para.P_ITMCODE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_CHECKITEMWEAVING",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        FINISHING_CHECKITEMWEAVINGResult result =
                            new FINISHING_CHECKITEMWEAVINGResult();

                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.ITM_WEAVING = row.Field<System.String>("ITM_WEAVING");
                        result.ITM_YARN = row.Field<System.String>("ITM_YARN");
                        result.ITM_WIDTH = row.Field<System.Decimal?>("ITM_WIDTH");
                        result.ITM_PROC1 = row.Field<System.String>("ITM_PROC1");
                        result.ITM_PROC2 = row.Field<System.String>("ITM_PROC2");
                        result.ITM_PROC3 = row.Field<System.String>("ITM_PROC3");
                        result.ITM_PROC4 = row.Field<System.String>("ITM_PROC4");
                        result.ITM_PROC5 = row.Field<System.String>("ITM_PROC5");
                        result.ITM_PROC6 = row.Field<System.String>("ITM_PROC6");
                        result.CREATEDATE = row.Field<System.DateTime?>("CREATEDATE");
                        result.CREATEBY = row.Field<System.String>("CREATEBY");
                        result.EDITDATE = row.Field<System.DateTime?>("EDITDATE");
                        result.EDITBY = row.Field<System.String>("EDITBY");
                        result.ITM_PREPARE = row.Field<System.String>("ITM_PREPARE");
                        result.COREWEIGHT = row.Field<System.Decimal?>("COREWEIGHT");
                        result.FULLWEIGHT = row.Field<System.Decimal?>("FULLWEIGHT");
                        result.ITM_GROUP = row.Field<System.String>("ITM_GROUP");
                        result.YARNCODE = row.Field<System.String>("YARNCODE");
                        result.WIDTHCODE = row.Field<System.String>("WIDTHCODE");
                        result.WIDTHWEAVING = row.Field<System.Decimal?>("WIDTHWEAVING");
                        result.LABFORM = row.Field<System.String>("LABFORM");
                        result.WEAVE_TYPE = row.Field<System.String>("WEAVE_TYPE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region FINISHING_CANCEL

        public FINISHING_CANCELResult FINISHING_CANCEL(FINISHING_CANCELParameter para)
        {
            FINISHING_CANCELResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_WEAVLOT", 
                "P_FINISHLOT", 
                "P_PROCESS", 
                "P_OPERATOR"
            };
            object[] paraValues = new object[]
            {
                para.P_WEAVLOT, 
                para.P_FINISHLOT, 
                para.P_PROCESS, 
                para.P_OPERATOR
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FINISHING_CANCEL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new FINISHING_CANCELResult();
            }

            return result;
        }

        #endregion

        #region FG_UPDATEDATASEND400

        public FG_UPDATEDATASEND400Result FG_UPDATEDATASEND400(FG_UPDATEDATASEND400Parameter para)
        {
            FG_UPDATEDATASEND400Result result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_INSPECTLOT", 
                "P_INSPECTIONDATE", 
                "P_PALLETNO"
            };
            object[] paraValues = new object[]
            {
                para.P_INSPECTLOT, 
                para.P_INSPECTIONDATE, 
                para.P_PALLETNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FG_UPDATEDATASEND400",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new FG_UPDATEDATASEND400Result();
            }

            return result;
        }

        #endregion

        #region FG_SEARCHDATASEND400

        public List<FG_SEARCHDATASEND400Result> FG_SEARCHDATASEND400(FG_SEARCHDATASEND400Parameter para)
        {
            List<FG_SEARCHDATASEND400Result> results = new List<FG_SEARCHDATASEND400Result>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_STARTDATE", 
                "P_ENDDATE", 
                "P_STOCK", 
                "P_PALLETNO"
            };
            object[] paraValues = new object[]
            {
                para.P_STARTDATE, 
                para.P_ENDDATE, 
                para.P_STOCK, 
                para.P_PALLETNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "FG_SEARCHDATASEND400",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        FG_SEARCHDATASEND400Result result =
                            new FG_SEARCHDATASEND400Result();

                        result.PALLETNO = row.Field<System.String>("PALLETNO");
                        result.INSPECTIONLOT = row.Field<System.String>("INSPECTIONLOT");
                        result.ITEMCODE = row.Field<System.String>("ITEMCODE");
                        result.NETLENGTH = row.Field<System.Decimal?>("NETLENGTH");
                        result.GROSSWEIGHT = row.Field<System.Decimal?>("GROSSWEIGHT");
                        result.NETWEIGHT = row.Field<System.Decimal?>("NETWEIGHT");
                        result.GRADE = row.Field<System.String>("GRADE");
                        result.CUSTOMERTYPE = row.Field<System.String>("CUSTOMERTYPE");
                        result.INSPECTIONDATE = row.Field<System.DateTime?>("INSPECTIONDATE");
                        result.STOCK = row.Field<System.String>("STOCK");
                        result.FLAG = row.Field<System.String>("FLAG");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.GROSSLENGTH = row.Field<System.Decimal?>("GROSSLENGTH");
                        result.ISLAB = row.Field<System.String>("ISLAB");
                        result.RETEST = row.Field<System.String>("RETEST");
                        result.PRODUCTTYPE = row.Field<System.String>("PRODUCTTYPE");
                        result.ROLLNO = row.Field<System.String>("ROLLNO");
                        result.CUSTOMERITEM = row.Field<System.String>("CUSTOMERITEM");
                        result.ORDERNO = row.Field<System.Decimal?>("ORDERNO");
                        result.FINISHFLAG = row.Field<System.String>("FINISHFLAG");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region DRAW_UPDATEDRAWING

        public DRAW_UPDATEDRAWINGResult DRAW_UPDATEDRAWING(DRAW_UPDATEDRAWINGParameter para)
        {
            DRAW_UPDATEDRAWINGResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_BEAMLOT", 
                "P_DRAWINGTYPE", 
                "P_REEDNO", 
                "P_HEALDCOLOR", 
                "P_HEALDNO", 
                "P_OPERATOR", 
                "P_FLAG", 
                "P_GROUP"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMLOT, 
                para.P_DRAWINGTYPE, 
                para.P_REEDNO, 
                para.P_HEALDCOLOR, 
                para.P_HEALDNO, 
                para.P_OPERATOR, 
                para.P_FLAG, 
                para.P_GROUP
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "DRAW_UPDATEDRAWING",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new DRAW_UPDATEDRAWINGResult();
                if (ret.Result.OutParameters["R_RESULT"] != DBNull.Value)
                    result.R_RESULT = (System.String)ret.Result.OutParameters["R_RESULT"];
            }

            return result;
        }

        #endregion

        #region DRAW_TRANSFERSLIP

        public List<DRAW_TRANSFERSLIPResult> DRAW_TRANSFERSLIP(DRAW_TRANSFERSLIPParameter para)
        {
            List<DRAW_TRANSFERSLIPResult> results = new List<DRAW_TRANSFERSLIPResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMERROLL"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERROLL
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "DRAW_TRANSFERSLIP",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        DRAW_TRANSFERSLIPResult result =
                            new DRAW_TRANSFERSLIPResult();

                        result.BEAMLOT = row.Field<System.String>("BEAMLOT");
                        result.ITM_PREPARE = row.Field<System.String>("ITM_PREPARE");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.DRAWINGTYPE = row.Field<System.String>("DRAWINGTYPE");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDATE = row.Field<System.DateTime?>("ENDATE");
                        result.REEDNO = row.Field<System.String>("REEDNO");
                        result.HEALDCOLOR = row.Field<System.String>("HEALDCOLOR");
                        result.STARTBY = row.Field<System.String>("STARTBY");
                        result.FINISHBY = row.Field<System.String>("FINISHBY");
                        result.USEFLAG = row.Field<System.String>("USEFLAG");
                        result.HEALDNO = row.Field<System.Decimal?>("HEALDNO");
                        result.OPERATOR_GROUP = row.Field<System.String>("OPERATOR_GROUP");
                        result.TOTALYARN = row.Field<System.Decimal?>("TOTALYARN");
                        result.BEAMNO = row.Field<System.String>("BEAMNO");
                        result.LENGTH = row.Field<System.Decimal?>("LENGTH");
                        result.BEAMERNO = row.Field<System.String>("BEAMERNO");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region DRAW_INSERTDRAWING

        public DRAW_INSERTDRAWINGResult DRAW_INSERTDRAWING(DRAW_INSERTDRAWINGParameter para)
        {
            DRAW_INSERTDRAWINGResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_BEAMLOT", 
                "P_ITMPREPARE", 
                "P_PRODUCTID", 
                "P_DRAWINGTYPE", 
                "P_REEDNO", 
                "P_HEALDCOLOR", 
                "P_HEALDNO", 
                "P_OPERATOR", 
                "P_GROUP"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMLOT, 
                para.P_ITMPREPARE, 
                para.P_PRODUCTID, 
                para.P_DRAWINGTYPE, 
                para.P_REEDNO, 
                para.P_HEALDCOLOR, 
                para.P_HEALDNO, 
                para.P_OPERATOR, 
                para.P_GROUP
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "DRAW_INSERTDRAWING",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new DRAW_INSERTDRAWINGResult();
                if (ret.Result.OutParameters["R_RESULT"] != DBNull.Value)
                    result.R_RESULT = (System.String)ret.Result.OutParameters["R_RESULT"];
            }

            return result;
        }

        #endregion

        #region DRAW_GETSPECBYCHOPNO

        public List<DRAW_GETSPECBYCHOPNOResult> DRAW_GETSPECBYCHOPNO(DRAW_GETSPECBYCHOPNOParameter para)
        {
            List<DRAW_GETSPECBYCHOPNOResult> results = new List<DRAW_GETSPECBYCHOPNOResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMPREPARE"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMPREPARE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "DRAW_GETSPECBYCHOPNO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        DRAW_GETSPECBYCHOPNOResult result =
                            new DRAW_GETSPECBYCHOPNOResult();

                        result.CHOPNO = row.Field<System.String>("CHOPNO");
                        result.NOYARN = row.Field<System.Decimal?>("NOYARN");
                        result.REEDTYPE = row.Field<System.Decimal?>("REEDTYPE");
                        result.LENGTH = row.Field<System.Decimal?>("LENGTH");
                        result.NODENT = row.Field<System.Decimal?>("NODENT");
                        result.PITCH = row.Field<System.Decimal?>("PITCH");
                        result.AIRSPACE = row.Field<System.Decimal?>("AIRSPACE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region DRAW_GETDRAWINGLISTBYITEM

        public List<DRAW_GETDRAWINGLISTBYITEMResult> DRAW_GETDRAWINGLISTBYITEM(DRAW_GETDRAWINGLISTBYITEMParameter para)
        {
            List<DRAW_GETDRAWINGLISTBYITEMResult> results = new List<DRAW_GETDRAWINGLISTBYITEMResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMPREPARE"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMPREPARE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "DRAW_GETDRAWINGLISTBYITEM",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        DRAW_GETDRAWINGLISTBYITEMResult result =
                            new DRAW_GETDRAWINGLISTBYITEMResult();

                        result.BEAMLOT = row.Field<System.String>("BEAMLOT");
                        result.ITM_PREPARE = row.Field<System.String>("ITM_PREPARE");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.DRAWINGTYPE = row.Field<System.String>("DRAWINGTYPE");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDATE = row.Field<System.DateTime?>("ENDATE");
                        result.REEDNO = row.Field<System.String>("REEDNO");
                        result.HEALDCOLOR = row.Field<System.String>("HEALDCOLOR");
                        result.STARTBY = row.Field<System.String>("STARTBY");
                        result.FINISHBY = row.Field<System.String>("FINISHBY");
                        result.USEFLAG = row.Field<System.String>("USEFLAG");
                        result.HEALDNO = row.Field<System.Decimal?>("HEALDNO");
                        result.OPERATOR_GROUP = row.Field<System.String>("OPERATOR_GROUP");
                        result.REEDTYPE = row.Field<System.Decimal?>("REEDTYPE");
                        result.HEALDNO1 = row.Field<System.Decimal?>("HEALDNO1");
                        result.TOTALYARN = row.Field<System.Decimal?>("TOTALYARN");
                        result.BEAMNO = row.Field<System.String>("BEAMNO");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region DRAW_GETBEAMLOTDETAIL

        public List<DRAW_GETBEAMLOTDETAILResult> DRAW_GETBEAMLOTDETAIL(DRAW_GETBEAMLOTDETAILParameter para)
        {
            List<DRAW_GETBEAMLOTDETAILResult> results = new List<DRAW_GETBEAMLOTDETAILResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "DRAW_GETBEAMLOTDETAIL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        DRAW_GETBEAMLOTDETAILResult result =
                            new DRAW_GETBEAMLOTDETAILResult();

                        result.BEAMERNO = row.Field<System.String>("BEAMERNO");
                        result.BEAMLOT = row.Field<System.String>("BEAMLOT");
                        result.BEAMNO = row.Field<System.String>("BEAMNO");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.LENGTH = row.Field<System.Decimal?>("LENGTH");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.BEAMSTANDTENSION = row.Field<System.Decimal?>("BEAMSTANDTENSION");
                        result.WINDINGTENSION = row.Field<System.Decimal?>("WINDINGTENSION");
                        result.HARDNESS_L = row.Field<System.Decimal?>("HARDNESS_L");
                        result.HARDNESS_N = row.Field<System.Decimal?>("HARDNESS_N");
                        result.HARDNESS_R = row.Field<System.Decimal?>("HARDNESS_R");
                        result.INSIDE_WIDTH = row.Field<System.Decimal?>("INSIDE_WIDTH");
                        result.OUTSIDE_WIDTH = row.Field<System.Decimal?>("OUTSIDE_WIDTH");
                        result.FULL_WIDTH = row.Field<System.Decimal?>("FULL_WIDTH");
                        result.STARTBY = row.Field<System.String>("STARTBY");
                        result.DOFFBY = row.Field<System.String>("DOFFBY");
                        result.BEAMMC = row.Field<System.String>("BEAMMC");
                        result.FLAG = row.Field<System.String>("FLAG");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.TENSION_ST1 = row.Field<System.Decimal?>("TENSION_ST1");
                        result.TENSION_ST2 = row.Field<System.Decimal?>("TENSION_ST2");
                        result.TENSION_ST3 = row.Field<System.Decimal?>("TENSION_ST3");
                        result.TENSION_ST4 = row.Field<System.Decimal?>("TENSION_ST4");
                        result.TENSION_ST5 = row.Field<System.Decimal?>("TENSION_ST5");
                        result.TENSION_ST6 = row.Field<System.Decimal?>("TENSION_ST6");
                        result.TENSION_ST7 = row.Field<System.Decimal?>("TENSION_ST7");
                        result.TENSION_ST8 = row.Field<System.Decimal?>("TENSION_ST8");
                        result.TENSION_ST9 = row.Field<System.Decimal?>("TENSION_ST9");
                        result.TENSION_ST10 = row.Field<System.Decimal?>("TENSION_ST10");
                        result.EDITBY = row.Field<System.String>("EDITBY");
                        result.OLDBEAMNO = row.Field<System.String>("OLDBEAMNO");
                        result.EDITDATE = row.Field<System.DateTime?>("EDITDATE");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.ITM_PREPARE = row.Field<System.String>("ITM_PREPARE");
                        result.TOTALYARN = row.Field<System.Decimal?>("TOTALYARN");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region DRAW_DAILYREPORT

        public List<DRAW_DAILYREPORTResult> DRAW_DAILYREPORT(DRAW_DAILYREPORTParameter para)
        {
            List<DRAW_DAILYREPORTResult> results = new List<DRAW_DAILYREPORTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_DATE"
            };
            object[] paraValues = new object[]
            {
                para.P_DATE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "DRAW_DAILYREPORT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        DRAW_DAILYREPORTResult result =
                            new DRAW_DAILYREPORTResult();

                        result.BEAMLOT = row.Field<System.String>("BEAMLOT");
                        result.ITM_PREPARE = row.Field<System.String>("ITM_PREPARE");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.DRAWINGTYPE = row.Field<System.String>("DRAWINGTYPE");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDATE = row.Field<System.DateTime?>("ENDATE");
                        result.REEDNO = row.Field<System.String>("REEDNO");
                        result.HEALDCOLOR = row.Field<System.String>("HEALDCOLOR");
                        result.STARTBY = row.Field<System.String>("STARTBY");
                        result.FINISHBY = row.Field<System.String>("FINISHBY");
                        result.USEFLAG = row.Field<System.String>("USEFLAG");
                        result.HEALDNO = row.Field<System.Decimal?>("HEALDNO");
                        result.OPERATOR_GROUP = row.Field<System.String>("OPERATOR_GROUP");
                        result.TOTALYARN = row.Field<System.Decimal?>("TOTALYARN");
                        result.BEAMNO = row.Field<System.String>("BEAMNO");
                        result.LENGTH = row.Field<System.Decimal?>("LENGTH");
                        result.BEAMERNO = row.Field<System.String>("BEAMERNO");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region DEFECT_SEARCH

        public List<DEFECT_SEARCHResult> DEFECT_SEARCH(DEFECT_SEARCHParameter para)
        {
            List<DEFECT_SEARCHResult> results = new List<DEFECT_SEARCHResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_DEFECTID", 
                "P_PROCESSID", 
                "P_THAIDESC", 
                "P_ENGDESC"
            };
            object[] paraValues = new object[]
            {
                para.P_DEFECTID, 
                para.P_PROCESSID, 
                para.P_THAIDESC, 
                para.P_ENGDESC
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "DEFECT_SEARCH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        DEFECT_SEARCHResult result =
                            new DEFECT_SEARCHResult();

                        result.DEFECTCODE = row.Field<System.String>("DEFECTCODE");
                        result.DESCRIPTION_TH = row.Field<System.String>("DESCRIPTION_TH");
                        result.DESCRIPTION_EN = row.Field<System.String>("DESCRIPTION_EN");
                        result.PROCESSID = row.Field<System.String>("PROCESSID");
                        result.DEFECTPROCESSCODE = row.Field<System.String>("DEFECTPROCESSCODE");
                        result.POINT = row.Field<System.Decimal?>("POINT");
                        result.PROCESSDESCRIPTION = row.Field<System.String>("PROCESSDESCRIPTION");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region DEFECT_INSERTUPDATE

        public DEFECT_INSERTUPDATEResult DEFECT_INSERTUPDATE(DEFECT_INSERTUPDATEParameter para)
        {
            DEFECT_INSERTUPDATEResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_DEFECTID", 
                "P_PROCESSID", 
                "P_THAIDESC", 
                "P_ENGDESC", 
                "P_POINT"
            };
            object[] paraValues = new object[]
            {
                para.P_DEFECTID, 
                para.P_PROCESSID, 
                para.P_THAIDESC, 
                para.P_ENGDESC, 
                para.P_POINT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "DEFECT_INSERTUPDATE",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new DEFECT_INSERTUPDATEResult();
                if (ret.Result.OutParameters["R_RESULT"] != DBNull.Value)
                    result.R_RESULT = (System.String)ret.Result.OutParameters["R_RESULT"];
            }

            return result;
        }

        #endregion

        #region DEFECT_DELETE

        public DEFECT_DELETEResult DEFECT_DELETE(DEFECT_DELETEParameter para)
        {
            DEFECT_DELETEResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_DEFECTID"
            };
            object[] paraValues = new object[]
            {
                para.P_DEFECTID
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "DEFECT_DELETE",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new DEFECT_DELETEResult();
            }

            return result;
        }

        #endregion

        #region CUT_UPDATEDATA

        public CUT_UPDATEDATAResult CUT_UPDATEDATA(CUT_UPDATEDATAParameter para)
        {
            CUT_UPDATEDATAResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITEMLOT", 
                "P_ENDDATE", 
                "P_REMARK", 
                "P_WIDTH1", 
                "P_WIDTH2", 
                "P_WIDTH3", 
                "P_WIDTH4", 
                "P_DISTANTBAR1", 
                "P_DISTANTBAR2", 
                "P_DISTANTBAR3", 
                "P_DISTANTBAR4", 
                "P_DISTANTLINE1", 
                "P_DISTANTLINE2", 
                "P_DISTANTLINE3", 
                "P_DENWARP", 
                "P_DENWEFT", 
                "P_SPEED", 
                "P_WIDTHBE", 
                "P_WIDTHAF", 
                "P_BEGINLINE1", 
                "P_BEGINLINE2", 
                "P_BEGINLINE3", 
                "P_BEGINLINE4", 
                "P_ENDLINE1", 
                "P_ENDLINE2", 
                "P_ENDLINE3", 
                "P_ENDLINE4", 
                "P_SELVAGELEFT", 
                "P_SELVAGERIGHT", 
                "P_STATUS", 
                "P_LENGTHPRINT", 
                "P_CLEARBY", 
                "P_CLEARREMARK", 
                "P_CLEARDATE", 
                "P_SUSPENDDATE", 
                "P_2BEGINLINE1", 
                "P_2BEGINLINE2", 
                "P_2BEGINLINE3", 
                "P_2BEGINLINE4", 
                "P_2ENDLINE1", 
                "P_2ENDLINE2", 
                "P_2ENDLINE3", 
                "P_2ENDLINE4", 
                "P_TENSION", 
                "P_LENGTHDETAIL", 
                "P_WIDTHAF_END"
            };
            object[] paraValues = new object[]
            {
                para.P_ITEMLOT, 
                para.P_ENDDATE, 
                para.P_REMARK, 
                para.P_WIDTH1, 
                para.P_WIDTH2, 
                para.P_WIDTH3, 
                para.P_WIDTH4, 
                para.P_DISTANTBAR1, 
                para.P_DISTANTBAR2, 
                para.P_DISTANTBAR3, 
                para.P_DISTANTBAR4, 
                para.P_DISTANTLINE1, 
                para.P_DISTANTLINE2, 
                para.P_DISTANTLINE3, 
                para.P_DENWARP, 
                para.P_DENWEFT, 
                para.P_SPEED, 
                para.P_WIDTHBE, 
                para.P_WIDTHAF, 
                para.P_BEGINLINE1, 
                para.P_BEGINLINE2, 
                para.P_BEGINLINE3, 
                para.P_BEGINLINE4, 
                para.P_ENDLINE1, 
                para.P_ENDLINE2, 
                para.P_ENDLINE3, 
                para.P_ENDLINE4, 
                para.P_SELVAGELEFT, 
                para.P_SELVAGERIGHT, 
                para.P_STATUS, 
                para.P_LENGTHPRINT, 
                para.P_CLEARBY, 
                para.P_CLEARREMARK, 
                para.P_CLEARDATE, 
                para.P_SUSPENDDATE, 
                para.P_2BEGINLINE1, 
                para.P_2BEGINLINE2, 
                para.P_2BEGINLINE3, 
                para.P_2BEGINLINE4, 
                para.P_2ENDLINE1, 
                para.P_2ENDLINE2, 
                para.P_2ENDLINE3, 
                para.P_2ENDLINE4, 
                para.P_TENSION, 
                para.P_LENGTHDETAIL, 
                para.P_WIDTHAF_END
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "CUT_UPDATEDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new CUT_UPDATEDATAResult();
            }

            return result;
        }

        #endregion

        #region CUT_SERACHLIST

        public List<CUT_SERACHLISTResult> CUT_SERACHLIST(CUT_SERACHLISTParameter para)
        {
            List<CUT_SERACHLISTResult> results = new List<CUT_SERACHLISTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_STARTDATE", 
                "P_MC"
            };
            object[] paraValues = new object[]
            {
                para.P_STARTDATE, 
                para.P_MC
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "CUT_SERACHLIST",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        CUT_SERACHLISTResult result =
                            new CUT_SERACHLISTResult();

                        result.ITEMLOT = row.Field<System.String>("ITEMLOT");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.WIDTHBARCODE1 = row.Field<System.Decimal?>("WIDTHBARCODE1");
                        result.WIDTHBARCODE2 = row.Field<System.Decimal?>("WIDTHBARCODE2");
                        result.WIDTHBARCODE3 = row.Field<System.Decimal?>("WIDTHBARCODE3");
                        result.WIDTHBARCODE4 = row.Field<System.Decimal?>("WIDTHBARCODE4");
                        result.DISTANTBARCODE1 = row.Field<System.Decimal?>("DISTANTBARCODE1");
                        result.DISTANTBARCODE2 = row.Field<System.Decimal?>("DISTANTBARCODE2");
                        result.DISTANTBARCODE3 = row.Field<System.Decimal?>("DISTANTBARCODE3");
                        result.DISTANTBARCODE4 = row.Field<System.Decimal?>("DISTANTBARCODE4");
                        result.DISTANTLINE1 = row.Field<System.Decimal?>("DISTANTLINE1");
                        result.DISTANTLINE2 = row.Field<System.Decimal?>("DISTANTLINE2");
                        result.DISTANTLINE3 = row.Field<System.Decimal?>("DISTANTLINE3");
                        result.DENSITYWARP = row.Field<System.Decimal?>("DENSITYWARP");
                        result.DENSITYWEFT = row.Field<System.Decimal?>("DENSITYWEFT");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.BEFORE_WIDTH = row.Field<System.Decimal?>("BEFORE_WIDTH");
                        result.AFTER_WIDTH = row.Field<System.Decimal?>("AFTER_WIDTH");
                        result.BEGINROLL_LINE1 = row.Field<System.String>("BEGINROLL_LINE1");
                        result.BEGINROLL_LINE2 = row.Field<System.String>("BEGINROLL_LINE2");
                        result.BEGINROLL_LINE3 = row.Field<System.String>("BEGINROLL_LINE3");
                        result.BEGINROLL_LINE4 = row.Field<System.String>("BEGINROLL_LINE4");
                        result.ENDROLL_LINE1 = row.Field<System.String>("ENDROLL_LINE1");
                        result.ENDROLL_LINE2 = row.Field<System.String>("ENDROLL_LINE2");
                        result.ENDROLL_LINE3 = row.Field<System.String>("ENDROLL_LINE3");
                        result.ENDROLL_LINE4 = row.Field<System.String>("ENDROLL_LINE4");
                        result.OPERATORID = row.Field<System.String>("OPERATORID");
                        result.SELVAGE_LEFT = row.Field<System.String>("SELVAGE_LEFT");
                        result.SELVAGE_RIGHT = row.Field<System.String>("SELVAGE_RIGHT");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.MCNO = row.Field<System.String>("MCNO");
                        result.STATUS = row.Field<System.String>("STATUS");
                        result.SUSPENDDATE = row.Field<System.DateTime?>("SUSPENDDATE");
                        result.SUSPENDBY = row.Field<System.String>("SUSPENDBY");
                        result.CLEARDATE = row.Field<System.DateTime?>("CLEARDATE");
                        result.CLEARREMARK = row.Field<System.String>("CLEARREMARK");
                        result.CLEARBY = row.Field<System.String>("CLEARBY");
                        result.LENGTHPRINT = row.Field<System.Decimal?>("LENGTHPRINT");
                        result.SUSPENDSTARTDATE = row.Field<System.DateTime?>("SUSPENDSTARTDATE");
                        result.BEGINROLL2_LINE1 = row.Field<System.String>("BEGINROLL2_LINE1");
                        result.BEGINROLL2_LINE2 = row.Field<System.String>("BEGINROLL2_LINE2");
                        result.BEGINROLL2_LINE3 = row.Field<System.String>("BEGINROLL2_LINE3");
                        result.BEGINROLL2_LINE4 = row.Field<System.String>("BEGINROLL2_LINE4");
                        result.ENDROLL2_LINE1 = row.Field<System.String>("ENDROLL2_LINE1");
                        result.ENDROLL2_LINE2 = row.Field<System.String>("ENDROLL2_LINE2");
                        result.ENDROLL2_LINE3 = row.Field<System.String>("ENDROLL2_LINE3");
                        result.ENDROLL2_LINE4 = row.Field<System.String>("ENDROLL2_LINE4");
                        result.TENSION = row.Field<System.Decimal?>("TENSION");
                        result.LENGTHDETAIL = row.Field<System.String>("LENGTHDETAIL");
                        result.ITEMCODE = row.Field<System.String>("ITEMCODE");
                        result.PARTNO = row.Field<System.String>("PARTNO");
                        result.MCNAME = row.Field<System.String>("MCNAME");
                        result.SND_BARCODE = row.Field<System.String>("SND_BARCODE");
                        result.FINISHLOT = row.Field<System.String>("FINISHLOT");
                        result.FINISHLENGTH = row.Field<System.Decimal?>("FINISHLENGTH");
                        result.FINISHLENGTH1 = row.Field<System.String>("FINISHLENGTH1");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region CUT_INSERTDATA

        public CUT_INSERTDATAResult CUT_INSERTDATA(CUT_INSERTDATAParameter para)
        {
            CUT_INSERTDATAResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITEMLOT", 
                "P_STARTDATE", 
                "P_PRODUCTTYPEID", 
                "P_OPERATORID", 
                "P_REMARK", 
                "P_MCNO", 
                "P_WIDTH1", 
                "P_WIDTH2", 
                "P_WIDTH3", 
                "P_WIDTH4", 
                "P_DISTANTBAR1", 
                "P_DISTANTBAR2", 
                "P_DISTANTBAR3", 
                "P_DISTANTBAR4", 
                "P_DISTANTLINE1", 
                "P_DISTANTLINE2", 
                "P_DISTANTLINE3", 
                "P_DENWARP", 
                "P_DENWEFT", 
                "P_SPEED", 
                "P_WIDTHBE", 
                "P_WIDTHAF", 
                "P_BEGINLINE1", 
                "P_BEGINLINE2", 
                "P_BEGINLINE3", 
                "P_BEGINLINE4", 
                "P_ENDLINE1", 
                "P_ENDLINE2", 
                "P_ENDLINE3", 
                "P_ENDLINE4", 
                "P_SELVAGELEFT", 
                "P_SELVAGERIGHT", 
                "P_SUSPENSTARTDATE", 
                "P_2BEGINLINE1", 
                "P_2BEGINLINE2", 
                "P_2BEGINLINE3", 
                "P_2BEGINLINE4", 
                "P_2ENDLINE1", 
                "P_2ENDLINE2", 
                "P_2ENDLINE3", 
                "P_2ENDLINE4", 
                "P_TENSION", 
                "P_LENGTHDETAIL", 
                "P_WIDTHAF_END"
            };
            object[] paraValues = new object[]
            {
                para.P_ITEMLOT, 
                para.P_STARTDATE, 
                para.P_PRODUCTTYPEID, 
                para.P_OPERATORID, 
                para.P_REMARK, 
                para.P_MCNO, 
                para.P_WIDTH1, 
                para.P_WIDTH2, 
                para.P_WIDTH3, 
                para.P_WIDTH4, 
                para.P_DISTANTBAR1, 
                para.P_DISTANTBAR2, 
                para.P_DISTANTBAR3, 
                para.P_DISTANTBAR4, 
                para.P_DISTANTLINE1, 
                para.P_DISTANTLINE2, 
                para.P_DISTANTLINE3, 
                para.P_DENWARP, 
                para.P_DENWEFT, 
                para.P_SPEED, 
                para.P_WIDTHBE, 
                para.P_WIDTHAF, 
                para.P_BEGINLINE1, 
                para.P_BEGINLINE2, 
                para.P_BEGINLINE3, 
                para.P_BEGINLINE4, 
                para.P_ENDLINE1, 
                para.P_ENDLINE2, 
                para.P_ENDLINE3, 
                para.P_ENDLINE4, 
                para.P_SELVAGELEFT, 
                para.P_SELVAGERIGHT, 
                para.P_SUSPENSTARTDATE, 
                para.P_2BEGINLINE1, 
                para.P_2BEGINLINE2, 
                para.P_2BEGINLINE3, 
                para.P_2BEGINLINE4, 
                para.P_2ENDLINE1, 
                para.P_2ENDLINE2, 
                para.P_2ENDLINE3, 
                para.P_2ENDLINE4, 
                para.P_TENSION, 
                para.P_LENGTHDETAIL, 
                para.P_WIDTHAF_END
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "CUT_INSERTDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new CUT_INSERTDATAResult();
            }

            return result;
        }

        #endregion

        #region CUT_GETSLIP

        public List<CUT_GETSLIPResult> CUT_GETSLIP(CUT_GETSLIPParameter para)
        {
            List<CUT_GETSLIPResult> results = new List<CUT_GETSLIPResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITEMLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_ITEMLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "CUT_GETSLIP",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        CUT_GETSLIPResult result =
                            new CUT_GETSLIPResult();

                        result.ITEMLOT = row.Field<System.String>("ITEMLOT");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.WIDTHBARCODE1 = row.Field<System.Decimal?>("WIDTHBARCODE1");
                        result.WIDTHBARCODE2 = row.Field<System.Decimal?>("WIDTHBARCODE2");
                        result.WIDTHBARCODE3 = row.Field<System.Decimal?>("WIDTHBARCODE3");
                        result.WIDTHBARCODE4 = row.Field<System.Decimal?>("WIDTHBARCODE4");
                        result.DISTANTBARCODE1 = row.Field<System.Decimal?>("DISTANTBARCODE1");
                        result.DISTANTBARCODE2 = row.Field<System.Decimal?>("DISTANTBARCODE2");
                        result.DISTANTBARCODE3 = row.Field<System.Decimal?>("DISTANTBARCODE3");
                        result.DISTANTBARCODE4 = row.Field<System.Decimal?>("DISTANTBARCODE4");
                        result.DISTANTLINE1 = row.Field<System.Decimal?>("DISTANTLINE1");
                        result.DISTANTLINE2 = row.Field<System.Decimal?>("DISTANTLINE2");
                        result.DISTANTLINE3 = row.Field<System.Decimal?>("DISTANTLINE3");
                        result.DENSITYWARP = row.Field<System.Decimal?>("DENSITYWARP");
                        result.DENSITYWEFT = row.Field<System.Decimal?>("DENSITYWEFT");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.BEFORE_WIDTH = row.Field<System.Decimal?>("BEFORE_WIDTH");
                        result.AFTER_WIDTH = row.Field<System.Decimal?>("AFTER_WIDTH");
                        result.BEGINROLL_LINE1 = row.Field<System.String>("BEGINROLL_LINE1");
                        result.BEGINROLL_LINE2 = row.Field<System.String>("BEGINROLL_LINE2");
                        result.BEGINROLL_LINE3 = row.Field<System.String>("BEGINROLL_LINE3");
                        result.BEGINROLL_LINE4 = row.Field<System.String>("BEGINROLL_LINE4");
                        result.ENDROLL_LINE1 = row.Field<System.String>("ENDROLL_LINE1");
                        result.ENDROLL_LINE2 = row.Field<System.String>("ENDROLL_LINE2");
                        result.ENDROLL_LINE3 = row.Field<System.String>("ENDROLL_LINE3");
                        result.ENDROLL_LINE4 = row.Field<System.String>("ENDROLL_LINE4");
                        result.OPERATORID = row.Field<System.String>("OPERATORID");
                        result.SELVAGE_LEFT = row.Field<System.String>("SELVAGE_LEFT");
                        result.SELVAGE_RIGHT = row.Field<System.String>("SELVAGE_RIGHT");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.MCNO = row.Field<System.String>("MCNO");
                        result.STATUS = row.Field<System.String>("STATUS");
                        result.SUSPENDDATE = row.Field<System.DateTime?>("SUSPENDDATE");
                        result.SUSPENDBY = row.Field<System.String>("SUSPENDBY");
                        result.CLEARDATE = row.Field<System.DateTime?>("CLEARDATE");
                        result.CLEARREMARK = row.Field<System.String>("CLEARREMARK");
                        result.CLEARBY = row.Field<System.String>("CLEARBY");
                        result.LENGTHPRINT = row.Field<System.Decimal?>("LENGTHPRINT");
                        result.SUSPENDSTARTDATE = row.Field<System.DateTime?>("SUSPENDSTARTDATE");
                        result.BEGINROLL2_LINE1 = row.Field<System.String>("BEGINROLL2_LINE1");
                        result.BEGINROLL2_LINE2 = row.Field<System.String>("BEGINROLL2_LINE2");
                        result.BEGINROLL2_LINE3 = row.Field<System.String>("BEGINROLL2_LINE3");
                        result.BEGINROLL2_LINE4 = row.Field<System.String>("BEGINROLL2_LINE4");
                        result.ENDROLL2_LINE1 = row.Field<System.String>("ENDROLL2_LINE1");
                        result.ENDROLL2_LINE2 = row.Field<System.String>("ENDROLL2_LINE2");
                        result.ENDROLL2_LINE3 = row.Field<System.String>("ENDROLL2_LINE3");
                        result.ENDROLL2_LINE4 = row.Field<System.String>("ENDROLL2_LINE4");
                        result.TENSION = row.Field<System.Decimal?>("TENSION");
                        result.LENGTHDETAIL = row.Field<System.String>("LENGTHDETAIL");
                        result.AFTER_WIDTH_END = row.Field<System.Decimal?>("AFTER_WIDTH_END");
                        result.FINISHLOT = row.Field<System.String>("FINISHLOT");
                        result.ITEMCODE = row.Field<System.String>("ITEMCODE");
                        result.ITEMLOT1 = row.Field<System.String>("ITEMLOT1");
                        result.PARTNO = row.Field<System.String>("PARTNO");
                        result.MCNAME = row.Field<System.String>("MCNAME");
                        result.FINISHINGPROCESS = row.Field<System.String>("FINISHINGPROCESS");
                        result.SHOWSELVAGE = row.Field<System.String>("SHOWSELVAGE");
                        result.SND_BARCODE = row.Field<System.String>("SND_BARCODE");
                        result.CUSTOMERID = row.Field<System.String>("CUSTOMERID");
                        result.FINISHLENGTH = row.Field<System.String>("FINISHLENGTH");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region CUT_GETMCSUSPENDDATA

        public List<CUT_GETMCSUSPENDDATAResult> CUT_GETMCSUSPENDDATA(CUT_GETMCSUSPENDDATAParameter para)
        {
            List<CUT_GETMCSUSPENDDATAResult> results = new List<CUT_GETMCSUSPENDDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_CUTMCNO"
            };
            object[] paraValues = new object[]
            {
                para.P_CUTMCNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "CUT_GETMCSUSPENDDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        CUT_GETMCSUSPENDDATAResult result =
                            new CUT_GETMCSUSPENDDATAResult();

                        result.ITEMLOT = row.Field<System.String>("ITEMLOT");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.WIDTHBARCODE1 = row.Field<System.Decimal?>("WIDTHBARCODE1");
                        result.WIDTHBARCODE2 = row.Field<System.Decimal?>("WIDTHBARCODE2");
                        result.WIDTHBARCODE3 = row.Field<System.Decimal?>("WIDTHBARCODE3");
                        result.WIDTHBARCODE4 = row.Field<System.Decimal?>("WIDTHBARCODE4");
                        result.DISTANTBARCODE1 = row.Field<System.Decimal?>("DISTANTBARCODE1");
                        result.DISTANTBARCODE2 = row.Field<System.Decimal?>("DISTANTBARCODE2");
                        result.DISTANTBARCODE3 = row.Field<System.Decimal?>("DISTANTBARCODE3");
                        result.DISTANTBARCODE4 = row.Field<System.Decimal?>("DISTANTBARCODE4");
                        result.DISTANTLINE1 = row.Field<System.Decimal?>("DISTANTLINE1");
                        result.DISTANTLINE2 = row.Field<System.Decimal?>("DISTANTLINE2");
                        result.DISTANTLINE3 = row.Field<System.Decimal?>("DISTANTLINE3");
                        result.DENSITYWARP = row.Field<System.Decimal?>("DENSITYWARP");
                        result.DENSITYWEFT = row.Field<System.Decimal?>("DENSITYWEFT");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.BEFORE_WIDTH = row.Field<System.Decimal?>("BEFORE_WIDTH");
                        result.AFTER_WIDTH = row.Field<System.Decimal?>("AFTER_WIDTH");
                        result.BEGINROLL_LINE1 = row.Field<System.String>("BEGINROLL_LINE1");
                        result.BEGINROLL_LINE2 = row.Field<System.String>("BEGINROLL_LINE2");
                        result.BEGINROLL_LINE3 = row.Field<System.String>("BEGINROLL_LINE3");
                        result.BEGINROLL_LINE4 = row.Field<System.String>("BEGINROLL_LINE4");
                        result.ENDROLL_LINE1 = row.Field<System.String>("ENDROLL_LINE1");
                        result.ENDROLL_LINE2 = row.Field<System.String>("ENDROLL_LINE2");
                        result.ENDROLL_LINE3 = row.Field<System.String>("ENDROLL_LINE3");
                        result.ENDROLL_LINE4 = row.Field<System.String>("ENDROLL_LINE4");
                        result.OPERATORID = row.Field<System.String>("OPERATORID");
                        result.SELVAGE_LEFT = row.Field<System.String>("SELVAGE_LEFT");
                        result.SELVAGE_RIGHT = row.Field<System.String>("SELVAGE_RIGHT");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.MCNO = row.Field<System.String>("MCNO");
                        result.STATUS = row.Field<System.String>("STATUS");
                        result.SUSPENDDATE = row.Field<System.DateTime?>("SUSPENDDATE");
                        result.SUSPENDBY = row.Field<System.String>("SUSPENDBY");
                        result.CLEARDATE = row.Field<System.DateTime?>("CLEARDATE");
                        result.CLEARREMARK = row.Field<System.String>("CLEARREMARK");
                        result.CLEARBY = row.Field<System.String>("CLEARBY");
                        result.LENGTHPRINT = row.Field<System.Decimal?>("LENGTHPRINT");
                        result.SUSPENDSTARTDATE = row.Field<System.DateTime?>("SUSPENDSTARTDATE");
                        result.BEGINROLL2_LINE1 = row.Field<System.String>("BEGINROLL2_LINE1");
                        result.BEGINROLL2_LINE2 = row.Field<System.String>("BEGINROLL2_LINE2");
                        result.BEGINROLL2_LINE3 = row.Field<System.String>("BEGINROLL2_LINE3");
                        result.BEGINROLL2_LINE4 = row.Field<System.String>("BEGINROLL2_LINE4");
                        result.ENDROLL2_LINE1 = row.Field<System.String>("ENDROLL2_LINE1");
                        result.ENDROLL2_LINE2 = row.Field<System.String>("ENDROLL2_LINE2");
                        result.ENDROLL2_LINE3 = row.Field<System.String>("ENDROLL2_LINE3");
                        result.ENDROLL2_LINE4 = row.Field<System.String>("ENDROLL2_LINE4");
                        result.TENSION = row.Field<System.Decimal?>("TENSION");
                        result.LENGTHDETAIL = row.Field<System.String>("LENGTHDETAIL");
                        result.AFTER_WIDTH_END = row.Field<System.Decimal?>("AFTER_WIDTH_END");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region CUT_GETFINISHINGDATA

        public List<CUT_GETFINISHINGDATAResult> CUT_GETFINISHINGDATA(CUT_GETFINISHINGDATAParameter para)
        {
            List<CUT_GETFINISHINGDATAResult> results = new List<CUT_GETFINISHINGDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITEMLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_ITEMLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "CUT_GETFINISHINGDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        CUT_GETFINISHINGDATAResult result =
                            new CUT_GETFINISHINGDATAResult();

                        result.ITEMCODE = row.Field<System.String>("ITEMCODE");
                        result.ITEMLOT = row.Field<System.String>("ITEMLOT");
                        result.BATCHNO = row.Field<System.String>("BATCHNO");
                        result.CUSTOMERID = row.Field<System.String>("CUSTOMERID");
                        result.FINISHINGLOT = row.Field<System.String>("FINISHINGLOT");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.FINISHINGPROCESS = row.Field<System.String>("FINISHINGPROCESS");
                        result.SND_BARCODE = row.Field<System.String>("SND_BARCODE");
                        result.BEFORE_WIDTH = row.Field<System.Decimal?>("BEFORE_WIDTH");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region CUT_GETCONDITIONBYITEMCODE

        public List<CUT_GETCONDITIONBYITEMCODEResult> CUT_GETCONDITIONBYITEMCODE(CUT_GETCONDITIONBYITEMCODEParameter para)
        {
            List<CUT_GETCONDITIONBYITEMCODEResult> results = new List<CUT_GETCONDITIONBYITEMCODEResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMCODE"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMCODE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "CUT_GETCONDITIONBYITEMCODE",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        CUT_GETCONDITIONBYITEMCODEResult result =
                            new CUT_GETCONDITIONBYITEMCODEResult();

                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.WIDTHBARCODE_MIN = row.Field<System.Decimal?>("WIDTHBARCODE_MIN");
                        result.WIDTHBARCODE_MAX = row.Field<System.Decimal?>("WIDTHBARCODE_MAX");
                        result.DISTANTBARCODE_MIN = row.Field<System.Decimal?>("DISTANTBARCODE_MIN");
                        result.DISTANTBARCODE_MAX = row.Field<System.Decimal?>("DISTANTBARCODE_MAX");
                        result.DISTANTLINE_MIN = row.Field<System.Decimal?>("DISTANTLINE_MIN");
                        result.DISTANTLINE_MAX = row.Field<System.Decimal?>("DISTANTLINE_MAX");
                        result.DENSITYWARP_MIN = row.Field<System.Decimal?>("DENSITYWARP_MIN");
                        result.DENSITYWARP_MAX = row.Field<System.Decimal?>("DENSITYWARP_MAX");
                        result.DENSITYWEFT_MIN = row.Field<System.Decimal?>("DENSITYWEFT_MIN");
                        result.DENSITYWEFT_MAX = row.Field<System.Decimal?>("DENSITYWEFT_MAX");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.SPEED_MARGIN = row.Field<System.Decimal?>("SPEED_MARGIN");
                        result.AFTER_WIDTH = row.Field<System.Decimal?>("AFTER_WIDTH");
                        result.SHOWSELVAGE = row.Field<System.String>("SHOWSELVAGE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region CUS_GETLIST

        public List<CUS_GETLISTResult> CUS_GETLIST(CUS_GETLISTParameter para)
        {
            List<CUS_GETLISTResult> results = new List<CUS_GETLISTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
            };
            object[] paraValues = new object[]
            {
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "CUS_GETLIST",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        CUS_GETLISTResult result =
                            new CUS_GETLISTResult();

                        result.CUSTOMERID = row.Field<System.String>("CUSTOMERID");
                        result.CUSTOMERNAME = row.Field<System.String>("CUSTOMERNAME");
                        result.METHODID = row.Field<System.String>("METHODID");
                        result.CREATEDATE = row.Field<System.DateTime?>("CREATEDATE");
                        result.CREATEBY = row.Field<System.String>("CREATEBY");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region CUS_GETITEMGOODBYCUSTOMER

        public List<CUS_GETITEMGOODBYCUSTOMERResult> CUS_GETITEMGOODBYCUSTOMER(CUS_GETITEMGOODBYCUSTOMERParameter para)
        {
            List<CUS_GETITEMGOODBYCUSTOMERResult> results = new List<CUS_GETITEMGOODBYCUSTOMERResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_CUSTOMERID"
            };
            object[] paraValues = new object[]
            {
                para.P_CUSTOMERID
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "CUS_GETITEMGOODBYCUSTOMER",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        CUS_GETITEMGOODBYCUSTOMERResult result =
                            new CUS_GETITEMGOODBYCUSTOMERResult();

                        result.CUSTOMERID = row.Field<System.String>("CUSTOMERID");
                        result.ITM_CODE = row.Field<System.String>("ITM_CODE");
                        result.PARTNO = row.Field<System.String>("PARTNO");
                        result.FABRIC = row.Field<System.String>("FABRIC");
                        result.LENGTH = row.Field<System.Decimal?>("LENGTH");
                        result.DENSITY_W = row.Field<System.String>("DENSITY_W");
                        result.DENSITY_F = row.Field<System.String>("DENSITY_F");
                        result.WIDTH_ALL = row.Field<System.String>("WIDTH_ALL");
                        result.WIDTH_PIN = row.Field<System.String>("WIDTH_PIN");
                        result.WIDTH_COAT = row.Field<System.String>("WIDTH_COAT");
                        result.TRIM_L = row.Field<System.String>("TRIM_L");
                        result.TRIM_R = row.Field<System.String>("TRIM_R");
                        result.FLOPPY_L = row.Field<System.String>("FLOPPY_L");
                        result.FLOPPY_R = row.Field<System.String>("FLOPPY_R");
                        result.HARDNESS_L = row.Field<System.String>("HARDNESS_L");
                        result.HARDNESS_C = row.Field<System.String>("HARDNESS_C");
                        result.HARDNESS_R = row.Field<System.String>("HARDNESS_R");
                        result.UNWINDER = row.Field<System.String>("UNWINDER");
                        result.WINDER = row.Field<System.String>("WINDER");
                        result.FINISHINGCUSTOMER = row.Field<System.String>("FINISHINGCUSTOMER");
                        result.DESCRIPTION = row.Field<System.String>("DESCRIPTION");
                        result.SUPPLIERCODE = row.Field<System.String>("SUPPLIERCODE");
                        result.WIDTH = row.Field<System.String>("WIDTH");
                        result.WIDTH_SELVAGEL = row.Field<System.String>("WIDTH_SELVAGEL");
                        result.WIDTH_SELVAGER = row.Field<System.String>("WIDTH_SELVAGER");
                        result.RESETSTARTLENGTH = row.Field<System.Decimal?>("RESETSTARTLENGTH");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region CONDITION_WARPING

        public CONDITION_WARPINGResult CONDITION_WARPING(CONDITION_WARPINGParameter para)
        {
            CONDITION_WARPINGResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITMPREPARE", 
                "P_MCNO", 
                "P_ITMYARN", 
                "P_WARPERENDS", 
                "P_MAXLENGTH", 
                "P_MINLENGTH", 
                "P_WAXING", 
                "P_COMBTYPE", 
                "P_COMBPITCH", 
                "P_KEBAYARN", 
                "P_NOWARPBEAM", 
                "P_HARDNESS_MAX", 
                "P_HARDNESS_MIN", 
                "P_SPEED", 
                "P_SPEED_MARGIN", 
                "P_YARNTENSION", 
                "P_YARNTENSION_MARGIN", 
                "P_WINDTENSION", 
                "P_WINDTENSION_MARGIN", 
                "P_OPERATOR"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMPREPARE, 
                para.P_MCNO, 
                para.P_ITMYARN, 
                para.P_WARPERENDS, 
                para.P_MAXLENGTH, 
                para.P_MINLENGTH, 
                para.P_WAXING, 
                para.P_COMBTYPE, 
                para.P_COMBPITCH, 
                para.P_KEBAYARN, 
                para.P_NOWARPBEAM, 
                para.P_HARDNESS_MAX, 
                para.P_HARDNESS_MIN, 
                para.P_SPEED, 
                para.P_SPEED_MARGIN, 
                para.P_YARNTENSION, 
                para.P_YARNTENSION_MARGIN, 
                para.P_WINDTENSION, 
                para.P_WINDTENSION_MARGIN, 
                para.P_OPERATOR
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "CONDITION_WARPING",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new CONDITION_WARPINGResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region CONDITION_FINISHINGSCOURING

        public CONDITION_FINISHINGSCOURINGResult CONDITION_FINISHINGSCOURING(CONDITION_FINISHINGSCOURINGParameter para)
        {
            CONDITION_FINISHINGSCOURINGResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITEMCODE", 
                "P_SCOURINGNO", 
                "P_CHEM", 
                "P_CHEM_MARGIN", 
                "P_WASH1", 
                "P_WASH1_MARGIN", 
                "P_WASH2", 
                "P_WASH2_MARGIN", 
                "P_HOTFLUE", 
                "P_HOTFLUE_MARGIN", 
                "P_ROOMTEMP", 
                "P_ROOMTEMP_MARGIN", 
                "P_SPEED", 
                "P_SPEED_MARGIN", 
                "P_MAINFRAME", 
                "P_MAINFRAME_MARGIN", 
                "P_WIDTHBE", 
                "P_WIDTHBE_MARGIN", 
                "P_WIDTHAF", 
                "P_WIDTHAF_MARGIN", 
                "P_PIN2PIN", 
                "P_PIN2PIN_MARGIN", 
                "P_HUMIDITYMAX", 
                "P_HUMIDITYMIN", 
                "P_OPERATOR"
            };
            object[] paraValues = new object[]
            {
                para.P_ITEMCODE, 
                para.P_SCOURINGNO, 
                para.P_CHEM, 
                para.P_CHEM_MARGIN, 
                para.P_WASH1, 
                para.P_WASH1_MARGIN, 
                para.P_WASH2, 
                para.P_WASH2_MARGIN, 
                para.P_HOTFLUE, 
                para.P_HOTFLUE_MARGIN, 
                para.P_ROOMTEMP, 
                para.P_ROOMTEMP_MARGIN, 
                para.P_SPEED, 
                para.P_SPEED_MARGIN, 
                para.P_MAINFRAME, 
                para.P_MAINFRAME_MARGIN, 
                para.P_WIDTHBE, 
                para.P_WIDTHBE_MARGIN, 
                para.P_WIDTHAF, 
                para.P_WIDTHAF_MARGIN, 
                para.P_PIN2PIN, 
                para.P_PIN2PIN_MARGIN, 
                para.P_HUMIDITYMAX, 
                para.P_HUMIDITYMIN, 
                para.P_OPERATOR
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "CONDITION_FINISHINGSCOURING",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new CONDITION_FINISHINGSCOURINGResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region CONDITION_FINISHINGDRYER

        public CONDITION_FINISHINGDRYERResult CONDITION_FINISHINGDRYER(CONDITION_FINISHINGDRYERParameter para)
        {
            CONDITION_FINISHINGDRYERResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITEMCODE", 
                "P_WIDTH_BE_HEAT_MAX", 
                "P_WIDTH_BE_HEAT_MIN", 
                "P_ACCPRESURE", 
                "P_ASSTENSION", 
                "P_ACCARIDENSER", 
                "P_CHIFROT", 
                "P_CHIREAR", 
                "P_DRYERTEMP", 
                "P_DRYERTEMP_MARGIN", 
                "P_SPEED", 
                "P_SPEED_MARGIN", 
                "P_STEAMPRESURE", 
                "P_DRYERUPCIRCUFAN", 
                "P_EXHAUSTFAN", 
                "P_WIDTH_AF_HEAT", 
                "P_WIDTH_AF_HEAT_MARGIN", 
                "P_HUMIDITYMAX", 
                "P_HUMIDITYMIN", 
                "P_OPERATOR", 
                "P_MC"
            };
            object[] paraValues = new object[]
            {
                para.P_ITEMCODE, 
                para.P_WIDTH_BE_HEAT_MAX, 
                para.P_WIDTH_BE_HEAT_MIN, 
                para.P_ACCPRESURE, 
                para.P_ASSTENSION, 
                para.P_ACCARIDENSER, 
                para.P_CHIFROT, 
                para.P_CHIREAR, 
                para.P_DRYERTEMP, 
                para.P_DRYERTEMP_MARGIN, 
                para.P_SPEED, 
                para.P_SPEED_MARGIN, 
                para.P_STEAMPRESURE, 
                para.P_DRYERUPCIRCUFAN, 
                para.P_EXHAUSTFAN, 
                para.P_WIDTH_AF_HEAT, 
                para.P_WIDTH_AF_HEAT_MARGIN, 
                para.P_HUMIDITYMAX, 
                para.P_HUMIDITYMIN, 
                para.P_OPERATOR, 
                para.P_MC
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "CONDITION_FINISHINGDRYER",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new CONDITION_FINISHINGDRYERResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region CONDITION_FINISHINGCOATING

        public CONDITION_FINISHINGCOATINGResult CONDITION_FINISHINGCOATING(CONDITION_FINISHINGCOATINGParameter para)
        {
            CONDITION_FINISHINGCOATINGResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITEMCODE", 
                "P_COATNO", 
                "P_CHEM", 
                "P_CHEM_MARGIN", 
                "P_WASH1", 
                "P_WASH1_MARGIN", 
                "P_WASH2", 
                "P_WASH2_MARGIN", 
                "P_HOTFLUE", 
                "P_HOTFLUE_MARGIN", 
                "P_BE_COAT_MAX", 
                "P_BE_COAT_MIN", 
                "P_ROOMTEMP", 
                "P_ROOMTEMP_MARGIN", 
                "P_FANRPM", 
                "P_FANRPM_MARGIN", 
                "P_EXFAN_FRONT_BACK", 
                "P_EXFAN_MARGIN", 
                "P_EXFAN_MIDDLE", 
                "P_ANGLEKNIFE", 
                "P_BLADENO", 
                "P_BLADEDIRECTION", 
                "P_PATHLINE", 
                "P_FEEDIN_MAX", 
                "P_FEEDIN_MIN", 
                "P_TENSION_UP", 
                "P_TENSION_UP_MARGIN", 
                "P_TENSION_DOWN", 
                "P_TENSION_DOWN_MARGIN", 
                "P_FRAME_FORN", 
                "P_FRAME_TENTER", 
                "P_OVERFEED", 
                "P_SPEED", 
                "P_SPEED_MARGIN", 
                "P_WIDTHCOAT", 
                "P_WIDTHCOATALL_MAX", 
                "P_WIDTHCOATALL_MIN", 
                "P_COATINGWEIGTH_MAX", 
                "P_COATINGWEIGTH_MIN", 
                "P_RATIONSILICONE", 
                "P_HUMIDITYMAX", 
                "P_HUMIDITYMIN", 
                "P_OPERATOR"
            };
            object[] paraValues = new object[]
            {
                para.P_ITEMCODE, 
                para.P_COATNO, 
                para.P_CHEM, 
                para.P_CHEM_MARGIN, 
                para.P_WASH1, 
                para.P_WASH1_MARGIN, 
                para.P_WASH2, 
                para.P_WASH2_MARGIN, 
                para.P_HOTFLUE, 
                para.P_HOTFLUE_MARGIN, 
                para.P_BE_COAT_MAX, 
                para.P_BE_COAT_MIN, 
                para.P_ROOMTEMP, 
                para.P_ROOMTEMP_MARGIN, 
                para.P_FANRPM, 
                para.P_FANRPM_MARGIN, 
                para.P_EXFAN_FRONT_BACK, 
                para.P_EXFAN_MARGIN, 
                para.P_EXFAN_MIDDLE, 
                para.P_ANGLEKNIFE, 
                para.P_BLADENO, 
                para.P_BLADEDIRECTION, 
                para.P_PATHLINE, 
                para.P_FEEDIN_MAX, 
                para.P_FEEDIN_MIN, 
                para.P_TENSION_UP, 
                para.P_TENSION_UP_MARGIN, 
                para.P_TENSION_DOWN, 
                para.P_TENSION_DOWN_MARGIN, 
                para.P_FRAME_FORN, 
                para.P_FRAME_TENTER, 
                para.P_OVERFEED, 
                para.P_SPEED, 
                para.P_SPEED_MARGIN, 
                para.P_WIDTHCOAT, 
                para.P_WIDTHCOATALL_MAX, 
                para.P_WIDTHCOATALL_MIN, 
                para.P_COATINGWEIGTH_MAX, 
                para.P_COATINGWEIGTH_MIN, 
                para.P_RATIONSILICONE, 
                para.P_HUMIDITYMAX, 
                para.P_HUMIDITYMIN, 
                para.P_OPERATOR
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "CONDITION_FINISHINGCOATING",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new CONDITION_FINISHINGCOATINGResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region CONDITION_DRAWING

        public CONDITION_DRAWINGResult CONDITION_DRAWING(CONDITION_DRAWINGParameter para)
        {
            CONDITION_DRAWINGResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITMPREPARE", 
                "P_NOYARN", 
                "P_REEDTYPE", 
                "P_NODENT", 
                "P_PITCH", 
                "P_AIRSPACE", 
                "P_OPERATOR"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMPREPARE, 
                para.P_NOYARN, 
                para.P_REEDTYPE, 
                para.P_NODENT, 
                para.P_PITCH, 
                para.P_AIRSPACE, 
                para.P_OPERATOR
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "CONDITION_DRAWING",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new CONDITION_DRAWINGResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region CONDITION_BEAMING

        public CONDITION_BEAMINGResult CONDITION_BEAMING(CONDITION_BEAMINGParameter para)
        {
            CONDITION_BEAMINGResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ITMPREPARE", 
                "P_NOWARPBEAM", 
                "P_TOTALYARN", 
                "P_TOTALKEBA", 
                "P_BEAMLENGTH", 
                "P_HARDNESS_MAX", 
                "P_HARDNESS_MIN", 
                "P_BEAMWIDTH_MAX", 
                "P_BEAMWIDTH_MIN", 
                "P_SPEED_MAX", 
                "P_SPEED_MIN", 
                "P_YARNTENSION_MAX", 
                "P_YARNTENSION_MIN", 
                "P_WINDTENSION_MAX", 
                "P_WINDTENSION_MIN", 
                "P_COMBTYPE", 
                "P_COMBPITCH", 
                "P_TOTALBEAM", 
                "P_OPERATOR"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMPREPARE, 
                para.P_NOWARPBEAM, 
                para.P_TOTALYARN, 
                para.P_TOTALKEBA, 
                para.P_BEAMLENGTH, 
                para.P_HARDNESS_MAX, 
                para.P_HARDNESS_MIN, 
                para.P_BEAMWIDTH_MAX, 
                para.P_BEAMWIDTH_MIN, 
                para.P_SPEED_MAX, 
                para.P_SPEED_MIN, 
                para.P_YARNTENSION_MAX, 
                para.P_YARNTENSION_MIN, 
                para.P_WINDTENSION_MAX, 
                para.P_WINDTENSION_MIN, 
                para.P_COMBTYPE, 
                para.P_COMBPITCH, 
                para.P_TOTALBEAM, 
                para.P_OPERATOR
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "CONDITION_BEAMING",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new CONDITION_BEAMINGResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region BEAM_UPDATEBEAMNO

        public BEAM_UPDATEBEAMNOResult BEAM_UPDATEBEAMNO(BEAM_UPDATEBEAMNOParameter para)
        {
            BEAM_UPDATEBEAMNOResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_BEAMNO", 
                "P_ENDDATE", 
                "P_STATUS", 
                "P_FLAG"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMNO, 
                para.P_ENDDATE, 
                para.P_STATUS, 
                para.P_FLAG
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "BEAM_UPDATEBEAMNO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new BEAM_UPDATEBEAMNOResult();
                if (ret.Result.OutParameters["R_RESULT"] != DBNull.Value)
                    result.R_RESULT = (System.String)ret.Result.OutParameters["R_RESULT"];
            }

            return result;
        }

        #endregion

        #region BEAM_UPDATEBEAMDETAIL

        public BEAM_UPDATEBEAMDETAILResult BEAM_UPDATEBEAMDETAIL(BEAM_UPDATEBEAMDETAILParameter para)
        {
            BEAM_UPDATEBEAMDETAILResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_BEAMERNO", 
                "P_BEAMLOT", 
                "P_LENGTH", 
                "P_ENDDATE", 
                "P_SPEED", 
                "P_HARDL", 
                "P_HARDN", 
                "P_HARDR", 
                "P_STANDTENSION", 
                "P_WINDTENSION", 
                "P_INSIDE", 
                "P_OUTSIDE", 
                "P_FULL", 
                "P_DOFFBY", 
                "P_FLAG", 
                "P_REMARK", 
                "P_TENSION_ST1", 
                "P_TENSION_ST2", 
                "P_TENSION_ST3", 
                "P_TENSION_ST4", 
                "P_TENSION_ST5", 
                "P_TENSION_ST6", 
                "P_TENSION_ST7", 
                "P_TENSION_ST8", 
                "P_TENSION_ST9", 
                "P_TENSION_ST10", 
                "P_OPERATOR"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERNO, 
                para.P_BEAMLOT, 
                para.P_LENGTH, 
                para.P_ENDDATE, 
                para.P_SPEED, 
                para.P_HARDL, 
                para.P_HARDN, 
                para.P_HARDR, 
                para.P_STANDTENSION, 
                para.P_WINDTENSION, 
                para.P_INSIDE, 
                para.P_OUTSIDE, 
                para.P_FULL, 
                para.P_DOFFBY, 
                para.P_FLAG, 
                para.P_REMARK, 
                para.P_TENSION_ST1, 
                para.P_TENSION_ST2, 
                para.P_TENSION_ST3, 
                para.P_TENSION_ST4, 
                para.P_TENSION_ST5, 
                para.P_TENSION_ST6, 
                para.P_TENSION_ST7, 
                para.P_TENSION_ST8, 
                para.P_TENSION_ST9, 
                para.P_TENSION_ST10, 
                para.P_OPERATOR
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "BEAM_UPDATEBEAMDETAIL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new BEAM_UPDATEBEAMDETAILResult();
            }

            return result;
        }

        #endregion

        #region BEAM_TRANFERSLIP

        public List<BEAM_TRANFERSLIPResult> BEAM_TRANFERSLIP(BEAM_TRANFERSLIPParameter para)
        {
            List<BEAM_TRANFERSLIPResult> results = new List<BEAM_TRANFERSLIPResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "BEAM_TRANFERSLIP",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        BEAM_TRANFERSLIPResult result =
                            new BEAM_TRANFERSLIPResult();

                        result.BEAMERNO = row.Field<System.String>("BEAMERNO");
                        result.BEAMLOT = row.Field<System.String>("BEAMLOT");
                        result.BEAMNO = row.Field<System.String>("BEAMNO");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.LENGTH = row.Field<System.Decimal?>("LENGTH");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.BEAMSTANDTENSION = row.Field<System.Decimal?>("BEAMSTANDTENSION");
                        result.WINDINGTENSION = row.Field<System.Decimal?>("WINDINGTENSION");
                        result.HARDNESS_L = row.Field<System.Decimal?>("HARDNESS_L");
                        result.HARDNESS_N = row.Field<System.Decimal?>("HARDNESS_N");
                        result.HARDNESS_R = row.Field<System.Decimal?>("HARDNESS_R");
                        result.INSIDE_WIDTH = row.Field<System.Decimal?>("INSIDE_WIDTH");
                        result.OUTSIDE_WIDTH = row.Field<System.Decimal?>("OUTSIDE_WIDTH");
                        result.FULL_WIDTH = row.Field<System.Decimal?>("FULL_WIDTH");
                        result.STARTBY = row.Field<System.String>("STARTBY");
                        result.DOFFBY = row.Field<System.String>("DOFFBY");
                        result.BEAMMC = row.Field<System.String>("BEAMMC");
                        result.FLAG = row.Field<System.String>("FLAG");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.TENSION_ST1 = row.Field<System.Decimal?>("TENSION_ST1");
                        result.TENSION_ST2 = row.Field<System.Decimal?>("TENSION_ST2");
                        result.TENSION_ST3 = row.Field<System.Decimal?>("TENSION_ST3");
                        result.TENSION_ST4 = row.Field<System.Decimal?>("TENSION_ST4");
                        result.TENSION_ST5 = row.Field<System.Decimal?>("TENSION_ST5");
                        result.TENSION_ST6 = row.Field<System.Decimal?>("TENSION_ST6");
                        result.TENSION_ST7 = row.Field<System.Decimal?>("TENSION_ST7");
                        result.TENSION_ST8 = row.Field<System.Decimal?>("TENSION_ST8");
                        result.TENSION_ST9 = row.Field<System.Decimal?>("TENSION_ST9");
                        result.TENSION_ST10 = row.Field<System.Decimal?>("TENSION_ST10");
                        result.EDITBY = row.Field<System.String>("EDITBY");
                        result.OLDBEAMNO = row.Field<System.String>("OLDBEAMNO");
                        result.EDITDATE = row.Field<System.DateTime?>("EDITDATE");
                        result.ITM_PREPARE = row.Field<System.String>("ITM_PREPARE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region BEAM_SEARCHBEAMRECORD

        public List<BEAM_SEARCHBEAMRECORDResult> BEAM_SEARCHBEAMRECORD(BEAM_SEARCHBEAMRECORDParameter para)
        {
            List<BEAM_SEARCHBEAMRECORDResult> results = new List<BEAM_SEARCHBEAMRECORDResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMERNO", 
                "P_MC", 
                "P_ITMPREPARE", 
                "P_STARTDATE"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERNO, 
                para.P_MC, 
                para.P_ITMPREPARE, 
                para.P_STARTDATE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "BEAM_SEARCHBEAMRECORD",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        BEAM_SEARCHBEAMRECORDResult result =
                            new BEAM_SEARCHBEAMRECORDResult();

                        result.BEAMERNO = row.Field<System.String>("BEAMERNO");
                        result.ITM_PREPARE = row.Field<System.String>("ITM_PREPARE");
                        result.TOTALYARN = row.Field<System.Decimal?>("TOTALYARN");
                        result.TOTALKEBA = row.Field<System.Decimal?>("TOTALKEBA");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.CREATEBY = row.Field<System.String>("CREATEBY");
                        result.CREATEDATE = row.Field<System.DateTime?>("CREATEDATE");
                        result.STATUS = row.Field<System.String>("STATUS");
                        result.FINISHFLAG = row.Field<System.String>("FINISHFLAG");
                        result.MCNO = row.Field<System.String>("MCNO");
                        result.WARPHEADNO = row.Field<System.String>("WARPHEADNO");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.ADJUSTKEBA = row.Field<System.Decimal?>("ADJUSTKEBA");
                        result.REMARK = row.Field<System.String>("REMARK");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region BEAM_INSERTBEAMNO

        public BEAM_INSERTBEAMNOResult BEAM_INSERTBEAMNO(BEAM_INSERTBEAMNOParameter para)
        {
            BEAM_INSERTBEAMNOResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_BEAMNO", 
                "P_WARPERHEADNO", 
                "P_ITMPREPARE", 
                "P_PRODUCTID", 
                "P_MCNO", 
                "P_TOTALYARN", 
                "P_TOTALKEBA", 
                "P_OPERATOR", 
                "P_ADJUSTKEBA", 
                "P_REMARK"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMNO, 
                para.P_WARPERHEADNO, 
                para.P_ITMPREPARE, 
                para.P_PRODUCTID, 
                para.P_MCNO, 
                para.P_TOTALYARN, 
                para.P_TOTALKEBA, 
                para.P_OPERATOR, 
                para.P_ADJUSTKEBA, 
                para.P_REMARK
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "BEAM_INSERTBEAMNO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new BEAM_INSERTBEAMNOResult();
                if (ret.Result.OutParameters["R_RESULT"] != DBNull.Value)
                    result.R_RESULT = (System.String)ret.Result.OutParameters["R_RESULT"];
            }

            return result;
        }

        #endregion

        #region BEAM_INSERTBEAMMCSTOP

        public BEAM_INSERTBEAMMCSTOPResult BEAM_INSERTBEAMMCSTOP(BEAM_INSERTBEAMMCSTOPParameter para)
        {
            BEAM_INSERTBEAMMCSTOPResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_BEAMERNO", 
                "P_BEAMLOT", 
                "P_REASON", 
                "P_LENGTH", 
                "P_OTHER", 
                "P_OPERATOR"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERNO, 
                para.P_BEAMLOT, 
                para.P_REASON, 
                para.P_LENGTH, 
                para.P_OTHER, 
                para.P_OPERATOR
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "BEAM_INSERTBEAMMCSTOP",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new BEAM_INSERTBEAMMCSTOPResult();
                if (ret.Result.OutParameters["R_RESULT"] != DBNull.Value)
                    result.R_RESULT = (System.String)ret.Result.OutParameters["R_RESULT"];
            }

            return result;
        }

        #endregion

        #region BEAM_INSERTBEAMINGDETAIL

        public BEAM_INSERTBEAMINGDETAILResult BEAM_INSERTBEAMINGDETAIL(BEAM_INSERTBEAMINGDETAILParameter para)
        {
            BEAM_INSERTBEAMINGDETAILResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_BEAMERNO", 
                "P_MCNO", 
                "P_BEAMNO", 
                "P_STARTDATE", 
                "P_STARTBY"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERNO, 
                para.P_MCNO, 
                para.P_BEAMNO, 
                para.P_STARTDATE, 
                para.P_STARTBY
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "BEAM_INSERTBEAMINGDETAIL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new BEAM_INSERTBEAMINGDETAILResult();
                if (ret.Result.OutParameters["R_BEAMLOT"] != DBNull.Value)
                    result.R_BEAMLOT = (System.String)ret.Result.OutParameters["R_BEAMLOT"];
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region BEAM_INSERTBEAMERROLLSETTING

        public BEAM_INSERTBEAMERROLLSETTINGResult BEAM_INSERTBEAMERROLLSETTING(BEAM_INSERTBEAMERROLLSETTINGParameter para)
        {
            BEAM_INSERTBEAMERROLLSETTINGResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_BEAMERNO", 
                "P_WARPERHEADNO", 
                "P_WARPLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERNO, 
                para.P_WARPERHEADNO, 
                para.P_WARPLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "BEAM_INSERTBEAMERROLLSETTING",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new BEAM_INSERTBEAMERROLLSETTINGResult();
            }

            return result;
        }

        #endregion

        #region BEAM_GETWARPROLLBYBEAMERNO

        public List<BEAM_GETWARPROLLBYBEAMERNOResult> BEAM_GETWARPROLLBYBEAMERNO(BEAM_GETWARPROLLBYBEAMERNOParameter para)
        {
            List<BEAM_GETWARPROLLBYBEAMERNOResult> results = new List<BEAM_GETWARPROLLBYBEAMERNOResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMERNO"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "BEAM_GETWARPROLLBYBEAMERNO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        BEAM_GETWARPROLLBYBEAMERNOResult result =
                            new BEAM_GETWARPROLLBYBEAMERNOResult();

                        result.BEAMERNO = row.Field<System.String>("BEAMERNO");
                        result.WARPHEADNO = row.Field<System.String>("WARPHEADNO");
                        result.WARPERLOT = row.Field<System.String>("WARPERLOT");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region BEAM_GETWARPNOBYITEMPREPARE

        public List<BEAM_GETWARPNOBYITEMPREPAREResult> BEAM_GETWARPNOBYITEMPREPARE(BEAM_GETWARPNOBYITEMPREPAREParameter para)
        {
            List<BEAM_GETWARPNOBYITEMPREPAREResult> results = new List<BEAM_GETWARPNOBYITEMPREPAREResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMPREPARE"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMPREPARE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "BEAM_GETWARPNOBYITEMPREPARE",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        BEAM_GETWARPNOBYITEMPREPAREResult result =
                            new BEAM_GETWARPNOBYITEMPREPAREResult();

                        result.WARPHEADNO = row.Field<System.String>("WARPHEADNO");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.WARPMC = row.Field<System.String>("WARPMC");
                        result.ACTUALCH = row.Field<System.Decimal?>("ACTUALCH");
                        result.TOTALBEAM = row.Field<System.Decimal?>("TOTALBEAM");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region BEAM_GETSTOPREASONBYBEAMLOT

        public List<BEAM_GETSTOPREASONBYBEAMLOTResult> BEAM_GETSTOPREASONBYBEAMLOT(BEAM_GETSTOPREASONBYBEAMLOTParameter para)
        {
            List<BEAM_GETSTOPREASONBYBEAMLOTResult> results = new List<BEAM_GETSTOPREASONBYBEAMLOTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMERNO", 
                "P_BEAMLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERNO, 
                para.P_BEAMLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "BEAM_GETSTOPREASONBYBEAMLOT",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        BEAM_GETSTOPREASONBYBEAMLOTResult result =
                            new BEAM_GETSTOPREASONBYBEAMLOTResult();

                        result.BEAMERNO = row.Field<System.String>("BEAMERNO");
                        result.BEAMLOT = row.Field<System.String>("BEAMLOT");
                        result.REASON = row.Field<System.String>("REASON");
                        result.LENGTH = row.Field<System.Decimal?>("LENGTH");
                        result.OPERATOR = row.Field<System.String>("OPERATOR");
                        result.OTHERFLAG = row.Field<System.String>("OTHERFLAG");
                        result.CREATEDATE = row.Field<System.DateTime?>("CREATEDATE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region BEAM_GETSPECBYCHOPNO

        public List<BEAM_GETSPECBYCHOPNOResult> BEAM_GETSPECBYCHOPNO(BEAM_GETSPECBYCHOPNOParameter para)
        {
            List<BEAM_GETSPECBYCHOPNOResult> results = new List<BEAM_GETSPECBYCHOPNOResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITMPREPARE"
            };
            object[] paraValues = new object[]
            {
                para.P_ITMPREPARE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "BEAM_GETSPECBYCHOPNO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        BEAM_GETSPECBYCHOPNOResult result =
                            new BEAM_GETSPECBYCHOPNOResult();

                        result.CHOPNO = row.Field<System.String>("CHOPNO");
                        result.NOWARPBEAM = row.Field<System.Decimal?>("NOWARPBEAM");
                        result.TOTALYARN = row.Field<System.Decimal?>("TOTALYARN");
                        result.TOTALKEBA = row.Field<System.Decimal?>("TOTALKEBA");
                        result.BEAMLENGTH = row.Field<System.Decimal?>("BEAMLENGTH");
                        result.MAXHARDNESS = row.Field<System.Decimal?>("MAXHARDNESS");
                        result.MINHARDNESS = row.Field<System.Decimal?>("MINHARDNESS");
                        result.MAXBEAMWIDTH = row.Field<System.Decimal?>("MAXBEAMWIDTH");
                        result.MINBEAMWIDTH = row.Field<System.Decimal?>("MINBEAMWIDTH");
                        result.MAXSPEED = row.Field<System.Decimal?>("MAXSPEED");
                        result.MINSPEED = row.Field<System.Decimal?>("MINSPEED");
                        result.MAXYARNTENSION = row.Field<System.Decimal?>("MAXYARNTENSION");
                        result.MINYARNTENSION = row.Field<System.Decimal?>("MINYARNTENSION");
                        result.MAXWINDTENSION = row.Field<System.Decimal?>("MAXWINDTENSION");
                        result.MINWINDTENSION = row.Field<System.Decimal?>("MINWINDTENSION");
                        result.COMBTYPE = row.Field<System.String>("COMBTYPE");
                        result.COMBPITCH = row.Field<System.Decimal?>("COMBPITCH");
                        result.TOTALBEAM = row.Field<System.Decimal?>("TOTALBEAM");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region BEAM_GETINPROCESSLOTBYBEAMNO

        public List<BEAM_GETINPROCESSLOTBYBEAMNOResult> BEAM_GETINPROCESSLOTBYBEAMNO(BEAM_GETINPROCESSLOTBYBEAMNOParameter para)
        {
            List<BEAM_GETINPROCESSLOTBYBEAMNOResult> results = new List<BEAM_GETINPROCESSLOTBYBEAMNOResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMERNO"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "BEAM_GETINPROCESSLOTBYBEAMNO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        BEAM_GETINPROCESSLOTBYBEAMNOResult result =
                            new BEAM_GETINPROCESSLOTBYBEAMNOResult();

                        result.BEAMERNO = row.Field<System.String>("BEAMERNO");
                        result.BEAMLOT = row.Field<System.String>("BEAMLOT");
                        result.BEAMNO = row.Field<System.String>("BEAMNO");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.LENGTH = row.Field<System.Decimal?>("LENGTH");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.BEAMSTANDTENSION = row.Field<System.Decimal?>("BEAMSTANDTENSION");
                        result.WINDINGTENSION = row.Field<System.Decimal?>("WINDINGTENSION");
                        result.HARDNESS_L = row.Field<System.Decimal?>("HARDNESS_L");
                        result.HARDNESS_N = row.Field<System.Decimal?>("HARDNESS_N");
                        result.HARDNESS_R = row.Field<System.Decimal?>("HARDNESS_R");
                        result.INSIDE_WIDTH = row.Field<System.Decimal?>("INSIDE_WIDTH");
                        result.OUTSIDE_WIDTH = row.Field<System.Decimal?>("OUTSIDE_WIDTH");
                        result.FULL_WIDTH = row.Field<System.Decimal?>("FULL_WIDTH");
                        result.STARTBY = row.Field<System.String>("STARTBY");
                        result.DOFFBY = row.Field<System.String>("DOFFBY");
                        result.BEAMMC = row.Field<System.String>("BEAMMC");
                        result.FLAG = row.Field<System.String>("FLAG");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.TENSION_ST1 = row.Field<System.Decimal?>("TENSION_ST1");
                        result.TENSION_ST2 = row.Field<System.Decimal?>("TENSION_ST2");
                        result.TENSION_ST3 = row.Field<System.Decimal?>("TENSION_ST3");
                        result.TENSION_ST4 = row.Field<System.Decimal?>("TENSION_ST4");
                        result.TENSION_ST5 = row.Field<System.Decimal?>("TENSION_ST5");
                        result.TENSION_ST6 = row.Field<System.Decimal?>("TENSION_ST6");
                        result.TENSION_ST7 = row.Field<System.Decimal?>("TENSION_ST7");
                        result.TENSION_ST8 = row.Field<System.Decimal?>("TENSION_ST8");
                        result.TENSION_ST9 = row.Field<System.Decimal?>("TENSION_ST9");
                        result.TENSION_ST10 = row.Field<System.Decimal?>("TENSION_ST10");
                        result.EDITBY = row.Field<System.String>("EDITBY");
                        result.OLDBEAMNO = row.Field<System.String>("OLDBEAMNO");
                        result.EDITDATE = row.Field<System.DateTime?>("EDITDATE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region BEAM_GETBEAMROLLDETAIL

        public List<BEAM_GETBEAMROLLDETAILResult> BEAM_GETBEAMROLLDETAIL(BEAM_GETBEAMROLLDETAILParameter para)
        {
            List<BEAM_GETBEAMROLLDETAILResult> results = new List<BEAM_GETBEAMROLLDETAILResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMROLL"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMROLL
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "BEAM_GETBEAMROLLDETAIL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        BEAM_GETBEAMROLLDETAILResult result =
                            new BEAM_GETBEAMROLLDETAILResult();

                        result.BEAMERNO = row.Field<System.String>("BEAMERNO");
                        result.BEAMLOT = row.Field<System.String>("BEAMLOT");
                        result.BEAMNO = row.Field<System.String>("BEAMNO");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.LENGTH = row.Field<System.Decimal?>("LENGTH");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.BEAMSTANDTENSION = row.Field<System.Decimal?>("BEAMSTANDTENSION");
                        result.WINDINGTENSION = row.Field<System.Decimal?>("WINDINGTENSION");
                        result.HARDNESS_L = row.Field<System.Decimal?>("HARDNESS_L");
                        result.HARDNESS_N = row.Field<System.Decimal?>("HARDNESS_N");
                        result.HARDNESS_R = row.Field<System.Decimal?>("HARDNESS_R");
                        result.INSIDE_WIDTH = row.Field<System.Decimal?>("INSIDE_WIDTH");
                        result.OUTSIDE_WIDTH = row.Field<System.Decimal?>("OUTSIDE_WIDTH");
                        result.FULL_WIDTH = row.Field<System.Decimal?>("FULL_WIDTH");
                        result.STARTBY = row.Field<System.String>("STARTBY");
                        result.DOFFBY = row.Field<System.String>("DOFFBY");
                        result.BEAMMC = row.Field<System.String>("BEAMMC");
                        result.FLAG = row.Field<System.String>("FLAG");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.TENSION_ST1 = row.Field<System.Decimal?>("TENSION_ST1");
                        result.TENSION_ST2 = row.Field<System.Decimal?>("TENSION_ST2");
                        result.TENSION_ST3 = row.Field<System.Decimal?>("TENSION_ST3");
                        result.TENSION_ST4 = row.Field<System.Decimal?>("TENSION_ST4");
                        result.TENSION_ST5 = row.Field<System.Decimal?>("TENSION_ST5");
                        result.TENSION_ST6 = row.Field<System.Decimal?>("TENSION_ST6");
                        result.TENSION_ST7 = row.Field<System.Decimal?>("TENSION_ST7");
                        result.TENSION_ST8 = row.Field<System.Decimal?>("TENSION_ST8");
                        result.TENSION_ST9 = row.Field<System.Decimal?>("TENSION_ST9");
                        result.TENSION_ST10 = row.Field<System.Decimal?>("TENSION_ST10");
                        result.EDITBY = row.Field<System.String>("EDITBY");
                        result.OLDBEAMNO = row.Field<System.String>("OLDBEAMNO");
                        result.EDITDATE = row.Field<System.DateTime?>("EDITDATE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region BEAM_GETBEAMLOTBYBEAMERNO

        public List<BEAM_GETBEAMLOTBYBEAMERNOResult> BEAM_GETBEAMLOTBYBEAMERNO(BEAM_GETBEAMLOTBYBEAMERNOParameter para)
        {
            List<BEAM_GETBEAMLOTBYBEAMERNOResult> results = new List<BEAM_GETBEAMLOTBYBEAMERNOResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMERNO"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "BEAM_GETBEAMLOTBYBEAMERNO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        BEAM_GETBEAMLOTBYBEAMERNOResult result =
                            new BEAM_GETBEAMLOTBYBEAMERNOResult();

                        result.BEAMERNO = row.Field<System.String>("BEAMERNO");
                        result.BEAMLOT = row.Field<System.String>("BEAMLOT");
                        result.BEAMNO = row.Field<System.String>("BEAMNO");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.LENGTH = row.Field<System.Decimal?>("LENGTH");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.BEAMSTANDTENSION = row.Field<System.Decimal?>("BEAMSTANDTENSION");
                        result.WINDINGTENSION = row.Field<System.Decimal?>("WINDINGTENSION");
                        result.HARDNESS_L = row.Field<System.Decimal?>("HARDNESS_L");
                        result.HARDNESS_N = row.Field<System.Decimal?>("HARDNESS_N");
                        result.HARDNESS_R = row.Field<System.Decimal?>("HARDNESS_R");
                        result.INSIDE_WIDTH = row.Field<System.Decimal?>("INSIDE_WIDTH");
                        result.OUTSIDE_WIDTH = row.Field<System.Decimal?>("OUTSIDE_WIDTH");
                        result.FULL_WIDTH = row.Field<System.Decimal?>("FULL_WIDTH");
                        result.STARTBY = row.Field<System.String>("STARTBY");
                        result.DOFFBY = row.Field<System.String>("DOFFBY");
                        result.BEAMMC = row.Field<System.String>("BEAMMC");
                        result.FLAG = row.Field<System.String>("FLAG");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.TENSION_ST1 = row.Field<System.Decimal?>("TENSION_ST1");
                        result.TENSION_ST2 = row.Field<System.Decimal?>("TENSION_ST2");
                        result.TENSION_ST3 = row.Field<System.Decimal?>("TENSION_ST3");
                        result.TENSION_ST4 = row.Field<System.Decimal?>("TENSION_ST4");
                        result.TENSION_ST5 = row.Field<System.Decimal?>("TENSION_ST5");
                        result.TENSION_ST6 = row.Field<System.Decimal?>("TENSION_ST6");
                        result.TENSION_ST7 = row.Field<System.Decimal?>("TENSION_ST7");
                        result.TENSION_ST8 = row.Field<System.Decimal?>("TENSION_ST8");
                        result.TENSION_ST9 = row.Field<System.Decimal?>("TENSION_ST9");
                        result.TENSION_ST10 = row.Field<System.Decimal?>("TENSION_ST10");
                        result.EDITBY = row.Field<System.String>("EDITBY");
                        result.OLDBEAMNO = row.Field<System.String>("OLDBEAMNO");
                        result.EDITDATE = row.Field<System.DateTime?>("EDITDATE");
                        result.KEBA = row.Field<System.Decimal?>("KEBA");
                        result.MISSYARN = row.Field<System.Decimal?>("MISSYARN");
                        result.OTHER = row.Field<System.Decimal?>("OTHER");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region BEAM_GETBEAMERROLLREMARK

        public BEAM_GETBEAMERROLLREMARKResult BEAM_GETBEAMERROLLREMARK(BEAM_GETBEAMERROLLREMARKParameter para)
        {
            BEAM_GETBEAMERROLLREMARKResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_BEAMLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "BEAM_GETBEAMERROLLREMARK",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new BEAM_GETBEAMERROLLREMARKResult();
                if (ret.Result.OutParameters["R_REMARK"] != DBNull.Value)
                    result.R_REMARK = (System.String)ret.Result.OutParameters["R_REMARK"];
            }

            return result;
        }

        #endregion

        #region BEAM_GETBEAMERMCSTATUS

        public List<BEAM_GETBEAMERMCSTATUSResult> BEAM_GETBEAMERMCSTATUS(BEAM_GETBEAMERMCSTATUSParameter para)
        {
            List<BEAM_GETBEAMERMCSTATUSResult> results = new List<BEAM_GETBEAMERMCSTATUSResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_MCNO"
            };
            object[] paraValues = new object[]
            {
                para.P_MCNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "BEAM_GETBEAMERMCSTATUS",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        BEAM_GETBEAMERMCSTATUSResult result =
                            new BEAM_GETBEAMERMCSTATUSResult();

                        result.BEAMERNO = row.Field<System.String>("BEAMERNO");
                        result.ITM_PREPARE = row.Field<System.String>("ITM_PREPARE");
                        result.TOTALYARN = row.Field<System.Decimal?>("TOTALYARN");
                        result.TOTALKEBA = row.Field<System.Decimal?>("TOTALKEBA");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.CREATEBY = row.Field<System.String>("CREATEBY");
                        result.CREATEDATE = row.Field<System.DateTime?>("CREATEDATE");
                        result.STATUS = row.Field<System.String>("STATUS");
                        result.FINISHFLAG = row.Field<System.String>("FINISHFLAG");
                        result.MCNO = row.Field<System.String>("MCNO");
                        result.WARPHEADNO = row.Field<System.String>("WARPHEADNO");
                        result.PRODUCTTYPEID = row.Field<System.String>("PRODUCTTYPEID");
                        result.ADJUSTKEBA = row.Field<System.Decimal?>("ADJUSTKEBA");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.NOWARPBEAM = row.Field<System.Decimal?>("NOWARPBEAM");
                        result.TOTALBEAM = row.Field<System.Decimal?>("TOTALBEAM");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region BEAM_EDITNOBEAM

        public BEAM_EDITNOBEAMResult BEAM_EDITNOBEAM(BEAM_EDITNOBEAMParameter para)
        {
            BEAM_EDITNOBEAMResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_BEAMROLL", 
                "P_OLDNO", 
                "P_NEWNO", 
                "P_OPERATOR"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMROLL, 
                para.P_OLDNO, 
                para.P_NEWNO, 
                para.P_OPERATOR
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "BEAM_EDITNOBEAM",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new BEAM_EDITNOBEAMResult();
                if (ret.Result.OutParameters["R_RESULT"] != DBNull.Value)
                    result.R_RESULT = (System.String)ret.Result.OutParameters["R_RESULT"];
            }

            return result;
        }

        #endregion

        #region BEAM_EDITBEAMERMC

        public BEAM_EDITBEAMERMCResult BEAM_EDITBEAMERMC(BEAM_EDITBEAMERMCParameter para)
        {
            BEAM_EDITBEAMERMCResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_BEAMERNO", 
                "P_BEAMMC", 
                "P_NEWBEAMMC", 
                "P_OPERATOR"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERNO, 
                para.P_BEAMMC, 
                para.P_NEWBEAMMC, 
                para.P_OPERATOR
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "BEAM_EDITBEAMERMC",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new BEAM_EDITBEAMERMCResult();
                if (ret.Result.OutParameters["RESULT"] != DBNull.Value)
                    result.RESULT = (System.String)ret.Result.OutParameters["RESULT"];
            }

            return result;
        }

        #endregion

        #region BEAM_BEAMLIST

        public List<BEAM_BEAMLISTResult> BEAM_BEAMLIST(BEAM_BEAMLISTParameter para)
        {
            List<BEAM_BEAMLISTResult> results = new List<BEAM_BEAMLISTResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMERNO", 
                "P_MC", 
                "P_ITMPREPARE", 
                "P_STARTDATE", 
                "P_ENDDATE"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERNO, 
                para.P_MC, 
                para.P_ITMPREPARE, 
                para.P_STARTDATE, 
                para.P_ENDDATE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "BEAM_BEAMLIST",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        BEAM_BEAMLISTResult result =
                            new BEAM_BEAMLISTResult();

                        result.BEAMERNO = row.Field<System.String>("BEAMERNO");
                        result.BEAMLOT = row.Field<System.String>("BEAMLOT");
                        result.BEAMNO = row.Field<System.String>("BEAMNO");
                        result.STARTDATE = row.Field<System.DateTime?>("STARTDATE");
                        result.ENDDATE = row.Field<System.DateTime?>("ENDDATE");
                        result.LENGTH = row.Field<System.Decimal?>("LENGTH");
                        result.SPEED = row.Field<System.Decimal?>("SPEED");
                        result.BEAMSTANDTENSION = row.Field<System.Decimal?>("BEAMSTANDTENSION");
                        result.WINDINGTENSION = row.Field<System.Decimal?>("WINDINGTENSION");
                        result.HARDNESS_L = row.Field<System.Decimal?>("HARDNESS_L");
                        result.HARDNESS_N = row.Field<System.Decimal?>("HARDNESS_N");
                        result.HARDNESS_R = row.Field<System.Decimal?>("HARDNESS_R");
                        result.INSIDE_WIDTH = row.Field<System.Decimal?>("INSIDE_WIDTH");
                        result.OUTSIDE_WIDTH = row.Field<System.Decimal?>("OUTSIDE_WIDTH");
                        result.FULL_WIDTH = row.Field<System.Decimal?>("FULL_WIDTH");
                        result.STARTBY = row.Field<System.String>("STARTBY");
                        result.DOFFBY = row.Field<System.String>("DOFFBY");
                        result.BEAMMC = row.Field<System.String>("BEAMMC");
                        result.FLAG = row.Field<System.String>("FLAG");
                        result.REMARK = row.Field<System.String>("REMARK");
                        result.TENSION_ST1 = row.Field<System.Decimal?>("TENSION_ST1");
                        result.TENSION_ST2 = row.Field<System.Decimal?>("TENSION_ST2");
                        result.TENSION_ST3 = row.Field<System.Decimal?>("TENSION_ST3");
                        result.TENSION_ST4 = row.Field<System.Decimal?>("TENSION_ST4");
                        result.TENSION_ST5 = row.Field<System.Decimal?>("TENSION_ST5");
                        result.TENSION_ST6 = row.Field<System.Decimal?>("TENSION_ST6");
                        result.TENSION_ST7 = row.Field<System.Decimal?>("TENSION_ST7");
                        result.TENSION_ST8 = row.Field<System.Decimal?>("TENSION_ST8");
                        result.TENSION_ST9 = row.Field<System.Decimal?>("TENSION_ST9");
                        result.TENSION_ST10 = row.Field<System.Decimal?>("TENSION_ST10");
                        result.EDITBY = row.Field<System.String>("EDITBY");
                        result.OLDBEAMNO = row.Field<System.String>("OLDBEAMNO");
                        result.EDITDATE = row.Field<System.DateTime?>("EDITDATE");
                        result.ITM_PREPARE = row.Field<System.String>("ITM_PREPARE");
                        result.WARPHEADNO = row.Field<System.String>("WARPHEADNO");
                        result.TOTALYARN = row.Field<System.Decimal?>("TOTALYARN");
                        result.TOTALKEBA = row.Field<System.Decimal?>("TOTALKEBA");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region PCKPRFTP_D365_UPDATESCAN

        public PCKPRFTP_D365_UPDATESCANResult PCKPRFTP_D365_UPDATESCAN(PCKPRFTP_D365_UPDATESCANParameter para)
        {
            PCKPRFTP_D365_UPDATESCANResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_INVNO", 
                "P_CDEL0", 
                "P_SCANBY", 
                "P_RUNNO"
            };
            object[] paraValues = new object[]
            {
                para.P_INVNO, 
                para.P_CDEL0, 
                para.P_SCANBY, 
                para.P_RUNNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "PCKPRFTP_D365_UPDATESCAN",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new PCKPRFTP_D365_UPDATESCANResult();
                if (ret.Result.OutParameters["R_RESULT"] != DBNull.Value)
                    result.R_RESULT = (System.String)ret.Result.OutParameters["R_RESULT"];
            }

            return result;
        }

        #endregion

        #region PCKPRFTP_D365_UPDATERUNNO

        public PCKPRFTP_D365_UPDATERUNNOResult PCKPRFTP_D365_UPDATERUNNO(PCKPRFTP_D365_UPDATERUNNOParameter para)
        {
            PCKPRFTP_D365_UPDATERUNNOResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_INVNO", 
                "P_CDEL0", 
                "P_RUNNO", 
                "P_EDITBY", 
                "P_INUSE"
            };
            object[] paraValues = new object[]
            {
                para.P_INVNO, 
                para.P_CDEL0, 
                para.P_RUNNO, 
                para.P_EDITBY, 
                para.P_INUSE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "PCKPRFTP_D365_UPDATERUNNO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new PCKPRFTP_D365_UPDATERUNNOResult();
                if (ret.Result.OutParameters["R_RESULT"] != DBNull.Value)
                    result.R_RESULT = (System.String)ret.Result.OutParameters["R_RESULT"];
            }

            return result;
        }

        #endregion

        #region PCKPRFTP_D365_UPDATEINUSE

        public PCKPRFTP_D365_UPDATEINUSEResult PCKPRFTP_D365_UPDATEINUSE(PCKPRFTP_D365_UPDATEINUSEParameter para)
        {
            PCKPRFTP_D365_UPDATEINUSEResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_INVNO", 
                "P_CDEL0", 
                "P_EDITBY", 
                "P_INUSE"
            };
            object[] paraValues = new object[]
            {
                para.P_INVNO, 
                para.P_CDEL0, 
                para.P_EDITBY, 
                para.P_INUSE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "PCKPRFTP_D365_UPDATEINUSE",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new PCKPRFTP_D365_UPDATEINUSEResult();
                if (ret.Result.OutParameters["R_RESULT"] != DBNull.Value)
                    result.R_RESULT = (System.String)ret.Result.OutParameters["R_RESULT"];
            }

            return result;
        }

        #endregion

        #region PCKPRFTP_D365_UPDATECUSNO

        public PCKPRFTP_D365_UPDATECUSNOResult PCKPRFTP_D365_UPDATECUSNO(PCKPRFTP_D365_UPDATECUSNOParameter para)
        {
            PCKPRFTP_D365_UPDATECUSNOResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_CDEL0", 
                "P_CUSNO", 
                "P_EDITBY", 
                "P_INUSE"
            };
            object[] paraValues = new object[]
            {
                para.P_CDEL0, 
                para.P_CUSNO, 
                para.P_EDITBY, 
                para.P_INUSE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "PCKPRFTP_D365_UPDATECUSNO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new PCKPRFTP_D365_UPDATECUSNOResult();
                if (ret.Result.OutParameters["R_RESULT"] != DBNull.Value)
                    result.R_RESULT = (System.String)ret.Result.OutParameters["R_RESULT"];
            }

            return result;
        }

        #endregion

        #region PCKPRFTP_D365_INSERTUPDATE

        public PCKPRFTP_D365_INSERTUPDATEResult PCKPRFTP_D365_INSERTUPDATE(PCKPRFTP_D365_INSERTUPDATEParameter para)
        {
            PCKPRFTP_D365_INSERTUPDATEResult result = null;
            if (!HasConnection())
                return result;

            string[] paraNames = new string[]
            {
                "P_ANNUL", 
                "P_CDDIV", 
                "P_INVTY", 
                "P_INVNO", 
                "P_CDORD", 
                "P_RELNO", 
                "P_CUSCD", 
                "P_CUSNM", 
                "P_RECTY", 
                "P_CDKE1", 
                "P_CDKE2", 
                "P_CSITM", 
                "P_CDCON", 
                "P_CDEL0", 
                "P_GRADE", 
                "P_PIELN", 
                "P_NETWH", 
                "P_GRSWH", 
                "P_GRSLN", 
                "P_PALSZ", 
                "P_DTTRA", 
                "P_DTORA", 
                "P_AS400NO", 
                "P_OPERATORID", 
                "P_INUSE"
            };
            object[] paraValues = new object[]
            {
                para.P_ANNUL, 
                para.P_CDDIV, 
                para.P_INVTY, 
                para.P_INVNO, 
                para.P_CDORD, 
                para.P_RELNO, 
                para.P_CUSCD, 
                para.P_CUSNM, 
                para.P_RECTY, 
                para.P_CDKE1, 
                para.P_CDKE2, 
                para.P_CSITM, 
                para.P_CDCON, 
                para.P_CDEL0, 
                para.P_GRADE, 
                para.P_PIELN, 
                para.P_NETWH, 
                para.P_GRSWH, 
                para.P_GRSLN, 
                para.P_PALSZ, 
                para.P_DTTRA, 
                para.P_DTORA, 
                para.P_AS400NO, 
                para.P_OPERATORID, 
                para.P_INUSE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "PCKPRFTP_D365_INSERTUPDATE",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                result = new PCKPRFTP_D365_INSERTUPDATEResult();
                if (ret.Result.OutParameters["R_RESULT"] != DBNull.Value)
                    result.R_RESULT = (System.String)ret.Result.OutParameters["R_RESULT"];
            }

            return result;
        }

        #endregion

        #region PCKPRFTP_D365_GETINVNO

        public List<PCKPRFTP_D365_GETINVNOResult> PCKPRFTP_D365_GETINVNO(PCKPRFTP_D365_GETINVNOParameter para)
        {
            List<PCKPRFTP_D365_GETINVNOResult> results = new List<PCKPRFTP_D365_GETINVNOResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
            };
            object[] paraValues = new object[]
            {
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "PCKPRFTP_D365_GETINVNO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        PCKPRFTP_D365_GETINVNOResult result =
                            new PCKPRFTP_D365_GETINVNOResult();

                        result.INVNO = row.Field<System.String>("INVNO");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region PCKPRFTP_D365_GETDATA

        public List<PCKPRFTP_D365_GETDATAResult> PCKPRFTP_D365_GETDATA(PCKPRFTP_D365_GETDATAParameter para)
        {
            List<PCKPRFTP_D365_GETDATAResult> results = new List<PCKPRFTP_D365_GETDATAResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_INVNO", 
                "P_CDEL0", 
                "P_RUNNO"
            };
            object[] paraValues = new object[]
            {
                para.P_INVNO, 
                para.P_CDEL0, 
                para.P_RUNNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "PCKPRFTP_D365_GETDATA",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        PCKPRFTP_D365_GETDATAResult result =
                            new PCKPRFTP_D365_GETDATAResult();

                        result.ANNUL = row.Field<System.String>("ANNUL");
                        result.CDDIV = row.Field<System.String>("CDDIV");
                        result.INVTY = row.Field<System.String>("INVTY");
                        result.INVNO = row.Field<System.String>("INVNO");
                        result.CDORD = row.Field<System.String>("CDORD");
                        result.RELNO = row.Field<System.Decimal?>("RELNO");
                        result.CUSCD = row.Field<System.String>("CUSCD");
                        result.CUSNM = row.Field<System.String>("CUSNM");
                        result.RECTY = row.Field<System.String>("RECTY");
                        result.CDKE1 = row.Field<System.String>("CDKE1");
                        result.CDKE2 = row.Field<System.String>("CDKE2");
                        result.CSITM = row.Field<System.String>("CSITM");
                        result.CDCON = row.Field<System.String>("CDCON");
                        result.CDEL0 = row.Field<System.String>("CDEL0");
                        result.GRADE = row.Field<System.String>("GRADE");
                        result.PIELN = row.Field<System.Decimal?>("PIELN");
                        result.NETWH = row.Field<System.Decimal?>("NETWH");
                        result.GRSWH = row.Field<System.Decimal?>("GRSWH");
                        result.GRSLN = row.Field<System.Decimal?>("GRSLN");
                        result.PALSZ = row.Field<System.String>("PALSZ");
                        result.DTTRA = row.Field<System.Decimal?>("DTTRA");
                        result.DTORA = row.Field<System.Decimal?>("DTORA");
                        result.RUNNO = row.Field<System.Decimal?>("RUNNO");
                        result.AS400NO = row.Field<System.Decimal?>("AS400NO");
                        result.CUSNO = row.Field<System.Decimal?>("CUSNO");
                        result.INSERTBY = row.Field<System.String>("INSERTBY");
                        result.INSERTDATE = row.Field<System.DateTime?>("INSERTDATE");
                        result.EDITBY = row.Field<System.String>("EDITBY");
                        result.EDITDATE = row.Field<System.DateTime?>("EDITDATE");
                        result.INUSE = row.Field<System.Decimal?>("INUSE");
                        result.SCANBY = row.Field<System.String>("SCANBY");
                        result.SCANDATE = row.Field<System.DateTime?>("SCANDATE");
                        result.CHKNETWEIGHT = row.Field<System.Decimal?>("CHKNETWEIGHT");
                        result.CHKGROSSWEIGHT = row.Field<System.Decimal?>("CHKGROSSWEIGHT");
                        result.CHKNETLENGTH = row.Field<System.Decimal?>("CHKNETLENGTH");
                        result.CHKGROSSLENGTH = row.Field<System.Decimal?>("CHKGROSSLENGTH");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_WP_OUL

        public List<D365_WP_OULResult> D365_WP_OUL(D365_WP_OULParameter para)
        {
            List<D365_WP_OULResult> results = new List<D365_WP_OULResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WARPHEADNO"
            };
            object[] paraValues = new object[]
            {
                para.P_WARPHEADNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_WP_OUL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_WP_OULResult result =
                            new D365_WP_OULResult();

                        result.LINENO = row.Field<System.Decimal?>("LINENO");
                        result.OUTPUTDATE = row.Field<System.DateTime?>("OUTPUTDATE");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.GROSSLENGTH = row.Field<System.Decimal?>("GROSSLENGTH");
                        result.NETLENGTH = row.Field<System.Decimal?>("NETLENGTH");
                        result.GROSSWEIGHT = row.Field<System.Decimal?>("GROSSWEIGHT");
                        result.NETWEIGHT = row.Field<System.Decimal?>("NETWEIGHT");
                        result.PALLETNO = row.Field<System.String>("PALLETNO");
                        result.GRADE = row.Field<System.String>("GRADE");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.SERIALID = row.Field<System.String>("SERIALID");
                        result.FINISH = row.Field<System.Decimal?>("FINISH");
                        result.MOVEMENTTRANS = row.Field<System.String>("MOVEMENTTRANS");
                        result.WAREHOUSE = row.Field<System.String>("WAREHOUSE");
                        result.LOCATION = row.Field<System.String>("LOCATION");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_WP_OUH

        public List<D365_WP_OUHResult> D365_WP_OUH(D365_WP_OUHParameter para)
        {
            List<D365_WP_OUHResult> results = new List<D365_WP_OUHResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WARPHEADNO"
            };
            object[] paraValues = new object[]
            {
                para.P_WARPHEADNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_WP_OUH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_WP_OUHResult result =
                            new D365_WP_OUHResult();

                        result.HEADERID = row.Field<System.Decimal?>("HEADERID");
                        result.TOTALRECORD = row.Field<System.Decimal?>("TOTALRECORD");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_WP_OPL

        public List<D365_WP_OPLResult> D365_WP_OPL(D365_WP_OPLParameter para)
        {
            List<D365_WP_OPLResult> results = new List<D365_WP_OPLResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WARPHEADNO"
            };
            object[] paraValues = new object[]
            {
                para.P_WARPHEADNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_WP_OPL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_WP_OPLResult result =
                            new D365_WP_OPLResult();

                        result.LINENO = row.Field<System.Decimal?>("LINENO");
                        result.PROCQTY = row.Field<System.Decimal?>("PROCQTY");
                        result.OPRNO = row.Field<System.String>("OPRNO");
                        result.OPRID = row.Field<System.String>("OPRID");
                        result.MACHINENO = row.Field<System.String>("MACHINENO");
                        result.STARTDATETIME = row.Field<System.DateTime?>("STARTDATETIME");
                        result.ENDDATETIME = row.Field<System.DateTime?>("ENDDATETIME");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_WP_OPH

        public List<D365_WP_OPHResult> D365_WP_OPH(D365_WP_OPHParameter para)
        {
            List<D365_WP_OPHResult> results = new List<D365_WP_OPHResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WARPHEADNO"
            };
            object[] paraValues = new object[]
            {
                para.P_WARPHEADNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_WP_OPH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_WP_OPHResult result =
                            new D365_WP_OPHResult();

                        result.HEADERID = row.Field<System.Decimal?>("HEADERID");
                        result.TOTALRECORD = row.Field<System.Decimal?>("TOTALRECORD");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_WP_ISL

        public List<D365_WP_ISLResult> D365_WP_ISL(D365_WP_ISLParameter para)
        {
            List<D365_WP_ISLResult> results = new List<D365_WP_ISLResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WARPHEADNO"
            };
            object[] paraValues = new object[]
            {
                para.P_WARPHEADNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_WP_ISL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_WP_ISLResult result =
                            new D365_WP_ISLResult();

                        result.LINENO = row.Field<System.Decimal?>("LINENO");
                        result.ISSUEDATE = row.Field<System.DateTime?>("ISSUEDATE");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.STYLEID = row.Field<System.String>("STYLEID");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.SERIALID = row.Field<System.String>("SERIALID");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_WP_ISH

        public List<D365_WP_ISHResult> D365_WP_ISH(D365_WP_ISHParameter para)
        {
            List<D365_WP_ISHResult> results = new List<D365_WP_ISHResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WARPHEADNO"
            };
            object[] paraValues = new object[]
            {
                para.P_WARPHEADNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_WP_ISH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_WP_ISHResult result =
                            new D365_WP_ISHResult();

                        result.HEADERID = row.Field<System.Decimal?>("HEADERID");
                        result.TOTALRECORD = row.Field<System.Decimal?>("TOTALRECORD");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_WP_BPO

        public List<D365_WP_BPOResult> D365_WP_BPO(D365_WP_BPOParameter para)
        {
            List<D365_WP_BPOResult> results = new List<D365_WP_BPOResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WARPHEADNO"
            };
            object[] paraValues = new object[]
            {
                para.P_WARPHEADNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_WP_BPO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_WP_BPOResult result =
                            new D365_WP_BPOResult();

                        result.PRODID = row.Field<System.Decimal?>("PRODID");
                        result.LOTNO = row.Field<System.String>("LOTNO");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.OPERATION = row.Field<System.String>("OPERATION");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_PK_TOTALHEADER

        public List<D365_PK_TOTALHEADERResult> D365_PK_TOTALHEADER(D365_PK_TOTALHEADERParameter para)
        {
            List<D365_PK_TOTALHEADERResult> results = new List<D365_PK_TOTALHEADERResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_PLALLETNO"
            };
            object[] paraValues = new object[]
            {
                para.P_PLALLETNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_PK_TOTALHEADER",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_PK_TOTALHEADERResult result =
                            new D365_PK_TOTALHEADERResult();

                        result.PALLETNO = row.Field<System.String>("PALLETNO");
                        result.ITEMCODE = row.Field<System.String>("ITEMCODE");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_PK_OUL_C

        public List<D365_PK_OUL_CResult> D365_PK_OUL_C(D365_PK_OUL_CParameter para)
        {
            List<D365_PK_OUL_CResult> results = new List<D365_PK_OUL_CResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_PALLETNO", 
                "P_ITEMCODE", 
                "P_LOADINGTYPE"
            };
            object[] paraValues = new object[]
            {
                para.P_PALLETNO, 
                para.P_ITEMCODE, 
                para.P_LOADINGTYPE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_PK_OUL_C",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_PK_OUL_CResult result =
                            new D365_PK_OUL_CResult();

                        result.LINENO = row.Field<System.Decimal?>("LINENO");
                        result.OUTPUTDATE = row.Field<System.DateTime?>("OUTPUTDATE");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.GROSSLENGTH = row.Field<System.Decimal?>("GROSSLENGTH");
                        result.NETLENGTH = row.Field<System.Decimal?>("NETLENGTH");
                        result.GROSSWEIGHT = row.Field<System.Decimal?>("GROSSWEIGHT");
                        result.NETWEIGHT = row.Field<System.Decimal?>("NETWEIGHT");
                        result.PALLETNO = row.Field<System.String>("PALLETNO");
                        result.GRADE = row.Field<System.String>("GRADE");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.SERIALID = row.Field<System.String>("SERIALID");
                        result.FINISH = row.Field<System.Decimal?>("FINISH");
                        result.MOVEMENTTRANS = row.Field<System.String>("MOVEMENTTRANS");
                        result.WAREHOUSE = row.Field<System.String>("WAREHOUSE");
                        result.LOCATION = row.Field<System.String>("LOCATION");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_PK_OUL

        public List<D365_PK_OULResult> D365_PK_OUL(D365_PK_OULParameter para)
        {
            List<D365_PK_OULResult> results = new List<D365_PK_OULResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_PALLETNO", 
                "P_ITEMCODE", 
                "P_LOADINGTYPE"
            };
            object[] paraValues = new object[]
            {
                para.P_PALLETNO, 
                para.P_ITEMCODE, 
                para.P_LOADINGTYPE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_PK_OUL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_PK_OULResult result =
                            new D365_PK_OULResult();

                        result.LINENO = row.Field<System.Decimal?>("LINENO");
                        result.OUTPUTDATE = row.Field<System.DateTime?>("OUTPUTDATE");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.GROSSLENGTH = row.Field<System.Decimal?>("GROSSLENGTH");
                        result.NETLENGTH = row.Field<System.Decimal?>("NETLENGTH");
                        result.GROSSWEIGHT = row.Field<System.Decimal?>("GROSSWEIGHT");
                        result.NETWEIGHT = row.Field<System.Decimal?>("NETWEIGHT");
                        result.PALLETNO = row.Field<System.String>("PALLETNO");
                        result.GRADE = row.Field<System.String>("GRADE");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.SERIALID = row.Field<System.String>("SERIALID");
                        result.FINISH = row.Field<System.Decimal?>("FINISH");
                        result.MOVEMENTTRANS = row.Field<System.String>("MOVEMENTTRANS");
                        result.WAREHOUSE = row.Field<System.String>("WAREHOUSE");
                        result.LOCATION = row.Field<System.String>("LOCATION");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_PK_OUH_C

        public List<D365_PK_OUH_CResult> D365_PK_OUH_C(D365_PK_OUH_CParameter para)
        {
            List<D365_PK_OUH_CResult> results = new List<D365_PK_OUH_CResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_PALLETNO", 
                "P_ITEMCODE", 
                "P_LOADINGTYPE"
            };
            object[] paraValues = new object[]
            {
                para.P_PALLETNO, 
                para.P_ITEMCODE, 
                para.P_LOADINGTYPE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_PK_OUH_C",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_PK_OUH_CResult result =
                            new D365_PK_OUH_CResult();

                        result.HEADERID = row.Field<System.Decimal?>("HEADERID");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.TOTALRECORD = row.Field<System.Decimal?>("TOTALRECORD");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_PK_OUH

        public List<D365_PK_OUHResult> D365_PK_OUH(D365_PK_OUHParameter para)
        {
            List<D365_PK_OUHResult> results = new List<D365_PK_OUHResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_PALLETNO", 
                "P_ITEMCODE", 
                "P_LOADINGTYPE"
            };
            object[] paraValues = new object[]
            {
                para.P_PALLETNO, 
                para.P_ITEMCODE, 
                para.P_LOADINGTYPE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_PK_OUH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_PK_OUHResult result =
                            new D365_PK_OUHResult();

                        result.HEADERID = row.Field<System.Decimal?>("HEADERID");
                        result.TOTALRECORD = row.Field<System.Decimal?>("TOTALRECORD");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_PK_ISL_C

        public List<D365_PK_ISL_CResult> D365_PK_ISL_C(D365_PK_ISL_CParameter para)
        {
            List<D365_PK_ISL_CResult> results = new List<D365_PK_ISL_CResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_PALLETNO", 
                "P_ITEMCODE", 
                "P_LOADINGTYPE"
            };
            object[] paraValues = new object[]
            {
                para.P_PALLETNO, 
                para.P_ITEMCODE, 
                para.P_LOADINGTYPE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_PK_ISL_C",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_PK_ISL_CResult result =
                            new D365_PK_ISL_CResult();

                        result.LINENO = row.Field<System.Decimal?>("LINENO");
                        result.ISSUEDATE = row.Field<System.DateTime?>("ISSUEDATE");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.STYLEID = row.Field<System.String>("STYLEID");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.SERIALID = row.Field<System.String>("SERIALID");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_PK_ISL

        public List<D365_PK_ISLResult> D365_PK_ISL(D365_PK_ISLParameter para)
        {
            List<D365_PK_ISLResult> results = new List<D365_PK_ISLResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_PALLETNO", 
                "P_ITEMCODE", 
                "P_LOADINGTYPE"
            };
            object[] paraValues = new object[]
            {
                para.P_PALLETNO, 
                para.P_ITEMCODE, 
                para.P_LOADINGTYPE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_PK_ISL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_PK_ISLResult result =
                            new D365_PK_ISLResult();

                        result.LINENO = row.Field<System.Decimal?>("LINENO");
                        result.ISSUEDATE = row.Field<System.DateTime?>("ISSUEDATE");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.STYLEID = row.Field<System.String>("STYLEID");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.SERIALID = row.Field<System.String>("SERIALID");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_PK_ISH

        public List<D365_PK_ISHResult> D365_PK_ISH(D365_PK_ISHParameter para)
        {
            List<D365_PK_ISHResult> results = new List<D365_PK_ISHResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_PALLETNO", 
                "P_ITEMCODE", 
                "P_LOADINGTYPE"
            };
            object[] paraValues = new object[]
            {
                para.P_PALLETNO, 
                para.P_ITEMCODE, 
                para.P_LOADINGTYPE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_PK_ISH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_PK_ISHResult result =
                            new D365_PK_ISHResult();

                        result.HEADERID = row.Field<System.Decimal?>("HEADERID");
                        result.TOTALRECORD = row.Field<System.Decimal?>("TOTALRECORD");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_PK_BPO_C

        public List<D365_PK_BPO_CResult> D365_PK_BPO_C(D365_PK_BPO_CParameter para)
        {
            List<D365_PK_BPO_CResult> results = new List<D365_PK_BPO_CResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_PALLETNO", 
                "P_ITEMCODE", 
                "P_LOADINGTYPE"
            };
            object[] paraValues = new object[]
            {
                para.P_PALLETNO, 
                para.P_ITEMCODE, 
                para.P_LOADINGTYPE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_PK_BPO_C",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_PK_BPO_CResult result =
                            new D365_PK_BPO_CResult();

                        result.PRODID = row.Field<System.Decimal?>("PRODID");
                        result.LOTNO = row.Field<System.String>("LOTNO");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.OPERATION = row.Field<System.String>("OPERATION");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_PK_BPO

        public List<D365_PK_BPOResult> D365_PK_BPO(D365_PK_BPOParameter para)
        {
            List<D365_PK_BPOResult> results = new List<D365_PK_BPOResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_PALLETNO", 
                "P_ITEMCODE", 
                "P_LOADINGTYPE"
            };
            object[] paraValues = new object[]
            {
                para.P_PALLETNO, 
                para.P_ITEMCODE, 
                para.P_LOADINGTYPE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_PK_BPO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_PK_BPOResult result =
                            new D365_PK_BPOResult();

                        result.PRODID = row.Field<System.Decimal?>("PRODID");
                        result.LOTNO = row.Field<System.String>("LOTNO");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.OPERATION = row.Field<System.String>("OPERATION");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_IN_OUL_AUTO

        public List<D365_IN_OUL_AUTOResult> D365_IN_OUL_AUTO(D365_IN_OUL_AUTOParameter para)
        {
            List<D365_IN_OUL_AUTOResult> results = new List<D365_IN_OUL_AUTOResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_FINISHINGLOT", 
                "P_INSPECTIONLOT", 
                "P_FINISH"
            };
            object[] paraValues = new object[]
            {
                para.P_FINISHINGLOT, 
                para.P_INSPECTIONLOT, 
                para.P_FINISH
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_IN_OUL_AUTO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_IN_OUL_AUTOResult result =
                            new D365_IN_OUL_AUTOResult();

                        result.LINENO = row.Field<System.Decimal?>("LINENO");
                        result.OUTPUTDATE = row.Field<System.DateTime?>("OUTPUTDATE");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.GROSSLENGTH = row.Field<System.Decimal?>("GROSSLENGTH");
                        result.NETLENGTH = row.Field<System.Decimal?>("NETLENGTH");
                        result.GROSSWEIGHT = row.Field<System.Decimal?>("GROSSWEIGHT");
                        result.NETWEIGHT = row.Field<System.Decimal?>("NETWEIGHT");
                        result.PALLETNO = row.Field<System.String>("PALLETNO");
                        result.GRADE = row.Field<System.String>("GRADE");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.SERIALID = row.Field<System.String>("SERIALID");
                        result.FINISH = row.Field<System.Decimal?>("FINISH");
                        result.MOVEMENTTRANS = row.Field<System.String>("MOVEMENTTRANS");
                        result.WAREHOUSE = row.Field<System.String>("WAREHOUSE");
                        result.LOCATION = row.Field<System.String>("LOCATION");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_IN_OUL

        public List<D365_IN_OULResult> D365_IN_OUL(D365_IN_OULParameter para)
        {
            List<D365_IN_OULResult> results = new List<D365_IN_OULResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_FINISHINGLOT", 
                "P_INSPECTIONLOT", 
                "P_STARTDATE"
            };
            object[] paraValues = new object[]
            {
                para.P_FINISHINGLOT, 
                para.P_INSPECTIONLOT, 
                para.P_STARTDATE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_IN_OUL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_IN_OULResult result =
                            new D365_IN_OULResult();

                        result.LINENO = row.Field<System.Decimal?>("LINENO");
                        result.OUTPUTDATE = row.Field<System.DateTime?>("OUTPUTDATE");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.GROSSLENGTH = row.Field<System.Decimal?>("GROSSLENGTH");
                        result.NETLENGTH = row.Field<System.Decimal?>("NETLENGTH");
                        result.GROSSWEIGHT = row.Field<System.Decimal?>("GROSSWEIGHT");
                        result.NETWEIGHT = row.Field<System.Decimal?>("NETWEIGHT");
                        result.PALLETNO = row.Field<System.String>("PALLETNO");
                        result.GRADE = row.Field<System.String>("GRADE");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.SERIALID = row.Field<System.String>("SERIALID");
                        result.FINISH = row.Field<System.Decimal?>("FINISH");
                        result.MOVEMENTTRANS = row.Field<System.String>("MOVEMENTTRANS");
                        result.WAREHOUSE = row.Field<System.String>("WAREHOUSE");
                        result.LOCATION = row.Field<System.String>("LOCATION");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_IN_OUH

        public List<D365_IN_OUHResult> D365_IN_OUH(D365_IN_OUHParameter para)
        {
            List<D365_IN_OUHResult> results = new List<D365_IN_OUHResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_INSPECTIONLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_INSPECTIONLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_IN_OUH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_IN_OUHResult result =
                            new D365_IN_OUHResult();

                        result.HEADERID = row.Field<System.Decimal?>("HEADERID");
                        result.TOTALRECORD = row.Field<System.Decimal?>("TOTALRECORD");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_IN_OPL

        public List<D365_IN_OPLResult> D365_IN_OPL(D365_IN_OPLParameter para)
        {
            List<D365_IN_OPLResult> results = new List<D365_IN_OPLResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_INSPECTIONLOT", 
                "P_STARTDATE"
            };
            object[] paraValues = new object[]
            {
                para.P_INSPECTIONLOT, 
                para.P_STARTDATE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_IN_OPL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_IN_OPLResult result =
                            new D365_IN_OPLResult();

                        result.LINENO = row.Field<System.Decimal?>("LINENO");
                        result.PROCQTY = row.Field<System.Decimal?>("PROCQTY");
                        result.OPRNO = row.Field<System.String>("OPRNO");
                        result.OPRID = row.Field<System.String>("OPRID");
                        result.MACHINENO = row.Field<System.String>("MACHINENO");
                        result.STARTDATETIME = row.Field<System.DateTime?>("STARTDATETIME");
                        result.ENDDATETIME = row.Field<System.DateTime?>("ENDDATETIME");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_IN_OPH

        public List<D365_IN_OPHResult> D365_IN_OPH(D365_IN_OPHParameter para)
        {
            List<D365_IN_OPHResult> results = new List<D365_IN_OPHResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_INSPECTIONLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_INSPECTIONLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_IN_OPH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_IN_OPHResult result =
                            new D365_IN_OPHResult();

                        result.HEADERID = row.Field<System.Decimal?>("HEADERID");
                        result.TOTALRECORD = row.Field<System.Decimal?>("TOTALRECORD");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_IN_ISL

        public List<D365_IN_ISLResult> D365_IN_ISL(D365_IN_ISLParameter para)
        {
            List<D365_IN_ISLResult> results = new List<D365_IN_ISLResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_FINISHINGLOT", 
                "P_INSPECTIONLOT", 
                "P_STARTDATE"
            };
            object[] paraValues = new object[]
            {
                para.P_FINISHINGLOT, 
                para.P_INSPECTIONLOT, 
                para.P_STARTDATE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_IN_ISL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_IN_ISLResult result =
                            new D365_IN_ISLResult();

                        result.LINENO = row.Field<System.Decimal?>("LINENO");
                        result.ISSUEDATE = row.Field<System.DateTime?>("ISSUEDATE");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.STYLEID = row.Field<System.String>("STYLEID");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.SERIALID = row.Field<System.String>("SERIALID");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_IN_ISH

        public List<D365_IN_ISHResult> D365_IN_ISH(D365_IN_ISHParameter para)
        {
            List<D365_IN_ISHResult> results = new List<D365_IN_ISHResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_FINISHINGLOT", 
                "P_INSPECTIONLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_FINISHINGLOT, 
                para.P_INSPECTIONLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_IN_ISH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_IN_ISHResult result =
                            new D365_IN_ISHResult();

                        result.HEADERID = row.Field<System.Decimal?>("HEADERID");
                        result.TOTALRECORD = row.Field<System.Decimal?>("TOTALRECORD");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_IN_BPO

        public List<D365_IN_BPOResult> D365_IN_BPO(D365_IN_BPOParameter para)
        {
            List<D365_IN_BPOResult> results = new List<D365_IN_BPOResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_FINISHINGLOT", 
                "P_INSPECTIONLOT", 
                "P_STARTDATE"
            };
            object[] paraValues = new object[]
            {
                para.P_FINISHINGLOT, 
                para.P_INSPECTIONLOT, 
                para.P_STARTDATE
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_IN_BPO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_IN_BPOResult result =
                            new D365_IN_BPOResult();

                        result.PRODID = row.Field<System.Decimal?>("PRODID");
                        result.LOTNO = row.Field<System.String>("LOTNO");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.OPERATION = row.Field<System.String>("OPERATION");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_GR_OUL

        public List<D365_GR_OULResult> D365_GR_OUL(D365_GR_OULParameter para)
        {
            List<D365_GR_OULResult> results = new List<D365_GR_OULResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMLOT", 
                "P_WEAVINGLOT", 
                "P_DOFFNO", 
                "P_LOOMNO"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMLOT, 
                para.P_WEAVINGLOT, 
                para.P_DOFFNO, 
                para.P_LOOMNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_GR_OUL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_GR_OULResult result =
                            new D365_GR_OULResult();

                        result.LINENO = row.Field<System.Decimal?>("LINENO");
                        result.OUTPUTDATE = row.Field<System.DateTime?>("OUTPUTDATE");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.GROSSLENGTH = row.Field<System.Decimal?>("GROSSLENGTH");
                        result.NETLENGTH = row.Field<System.Decimal?>("NETLENGTH");
                        result.GROSSWEIGHT = row.Field<System.Decimal?>("GROSSWEIGHT");
                        result.NETWEIGHT = row.Field<System.Decimal?>("NETWEIGHT");
                        result.PALLETNO = row.Field<System.String>("PALLETNO");
                        result.GRADE = row.Field<System.String>("GRADE");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.SERIALID = row.Field<System.String>("SERIALID");
                        result.FINISH = row.Field<System.Decimal?>("FINISH");
                        result.MOVEMENTTRANS = row.Field<System.String>("MOVEMENTTRANS");
                        result.WAREHOUSE = row.Field<System.String>("WAREHOUSE");
                        result.LOCATION = row.Field<System.String>("LOCATION");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_GR_OUH

        public List<D365_GR_OUHResult> D365_GR_OUH(D365_GR_OUHParameter para)
        {
            List<D365_GR_OUHResult> results = new List<D365_GR_OUHResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WEAVINGLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_WEAVINGLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_GR_OUH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_GR_OUHResult result =
                            new D365_GR_OUHResult();

                        result.HEADERID = row.Field<System.Decimal?>("HEADERID");
                        result.TOTALRECORD = row.Field<System.Decimal?>("TOTALRECORD");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_GR_OPL

        public List<D365_GR_OPLResult> D365_GR_OPL(D365_GR_OPLParameter para)
        {
            List<D365_GR_OPLResult> results = new List<D365_GR_OPLResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WEAVINGLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_WEAVINGLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_GR_OPL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_GR_OPLResult result =
                            new D365_GR_OPLResult();

                        result.LINENO = row.Field<System.Decimal?>("LINENO");
                        result.PROCQTY = row.Field<System.Decimal?>("PROCQTY");
                        result.OPRNO = row.Field<System.String>("OPRNO");
                        result.OPRID = row.Field<System.String>("OPRID");
                        result.MACHINENO = row.Field<System.String>("MACHINENO");
                        result.STARTDATETIME = row.Field<System.DateTime?>("STARTDATETIME");
                        result.ENDDATETIME = row.Field<System.DateTime?>("ENDDATETIME");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_GR_OPH

        public List<D365_GR_OPHResult> D365_GR_OPH(D365_GR_OPHParameter para)
        {
            List<D365_GR_OPHResult> results = new List<D365_GR_OPHResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_WEAVINGLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_WEAVINGLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_GR_OPH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_GR_OPHResult result =
                            new D365_GR_OPHResult();

                        result.HEADERID = row.Field<System.Decimal?>("HEADERID");
                        result.TOTALRECORD = row.Field<System.Decimal?>("TOTALRECORD");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_GR_ISL

        public List<D365_GR_ISLResult> D365_GR_ISL(D365_GR_ISLParameter para)
        {
            List<D365_GR_ISLResult> results = new List<D365_GR_ISLResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMLOT", 
                "P_WEAVINGLOT", 
                "P_DOFFNO", 
                "P_LOOMNO"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMLOT, 
                para.P_WEAVINGLOT, 
                para.P_DOFFNO, 
                para.P_LOOMNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_GR_ISL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_GR_ISLResult result =
                            new D365_GR_ISLResult();

                        result.LINENO = row.Field<System.Decimal?>("LINENO");
                        result.ISSUEDATE = row.Field<System.DateTime?>("ISSUEDATE");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.STYLEID = row.Field<System.String>("STYLEID");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.SERIALID = row.Field<System.String>("SERIALID");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_GR_ISH

        public List<D365_GR_ISHResult> D365_GR_ISH(D365_GR_ISHParameter para)
        {
            List<D365_GR_ISHResult> results = new List<D365_GR_ISHResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMLOT", 
                "P_WEAVINGLOT", 
                "P_DOFFNO"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMLOT, 
                para.P_WEAVINGLOT, 
                para.P_DOFFNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_GR_ISH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_GR_ISHResult result =
                            new D365_GR_ISHResult();

                        result.HEADERID = row.Field<System.Decimal?>("HEADERID");
                        result.TOTALRECORD = row.Field<System.Decimal?>("TOTALRECORD");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_GR_BPO

        public List<D365_GR_BPOResult> D365_GR_BPO(D365_GR_BPOParameter para)
        {
            List<D365_GR_BPOResult> results = new List<D365_GR_BPOResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMLOT", 
                "P_LOOMNO", 
                "P_DOFFNO"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMLOT, 
                para.P_LOOMNO, 
                para.P_DOFFNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_GR_BPO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_GR_BPOResult result =
                            new D365_GR_BPOResult();

                        result.PRODID = row.Field<System.Decimal?>("PRODID");
                        result.LOTNO = row.Field<System.String>("LOTNO");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.OPERATION = row.Field<System.String>("OPERATION");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_FN_OUL

        public List<D365_FN_OULResult> D365_FN_OUL(D365_FN_OULParameter para)
        {
            List<D365_FN_OULResult> results = new List<D365_FN_OULResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_FINISHINGLOT", 
                "P_WEAVINGLOT", 
                "P_PROCESS"
            };
            object[] paraValues = new object[]
            {
                para.P_FINISHINGLOT, 
                para.P_WEAVINGLOT, 
                para.P_PROCESS
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_FN_OUL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_FN_OULResult result =
                            new D365_FN_OULResult();

                        result.LINENO = row.Field<System.Decimal?>("LINENO");
                        result.OUTPUTDATE = row.Field<System.DateTime?>("OUTPUTDATE");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.GROSSLENGTH = row.Field<System.Decimal?>("GROSSLENGTH");
                        result.NETLENGTH = row.Field<System.Decimal?>("NETLENGTH");
                        result.GROSSWEIGHT = row.Field<System.Decimal?>("GROSSWEIGHT");
                        result.NETWEIGHT = row.Field<System.Decimal?>("NETWEIGHT");
                        result.PALLETNO = row.Field<System.String>("PALLETNO");
                        result.GRADE = row.Field<System.String>("GRADE");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.SERIALID = row.Field<System.String>("SERIALID");
                        result.FINISH = row.Field<System.Decimal?>("FINISH");
                        result.MOVEMENTTRANS = row.Field<System.String>("MOVEMENTTRANS");
                        result.WAREHOUSE = row.Field<System.String>("WAREHOUSE");
                        result.LOCATION = row.Field<System.String>("LOCATION");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_FN_OUH

        public List<D365_FN_OUHResult> D365_FN_OUH(D365_FN_OUHParameter para)
        {
            List<D365_FN_OUHResult> results = new List<D365_FN_OUHResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_FINISHINGLOT", 
                "P_WEAVINGLOT", 
                "P_PROCESS"
            };
            object[] paraValues = new object[]
            {
                para.P_FINISHINGLOT, 
                para.P_WEAVINGLOT, 
                para.P_PROCESS
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_FN_OUH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_FN_OUHResult result =
                            new D365_FN_OUHResult();

                        result.HEADERID = row.Field<System.Decimal?>("HEADERID");
                        result.TOTALRECORD = row.Field<System.Decimal?>("TOTALRECORD");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_FN_OPL

        public List<D365_FN_OPLResult> D365_FN_OPL(D365_FN_OPLParameter para)
        {
            List<D365_FN_OPLResult> results = new List<D365_FN_OPLResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_FINISHINGLOT", 
                "P_WEAVINGLOT", 
                "P_PROCESS"
            };
            object[] paraValues = new object[]
            {
                para.P_FINISHINGLOT, 
                para.P_WEAVINGLOT, 
                para.P_PROCESS
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_FN_OPL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_FN_OPLResult result =
                            new D365_FN_OPLResult();

                        result.LINENO = row.Field<System.Decimal?>("LINENO");
                        result.PROCQTY = row.Field<System.Decimal?>("PROCQTY");
                        result.OPRNO = row.Field<System.String>("OPRNO");
                        result.OPRID = row.Field<System.String>("OPRID");
                        result.MACHINENO = row.Field<System.String>("MACHINENO");
                        result.STARTDATETIME = row.Field<System.DateTime?>("STARTDATETIME");
                        result.ENDDATETIME = row.Field<System.DateTime?>("ENDDATETIME");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_FN_OPH

        public List<D365_FN_OPHResult> D365_FN_OPH(D365_FN_OPHParameter para)
        {
            List<D365_FN_OPHResult> results = new List<D365_FN_OPHResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_FINISHINGLOT", 
                "P_WEAVINGLOT", 
                "P_PROCESS"
            };
            object[] paraValues = new object[]
            {
                para.P_FINISHINGLOT, 
                para.P_WEAVINGLOT, 
                para.P_PROCESS
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_FN_OPH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_FN_OPHResult result =
                            new D365_FN_OPHResult();

                        result.HEADERID = row.Field<System.Decimal?>("HEADERID");
                        result.TOTALRECORD = row.Field<System.Decimal?>("TOTALRECORD");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_FN_ISL

        public List<D365_FN_ISLResult> D365_FN_ISL(D365_FN_ISLParameter para)
        {
            List<D365_FN_ISLResult> results = new List<D365_FN_ISLResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_FINISHINGLOT", 
                "P_WEAVINGLOT", 
                "P_PROCESS"
            };
            object[] paraValues = new object[]
            {
                para.P_FINISHINGLOT, 
                para.P_WEAVINGLOT, 
                para.P_PROCESS
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_FN_ISL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_FN_ISLResult result =
                            new D365_FN_ISLResult();

                        result.LINENO = row.Field<System.Decimal?>("LINENO");
                        result.ISSUEDATE = row.Field<System.DateTime?>("ISSUEDATE");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.STYLEID = row.Field<System.String>("STYLEID");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.SERIALID = row.Field<System.String>("SERIALID");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_FN_ISH

        public List<D365_FN_ISHResult> D365_FN_ISH(D365_FN_ISHParameter para)
        {
            List<D365_FN_ISHResult> results = new List<D365_FN_ISHResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_FINISHINGLOT", 
                "P_WEAVINGLOT", 
                "P_PROCESS"
            };
            object[] paraValues = new object[]
            {
                para.P_FINISHINGLOT, 
                para.P_WEAVINGLOT, 
                para.P_PROCESS
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_FN_ISH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_FN_ISHResult result =
                            new D365_FN_ISHResult();

                        result.HEADERID = row.Field<System.Decimal?>("HEADERID");
                        result.TOTALRECORD = row.Field<System.Decimal?>("TOTALRECORD");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_FN_BPO

        public List<D365_FN_BPOResult> D365_FN_BPO(D365_FN_BPOParameter para)
        {
            List<D365_FN_BPOResult> results = new List<D365_FN_BPOResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_FINISHINGLOT", 
                "P_WEAVINGLOT", 
                "P_PROCESS"
            };
            object[] paraValues = new object[]
            {
                para.P_FINISHINGLOT, 
                para.P_WEAVINGLOT, 
                para.P_PROCESS
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_FN_BPO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_FN_BPOResult result =
                            new D365_FN_BPOResult();

                        result.PRODID = row.Field<System.Decimal?>("PRODID");
                        result.LOTNO = row.Field<System.String>("LOTNO");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.OPERATION = row.Field<System.String>("OPERATION");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_DT_OUL

        public List<D365_DT_OULResult> D365_DT_OUL(D365_DT_OULParameter para)
        {
            List<D365_DT_OULResult> results = new List<D365_DT_OULResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMERNO"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_DT_OUL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_DT_OULResult result =
                            new D365_DT_OULResult();

                        result.LINENO = row.Field<System.Decimal?>("LINENO");
                        result.OUTPUTDATE = row.Field<System.DateTime?>("OUTPUTDATE");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.GROSSLENGTH = row.Field<System.Decimal?>("GROSSLENGTH");
                        result.NETLENGTH = row.Field<System.Decimal?>("NETLENGTH");
                        result.GROSSWEIGHT = row.Field<System.Decimal?>("GROSSWEIGHT");
                        result.NETWEIGHT = row.Field<System.Decimal?>("NETWEIGHT");
                        result.PALLETNO = row.Field<System.String>("PALLETNO");
                        result.GRADE = row.Field<System.String>("GRADE");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.SERIALID = row.Field<System.String>("SERIALID");
                        result.FINISH = row.Field<System.Decimal?>("FINISH");
                        result.MOVEMENTTRANS = row.Field<System.String>("MOVEMENTTRANS");
                        result.WAREHOUSE = row.Field<System.String>("WAREHOUSE");
                        result.LOCATION = row.Field<System.String>("LOCATION");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_DT_OUH

        public List<D365_DT_OUHResult> D365_DT_OUH(D365_DT_OUHParameter para)
        {
            List<D365_DT_OUHResult> results = new List<D365_DT_OUHResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_DT_OUH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_DT_OUHResult result =
                            new D365_DT_OUHResult();

                        result.HEADERID = row.Field<System.Decimal?>("HEADERID");
                        result.TOTALRECORD = row.Field<System.Decimal?>("TOTALRECORD");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_DT_OPL

        public List<D365_DT_OPLResult> D365_DT_OPL(D365_DT_OPLParameter para)
        {
            List<D365_DT_OPLResult> results = new List<D365_DT_OPLResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_DT_OPL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_DT_OPLResult result =
                            new D365_DT_OPLResult();

                        result.LINENO = row.Field<System.Decimal?>("LINENO");
                        result.PROCQTY = row.Field<System.Decimal?>("PROCQTY");
                        result.OPRNO = row.Field<System.String>("OPRNO");
                        result.OPRID = row.Field<System.String>("OPRID");
                        result.MACHINENO = row.Field<System.String>("MACHINENO");
                        result.STARTDATETIME = row.Field<System.DateTime?>("STARTDATETIME");
                        result.ENDDATETIME = row.Field<System.DateTime?>("ENDDATETIME");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_DT_OPH

        public List<D365_DT_OPHResult> D365_DT_OPH(D365_DT_OPHParameter para)
        {
            List<D365_DT_OPHResult> results = new List<D365_DT_OPHResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_DT_OPH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_DT_OPHResult result =
                            new D365_DT_OPHResult();

                        result.HEADERID = row.Field<System.Decimal?>("HEADERID");
                        result.TOTALRECORD = row.Field<System.Decimal?>("TOTALRECORD");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_DT_ISL

        public List<D365_DT_ISLResult> D365_DT_ISL(D365_DT_ISLParameter para)
        {
            List<D365_DT_ISLResult> results = new List<D365_DT_ISLResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_DT_ISL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_DT_ISLResult result =
                            new D365_DT_ISLResult();

                        result.LINENO = row.Field<System.Decimal?>("LINENO");
                        result.ISSUEDATE = row.Field<System.DateTime?>("ISSUEDATE");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.STYLEID = row.Field<System.String>("STYLEID");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.SERIALID = row.Field<System.String>("SERIALID");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_DT_ISH

        public List<D365_DT_ISHResult> D365_DT_ISH(D365_DT_ISHParameter para)
        {
            List<D365_DT_ISHResult> results = new List<D365_DT_ISHResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_DT_ISH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_DT_ISHResult result =
                            new D365_DT_ISHResult();

                        result.HEADERID = row.Field<System.Decimal?>("HEADERID");
                        result.TOTALRECORD = row.Field<System.Decimal?>("TOTALRECORD");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_DT_BPO

        public List<D365_DT_BPOResult> D365_DT_BPO(D365_DT_BPOParameter para)
        {
            List<D365_DT_BPOResult> results = new List<D365_DT_BPOResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_DT_BPO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_DT_BPOResult result =
                            new D365_DT_BPOResult();

                        result.PRODID = row.Field<System.Decimal?>("PRODID");
                        result.LOTNO = row.Field<System.String>("LOTNO");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.OPERATION = row.Field<System.String>("OPERATION");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_CP_OUL

        public List<D365_CP_OULResult> D365_CP_OUL(D365_CP_OULParameter para)
        {
            List<D365_CP_OULResult> results = new List<D365_CP_OULResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITEMLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_ITEMLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_CP_OUL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_CP_OULResult result =
                            new D365_CP_OULResult();

                        result.LINENO = row.Field<System.Decimal?>("LINENO");
                        result.OUTPUTDATE = row.Field<System.DateTime?>("OUTPUTDATE");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.GROSSLENGTH = row.Field<System.Decimal?>("GROSSLENGTH");
                        result.NETLENGTH = row.Field<System.Decimal?>("NETLENGTH");
                        result.GROSSWEIGHT = row.Field<System.Decimal?>("GROSSWEIGHT");
                        result.NETWEIGHT = row.Field<System.Decimal?>("NETWEIGHT");
                        result.PALLETNO = row.Field<System.String>("PALLETNO");
                        result.GRADE = row.Field<System.String>("GRADE");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.SERIALID = row.Field<System.String>("SERIALID");
                        result.FINISH = row.Field<System.Decimal?>("FINISH");
                        result.MOVEMENTTRANS = row.Field<System.String>("MOVEMENTTRANS");
                        result.WAREHOUSE = row.Field<System.String>("WAREHOUSE");
                        result.LOCATION = row.Field<System.String>("LOCATION");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_CP_OUH

        public List<D365_CP_OUHResult> D365_CP_OUH(D365_CP_OUHParameter para)
        {
            List<D365_CP_OUHResult> results = new List<D365_CP_OUHResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITEMLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_ITEMLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_CP_OUH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_CP_OUHResult result =
                            new D365_CP_OUHResult();

                        result.HEADERID = row.Field<System.Decimal?>("HEADERID");
                        result.TOTALRECORD = row.Field<System.Decimal?>("TOTALRECORD");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_CP_OPL

        public List<D365_CP_OPLResult> D365_CP_OPL(D365_CP_OPLParameter para)
        {
            List<D365_CP_OPLResult> results = new List<D365_CP_OPLResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITEMLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_ITEMLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_CP_OPL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_CP_OPLResult result =
                            new D365_CP_OPLResult();

                        result.LINENO = row.Field<System.Decimal?>("LINENO");
                        result.PROCQTY = row.Field<System.Decimal?>("PROCQTY");
                        result.OPRNO = row.Field<System.String>("OPRNO");
                        result.OPRID = row.Field<System.String>("OPRID");
                        result.MACHINENO = row.Field<System.String>("MACHINENO");
                        result.STARTDATETIME = row.Field<System.DateTime?>("STARTDATETIME");
                        result.ENDDATETIME = row.Field<System.DateTime?>("ENDDATETIME");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_CP_OPH

        public List<D365_CP_OPHResult> D365_CP_OPH(D365_CP_OPHParameter para)
        {
            List<D365_CP_OPHResult> results = new List<D365_CP_OPHResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITEMLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_ITEMLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_CP_OPH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_CP_OPHResult result =
                            new D365_CP_OPHResult();

                        result.HEADERID = row.Field<System.Decimal?>("HEADERID");
                        result.TOTALRECORD = row.Field<System.Decimal?>("TOTALRECORD");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_CP_ISL

        public List<D365_CP_ISLResult> D365_CP_ISL(D365_CP_ISLParameter para)
        {
            List<D365_CP_ISLResult> results = new List<D365_CP_ISLResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITEMLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_ITEMLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_CP_ISL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_CP_ISLResult result =
                            new D365_CP_ISLResult();

                        result.LINENO = row.Field<System.Decimal?>("LINENO");
                        result.ISSUEDATE = row.Field<System.DateTime?>("ISSUEDATE");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.STYLEID = row.Field<System.String>("STYLEID");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.SERIALID = row.Field<System.String>("SERIALID");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_CP_ISH

        public List<D365_CP_ISHResult> D365_CP_ISH(D365_CP_ISHParameter para)
        {
            List<D365_CP_ISHResult> results = new List<D365_CP_ISHResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITEMLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_ITEMLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_CP_ISH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_CP_ISHResult result =
                            new D365_CP_ISHResult();

                        result.HEADERID = row.Field<System.Decimal?>("HEADERID");
                        result.TOTALRECORD = row.Field<System.Decimal?>("TOTALRECORD");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_CP_BPO

        public List<D365_CP_BPOResult> D365_CP_BPO(D365_CP_BPOParameter para)
        {
            List<D365_CP_BPOResult> results = new List<D365_CP_BPOResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_ITEMLOT"
            };
            object[] paraValues = new object[]
            {
                para.P_ITEMLOT
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_CP_BPO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_CP_BPOResult result =
                            new D365_CP_BPOResult();

                        result.PRODID = row.Field<System.Decimal?>("PRODID");
                        result.LOTNO = row.Field<System.String>("LOTNO");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.OPERATION = row.Field<System.String>("OPERATION");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_BM_OUL

        public List<D365_BM_OULResult> D365_BM_OUL(D365_BM_OULParameter para)
        {
            List<D365_BM_OULResult> results = new List<D365_BM_OULResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMERNO"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_BM_OUL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_BM_OULResult result =
                            new D365_BM_OULResult();

                        result.LINENO = row.Field<System.Decimal?>("LINENO");
                        result.OUTPUTDATE = row.Field<System.DateTime?>("OUTPUTDATE");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.GROSSLENGTH = row.Field<System.Decimal?>("GROSSLENGTH");
                        result.NETLENGTH = row.Field<System.Decimal?>("NETLENGTH");
                        result.GROSSWEIGHT = row.Field<System.Decimal?>("GROSSWEIGHT");
                        result.NETWEIGHT = row.Field<System.Decimal?>("NETWEIGHT");
                        result.PALLETNO = row.Field<System.String>("PALLETNO");
                        result.GRADE = row.Field<System.String>("GRADE");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.SERIALID = row.Field<System.String>("SERIALID");
                        result.FINISH = row.Field<System.Decimal?>("FINISH");
                        result.MOVEMENTTRANS = row.Field<System.String>("MOVEMENTTRANS");
                        result.WAREHOUSE = row.Field<System.String>("WAREHOUSE");
                        result.LOCATION = row.Field<System.String>("LOCATION");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_BM_OUH

        public List<D365_BM_OUHResult> D365_BM_OUH(D365_BM_OUHParameter para)
        {
            List<D365_BM_OUHResult> results = new List<D365_BM_OUHResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMERNO"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_BM_OUH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_BM_OUHResult result =
                            new D365_BM_OUHResult();

                        result.HEADERID = row.Field<System.Decimal?>("HEADERID");
                        result.TOTALRECORD = row.Field<System.Decimal?>("TOTALRECORD");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_BM_OPL

        public List<D365_BM_OPLResult> D365_BM_OPL(D365_BM_OPLParameter para)
        {
            List<D365_BM_OPLResult> results = new List<D365_BM_OPLResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMERNO"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_BM_OPL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_BM_OPLResult result =
                            new D365_BM_OPLResult();

                        result.LINENO = row.Field<System.Decimal?>("LINENO");
                        result.PROCQTY = row.Field<System.Decimal?>("PROCQTY");
                        result.OPRNO = row.Field<System.String>("OPRNO");
                        result.OPRID = row.Field<System.String>("OPRID");
                        result.MACHINENO = row.Field<System.String>("MACHINENO");
                        result.STARTDATETIME = row.Field<System.DateTime?>("STARTDATETIME");
                        result.ENDDATETIME = row.Field<System.DateTime?>("ENDDATETIME");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_BM_OPH

        public List<D365_BM_OPHResult> D365_BM_OPH(D365_BM_OPHParameter para)
        {
            List<D365_BM_OPHResult> results = new List<D365_BM_OPHResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMERNO"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_BM_OPH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_BM_OPHResult result =
                            new D365_BM_OPHResult();

                        result.HEADERID = row.Field<System.Decimal?>("HEADERID");
                        result.TOTALRECORD = row.Field<System.Decimal?>("TOTALRECORD");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_BM_ISL

        public List<D365_BM_ISLResult> D365_BM_ISL(D365_BM_ISLParameter para)
        {
            List<D365_BM_ISLResult> results = new List<D365_BM_ISLResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMERNO"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_BM_ISL",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_BM_ISLResult result =
                            new D365_BM_ISLResult();

                        result.LINENO = row.Field<System.Decimal?>("LINENO");
                        result.ISSUEDATE = row.Field<System.DateTime?>("ISSUEDATE");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.STYLEID = row.Field<System.String>("STYLEID");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.SERIALID = row.Field<System.String>("SERIALID");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_BM_ISH

        public List<D365_BM_ISHResult> D365_BM_ISH(D365_BM_ISHParameter para)
        {
            List<D365_BM_ISHResult> results = new List<D365_BM_ISHResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMERNO"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_BM_ISH",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_BM_ISHResult result =
                            new D365_BM_ISHResult();

                        result.HEADERID = row.Field<System.Decimal?>("HEADERID");
                        result.TOTALRECORD = row.Field<System.Decimal?>("TOTALRECORD");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #region D365_BM_BPO

        public List<D365_BM_BPOResult> D365_BM_BPO(D365_BM_BPOParameter para)
        {
            List<D365_BM_BPOResult> results = new List<D365_BM_BPOResult>();
            if (!HasConnection())
                return results;

            string[] paraNames = new string[]
            {
                "P_BEAMERNO"
            };
            object[] paraValues = new object[]
            {
                para.P_BEAMERNO
            };

            ExecuteResult<StoredProcedureResult> ret = _manager.ExecuteProcedure(
                "D365_BM_BPO",
                paraNames, paraValues);
            if (null != ret && !ret.HasException)
            {
                if (null == ret.Result.Table)
                {
                    // check has error code.
                    //ret.Result.OutParameters[""];
                }
                else
                {
                    foreach (DataRow row in ret.Result.Table.Rows)
                    {
                        D365_BM_BPOResult result =
                            new D365_BM_BPOResult();

                        result.PRODID = row.Field<System.Decimal?>("PRODID");
                        result.LOTNO = row.Field<System.String>("LOTNO");
                        result.ITEMID = row.Field<System.String>("ITEMID");
                        result.LOADINGTYPE = row.Field<System.String>("LOADINGTYPE");
                        result.QTY = row.Field<System.Decimal?>("QTY");
                        result.UNIT = row.Field<System.String>("UNIT");
                        result.OPERATION = row.Field<System.String>("OPERATION");

                        results.Add(result);
                    }
                }
            }

            return results;
        }

        #endregion

        #endregion

    }

}

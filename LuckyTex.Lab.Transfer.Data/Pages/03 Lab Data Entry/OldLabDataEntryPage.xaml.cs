#region Using

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

using NLib;
using LuckyTex.Services;
using LuckyTex.Models;

using iTextSharp.text.pdf;
using iTextSharp.text.pdf.parser;

using System.Reflection;
using iTextSharp.text;

using System.Globalization;
using System.Collections;

using System.IO;
using System.Drawing.Imaging;
using System.Drawing.Printing;
using Microsoft.Reporting.WinForms;
using System.Runtime.InteropServices;

using DataControl.ClassData;
using System.Threading;

using System.Configuration;
using System.Data;
using System.Data.OleDb;
using Microsoft.Office.Interop.Excel;
using System.Text.RegularExpressions;

#endregion

namespace LuckyTex.Pages
{
    /// <summary>
    /// Interaction logic for OldLabDataEntryPage.xaml
    /// </summary>
    public partial class OldLabDataEntryPage : UserControl
    {
        #region Constructor

        /// <summary>
        /// Constructor.
        /// </summary>
        public OldLabDataEntryPage()
        {
            InitializeComponent();

            CultureInfo ci = CultureInfo.CreateSpecificCulture("en-US");
            ci.DateTimeFormat.ShortDatePattern = "dd/MM/yy";
            Thread.CurrentThread.CurrentCulture = ci; 
            IFormatProvider culture = new System.Globalization.CultureInfo("en-US", true);

            dteEntryDate.SelectedDate = DateTime.Now;
        }

        #endregion

        #region Internal Variables

        string opera = string.Empty;
        string positionLevel = string.Empty;

        LAB_INSERTPRODUCTION _session = new LAB_INSERTPRODUCTION();

        LAB_GETITEM_LCL_UCL _item_LCL_UCL = new LAB_GETITEM_LCL_UCL();

        #endregion

        #region Load

        private void UserControl_Loaded(object sender, RoutedEventArgs e)
        {
            ClearControl();

            if (opera != "")
                txtOperator.Text = opera;

            if (positionLevel != "")
            {
                if (positionLevel == "1" || positionLevel == "2")
                {
                    cmdApprove.Visibility = System.Windows.Visibility.Visible;
                    cmdNotApprove.Visibility = System.Windows.Visibility.Visible;
                }
                else
                {
                    cmdApprove.Visibility = System.Windows.Visibility.Collapsed;
                    cmdNotApprove.Visibility = System.Windows.Visibility.Collapsed;
                }
            }
        }

        private void UserControl_Unloaded(object sender, RoutedEventArgs e)
        {

        }

        #endregion

        #region Button Handlers

        #region cmdBack_Click
        private void cmdBack_Click(object sender, RoutedEventArgs e)
        {
            PageManager.Instance.Back();
        }
        #endregion

        #region cmdClear_Click

        private void cmdClear_Click(object sender, RoutedEventArgs e)
        {
            buttonEnabled(false);
            ClearControl();
            buttonEnabled(true);
        }

        #endregion

        #region cmdSave_Click
        private void cmdSave_Click(object sender, RoutedEventArgs e)
        {
            if (Save() == true)
                ClearControl();
        }
        #endregion

        #region cmdApprove_Click
        private void cmdApprove_Click(object sender, RoutedEventArgs e)
        {
            if (Approve() == true)
                ClearControl();
        }
        #endregion

        #region cmdNotApprove_Click
        private void cmdNotApprove_Click(object sender, RoutedEventArgs e)
        {
            if (NotApprove() == true)
                ClearControl();
        }
        #endregion

        #region cmdRetestTotalWeight_Click
        private void cmdRetestTotalWeight_Click(object sender, RoutedEventArgs e)
        {
            ShowRetestTotalWeight();
        }
        #endregion

        #region cmdRetestUncoatedWeight_Click
        private void cmdRetestUncoatedWeight_Click(object sender, RoutedEventArgs e)
        {
            ShowRetestUncoatedWeight();
        }
        #endregion

        #region cmdRetestCoatingWeight_Click
        private void cmdRetestCoatingWeight_Click(object sender, RoutedEventArgs e)
        {
            ShowRetestCoatedWeight();
        }
        #endregion

        #region cmdRetestStiffness_Click
        private void cmdRetestStiffness_Click(object sender, RoutedEventArgs e)
        {
            ShowRetestStiffness();
        }
        #endregion

        #region cmdRetestStaticAir_Click
        private void cmdRetestStaticAir_Click(object sender, RoutedEventArgs e)
        {
            ShowRetestStaticAir();
        }
        #endregion

        #region cmdRetestDynamicAir_Click
        private void cmdRetestDynamicAir_Click(object sender, RoutedEventArgs e)
        {
            ShowRetestDynamicAir();
        }
        #endregion

        #endregion

        #region TextBox Handlers

        #region Common

        private void Common_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            e.Handled = !this.IsNumericInput(e);
        }

        private void Cal_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            Regex regex = new Regex("[^0-9.-]+"); //regex that matches disallowed text
            e.Handled = regex.IsMatch(e.Text);
        }
        #endregion

        #region General

        #region txtITMCODE_KeyDown
        private void txtITMCODE_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                txtWEAVINGLOG.Focus();
                txtWEAVINGLOG.SelectAll();
                e.Handled = true;
            }
        }
        #endregion

        #region txtWEAVINGLOG_KeyDown
        private void txtWEAVINGLOG_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                txtFINISHINGLOT.Focus();
                txtFINISHINGLOT.SelectAll();
                e.Handled = true;
            }
        }
        #endregion

        #region txtFINISHINGLOT_KeyDown
        private void txtFINISHINGLOT_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtMAXFORCE_WN1.IsEnabled == true)
                {
                    txtMAXFORCE_WN1.Focus();
                    txtMAXFORCE_WN1.SelectAll();
                }
                else if (txtWidthN1.Visibility == Visibility.Visible)
                {
                    txtWidthN1.Focus();
                    txtWidthN1.SelectAll();
                }
                else if (txtUSABLE_WIDTHN1.Visibility == Visibility.Visible)
                {
                    txtUSABLE_WIDTHN1.Focus();
                    txtUSABLE_WIDTHN1.SelectAll();
                }
                else
                {
                    txtWIDTH_SILICONEN1.Focus();
                    txtWIDTH_SILICONEN1.SelectAll();
                }

                e.Handled = true;
            }
        }
        #endregion

        #region txtITMCODE_LostFocus
        private void txtITMCODE_LostFocus(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(txtITMCODE.Text))
            {
                _session.P_ITMCODE = txtITMCODE.Text;

                if (LoadItemTestProperty(txtITMCODE.Text) == false)
                {
                    "No Data loading from Item Test Property".ShowMessageBox();
                }
                else
                {
                    if (LoadItemTestSpecification(txtITMCODE.Text) == false)
                    {
                        "No Data loading from Item Test Specification".ShowMessageBox();
                    }
                }

                if (!string.IsNullOrEmpty(txtITMCODE.Text) && !string.IsNullOrEmpty(txtWEAVINGLOG.Text))
                {
                    CheckRetestButton();
                }
            }
            else
            {
                _session.P_ITMCODE = string.Empty;

                cmdRetestDynamicAir.Visibility = Visibility.Hidden;
                cmdRetestStaticAir.Visibility = Visibility.Hidden;
                cmdRetestStiffness.Visibility = Visibility.Hidden;

                cmdRetestTotalWeight.Visibility = Visibility.Hidden;
                cmdRetestUncoatedWeight.Visibility = Visibility.Hidden;
                cmdRetestCoatingWeight.Visibility = Visibility.Hidden;
            }
        }
        #endregion

        #region txtWEAVINGLOG_LostFocus
        private void txtWEAVINGLOG_LostFocus(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(txtWEAVINGLOG.Text))
            {
                _session.P_WEAVINGLOG = txtWEAVINGLOG.Text;
            }
            else
            {
                _session.P_WEAVINGLOG = string.Empty;

                cmdRetestDynamicAir.Visibility = Visibility.Hidden;
                cmdRetestStaticAir.Visibility = Visibility.Hidden;
                cmdRetestStiffness.Visibility = Visibility.Hidden;

                cmdRetestTotalWeight.Visibility = Visibility.Hidden;
                cmdRetestUncoatedWeight.Visibility = Visibility.Hidden;
                cmdRetestCoatingWeight.Visibility = Visibility.Hidden;
            }

            if (!string.IsNullOrEmpty(txtITMCODE.Text) && !string.IsNullOrEmpty(txtWEAVINGLOG.Text))
            {
                Lab_getPLCData(txtITMCODE.Text, txtWEAVINGLOG.Text);

                CheckRetestButton();
            }
        }
        #endregion

        #region txtFINISHINGLOT_LostFocus
        private void txtFINISHINGLOT_LostFocus(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(txtITMCODE.Text) && !string.IsNullOrEmpty(txtWEAVINGLOG.Text) && !string.IsNullOrEmpty(txtFINISHINGLOT.Text))
            {
                if (LoadLabData(txtITMCODE.Text, txtWEAVINGLOG.Text, txtFINISHINGLOT.Text) == false)
                {
                    "No Data loading from pdf File".ShowMessageBox();

                    chkManual.IsChecked = true;
                    txtMAXFORCE_WN1.Focus();
                    txtMAXFORCE_WN1.SelectAll();
                    e.Handled = true;
                }
            }
            if (!string.IsNullOrEmpty(txtFINISHINGLOT.Text))
            {
                _session.P_FINISHINGLOT = txtFINISHINGLOT.Text;
            }
            else
            {
                _session.P_FINISHINGLOT = string.Empty;
            }
        }
        #endregion

        #region ItemTestProperty

        #region KeyDown

        #region Width
        private void txtWidthN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtWidthN2.Visibility == Visibility.Visible)
                {
                    txtWidthN2.Focus();
                    txtWidthN2.SelectAll();
                }
                else if (txtUSABLE_WIDTHN1.Visibility == Visibility.Visible)
                {
                    txtUSABLE_WIDTHN1.Focus();
                    txtUSABLE_WIDTHN1.SelectAll();
                }
                else if (txtWIDTH_SILICONEN1.Visibility == Visibility.Visible)
                {
                    txtWIDTH_SILICONEN1.Focus();
                    txtWIDTH_SILICONEN1.SelectAll();
                }
                else if (txtNUMTHREADS_R0_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R0_WN1.Focus();
                    txtNUMTHREADS_R0_WN1.SelectAll();
                }
                //else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                //{
                //    txtNUMTHREADS_WN1.Focus();
                //    txtNUMTHREADS_WN1.SelectAll();
                //}
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtWidthN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtWidthN3.Visibility == Visibility.Visible)
                {
                    txtWidthN3.Focus();
                    txtWidthN3.SelectAll();
                }
                else if (txtUSABLE_WIDTHN1.Visibility == Visibility.Visible)
                {
                    txtUSABLE_WIDTHN1.Focus();
                    txtUSABLE_WIDTHN1.SelectAll();
                }
                else if (txtWIDTH_SILICONEN1.Visibility == Visibility.Visible)
                {
                    txtWIDTH_SILICONEN1.Focus();
                    txtWIDTH_SILICONEN1.SelectAll();
                }
                else if (txtNUMTHREADS_R0_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R0_WN1.Focus();
                    txtNUMTHREADS_R0_WN1.SelectAll();
                }
                //else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                //{
                //    txtNUMTHREADS_WN1.Focus();
                //    txtNUMTHREADS_WN1.SelectAll();
                //}
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtWidthN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtWidthN4.Visibility == Visibility.Visible)
                {
                    txtWidthN4.Focus();
                    txtWidthN4.SelectAll();
                }
                else if (txtUSABLE_WIDTHN1.Visibility == Visibility.Visible)
                {
                    txtUSABLE_WIDTHN1.Focus();
                    txtUSABLE_WIDTHN1.SelectAll();
                }
                else if (txtWIDTH_SILICONEN1.Visibility == Visibility.Visible)
                {
                    txtWIDTH_SILICONEN1.Focus();
                    txtWIDTH_SILICONEN1.SelectAll();
                }
                else if (txtNUMTHREADS_R0_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R0_WN1.Focus();
                    txtNUMTHREADS_R0_WN1.SelectAll();
                }
                //else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                //{
                //    txtNUMTHREADS_WN1.Focus();
                //    txtNUMTHREADS_WN1.SelectAll();
                //}
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtWidthN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtWidthN5.Visibility == Visibility.Visible)
                {
                    txtWidthN5.Focus();
                    txtWidthN5.SelectAll();
                }
                else if (txtUSABLE_WIDTHN1.Visibility == Visibility.Visible)
                {
                    txtUSABLE_WIDTHN1.Focus();
                    txtUSABLE_WIDTHN1.SelectAll();
                }
                else if (txtWIDTH_SILICONEN1.Visibility == Visibility.Visible)
                {
                    txtWIDTH_SILICONEN1.Focus();
                    txtWIDTH_SILICONEN1.SelectAll();
                }
                else if (txtNUMTHREADS_R0_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R0_WN1.Focus();
                    txtNUMTHREADS_R0_WN1.SelectAll();
                }
                //else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                //{
                //    txtNUMTHREADS_WN1.Focus();
                //    txtNUMTHREADS_WN1.SelectAll();
                //}
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtWidthN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtWidthN6.Visibility == Visibility.Visible)
                {
                    txtWidthN6.Focus();
                    txtWidthN6.SelectAll();
                }
                else if (txtUSABLE_WIDTHN1.Visibility == Visibility.Visible)
                {
                    txtUSABLE_WIDTHN1.Focus();
                    txtUSABLE_WIDTHN1.SelectAll();
                }
                else if (txtWIDTH_SILICONEN1.Visibility == Visibility.Visible)
                {
                    txtWIDTH_SILICONEN1.Focus();
                    txtWIDTH_SILICONEN1.SelectAll();
                }
                else if (txtNUMTHREADS_R0_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R0_WN1.Focus();
                    txtNUMTHREADS_R0_WN1.SelectAll();
                }
                //else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                //{
                //    txtNUMTHREADS_WN1.Focus();
                //    txtNUMTHREADS_WN1.SelectAll();
                //}
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtWidthN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtUSABLE_WIDTHN1.Visibility == Visibility.Visible)
                {
                    txtUSABLE_WIDTHN1.Focus();
                    txtUSABLE_WIDTHN1.SelectAll();
                }
                else if (txtWIDTH_SILICONEN1.Visibility == Visibility.Visible)
                {
                    txtWIDTH_SILICONEN1.Focus();
                    txtWIDTH_SILICONEN1.SelectAll();
                }
                else if (txtNUMTHREADS_R0_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R0_WN1.Focus();
                    txtNUMTHREADS_R0_WN1.SelectAll();
                }
                //else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                //{
                //    txtNUMTHREADS_WN1.Focus();
                //    txtNUMTHREADS_WN1.SelectAll();
                //}
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }
        #endregion

        #region USABLE_WIDTH
        private void txtUSABLE_WIDTHN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtUSABLE_WIDTHN2.Visibility == Visibility.Visible)
                {
                    txtUSABLE_WIDTHN2.Focus();
                    txtUSABLE_WIDTHN2.SelectAll();
                }
                else if (txtWIDTH_SILICONEN1.Visibility == Visibility.Visible)
                {
                    txtWIDTH_SILICONEN1.Focus();
                    txtWIDTH_SILICONEN1.SelectAll();
                }
                else if (txtNUMTHREADS_R0_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R0_WN1.Focus();
                    txtNUMTHREADS_R0_WN1.SelectAll();
                }
                //else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                //{
                //    txtNUMTHREADS_WN1.Focus();
                //    txtNUMTHREADS_WN1.SelectAll();
                //}
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtUSABLE_WIDTHN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtUSABLE_WIDTHN3.Visibility == Visibility.Visible)
                {
                    txtUSABLE_WIDTHN3.Focus();
                    txtUSABLE_WIDTHN3.SelectAll();
                }
                else if (txtWIDTH_SILICONEN1.Visibility == Visibility.Visible)
                {
                    txtWIDTH_SILICONEN1.Focus();
                    txtWIDTH_SILICONEN1.SelectAll();
                }
                else if (txtNUMTHREADS_R0_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R0_WN1.Focus();
                    txtNUMTHREADS_R0_WN1.SelectAll();
                }
                //else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                //{
                //    txtNUMTHREADS_WN1.Focus();
                //    txtNUMTHREADS_WN1.SelectAll();
                //}
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtUSABLE_WIDTHN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtUSABLE_WIDTHN4.Visibility == Visibility.Visible)
                {
                    txtUSABLE_WIDTHN4.Focus();
                    txtUSABLE_WIDTHN4.SelectAll();
                }
                else if (txtWIDTH_SILICONEN1.Visibility == Visibility.Visible)
                {
                    txtWIDTH_SILICONEN1.Focus();
                    txtWIDTH_SILICONEN1.SelectAll();
                }
                else if (txtNUMTHREADS_R0_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R0_WN1.Focus();
                    txtNUMTHREADS_R0_WN1.SelectAll();
                }
                //else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                //{
                //    txtNUMTHREADS_WN1.Focus();
                //    txtNUMTHREADS_WN1.SelectAll();
                //}
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtUSABLE_WIDTHN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtUSABLE_WIDTHN5.Visibility == Visibility.Visible)
                {
                    txtUSABLE_WIDTHN5.Focus();
                    txtUSABLE_WIDTHN5.SelectAll();
                }
                else if (txtWIDTH_SILICONEN1.Visibility == Visibility.Visible)
                {
                    txtWIDTH_SILICONEN1.Focus();
                    txtWIDTH_SILICONEN1.SelectAll();
                }
                else if (txtNUMTHREADS_R0_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R0_WN1.Focus();
                    txtNUMTHREADS_R0_WN1.SelectAll();
                }
                //else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                //{
                //    txtNUMTHREADS_WN1.Focus();
                //    txtNUMTHREADS_WN1.SelectAll();
                //}
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtUSABLE_WIDTHN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtUSABLE_WIDTHN6.Visibility == Visibility.Visible)
                {
                    txtUSABLE_WIDTHN6.Focus();
                    txtUSABLE_WIDTHN6.SelectAll();
                }
                else if (txtWIDTH_SILICONEN1.Visibility == Visibility.Visible)
                {
                    txtWIDTH_SILICONEN1.Focus();
                    txtWIDTH_SILICONEN1.SelectAll();
                }
                else if (txtNUMTHREADS_R0_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R0_WN1.Focus();
                    txtNUMTHREADS_R0_WN1.SelectAll();
                }
                //else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                //{
                //    txtNUMTHREADS_WN1.Focus();
                //    txtNUMTHREADS_WN1.SelectAll();
                //}
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtUSABLE_WIDTHN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtWIDTH_SILICONEN1.Visibility == Visibility.Visible)
                {
                    txtWIDTH_SILICONEN1.Focus();
                    txtWIDTH_SILICONEN1.SelectAll();
                }
                else if (txtNUMTHREADS_R0_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R0_WN1.Focus();
                    txtNUMTHREADS_R0_WN1.SelectAll();
                }
                //else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                //{
                //    txtNUMTHREADS_WN1.Focus();
                //    txtNUMTHREADS_WN1.SelectAll();
                //}
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                e.Handled = true;
            }
        }
        #endregion

        #region WIDTH_SILICONE
        private void txtWIDTH_SILICONEN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtWIDTH_SILICONEN2.Visibility == Visibility.Visible)
                {
                    txtWIDTH_SILICONEN2.Focus();
                    txtWIDTH_SILICONEN2.SelectAll();
                }
                else if (txtNUMTHREADS_R0_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R0_WN1.Focus();
                    txtNUMTHREADS_R0_WN1.SelectAll();
                }
                //else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                //{
                //    txtNUMTHREADS_WN1.Focus();
                //    txtNUMTHREADS_WN1.SelectAll();
                //}
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtWIDTH_SILICONEN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtWIDTH_SILICONEN3.Visibility == Visibility.Visible)
                {
                    txtWIDTH_SILICONEN3.Focus();
                    txtWIDTH_SILICONEN3.SelectAll();
                }
                else if (txtNUMTHREADS_R0_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R0_WN1.Focus();
                    txtNUMTHREADS_R0_WN1.SelectAll();
                }
                //else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                //{
                //    txtNUMTHREADS_WN1.Focus();
                //    txtNUMTHREADS_WN1.SelectAll();
                //}
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtWIDTH_SILICONEN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtWIDTH_SILICONEN4.Visibility == Visibility.Visible)
                {
                    txtWIDTH_SILICONEN4.Focus();
                    txtWIDTH_SILICONEN4.SelectAll();
                }
                else if (txtNUMTHREADS_R0_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R0_WN1.Focus();
                    txtNUMTHREADS_R0_WN1.SelectAll();
                }
                //else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                //{
                //    txtNUMTHREADS_WN1.Focus();
                //    txtNUMTHREADS_WN1.SelectAll();
                //}
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtWIDTH_SILICONEN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtWIDTH_SILICONEN5.Visibility == Visibility.Visible)
                {
                    txtWIDTH_SILICONEN5.Focus();
                    txtWIDTH_SILICONEN5.SelectAll();
                }
                else if (txtNUMTHREADS_R0_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R0_WN1.Focus();
                    txtNUMTHREADS_R0_WN1.SelectAll();
                }
                //else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                //{
                //    txtNUMTHREADS_WN1.Focus();
                //    txtNUMTHREADS_WN1.SelectAll();
                //}
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtWIDTH_SILICONEN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtWIDTH_SILICONEN6.Visibility == Visibility.Visible)
                {
                    txtWIDTH_SILICONEN6.Focus();
                    txtWIDTH_SILICONEN6.SelectAll();
                }
                else if (txtNUMTHREADS_R0_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R0_WN1.Focus();
                    txtNUMTHREADS_R0_WN1.SelectAll();
                }
                //else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                //{
                //    txtNUMTHREADS_WN1.Focus();
                //    txtNUMTHREADS_WN1.SelectAll();
                //}
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtWIDTH_SILICONEN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                //if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                //{
                //    txtNUMTHREADS_WN1.Focus();
                //    txtNUMTHREADS_WN1.SelectAll();
                //}
                if (txtNUMTHREADS_R0_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R0_WN1.Focus();
                    txtNUMTHREADS_R0_WN1.SelectAll();
                }
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                e.Handled = true;
            }
        }
        #endregion

        #region NUMTHREADS_W

        #region NUMTHREADS_W
        private void txtNUMTHREADS_WN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtNUMTHREADS_WN2.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_WN2.Focus();
                    txtNUMTHREADS_WN2.SelectAll();
                }
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtNUMTHREADS_WN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtNUMTHREADS_WN3.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_WN3.Focus();
                    txtNUMTHREADS_WN3.SelectAll();
                }
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtNUMTHREADS_WN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtNUMTHREADS_WN4.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_WN4.Focus();
                    txtNUMTHREADS_WN4.SelectAll();
                }
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtNUMTHREADS_WN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtNUMTHREADS_WN5.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_WN5.Focus();
                    txtNUMTHREADS_WN5.SelectAll();
                }
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtNUMTHREADS_WN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtNUMTHREADS_WN6.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_WN6.Focus();
                    txtNUMTHREADS_WN6.SelectAll();
                }
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtNUMTHREADS_WN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }

                e.Handled = true;
            }
        }
        #endregion

        #region NUMTHREADS_R0_W
        private void txtNUMTHREADS_R0_WN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                chkNUMTHREADS_R1();

                if (txtNUMTHREADS_R0_WN2.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R0_WN2.Focus();
                    txtNUMTHREADS_R0_WN2.SelectAll();
                }
                else  if (txtNUMTHREADS_R0_WN3.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R0_WN3.Focus();
                    txtNUMTHREADS_R0_WN3.SelectAll();
                }
                else if (txtNUMTHREADS_R1_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN1.Focus();
                    txtNUMTHREADS_R1_WN1.SelectAll();
                }
                else if (txtNUMTHREADS_R1_WN2.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN2.Focus();
                    txtNUMTHREADS_R1_WN2.SelectAll();
                }
                else if (txtNUMTHREADS_R1_WN3.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN3.Focus();
                    txtNUMTHREADS_R1_WN3.SelectAll();
                }
                else if (txtNUMTHREADS_R2_WN1.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN1.Focus();
                        txtNUMTHREADS_R2_WN1.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_R2_WN2.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN2.Focus();
                        txtNUMTHREADS_R2_WN2.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_R2_WN3.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN3.Focus();
                        txtNUMTHREADS_R2_WN3.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSSum.IsVisible == true)
                    {
                        txtNUMTHREADS_WN1.Focus();
                        txtNUMTHREADS_WN1.SelectAll();
                    }
                    else
                    {
                        txtNUMTHREADS_FN1.Focus();
                        txtNUMTHREADS_FN1.SelectAll();
                    }
                }
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtNUMTHREADS_R0_WN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                chkNUMTHREADS_R1();

                if (txtNUMTHREADS_R0_WN3.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R0_WN3.Focus();
                    txtNUMTHREADS_R0_WN3.SelectAll();
                }
                else if (txtNUMTHREADS_R0_WN4.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R0_WN4.Focus();
                    txtNUMTHREADS_R0_WN4.SelectAll();
                }
                else if (txtNUMTHREADS_R1_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN1.Focus();
                    txtNUMTHREADS_R1_WN1.SelectAll();
                }
                else if (txtNUMTHREADS_R1_WN2.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN2.Focus();
                    txtNUMTHREADS_R1_WN2.SelectAll();
                }
                else if (txtNUMTHREADS_R1_WN3.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN3.Focus();
                    txtNUMTHREADS_R1_WN3.SelectAll();
                }
                else if (txtNUMTHREADS_R2_WN1.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN1.Focus();
                        txtNUMTHREADS_R2_WN1.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_R2_WN2.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN2.Focus();
                        txtNUMTHREADS_R2_WN2.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_R2_WN3.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN3.Focus();
                        txtNUMTHREADS_R2_WN3.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSSum.IsVisible == true)
                    {
                        txtNUMTHREADS_WN1.Focus();
                        txtNUMTHREADS_WN1.SelectAll();
                    }
                    else
                    {
                        txtNUMTHREADS_FN1.Focus();
                        txtNUMTHREADS_FN1.SelectAll();
                    }
                }
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtNUMTHREADS_R0_WN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                chkNUMTHREADS_R1();

                if (txtNUMTHREADS_R0_WN4.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R0_WN4.Focus();
                    txtNUMTHREADS_R0_WN4.SelectAll();
                }
                else if (txtNUMTHREADS_R0_WN5.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R0_WN5.Focus();
                    txtNUMTHREADS_R0_WN5.SelectAll();
                }
                else if (txtNUMTHREADS_R1_WN1.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow1.IsVisible == true)
                    {
                        txtNUMTHREADS_R1_WN1.Focus();
                        txtNUMTHREADS_R1_WN1.SelectAll();
                    }
                    else
                    {
                        txtNUMTHREADS_FN1.Focus();
                        txtNUMTHREADS_FN1.SelectAll();
                    }
                }
                else if (txtNUMTHREADS_R1_WN2.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow1.IsVisible == true)
                    {
                        txtNUMTHREADS_R1_WN2.Focus();
                        txtNUMTHREADS_R1_WN2.SelectAll();
                    }
                    else
                    {
                        txtNUMTHREADS_FN1.Focus();
                        txtNUMTHREADS_FN1.SelectAll();
                    }
                }
                else if (txtNUMTHREADS_R1_WN3.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow1.IsVisible == true)
                    {
                        txtNUMTHREADS_R1_WN3.Focus();
                        txtNUMTHREADS_R1_WN3.SelectAll();
                    }
                    else
                    {
                        txtNUMTHREADS_FN1.Focus();
                        txtNUMTHREADS_FN1.SelectAll();
                    }
                }
                else if (txtNUMTHREADS_R2_WN1.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN1.Focus();
                        txtNUMTHREADS_R2_WN1.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_R2_WN2.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN2.Focus();
                        txtNUMTHREADS_R2_WN2.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_R2_WN3.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN3.Focus();
                        txtNUMTHREADS_R2_WN3.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSSum.IsVisible == true)
                    {
                        txtNUMTHREADS_WN1.Focus();
                        txtNUMTHREADS_WN1.SelectAll();
                    }
                    else
                    {
                        txtNUMTHREADS_FN1.Focus();
                        txtNUMTHREADS_FN1.SelectAll();
                    }
                }
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtNUMTHREADS_R0_WN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtNUMTHREADS_R0_WN5.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R0_WN5.Focus();
                    txtNUMTHREADS_R0_WN5.SelectAll();
                }
                else if (txtNUMTHREADS_R0_WN6.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R0_WN6.Focus();
                    txtNUMTHREADS_R0_WN6.SelectAll();
                }
                else if (txtNUMTHREADS_R1_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN1.Focus();
                    txtNUMTHREADS_R1_WN1.SelectAll();
                }
                else if (txtNUMTHREADS_R1_WN2.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN2.Focus();
                    txtNUMTHREADS_R1_WN2.SelectAll();
                }
                else if (txtNUMTHREADS_R1_WN3.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN3.Focus();
                    txtNUMTHREADS_R1_WN3.SelectAll();
                }
                else if (txtNUMTHREADS_R2_WN1.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN1.Focus();
                        txtNUMTHREADS_R2_WN1.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_R2_WN2.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN2.Focus();
                        txtNUMTHREADS_R2_WN2.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_R2_WN3.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN3.Focus();
                        txtNUMTHREADS_R2_WN3.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSSum.IsVisible == true)
                    {
                        txtNUMTHREADS_WN1.Focus();
                        txtNUMTHREADS_WN1.SelectAll();
                    }
                    else
                    {
                        txtNUMTHREADS_FN1.Focus();
                        txtNUMTHREADS_FN1.SelectAll();
                    }
                }
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtNUMTHREADS_R0_WN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtNUMTHREADS_R0_WN6.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R0_WN6.Focus();
                    txtNUMTHREADS_R0_WN6.SelectAll();
                }
                else if (txtNUMTHREADS_R1_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN1.Focus();
                    txtNUMTHREADS_R1_WN1.SelectAll();
                }
                else if (txtNUMTHREADS_R1_WN2.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN2.Focus();
                    txtNUMTHREADS_R1_WN2.SelectAll();
                }
                else if (txtNUMTHREADS_R1_WN3.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN3.Focus();
                    txtNUMTHREADS_R1_WN3.SelectAll();
                }
                else if (txtNUMTHREADS_R2_WN1.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN1.Focus();
                        txtNUMTHREADS_R2_WN1.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_R2_WN2.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN2.Focus();
                        txtNUMTHREADS_R2_WN2.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_R2_WN3.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN3.Focus();
                        txtNUMTHREADS_R2_WN3.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSSum.IsVisible == true)
                    {
                        txtNUMTHREADS_WN1.Focus();
                        txtNUMTHREADS_WN1.SelectAll();
                    }
                    else
                    {
                        txtNUMTHREADS_FN1.Focus();
                        txtNUMTHREADS_FN1.SelectAll();
                    }
                }
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtNUMTHREADS_R0_WN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtNUMTHREADS_R1_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN1.Focus();
                    txtNUMTHREADS_R1_WN1.SelectAll();
                }
                else if (txtNUMTHREADS_R1_WN2.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN2.Focus();
                    txtNUMTHREADS_R1_WN2.SelectAll();
                }
                else if (txtNUMTHREADS_R1_WN3.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN3.Focus();
                    txtNUMTHREADS_R1_WN3.SelectAll();
                }
                else if (txtNUMTHREADS_R2_WN1.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN1.Focus();
                        txtNUMTHREADS_R2_WN1.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_R2_WN2.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN2.Focus();
                        txtNUMTHREADS_R2_WN2.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_R2_WN3.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN3.Focus();
                        txtNUMTHREADS_R2_WN3.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSSum.IsVisible == true)
                    {
                        txtNUMTHREADS_WN1.Focus();
                        txtNUMTHREADS_WN1.SelectAll();
                    }
                    else
                    {
                        txtNUMTHREADS_FN1.Focus();
                        txtNUMTHREADS_FN1.SelectAll();
                    }
                }
                if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        #endregion

        #region NUMTHREADS_R1_W
        private void txtNUMTHREADS_R1_WN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                chkNUMTHREADS_R2();

                if (txtNUMTHREADS_R1_WN2.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN2.Focus();
                    txtNUMTHREADS_R1_WN2.SelectAll();
                }
                else if (txtNUMTHREADS_R1_WN3.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN3.Focus();
                    txtNUMTHREADS_R1_WN3.SelectAll();
                }
                else if (txtNUMTHREADS_R1_WN4.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN4.Focus();
                    txtNUMTHREADS_R1_WN4.SelectAll();
                }
                else if (txtNUMTHREADS_R1_WN5.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN5.Focus();
                    txtNUMTHREADS_R1_WN5.SelectAll();
                }
                else if (txtNUMTHREADS_R1_WN6.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN6.Focus();
                    txtNUMTHREADS_R1_WN6.SelectAll();
                }
                else if (txtNUMTHREADS_R2_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R2_WN1.Focus();
                    txtNUMTHREADS_R2_WN1.SelectAll();
                }
                else if (txtNUMTHREADS_R2_WN2.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R2_WN2.Focus();
                    txtNUMTHREADS_R2_WN2.SelectAll();
                }
                else if (txtNUMTHREADS_R2_WN3.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R2_WN3.Focus();
                    txtNUMTHREADS_R2_WN3.SelectAll();
                }
                else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSSum.IsVisible == true)
                    {
                        txtNUMTHREADS_WN1.Focus();
                        txtNUMTHREADS_WN1.SelectAll();
                    }
                    else
                    {
                        txtNUMTHREADS_FN1.Focus();
                        txtNUMTHREADS_FN1.SelectAll();
                    }
                }
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtNUMTHREADS_R1_WN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                chkNUMTHREADS_R2();

                if (txtNUMTHREADS_R1_WN3.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN3.Focus();
                    txtNUMTHREADS_R1_WN3.SelectAll();
                }
                else if (txtNUMTHREADS_R1_WN4.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN4.Focus();
                    txtNUMTHREADS_R1_WN4.SelectAll();
                }
                else if (txtNUMTHREADS_R1_WN5.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN5.Focus();
                    txtNUMTHREADS_R1_WN5.SelectAll();
                }
                else if (txtNUMTHREADS_R1_WN6.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN6.Focus();
                    txtNUMTHREADS_R1_WN6.SelectAll();
                }
                else if (txtNUMTHREADS_R2_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R2_WN1.Focus();
                    txtNUMTHREADS_R2_WN1.SelectAll();
                }
                else if (txtNUMTHREADS_R2_WN2.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R2_WN2.Focus();
                    txtNUMTHREADS_R2_WN2.SelectAll();
                }
                else if (txtNUMTHREADS_R2_WN3.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R2_WN3.Focus();
                    txtNUMTHREADS_R2_WN3.SelectAll();
                }
                else if (txtNUMTHREADS_R2_WN4.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN4.Focus();
                        txtNUMTHREADS_R2_WN4.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_R2_WN5.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN5.Focus();
                        txtNUMTHREADS_R2_WN5.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_R2_WN6.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN6.Focus();
                        txtNUMTHREADS_R2_WN6.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSSum.IsVisible == true)
                    {
                        txtNUMTHREADS_WN1.Focus();
                        txtNUMTHREADS_WN1.SelectAll();
                    }
                    else
                    {
                        txtNUMTHREADS_FN1.Focus();
                        txtNUMTHREADS_FN1.SelectAll();
                    }
                }
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtNUMTHREADS_R1_WN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                chkNUMTHREADS_R2();

                if (txtNUMTHREADS_R1_WN4.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN4.Focus();
                    txtNUMTHREADS_R1_WN4.SelectAll();
                }
                else if (txtNUMTHREADS_R1_WN5.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN5.Focus();
                    txtNUMTHREADS_R1_WN5.SelectAll();
                }
                else if (txtNUMTHREADS_R1_WN6.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN6.Focus();
                    txtNUMTHREADS_R1_WN6.SelectAll();
                }
                else if (txtNUMTHREADS_R2_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R2_WN1.Focus();
                    txtNUMTHREADS_R2_WN1.SelectAll();
                }
                else if (txtNUMTHREADS_R2_WN2.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R2_WN2.Focus();
                    txtNUMTHREADS_R2_WN2.SelectAll();
                }
                else if (txtNUMTHREADS_R2_WN3.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R2_WN3.Focus();
                    txtNUMTHREADS_R2_WN3.SelectAll();
                }
                else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSSum.IsVisible == true)
                    {
                        txtNUMTHREADS_WN1.Focus();
                        txtNUMTHREADS_WN1.SelectAll();
                    }
                    else
                    {
                        txtNUMTHREADS_FN1.Focus();
                        txtNUMTHREADS_FN1.SelectAll();
                    }
                }
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtNUMTHREADS_R1_WN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtNUMTHREADS_R1_WN5.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN5.Focus();
                    txtNUMTHREADS_R1_WN5.SelectAll();
                }
                else if (txtNUMTHREADS_R1_WN6.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN6.Focus();
                    txtNUMTHREADS_R1_WN6.SelectAll();
                }
                else if (txtNUMTHREADS_R2_WN1.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN1.Focus();
                        txtNUMTHREADS_R2_WN1.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_R2_WN2.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN2.Focus();
                        txtNUMTHREADS_R2_WN2.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_R2_WN3.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN3.Focus();
                        txtNUMTHREADS_R2_WN3.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSSum.IsVisible == true)
                    {
                        txtNUMTHREADS_WN1.Focus();
                        txtNUMTHREADS_WN1.SelectAll();
                    }
                    else
                    {
                        txtNUMTHREADS_FN1.Focus();
                        txtNUMTHREADS_FN1.SelectAll();
                    }
                }
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtNUMTHREADS_R1_WN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtNUMTHREADS_R1_WN6.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R1_WN6.Focus();
                    txtNUMTHREADS_R1_WN6.SelectAll();
                }
                else if (txtNUMTHREADS_R2_WN1.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN1.Focus();
                        txtNUMTHREADS_R2_WN1.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_R2_WN2.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN2.Focus();
                        txtNUMTHREADS_R2_WN2.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_R2_WN3.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN3.Focus();
                        txtNUMTHREADS_R2_WN3.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSSum.IsVisible == true)
                    {
                        txtNUMTHREADS_WN1.Focus();
                        txtNUMTHREADS_WN1.SelectAll();
                    }
                    else
                    {
                        txtNUMTHREADS_FN1.Focus();
                        txtNUMTHREADS_FN1.SelectAll();
                    }
                }
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtNUMTHREADS_R1_WN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtNUMTHREADS_R2_WN1.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN1.Focus();
                        txtNUMTHREADS_R2_WN1.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_R2_WN2.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN2.Focus();
                        txtNUMTHREADS_R2_WN2.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_R2_WN3.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADS_R2_WN3.Focus();
                        txtNUMTHREADS_R2_WN3.SelectAll();
                    }
                    else
                    {
                        if (txtNUMTHREADSSum.IsVisible == true)
                        {
                            txtNUMTHREADS_WN1.Focus();
                            txtNUMTHREADS_WN1.SelectAll();
                        }
                        else
                        {
                            txtNUMTHREADS_FN1.Focus();
                            txtNUMTHREADS_FN1.SelectAll();
                        }
                    }
                }
                else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                {
                    if (txtNUMTHREADSSum.IsVisible == true)
                    {
                        txtNUMTHREADS_WN1.Focus();
                        txtNUMTHREADS_WN1.SelectAll();
                    }
                    else
                    {
                        txtNUMTHREADS_FN1.Focus();
                        txtNUMTHREADS_FN1.SelectAll();
                    }
                }
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }

                e.Handled = true;
            }
        }
        #endregion

        #region NUMTHREADS_R2_W
        private void txtNUMTHREADS_R2_WN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtNUMTHREADS_R2_WN2.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R2_WN2.Focus();
                    txtNUMTHREADS_R2_WN2.SelectAll();
                }
                else if (txtNUMTHREADS_R2_WN3.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R2_WN3.Focus();
                    txtNUMTHREADS_R2_WN3.SelectAll();
                }
                else if (txtNUMTHREADS_R2_WN4.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R2_WN4.Focus();
                    txtNUMTHREADS_R2_WN4.SelectAll();
                }
                else if (txtNUMTHREADS_R2_WN5.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R2_WN5.Focus();
                    txtNUMTHREADS_R2_WN5.SelectAll();
                }
                else if (txtNUMTHREADS_R2_WN6.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R2_WN6.Focus();
                    txtNUMTHREADS_R2_WN6.SelectAll();
                }
                else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_WN1.Focus();
                    txtNUMTHREADS_WN1.SelectAll();
                }
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtNUMTHREADS_R2_WN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtNUMTHREADS_R2_WN3.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R2_WN3.Focus();
                    txtNUMTHREADS_R2_WN3.SelectAll();
                }
                else if (txtNUMTHREADS_R2_WN4.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R2_WN4.Focus();
                    txtNUMTHREADS_R2_WN4.SelectAll();
                }
                else if (txtNUMTHREADS_R2_WN5.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R2_WN5.Focus();
                    txtNUMTHREADS_R2_WN5.SelectAll();
                }
                else if (txtNUMTHREADS_R2_WN6.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R2_WN6.Focus();
                    txtNUMTHREADS_R2_WN6.SelectAll();
                }
                else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_WN1.Focus();
                    txtNUMTHREADS_WN1.SelectAll();
                }
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtNUMTHREADS_R2_WN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtNUMTHREADS_R2_WN4.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R2_WN4.Focus();
                    txtNUMTHREADS_R2_WN4.SelectAll();
                }
                else if (txtNUMTHREADS_R2_WN5.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R2_WN5.Focus();
                    txtNUMTHREADS_R2_WN5.SelectAll();
                }
                else if (txtNUMTHREADS_R2_WN6.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R2_WN6.Focus();
                    txtNUMTHREADS_R2_WN6.SelectAll();
                }
                else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_WN1.Focus();
                    txtNUMTHREADS_WN1.SelectAll();
                }
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtNUMTHREADS_R2_WN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtNUMTHREADS_R2_WN5.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R2_WN5.Focus();
                    txtNUMTHREADS_R2_WN5.SelectAll();
                }
                else if (txtNUMTHREADS_R2_WN6.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R2_WN6.Focus();
                    txtNUMTHREADS_R2_WN6.SelectAll();
                }
                else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_WN1.Focus();
                    txtNUMTHREADS_WN1.SelectAll();
                }
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtNUMTHREADS_R2_WN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtNUMTHREADS_R2_WN6.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_R2_WN6.Focus();
                    txtNUMTHREADS_R2_WN6.SelectAll();
                }
                else if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_WN1.Focus();
                    txtNUMTHREADS_WN1.SelectAll();
                }
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtNUMTHREADS_R2_WN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_WN1.Focus();
                    txtNUMTHREADS_WN1.SelectAll();
                }
                else if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
               
                e.Handled = true;
            }
        }
        #endregion

        #endregion

        #region NUMTHREADS_F
        private void txtNUMTHREADS_FN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtNUMTHREADS_FN2.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN2.Focus();
                    txtNUMTHREADS_FN2.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }
                else if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN1.Focus();
                    txtTHICKNESSN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtNUMTHREADS_FN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtNUMTHREADS_FN3.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN3.Focus();
                    txtNUMTHREADS_FN3.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }
                else if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN1.Focus();
                    txtTHICKNESSN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtNUMTHREADS_FN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtNUMTHREADS_FN4.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN4.Focus();
                    txtNUMTHREADS_FN4.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }
                else if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN1.Focus();
                    txtTHICKNESSN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtNUMTHREADS_FN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtNUMTHREADS_FN5.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN5.Focus();
                    txtNUMTHREADS_FN5.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }
                else if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN1.Focus();
                    txtTHICKNESSN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtNUMTHREADS_FN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtNUMTHREADS_FN6.Visibility == Visibility.Visible)
                {
                    txtNUMTHREADS_FN6.Focus();
                    txtNUMTHREADS_FN6.SelectAll();
                }
                else if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }
                else if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN1.Focus();
                    txtTHICKNESSN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtNUMTHREADS_FN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN1.Focus();
                    txtTOTALWEIGHTN1.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }
                else if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN1.Focus();
                    txtTHICKNESSN1.SelectAll();
                }
                else if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN1.Focus();
                    txtFLAMMABILITY_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }
        #endregion

        #region TOTALWEIGHT
        private void txtTOTALWEIGHTN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtTOTALWEIGHTN2.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN2.Focus();
                    txtTOTALWEIGHTN2.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }
                else if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN1.Focus();
                    txtTHICKNESSN1.SelectAll();
                }
                else if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN1.Focus();
                    txtFLAMMABILITY_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtTOTALWEIGHTN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtTOTALWEIGHTN3.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN3.Focus();
                    txtTOTALWEIGHTN3.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }
                else if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN1.Focus();
                    txtTHICKNESSN1.SelectAll();
                }
                else if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN1.Focus();
                    txtFLAMMABILITY_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtTOTALWEIGHTN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtTOTALWEIGHTN4.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN4.Focus();
                    txtTOTALWEIGHTN4.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }
                else if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN1.Focus();
                    txtTHICKNESSN1.SelectAll();
                }
                else if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN1.Focus();
                    txtFLAMMABILITY_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtTOTALWEIGHTN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtTOTALWEIGHTN5.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN5.Focus();
                    txtTOTALWEIGHTN5.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }
                else if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN1.Focus();
                    txtTHICKNESSN1.SelectAll();
                }
                else if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN1.Focus();
                    txtFLAMMABILITY_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtTOTALWEIGHTN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtTOTALWEIGHTN6.Visibility == Visibility.Visible)
                {
                    txtTOTALWEIGHTN6.Focus();
                    txtTOTALWEIGHTN6.SelectAll();
                }
                else if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }
                else if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN1.Focus();
                    txtTHICKNESSN1.SelectAll();
                }
                else if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN1.Focus();
                    txtFLAMMABILITY_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtTOTALWEIGHTN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN1.Focus();
                    txtUNCOATEDWEIGHTN1.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }
                else if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN1.Focus();
                    txtTHICKNESSN1.SelectAll();
                }
                else if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN1.Focus();
                    txtFLAMMABILITY_WN1.SelectAll();
                }
                else if (txtFLAMMABILITY_FN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN1.Focus();
                    txtFLAMMABILITY_FN1.SelectAll();
                }

                e.Handled = true;
            }
        }
        #endregion

        #region UNCOATEDWEIGHT
        private void txtUNCOATEDWEIGHTN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtUNCOATEDWEIGHTN2.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN2.Focus();
                    txtUNCOATEDWEIGHTN2.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }
                else if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN1.Focus();
                    txtTHICKNESSN1.SelectAll();
                }
                else if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN1.Focus();
                    txtFLAMMABILITY_WN1.SelectAll();
                }
                else if (txtFLAMMABILITY_FN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN1.Focus();
                    txtFLAMMABILITY_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtUNCOATEDWEIGHTN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtUNCOATEDWEIGHTN3.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN3.Focus();
                    txtUNCOATEDWEIGHTN3.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }
                else if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN1.Focus();
                    txtTHICKNESSN1.SelectAll();
                }
                else if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN1.Focus();
                    txtFLAMMABILITY_WN1.SelectAll();
                }
                else if (txtFLAMMABILITY_FN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN1.Focus();
                    txtFLAMMABILITY_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtUNCOATEDWEIGHTN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtUNCOATEDWEIGHTN4.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN4.Focus();
                    txtUNCOATEDWEIGHTN4.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }
                else if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN1.Focus();
                    txtTHICKNESSN1.SelectAll();
                }
                else if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN1.Focus();
                    txtFLAMMABILITY_WN1.SelectAll();
                }
                else if (txtFLAMMABILITY_FN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN1.Focus();
                    txtFLAMMABILITY_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtUNCOATEDWEIGHTN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtUNCOATEDWEIGHTN5.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN5.Focus();
                    txtUNCOATEDWEIGHTN5.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }
                else if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN1.Focus();
                    txtTHICKNESSN1.SelectAll();
                }
                else if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN1.Focus();
                    txtFLAMMABILITY_WN1.SelectAll();
                }
                else if (txtFLAMMABILITY_FN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN1.Focus();
                    txtFLAMMABILITY_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtUNCOATEDWEIGHTN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtUNCOATEDWEIGHTN6.Visibility == Visibility.Visible)
                {
                    txtUNCOATEDWEIGHTN6.Focus();
                    txtUNCOATEDWEIGHTN6.SelectAll();
                }
                else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }
                else if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN1.Focus();
                    txtTHICKNESSN1.SelectAll();
                }
                else if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN1.Focus();
                    txtFLAMMABILITY_WN1.SelectAll();
                }
                else if (txtFLAMMABILITY_FN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN1.Focus();
                    txtFLAMMABILITY_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtUNCOATEDWEIGHTN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN1.Focus();
                    txtCOATINGWEIGHTN1.SelectAll();
                }
                else if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN1.Focus();
                    txtTHICKNESSN1.SelectAll();
                }
                else if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN1.Focus();
                    txtFLAMMABILITY_WN1.SelectAll();
                }
                else if (txtFLAMMABILITY_FN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN1.Focus();
                    txtFLAMMABILITY_FN1.SelectAll();
                }
                else if (txtSTIFFNES_WN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN1.Focus();
                    txtSTIFFNES_WN1.SelectAll();
                }

                e.Handled = true;
            }
        }
        #endregion

        #region COATINGWEIGHT
        private void txtCOATINGWEIGHTN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtCOATINGWEIGHTN2.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN2.Focus();
                    txtCOATINGWEIGHTN2.SelectAll();
                }
                else if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN1.Focus();
                    txtTHICKNESSN1.SelectAll();
                }
                else if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN1.Focus();
                    txtFLAMMABILITY_WN1.SelectAll();
                }
                else if (txtFLAMMABILITY_FN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN1.Focus();
                    txtFLAMMABILITY_FN1.SelectAll();
                }
                else if (txtSTIFFNES_WN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN1.Focus();
                    txtSTIFFNES_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtCOATINGWEIGHTN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtCOATINGWEIGHTN3.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN3.Focus();
                    txtCOATINGWEIGHTN3.SelectAll();
                }
                else if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN1.Focus();
                    txtTHICKNESSN1.SelectAll();
                }
                else if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN1.Focus();
                    txtFLAMMABILITY_WN1.SelectAll();
                }
                else if (txtFLAMMABILITY_FN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN1.Focus();
                    txtFLAMMABILITY_FN1.SelectAll();
                }
                else if (txtSTIFFNES_WN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN1.Focus();
                    txtSTIFFNES_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtCOATINGWEIGHTN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtCOATINGWEIGHTN4.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN4.Focus();
                    txtCOATINGWEIGHTN4.SelectAll();
                }
                else if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN1.Focus();
                    txtTHICKNESSN1.SelectAll();
                }
                else if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN1.Focus();
                    txtFLAMMABILITY_WN1.SelectAll();
                }
                else if (txtFLAMMABILITY_FN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN1.Focus();
                    txtFLAMMABILITY_FN1.SelectAll();
                }
                else if (txtSTIFFNES_WN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN1.Focus();
                    txtSTIFFNES_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtCOATINGWEIGHTN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtCOATINGWEIGHTN5.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN5.Focus();
                    txtCOATINGWEIGHTN5.SelectAll();
                }
                else if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN1.Focus();
                    txtTHICKNESSN1.SelectAll();
                }
                else if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN1.Focus();
                    txtFLAMMABILITY_WN1.SelectAll();
                }
                else if (txtFLAMMABILITY_FN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN1.Focus();
                    txtFLAMMABILITY_FN1.SelectAll();
                }
                else if (txtSTIFFNES_WN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN1.Focus();
                    txtSTIFFNES_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtCOATINGWEIGHTN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtCOATINGWEIGHTN6.Visibility == Visibility.Visible)
                {
                    txtCOATINGWEIGHTN6.Focus();
                    txtCOATINGWEIGHTN6.SelectAll();
                }
                else if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN1.Focus();
                    txtTHICKNESSN1.SelectAll();
                }
                else if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN1.Focus();
                    txtFLAMMABILITY_WN1.SelectAll();
                }
                else if (txtFLAMMABILITY_FN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN1.Focus();
                    txtFLAMMABILITY_FN1.SelectAll();
                }
                else if (txtSTIFFNES_WN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN1.Focus();
                    txtSTIFFNES_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtCOATINGWEIGHTN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN1.Focus();
                    txtTHICKNESSN1.SelectAll();
                }
                else if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN1.Focus();
                    txtFLAMMABILITY_WN1.SelectAll();
                }
                else if (txtFLAMMABILITY_FN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN1.Focus();
                    txtFLAMMABILITY_FN1.SelectAll();
                }
                else if (txtSTIFFNES_WN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN1.Focus();
                    txtSTIFFNES_WN1.SelectAll();
                }
                else if (txtSTIFFNES_FN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN1.Focus();
                    txtSTIFFNES_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }
        #endregion

        #region THICKNESS
        private void txtTHICKNESSN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtTHICKNESSN2.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN2.Focus();
                    txtTHICKNESSN2.SelectAll();
                }
                else if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN1.Focus();
                    txtFLAMMABILITY_WN1.SelectAll();
                }
                else if (txtFLAMMABILITY_FN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN1.Focus();
                    txtFLAMMABILITY_FN1.SelectAll();
                }
                else if (txtSTIFFNES_WN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN1.Focus();
                    txtSTIFFNES_WN1.SelectAll();
                }
                else if (txtSTIFFNES_FN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN1.Focus();
                    txtSTIFFNES_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtTHICKNESSN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtTHICKNESSN3.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN3.Focus();
                    txtTHICKNESSN3.SelectAll();
                }
                else if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN1.Focus();
                    txtFLAMMABILITY_WN1.SelectAll();
                }
                else if (txtFLAMMABILITY_FN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN1.Focus();
                    txtFLAMMABILITY_FN1.SelectAll();
                }
                else if (txtSTIFFNES_WN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN1.Focus();
                    txtSTIFFNES_WN1.SelectAll();
                }
                else if (txtSTIFFNES_FN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN1.Focus();
                    txtSTIFFNES_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtTHICKNESSN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtTHICKNESSN4.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN4.Focus();
                    txtTHICKNESSN4.SelectAll();
                }
                else if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN1.Focus();
                    txtFLAMMABILITY_WN1.SelectAll();
                }
                else if (txtFLAMMABILITY_FN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN1.Focus();
                    txtFLAMMABILITY_FN1.SelectAll();
                }
                else if (txtSTIFFNES_WN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN1.Focus();
                    txtSTIFFNES_WN1.SelectAll();
                }
                else if (txtSTIFFNES_FN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN1.Focus();
                    txtSTIFFNES_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtTHICKNESSN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtTHICKNESSN5.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN5.Focus();
                    txtTHICKNESSN5.SelectAll();
                }
                else if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN1.Focus();
                    txtFLAMMABILITY_WN1.SelectAll();
                }
                else if (txtFLAMMABILITY_FN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN1.Focus();
                    txtFLAMMABILITY_FN1.SelectAll();
                }
                else if (txtSTIFFNES_WN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN1.Focus();
                    txtSTIFFNES_WN1.SelectAll();
                }
                else if (txtSTIFFNES_FN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN1.Focus();
                    txtSTIFFNES_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtTHICKNESSN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtTHICKNESSN6.Visibility == Visibility.Visible)
                {
                    txtTHICKNESSN6.Focus();
                    txtTHICKNESSN6.SelectAll();
                }
                else if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN1.Focus();
                    txtFLAMMABILITY_WN1.SelectAll();
                }
                else if (txtFLAMMABILITY_FN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN1.Focus();
                    txtFLAMMABILITY_FN1.SelectAll();
                }
                else if (txtSTIFFNES_WN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN1.Focus();
                    txtSTIFFNES_WN1.SelectAll();
                }
                else if (txtSTIFFNES_FN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN1.Focus();
                    txtSTIFFNES_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtTHICKNESSN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN1.Focus();
                    txtFLAMMABILITY_WN1.SelectAll();
                }
                else if (txtFLAMMABILITY_FN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN1.Focus();
                    txtFLAMMABILITY_FN1.SelectAll();
                }
                else if (txtSTIFFNES_WN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN1.Focus();
                    txtSTIFFNES_WN1.SelectAll();
                }
                else if (txtSTIFFNES_FN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN1.Focus();
                    txtSTIFFNES_FN1.SelectAll();
                }
                else if (txtSTATIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN1.Focus();
                    txtSTATIC_AIRN1.SelectAll();
                }
                e.Handled = true;
            }
        }
        #endregion

        #region FLAMMABILITY_W
        private void txtFLAMMABILITY_WN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLAMMABILITY_WN2.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN2.Focus();
                    txtFLAMMABILITY_WN2.SelectAll();
                }
                else if (txtFLAMMABILITY_FN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN1.Focus();
                    txtFLAMMABILITY_FN1.SelectAll();
                }
                else if (txtSTIFFNES_WN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN1.Focus();
                    txtSTIFFNES_WN1.SelectAll();
                }
                else if (txtSTIFFNES_FN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN1.Focus();
                    txtSTIFFNES_FN1.SelectAll();
                }
                else if (txtSTATIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN1.Focus();
                    txtSTATIC_AIRN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtFLAMMABILITY_WN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLAMMABILITY_WN3.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN3.Focus();
                    txtFLAMMABILITY_WN3.SelectAll();
                }
                else if (txtFLAMMABILITY_FN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN1.Focus();
                    txtFLAMMABILITY_FN1.SelectAll();
                }
                else if (txtSTIFFNES_WN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN1.Focus();
                    txtSTIFFNES_WN1.SelectAll();
                }
                else if (txtSTIFFNES_FN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN1.Focus();
                    txtSTIFFNES_FN1.SelectAll();
                }
                else if (txtSTATIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN1.Focus();
                    txtSTATIC_AIRN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtFLAMMABILITY_WN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLAMMABILITY_WN4.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN4.Focus();
                    txtFLAMMABILITY_WN4.SelectAll();
                }
                else if (txtFLAMMABILITY_FN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN1.Focus();
                    txtFLAMMABILITY_FN1.SelectAll();
                }
                else if (txtSTIFFNES_WN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN1.Focus();
                    txtSTIFFNES_WN1.SelectAll();
                }
                else if (txtSTIFFNES_FN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN1.Focus();
                    txtSTIFFNES_FN1.SelectAll();
                }
                else if (txtSTATIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN1.Focus();
                    txtSTATIC_AIRN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtFLAMMABILITY_WN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLAMMABILITY_WN5.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN5.Focus();
                    txtFLAMMABILITY_WN5.SelectAll();
                }
                else if (txtFLAMMABILITY_FN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN1.Focus();
                    txtFLAMMABILITY_FN1.SelectAll();
                }
                else if (txtSTIFFNES_WN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN1.Focus();
                    txtSTIFFNES_WN1.SelectAll();
                }
                else if (txtSTIFFNES_FN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN1.Focus();
                    txtSTIFFNES_FN1.SelectAll();
                }
                else if (txtSTATIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN1.Focus();
                    txtSTATIC_AIRN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtFLAMMABILITY_WN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLAMMABILITY_WN6.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_WN6.Focus();
                    txtFLAMMABILITY_WN6.SelectAll();
                }
                else if (txtFLAMMABILITY_FN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN1.Focus();
                    txtFLAMMABILITY_FN1.SelectAll();
                }
                else if (txtSTIFFNES_WN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN1.Focus();
                    txtSTIFFNES_WN1.SelectAll();
                }
                else if (txtSTIFFNES_FN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN1.Focus();
                    txtSTIFFNES_FN1.SelectAll();
                }
                else if (txtSTATIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN1.Focus();
                    txtSTATIC_AIRN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtFLAMMABILITY_WN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLAMMABILITY_FN1.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN1.Focus();
                    txtFLAMMABILITY_FN1.SelectAll();
                }
                else if (txtSTIFFNES_WN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN1.Focus();
                    txtSTIFFNES_WN1.SelectAll();
                }
                else if (txtSTIFFNES_FN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN1.Focus();
                    txtSTIFFNES_FN1.SelectAll();
                }
                else if (txtSTATIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN1.Focus();
                    txtSTATIC_AIRN1.SelectAll();
                }
                else if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN1.Focus();
                    txtDYNAMIC_AIRN1.SelectAll();
                }

                e.Handled = true;
            }
        }
        #endregion

        #region FLAMMABILITY_F
        private void txtFLAMMABILITY_FN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLAMMABILITY_FN2.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN2.Focus();
                    txtFLAMMABILITY_FN2.SelectAll();
                }
                else if (txtSTIFFNES_WN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN1.Focus();
                    txtSTIFFNES_WN1.SelectAll();
                }
                else if (txtSTIFFNES_FN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN1.Focus();
                    txtSTIFFNES_FN1.SelectAll();
                }
                else if (txtSTATIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN1.Focus();
                    txtSTATIC_AIRN1.SelectAll();
                }
                else if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN1.Focus();
                    txtDYNAMIC_AIRN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtFLAMMABILITY_FN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLAMMABILITY_FN3.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN3.Focus();
                    txtFLAMMABILITY_FN3.SelectAll();
                }
                else if (txtSTIFFNES_WN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN1.Focus();
                    txtSTIFFNES_WN1.SelectAll();
                }
                else if (txtSTIFFNES_FN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN1.Focus();
                    txtSTIFFNES_FN1.SelectAll();
                }
                else if (txtSTATIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN1.Focus();
                    txtSTATIC_AIRN1.SelectAll();
                }
                else if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN1.Focus();
                    txtDYNAMIC_AIRN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtFLAMMABILITY_FN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLAMMABILITY_FN4.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN4.Focus();
                    txtFLAMMABILITY_FN4.SelectAll();
                }
                else if (txtSTIFFNES_WN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN1.Focus();
                    txtSTIFFNES_WN1.SelectAll();
                }
                else if (txtSTIFFNES_FN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN1.Focus();
                    txtSTIFFNES_FN1.SelectAll();
                }
                else if (txtSTATIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN1.Focus();
                    txtSTATIC_AIRN1.SelectAll();
                }
                else if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN1.Focus();
                    txtDYNAMIC_AIRN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtFLAMMABILITY_FN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLAMMABILITY_FN5.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN5.Focus();
                    txtFLAMMABILITY_FN5.SelectAll();
                }
                else if (txtSTIFFNES_WN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN1.Focus();
                    txtSTIFFNES_WN1.SelectAll();
                }
                else if (txtSTIFFNES_FN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN1.Focus();
                    txtSTIFFNES_FN1.SelectAll();
                }
                else if (txtSTATIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN1.Focus();
                    txtSTATIC_AIRN1.SelectAll();
                }
                else if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN1.Focus();
                    txtDYNAMIC_AIRN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtFLAMMABILITY_FN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLAMMABILITY_FN6.Visibility == Visibility.Visible)
                {
                    txtFLAMMABILITY_FN6.Focus();
                    txtFLAMMABILITY_FN6.SelectAll();
                }
                else if (txtSTIFFNES_WN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN1.Focus();
                    txtSTIFFNES_WN1.SelectAll();
                }
                else if (txtSTIFFNES_FN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN1.Focus();
                    txtSTIFFNES_FN1.SelectAll();
                }
                else if (txtSTATIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN1.Focus();
                    txtSTATIC_AIRN1.SelectAll();
                }
                else if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN1.Focus();
                    txtDYNAMIC_AIRN1.SelectAll();
                }

                e.Handled = true;
            }
        }

        private void txtFLAMMABILITY_FN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtSTIFFNES_WN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN1.Focus();
                    txtSTIFFNES_WN1.SelectAll();
                }
                else if (txtSTIFFNES_FN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN1.Focus();
                    txtSTIFFNES_FN1.SelectAll();
                }
                else if (txtSTATIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN1.Focus();
                    txtSTATIC_AIRN1.SelectAll();
                }
                else if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN1.Focus();
                    txtDYNAMIC_AIRN1.SelectAll();
                }
                else if (txtEXPONENTN1.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN1.Focus();
                    txtEXPONENTN1.SelectAll();
                }
                e.Handled = true;
            }
        }
        #endregion

        #region STIFFNES_W
        private void txtSTIFFNES_WN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtSTIFFNES_WN2.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN2.Focus();
                    txtSTIFFNES_WN2.SelectAll();
                }
                else if (txtSTIFFNES_FN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN1.Focus();
                    txtSTIFFNES_FN1.SelectAll();
                }
                else if (txtSTATIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN1.Focus();
                    txtSTATIC_AIRN1.SelectAll();
                }
                else if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN1.Focus();
                    txtDYNAMIC_AIRN1.SelectAll();
                }
                else if (txtEXPONENTN1.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN1.Focus();
                    txtEXPONENTN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtSTIFFNES_WN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtSTIFFNES_WN3.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN3.Focus();
                    txtSTIFFNES_WN3.SelectAll();
                }
                else if (txtSTIFFNES_FN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN1.Focus();
                    txtSTIFFNES_FN1.SelectAll();
                }
                else if (txtSTATIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN1.Focus();
                    txtSTATIC_AIRN1.SelectAll();
                }
                else if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN1.Focus();
                    txtDYNAMIC_AIRN1.SelectAll();
                }
                else if (txtEXPONENTN1.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN1.Focus();
                    txtEXPONENTN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtSTIFFNES_WN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtSTIFFNES_WN4.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN4.Focus();
                    txtSTIFFNES_WN4.SelectAll();
                }
                else if (txtSTIFFNES_FN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN1.Focus();
                    txtSTIFFNES_FN1.SelectAll();
                }
                else if (txtSTATIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN1.Focus();
                    txtSTATIC_AIRN1.SelectAll();
                }
                else if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN1.Focus();
                    txtDYNAMIC_AIRN1.SelectAll();
                }
                else if (txtEXPONENTN1.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN1.Focus();
                    txtEXPONENTN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtSTIFFNES_WN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtSTIFFNES_WN5.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN5.Focus();
                    txtSTIFFNES_WN5.SelectAll();
                }
                else if (txtSTIFFNES_FN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN1.Focus();
                    txtSTIFFNES_FN1.SelectAll();
                }
                else if (txtSTATIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN1.Focus();
                    txtSTATIC_AIRN1.SelectAll();
                }
                else if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN1.Focus();
                    txtDYNAMIC_AIRN1.SelectAll();
                }
                else if (txtEXPONENTN1.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN1.Focus();
                    txtEXPONENTN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtSTIFFNES_WN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtSTIFFNES_WN6.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_WN6.Focus();
                    txtSTIFFNES_WN6.SelectAll();
                }
                else if (txtSTIFFNES_FN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN1.Focus();
                    txtSTIFFNES_FN1.SelectAll();
                }
                else if (txtSTATIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN1.Focus();
                    txtSTATIC_AIRN1.SelectAll();
                }
                else if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN1.Focus();
                    txtDYNAMIC_AIRN1.SelectAll();
                }
                else if (txtEXPONENTN1.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN1.Focus();
                    txtEXPONENTN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtSTIFFNES_WN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtSTIFFNES_FN1.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN1.Focus();
                    txtSTIFFNES_FN1.SelectAll();
                }
                else if (txtSTATIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN1.Focus();
                    txtSTATIC_AIRN1.SelectAll();
                }
                else if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN1.Focus();
                    txtDYNAMIC_AIRN1.SelectAll();
                }
                else if (txtEXPONENTN1.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN1.Focus();
                    txtEXPONENTN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN1.Focus();
                    txtDIMENSCHANGE_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }
        #endregion

        #region STIFFNES_F
        private void txtSTIFFNES_FN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtSTIFFNES_FN2.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN2.Focus();
                    txtSTIFFNES_FN2.SelectAll();
                }
                else if (txtSTATIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN1.Focus();
                    txtSTATIC_AIRN1.SelectAll();
                }
                else if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN1.Focus();
                    txtDYNAMIC_AIRN1.SelectAll();
                }
                else if (txtEXPONENTN1.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN1.Focus();
                    txtEXPONENTN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN1.Focus();
                    txtDIMENSCHANGE_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtSTIFFNES_FN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtSTIFFNES_FN3.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN3.Focus();
                    txtSTIFFNES_FN3.SelectAll();
                }
                else if (txtSTATIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN1.Focus();
                    txtSTATIC_AIRN1.SelectAll();
                }
                else if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN1.Focus();
                    txtDYNAMIC_AIRN1.SelectAll();
                }
                else if (txtEXPONENTN1.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN1.Focus();
                    txtEXPONENTN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN1.Focus();
                    txtDIMENSCHANGE_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtSTIFFNES_FN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtSTIFFNES_FN4.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN4.Focus();
                    txtSTIFFNES_FN4.SelectAll();
                }
                else if (txtSTATIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN1.Focus();
                    txtSTATIC_AIRN1.SelectAll();
                }
                else if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN1.Focus();
                    txtDYNAMIC_AIRN1.SelectAll();
                }
                else if (txtEXPONENTN1.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN1.Focus();
                    txtEXPONENTN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN1.Focus();
                    txtDIMENSCHANGE_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtSTIFFNES_FN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtSTIFFNES_FN5.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN5.Focus();
                    txtSTIFFNES_FN5.SelectAll();
                }
                else if (txtSTATIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN1.Focus();
                    txtSTATIC_AIRN1.SelectAll();
                }
                else if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN1.Focus();
                    txtDYNAMIC_AIRN1.SelectAll();
                }
                else if (txtEXPONENTN1.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN1.Focus();
                    txtEXPONENTN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN1.Focus();
                    txtDIMENSCHANGE_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtSTIFFNES_FN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtSTIFFNES_FN6.Visibility == Visibility.Visible)
                {
                    txtSTIFFNES_FN6.Focus();
                    txtSTIFFNES_FN6.SelectAll();
                }
                else if (txtSTATIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN1.Focus();
                    txtSTATIC_AIRN1.SelectAll();
                }
                else if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN1.Focus();
                    txtDYNAMIC_AIRN1.SelectAll();
                }
                else if (txtEXPONENTN1.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN1.Focus();
                    txtEXPONENTN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN1.Focus();
                    txtDIMENSCHANGE_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtSTIFFNES_FN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtSTATIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN1.Focus();
                    txtSTATIC_AIRN1.SelectAll();
                }
                else if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN1.Focus();
                    txtDYNAMIC_AIRN1.SelectAll();
                }
                else if (txtEXPONENTN1.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN1.Focus();
                    txtEXPONENTN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN1.Focus();
                    txtDIMENSCHANGE_WN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN1.Focus();
                    txtDIMENSCHANGE_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }
        #endregion

        #region STATIC_AIR
        private void txtSTATIC_AIRN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtSTATIC_AIRN2.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN2.Focus();
                    txtSTATIC_AIRN2.SelectAll();
                }
                else if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN1.Focus();
                    txtDYNAMIC_AIRN1.SelectAll();
                }
                else if (txtEXPONENTN1.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN1.Focus();
                    txtEXPONENTN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN1.Focus();
                    txtDIMENSCHANGE_WN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN1.Focus();
                    txtDIMENSCHANGE_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtSTATIC_AIRN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtSTATIC_AIRN3.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN3.Focus();
                    txtSTATIC_AIRN3.SelectAll();
                }
                else if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN1.Focus();
                    txtDYNAMIC_AIRN1.SelectAll();
                }
                else if (txtEXPONENTN1.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN1.Focus();
                    txtEXPONENTN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN1.Focus();
                    txtDIMENSCHANGE_WN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN1.Focus();
                    txtDIMENSCHANGE_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtSTATIC_AIRN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtSTATIC_AIRN4.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN4.Focus();
                    txtSTATIC_AIRN4.SelectAll();
                }
                else if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN1.Focus();
                    txtDYNAMIC_AIRN1.SelectAll();
                }
                else if (txtEXPONENTN1.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN1.Focus();
                    txtEXPONENTN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN1.Focus();
                    txtDIMENSCHANGE_WN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN1.Focus();
                    txtDIMENSCHANGE_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtSTATIC_AIRN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtSTATIC_AIRN5.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN5.Focus();
                    txtSTATIC_AIRN5.SelectAll();
                }
                else if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN1.Focus();
                    txtDYNAMIC_AIRN1.SelectAll();
                }
                else if (txtEXPONENTN1.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN1.Focus();
                    txtEXPONENTN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN1.Focus();
                    txtDIMENSCHANGE_WN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN1.Focus();
                    txtDIMENSCHANGE_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtSTATIC_AIRN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtSTATIC_AIRN6.Visibility == Visibility.Visible)
                {
                    txtSTATIC_AIRN6.Focus();
                    txtSTATIC_AIRN6.SelectAll();
                }
                else if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN1.Focus();
                    txtDYNAMIC_AIRN1.SelectAll();
                }
                else if (txtEXPONENTN1.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN1.Focus();
                    txtEXPONENTN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN1.Focus();
                    txtDIMENSCHANGE_WN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN1.Focus();
                    txtDIMENSCHANGE_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtSTATIC_AIRN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN1.Focus();
                    txtDYNAMIC_AIRN1.SelectAll();
                }
                else if (txtEXPONENTN1.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN1.Focus();
                    txtEXPONENTN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN1.Focus();
                    txtDIMENSCHANGE_WN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN1.Focus();
                    txtDIMENSCHANGE_FN1.SelectAll();
                }
                else if (txtFLEXABRASION_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN1.Focus();
                    txtFLEXABRASION_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }
        #endregion

        #region DYNAMIC_AIR
        private void txtDYNAMIC_AIRN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtDYNAMIC_AIRN2.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN2.Focus();
                    txtDYNAMIC_AIRN2.SelectAll();
                }
                else if (txtEXPONENTN1.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN1.Focus();
                    txtEXPONENTN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN1.Focus();
                    txtDIMENSCHANGE_WN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN1.Focus();
                    txtDIMENSCHANGE_FN1.SelectAll();
                }
                else if (txtFLEXABRASION_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN1.Focus();
                    txtFLEXABRASION_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtDYNAMIC_AIRN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtDYNAMIC_AIRN3.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN3.Focus();
                    txtDYNAMIC_AIRN3.SelectAll();
                }
                else if (txtEXPONENTN1.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN1.Focus();
                    txtEXPONENTN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN1.Focus();
                    txtDIMENSCHANGE_WN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN1.Focus();
                    txtDIMENSCHANGE_FN1.SelectAll();
                }
                else if (txtFLEXABRASION_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN1.Focus();
                    txtFLEXABRASION_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtDYNAMIC_AIRN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtDYNAMIC_AIRN4.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN4.Focus();
                    txtDYNAMIC_AIRN4.SelectAll();
                }
                else if (txtEXPONENTN1.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN1.Focus();
                    txtEXPONENTN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN1.Focus();
                    txtDIMENSCHANGE_WN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN1.Focus();
                    txtDIMENSCHANGE_FN1.SelectAll();
                }
                else if (txtFLEXABRASION_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN1.Focus();
                    txtFLEXABRASION_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtDYNAMIC_AIRN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtDYNAMIC_AIRN5.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN5.Focus();
                    txtDYNAMIC_AIRN5.SelectAll();
                }
                else if (txtEXPONENTN1.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN1.Focus();
                    txtEXPONENTN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN1.Focus();
                    txtDIMENSCHANGE_WN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN1.Focus();
                    txtDIMENSCHANGE_FN1.SelectAll();
                }
                else if (txtFLEXABRASION_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN1.Focus();
                    txtFLEXABRASION_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtDYNAMIC_AIRN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtDYNAMIC_AIRN6.Visibility == Visibility.Visible)
                {
                    txtDYNAMIC_AIRN6.Focus();
                    txtDYNAMIC_AIRN6.SelectAll();
                }
                else if (txtEXPONENTN1.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN1.Focus();
                    txtEXPONENTN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN1.Focus();
                    txtDIMENSCHANGE_WN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN1.Focus();
                    txtDIMENSCHANGE_FN1.SelectAll();
                }
                else if (txtFLEXABRASION_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN1.Focus();
                    txtFLEXABRASION_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtDYNAMIC_AIRN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtEXPONENTN1.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN1.Focus();
                    txtEXPONENTN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN1.Focus();
                    txtDIMENSCHANGE_WN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN1.Focus();
                    txtDIMENSCHANGE_FN1.SelectAll();
                }
                else if (txtFLEXABRASION_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN1.Focus();
                    txtFLEXABRASION_WN1.SelectAll();
                }
                else if (txtFLEXABRASION_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN1.Focus();
                    txtFLEXABRASION_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }
        #endregion

        #region EXPONENT
        private void txtEXPONENTN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtEXPONENTN2.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN2.Focus();
                    txtEXPONENTN2.SelectAll();
                }
                else if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN1.Focus();
                    txtDIMENSCHANGE_WN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN1.Focus();
                    txtDIMENSCHANGE_FN1.SelectAll();
                }
                else if (txtFLEXABRASION_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN1.Focus();
                    txtFLEXABRASION_WN1.SelectAll();
                }
                else if (txtFLEXABRASION_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN1.Focus();
                    txtFLEXABRASION_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtEXPONENTN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtEXPONENTN3.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN3.Focus();
                    txtEXPONENTN3.SelectAll();
                }
                else if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN1.Focus();
                    txtDIMENSCHANGE_WN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN1.Focus();
                    txtDIMENSCHANGE_FN1.SelectAll();
                }
                else if (txtFLEXABRASION_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN1.Focus();
                    txtFLEXABRASION_WN1.SelectAll();
                }
                else if (txtFLEXABRASION_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN1.Focus();
                    txtFLEXABRASION_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtEXPONENTN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtEXPONENTN4.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN4.Focus();
                    txtEXPONENTN4.SelectAll();
                }
                else if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN1.Focus();
                    txtDIMENSCHANGE_WN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN1.Focus();
                    txtDIMENSCHANGE_FN1.SelectAll();
                }
                else if (txtFLEXABRASION_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN1.Focus();
                    txtFLEXABRASION_WN1.SelectAll();
                }
                else if (txtFLEXABRASION_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN1.Focus();
                    txtFLEXABRASION_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtEXPONENTN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtEXPONENTN5.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN5.Focus();
                    txtEXPONENTN5.SelectAll();
                }
                else if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN1.Focus();
                    txtDIMENSCHANGE_WN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN1.Focus();
                    txtDIMENSCHANGE_FN1.SelectAll();
                }
                else if (txtFLEXABRASION_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN1.Focus();
                    txtFLEXABRASION_WN1.SelectAll();
                }
                else if (txtFLEXABRASION_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN1.Focus();
                    txtFLEXABRASION_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtEXPONENTN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtEXPONENTN6.Visibility == Visibility.Visible)
                {
                    txtEXPONENTN6.Focus();
                    txtEXPONENTN6.SelectAll();
                }
                else if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN1.Focus();
                    txtDIMENSCHANGE_WN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN1.Focus();
                    txtDIMENSCHANGE_FN1.SelectAll();
                }
                else if (txtFLEXABRASION_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN1.Focus();
                    txtFLEXABRASION_WN1.SelectAll();
                }
                else if (txtFLEXABRASION_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN1.Focus();
                    txtFLEXABRASION_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtEXPONENTN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN1.Focus();
                    txtDIMENSCHANGE_WN1.SelectAll();
                }
                else if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN1.Focus();
                    txtDIMENSCHANGE_FN1.SelectAll();
                }
                else if (txtFLEXABRASION_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN1.Focus();
                    txtFLEXABRASION_WN1.SelectAll();
                }
                else if (txtFLEXABRASION_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN1.Focus();
                    txtFLEXABRASION_FN1.SelectAll();
                }
                else 
                {
                    cmdSave.Focus();
                }
                e.Handled = true;
            }
        }
        #endregion

        #region DIMENSCHANGE_W
        private void txtDIMENSCHANGE_WN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtDIMENSCHANGE_WN2.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN2.Focus();
                    txtDIMENSCHANGE_WN2.SelectAll();
                }
                else if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN1.Focus();
                    txtDIMENSCHANGE_FN1.SelectAll();
                }
                else if (txtFLEXABRASION_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN1.Focus();
                    txtFLEXABRASION_WN1.SelectAll();
                }
                else if (txtFLEXABRASION_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN1.Focus();
                    txtFLEXABRASION_FN1.SelectAll();
                }
                else if (txtBOWN1.Visibility == Visibility.Visible)
                {
                    txtBOWN1.Focus();
                    txtBOWN1.SelectAll();
                }
                else
                {
                    cmdSave.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtDIMENSCHANGE_WN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtDIMENSCHANGE_WN3.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN3.Focus();
                    txtDIMENSCHANGE_WN3.SelectAll();
                }
                else if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN1.Focus();
                    txtDIMENSCHANGE_FN1.SelectAll();
                }
                else if (txtFLEXABRASION_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN1.Focus();
                    txtFLEXABRASION_WN1.SelectAll();
                }
                else if (txtFLEXABRASION_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN1.Focus();
                    txtFLEXABRASION_FN1.SelectAll();
                }
                else if (txtBOWN1.Visibility == Visibility.Visible)
                {
                    txtBOWN1.Focus();
                    txtBOWN1.SelectAll();
                }
                else
                {
                    cmdSave.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtDIMENSCHANGE_WN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtDIMENSCHANGE_WN4.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN4.Focus();
                    txtDIMENSCHANGE_WN4.SelectAll();
                }
                else if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN1.Focus();
                    txtDIMENSCHANGE_FN1.SelectAll();
                }
                else if (txtFLEXABRASION_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN1.Focus();
                    txtFLEXABRASION_WN1.SelectAll();
                }
                else if (txtFLEXABRASION_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN1.Focus();
                    txtFLEXABRASION_FN1.SelectAll();
                }
                else if (txtBOWN1.Visibility == Visibility.Visible)
                {
                    txtBOWN1.Focus();
                    txtBOWN1.SelectAll();
                }
                else
                {
                    cmdSave.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtDIMENSCHANGE_WN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtDIMENSCHANGE_WN5.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN5.Focus();
                    txtDIMENSCHANGE_WN5.SelectAll();
                }
                else if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN1.Focus();
                    txtDIMENSCHANGE_FN1.SelectAll();
                }
                else if (txtFLEXABRASION_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN1.Focus();
                    txtFLEXABRASION_WN1.SelectAll();
                }
                else if (txtFLEXABRASION_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN1.Focus();
                    txtFLEXABRASION_FN1.SelectAll();
                }
                else if (txtBOWN1.Visibility == Visibility.Visible)
                {
                    txtBOWN1.Focus();
                    txtBOWN1.SelectAll();
                }
                else
                {
                    cmdSave.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtDIMENSCHANGE_WN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtDIMENSCHANGE_WN6.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_WN6.Focus();
                    txtDIMENSCHANGE_WN6.SelectAll();
                }
                else if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN1.Focus();
                    txtDIMENSCHANGE_FN1.SelectAll();
                }
                else if (txtFLEXABRASION_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN1.Focus();
                    txtFLEXABRASION_WN1.SelectAll();
                }
                else if (txtFLEXABRASION_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN1.Focus();
                    txtFLEXABRASION_FN1.SelectAll();
                }
                else if (txtBOWN1.Visibility == Visibility.Visible)
                {
                    txtBOWN1.Focus();
                    txtBOWN1.SelectAll();
                }
                else
                {
                    cmdSave.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtDIMENSCHANGE_WN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN1.Focus();
                    txtDIMENSCHANGE_FN1.SelectAll();
                }
                else if (txtFLEXABRASION_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN1.Focus();
                    txtFLEXABRASION_WN1.SelectAll();
                }
                else if (txtFLEXABRASION_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN1.Focus();
                    txtFLEXABRASION_FN1.SelectAll();
                }
                else if (txtBOWN1.Visibility == Visibility.Visible)
                {
                    txtBOWN1.Focus();
                    txtBOWN1.SelectAll();
                }
                else
                {
                    cmdSave.Focus();
                }
                e.Handled = true;
            }
        }
        #endregion

        #region DIMENSCHANGE_F
        private void txtDIMENSCHANGE_FN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtDIMENSCHANGE_FN2.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN2.Focus();
                    txtDIMENSCHANGE_FN2.SelectAll();
                }
                else if (txtFLEXABRASION_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN1.Focus();
                    txtFLEXABRASION_WN1.SelectAll();
                }
                else if (txtFLEXABRASION_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN1.Focus();
                    txtFLEXABRASION_FN1.SelectAll();
                }
                else if (txtBOWN1.Visibility == Visibility.Visible)
                {
                    txtBOWN1.Focus();
                    txtBOWN1.SelectAll();
                }
                else
                {
                    cmdSave.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtDIMENSCHANGE_FN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtDIMENSCHANGE_FN3.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN3.Focus();
                    txtDIMENSCHANGE_FN3.SelectAll();
                }
                else if (txtFLEXABRASION_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN1.Focus();
                    txtFLEXABRASION_WN1.SelectAll();
                }
                else if (txtFLEXABRASION_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN1.Focus();
                    txtFLEXABRASION_FN1.SelectAll();
                }
                else if (txtBOWN1.Visibility == Visibility.Visible)
                {
                    txtBOWN1.Focus();
                    txtBOWN1.SelectAll();
                }
                else
                {
                    cmdSave.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtDIMENSCHANGE_FN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtDIMENSCHANGE_FN4.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN4.Focus();
                    txtDIMENSCHANGE_FN4.SelectAll();
                }
                else if (txtFLEXABRASION_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN1.Focus();
                    txtFLEXABRASION_WN1.SelectAll();
                }
                else if (txtFLEXABRASION_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN1.Focus();
                    txtFLEXABRASION_FN1.SelectAll();
                }
                else if (txtBOWN1.Visibility == Visibility.Visible)
                {
                    txtBOWN1.Focus();
                    txtBOWN1.SelectAll();
                }
                else
                {
                    cmdSave.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtDIMENSCHANGE_FN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtDIMENSCHANGE_FN5.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN5.Focus();
                    txtDIMENSCHANGE_FN5.SelectAll();
                }
                else if (txtFLEXABRASION_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN1.Focus();
                    txtFLEXABRASION_WN1.SelectAll();
                }
                else if (txtFLEXABRASION_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN1.Focus();
                    txtFLEXABRASION_FN1.SelectAll();
                }
                else if (txtBOWN1.Visibility == Visibility.Visible)
                {
                    txtBOWN1.Focus();
                    txtBOWN1.SelectAll();
                }
                else
                {
                    cmdSave.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtDIMENSCHANGE_FN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtDIMENSCHANGE_FN6.Visibility == Visibility.Visible)
                {
                    txtDIMENSCHANGE_FN6.Focus();
                    txtDIMENSCHANGE_FN6.SelectAll();
                }
                else if (txtFLEXABRASION_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN1.Focus();
                    txtFLEXABRASION_WN1.SelectAll();
                }
                else if (txtFLEXABRASION_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN1.Focus();
                    txtFLEXABRASION_FN1.SelectAll();
                }
                else if (txtBOWN1.Visibility == Visibility.Visible)
                {
                    txtBOWN1.Focus();
                    txtBOWN1.SelectAll();
                }
                else
                {
                    cmdSave.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtDIMENSCHANGE_FN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLEXABRASION_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN1.Focus();
                    txtFLEXABRASION_WN1.SelectAll();
                }
                else if (txtFLEXABRASION_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN1.Focus();
                    txtFLEXABRASION_FN1.SelectAll();
                }
                else if (txtBOWN1.Visibility == Visibility.Visible)
                {
                    txtBOWN1.Focus();
                    txtBOWN1.SelectAll();
                }
                else
                {
                    cmdSave.Focus();
                }
                e.Handled = true;
            }
        }
        #endregion

        #region FLEXABRASION_W
        private void txtFLEXABRASION_WN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLEXABRASION_WN2.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN2.Focus();
                    txtFLEXABRASION_WN2.SelectAll();
                }
                else if (txtFLEXABRASION_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN1.Focus();
                    txtFLEXABRASION_FN1.SelectAll();
                }
                else if (txtBOWN1.Visibility == Visibility.Visible)
                {
                    txtBOWN1.Focus();
                    txtBOWN1.SelectAll();
                }
                else if (txtSKEWN1.Visibility == Visibility.Visible)
                {
                    txtSKEWN1.Focus();
                    txtSKEWN1.SelectAll();
                }
                else
                {
                    cmdSave.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtFLEXABRASION_WN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLEXABRASION_WN3.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN3.Focus();
                    txtFLEXABRASION_WN3.SelectAll();
                }
                else if (txtFLEXABRASION_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN1.Focus();
                    txtFLEXABRASION_FN1.SelectAll();
                }
                else if (txtBOWN1.Visibility == Visibility.Visible)
                {
                    txtBOWN1.Focus();
                    txtBOWN1.SelectAll();
                }
                else if (txtSKEWN1.Visibility == Visibility.Visible)
                {
                    txtSKEWN1.Focus();
                    txtSKEWN1.SelectAll();
                }
                else
                {
                    cmdSave.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtFLEXABRASION_WN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLEXABRASION_WN4.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN4.Focus();
                    txtFLEXABRASION_WN4.SelectAll();
                }
                else if (txtFLEXABRASION_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN1.Focus();
                    txtFLEXABRASION_FN1.SelectAll();
                }
                else if (txtBOWN1.Visibility == Visibility.Visible)
                {
                    txtBOWN1.Focus();
                    txtBOWN1.SelectAll();
                }
                else if (txtSKEWN1.Visibility == Visibility.Visible)
                {
                    txtSKEWN1.Focus();
                    txtSKEWN1.SelectAll();
                }
                else
                {
                    cmdSave.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtFLEXABRASION_WN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLEXABRASION_WN5.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN5.Focus();
                    txtFLEXABRASION_WN5.SelectAll();
                }
                else if (txtFLEXABRASION_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN1.Focus();
                    txtFLEXABRASION_FN1.SelectAll();
                }
                else if (txtBOWN1.Visibility == Visibility.Visible)
                {
                    txtBOWN1.Focus();
                    txtBOWN1.SelectAll();
                }
                else if (txtSKEWN1.Visibility == Visibility.Visible)
                {
                    txtSKEWN1.Focus();
                    txtSKEWN1.SelectAll();
                }
                else
                {
                    cmdSave.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtFLEXABRASION_WN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLEXABRASION_WN6.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_WN6.Focus();
                    txtFLEXABRASION_WN6.SelectAll();
                }
                else if (txtFLEXABRASION_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN1.Focus();
                    txtFLEXABRASION_FN1.SelectAll();
                }
                else if (txtBOWN1.Visibility == Visibility.Visible)
                {
                    txtBOWN1.Focus();
                    txtBOWN1.SelectAll();
                }
                else if (txtSKEWN1.Visibility == Visibility.Visible)
                {
                    txtSKEWN1.Focus();
                    txtSKEWN1.SelectAll();
                }
                else
                {
                    cmdSave.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtFLEXABRASION_WN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLEXABRASION_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN1.Focus();
                    txtFLEXABRASION_FN1.SelectAll();
                }
                else if (txtBOWN1.Visibility == Visibility.Visible)
                {
                    txtBOWN1.Focus();
                    txtBOWN1.SelectAll();
                }
                else if (txtSKEWN1.Visibility == Visibility.Visible)
                {
                    txtSKEWN1.Focus();
                    txtSKEWN1.SelectAll();
                }
                else if (txtBENDING_WN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN1.Focus();
                    txtBENDING_WN1.SelectAll();
                }
                else if (txtBENDING_FN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN1.Focus();
                    txtBENDING_FN1.SelectAll();
                }
                else
                {
                    cmdSave.Focus();
                }
                e.Handled = true;
            }
        }
        #endregion

        #region FLEXABRASION_F
        private void txtFLEXABRASION_FN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLEXABRASION_FN2.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN2.Focus();
                    txtFLEXABRASION_FN2.SelectAll();
                }
                else if (txtFLEXABRASION_FN3.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN3.Focus();
                    txtFLEXABRASION_FN3.SelectAll();
                }
                else if (txtFLEXABRASION_FN4.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN4.Focus();
                    txtFLEXABRASION_FN4.SelectAll();
                }
                else if (txtFLEXABRASION_FN5.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN5.Focus();
                    txtFLEXABRASION_FN5.SelectAll();
                }
                else if (txtFLEXABRASION_FN6.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN6.Focus();
                    txtFLEXABRASION_FN6.SelectAll();
                }
                else if (txtBOWN1.Visibility == Visibility.Visible)
                {
                    txtBOWN1.Focus();
                    txtBOWN1.SelectAll();
                }
                else if (txtSKEWN1.Visibility == Visibility.Visible)
                {
                    txtSKEWN1.Focus();
                    txtSKEWN1.SelectAll();
                }
                else if (txtBENDING_WN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN1.Focus();
                    txtBENDING_WN1.SelectAll();
                }
                else if (txtBENDING_FN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN1.Focus();
                    txtBENDING_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtFLEXABRASION_FN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLEXABRASION_FN3.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN3.Focus();
                    txtFLEXABRASION_FN3.SelectAll();
                }
                else if (txtFLEXABRASION_FN4.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN4.Focus();
                    txtFLEXABRASION_FN4.SelectAll();
                }
                else if (txtFLEXABRASION_FN5.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN5.Focus();
                    txtFLEXABRASION_FN5.SelectAll();
                }
                else if (txtFLEXABRASION_FN6.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN6.Focus();
                    txtFLEXABRASION_FN6.SelectAll();
                }
                else if (txtBOWN1.Visibility == Visibility.Visible)
                {
                    txtBOWN1.Focus();
                    txtBOWN1.SelectAll();
                }
                else if (txtSKEWN1.Visibility == Visibility.Visible)
                {
                    txtSKEWN1.Focus();
                    txtSKEWN1.SelectAll();
                }
                else if (txtBENDING_WN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN1.Focus();
                    txtBENDING_WN1.SelectAll();
                }
                else if (txtBENDING_FN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN1.Focus();
                    txtBENDING_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtFLEXABRASION_FN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLEXABRASION_FN4.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN4.Focus();
                    txtFLEXABRASION_FN4.SelectAll();
                }
                else if (txtFLEXABRASION_FN5.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN5.Focus();
                    txtFLEXABRASION_FN5.SelectAll();
                }
                else if (txtFLEXABRASION_FN6.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN6.Focus();
                    txtFLEXABRASION_FN6.SelectAll();
                }
                else if (txtBOWN1.Visibility == Visibility.Visible)
                {
                    txtBOWN1.Focus();
                    txtBOWN1.SelectAll();
                }
                else if (txtSKEWN1.Visibility == Visibility.Visible)
                {
                    txtSKEWN1.Focus();
                    txtSKEWN1.SelectAll();
                }
                else if (txtBENDING_WN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN1.Focus();
                    txtBENDING_WN1.SelectAll();
                }
                else if (txtBENDING_FN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN1.Focus();
                    txtBENDING_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtFLEXABRASION_FN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLEXABRASION_FN5.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN5.Focus();
                    txtFLEXABRASION_FN5.SelectAll();
                }
                else if (txtFLEXABRASION_FN6.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN6.Focus();
                    txtFLEXABRASION_FN6.SelectAll();
                }
                else if (txtBOWN1.Visibility == Visibility.Visible)
                {
                    txtBOWN1.Focus();
                    txtBOWN1.SelectAll();
                }
                else if (txtSKEWN1.Visibility == Visibility.Visible)
                {
                    txtSKEWN1.Focus();
                    txtSKEWN1.SelectAll();
                }
                else if (txtBENDING_WN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN1.Focus();
                    txtBENDING_WN1.SelectAll();
                }
                else if (txtBENDING_FN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN1.Focus();
                    txtBENDING_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtFLEXABRASION_FN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLEXABRASION_FN6.Visibility == Visibility.Visible)
                {
                    txtFLEXABRASION_FN6.Focus();
                    txtFLEXABRASION_FN6.SelectAll();
                }
                else if (txtBOWN1.Visibility == Visibility.Visible)
                {
                    txtBOWN1.Focus();
                    txtBOWN1.SelectAll();
                }
                else if (txtSKEWN1.Visibility == Visibility.Visible)
                {
                    txtSKEWN1.Focus();
                    txtSKEWN1.SelectAll();
                }
                else if (txtBENDING_WN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN1.Focus();
                    txtBENDING_WN1.SelectAll();
                }
                else if (txtBENDING_FN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN1.Focus();
                    txtBENDING_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtFLEXABRASION_FN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtBOWN1.Visibility == Visibility.Visible)
                {
                    txtBOWN1.Focus();
                    txtBOWN1.SelectAll();
                }
                else if (txtBOWN2.Visibility == Visibility.Visible)
                {
                    txtBOWN2.Focus();
                    txtBOWN2.SelectAll();
                }
                else if (txtBOWN3.Visibility == Visibility.Visible)
                {
                    txtBOWN3.Focus();
                    txtBOWN3.SelectAll();
                }
                else if (txtSKEWN1.Visibility == Visibility.Visible)
                {
                    txtSKEWN1.Focus();
                    txtSKEWN1.SelectAll();
                }
                else if (txtBENDING_WN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN1.Focus();
                    txtBENDING_WN1.SelectAll();
                }
                else if (txtBENDING_FN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN1.Focus();
                    txtBENDING_FN1.SelectAll();
                }
                else
                {
                    cmdApprove.Focus();
                    e.Handled = true;
                }
            }
        }
        #endregion

        // ปรับ 10/06/18

        #region MAXFORCE_W
        private void txtMAXFORCE_WN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtMAXFORCE_WN2.Visibility == Visibility.Visible)
                {
                    txtMAXFORCE_WN2.Focus();
                    txtMAXFORCE_WN2.SelectAll();
                }
                else if (txtMAXFORCE_FN1.Visibility == Visibility.Visible)
                {
                    txtMAXFORCE_FN1.Focus();
                    txtMAXFORCE_FN1.SelectAll();
                }
                else
                {
                    txtELONGATIONFORCE_WN1.Focus();
                    txtELONGATIONFORCE_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtMAXFORCE_WN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtMAXFORCE_WN3.Visibility == Visibility.Visible)
                {
                    txtMAXFORCE_WN3.Focus();
                    txtMAXFORCE_WN3.SelectAll();
                }
                else if (txtMAXFORCE_FN1.Visibility == Visibility.Visible)
                {
                    txtMAXFORCE_FN1.Focus();
                    txtMAXFORCE_FN1.SelectAll();
                }
                else
                {
                    txtELONGATIONFORCE_WN1.Focus();
                    txtELONGATIONFORCE_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtMAXFORCE_WN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtMAXFORCE_WN4.Visibility == Visibility.Visible)
                {
                    txtMAXFORCE_WN4.Focus();
                    txtMAXFORCE_WN4.SelectAll();
                }
                else if (txtMAXFORCE_FN1.Visibility == Visibility.Visible)
                {
                    txtMAXFORCE_FN1.Focus();
                    txtMAXFORCE_FN1.SelectAll();
                }
                else
                {
                    txtELONGATIONFORCE_WN1.Focus();
                    txtELONGATIONFORCE_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtMAXFORCE_WN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtMAXFORCE_WN5.Visibility == Visibility.Visible)
                {
                    txtMAXFORCE_WN5.Focus();
                    txtMAXFORCE_WN5.SelectAll();
                }
                else if (txtMAXFORCE_FN1.Visibility == Visibility.Visible)
                {
                    txtMAXFORCE_FN1.Focus();
                    txtMAXFORCE_FN1.SelectAll();
                }
                else
                {
                    txtELONGATIONFORCE_WN1.Focus();
                    txtELONGATIONFORCE_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtMAXFORCE_WN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtMAXFORCE_WN6.Visibility == Visibility.Visible)
                {
                    txtMAXFORCE_WN6.Focus();
                    txtMAXFORCE_WN6.SelectAll();
                }
                else if (txtMAXFORCE_FN1.Visibility == Visibility.Visible)
                {
                    txtMAXFORCE_FN1.Focus();
                    txtMAXFORCE_FN1.SelectAll();
                }
                else
                {
                    txtELONGATIONFORCE_WN1.Focus();
                    txtELONGATIONFORCE_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtMAXFORCE_WN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtMAXFORCE_FN1.Visibility == Visibility.Visible)
                {
                    txtMAXFORCE_FN1.Focus();
                    txtMAXFORCE_FN1.SelectAll();
                }
                else if (txtELONGATIONFORCE_WN1.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_WN1.Focus();
                    txtELONGATIONFORCE_WN1.SelectAll();
                }
                else
                {
                    txtELONGATIONFORCE_FN1.Focus();
                    txtELONGATIONFORCE_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }
        #endregion

        #region MAXFORCE_F
        private void txtMAXFORCE_FN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtMAXFORCE_FN2.Visibility == Visibility.Visible)
                {
                    txtMAXFORCE_FN2.Focus();
                    txtMAXFORCE_FN2.SelectAll();
                }
                else if (txtELONGATIONFORCE_WN1.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_WN1.Focus();
                    txtELONGATIONFORCE_WN1.SelectAll();
                }
                else if (txtELONGATIONFORCE_FN1.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_FN1.Focus();
                    txtELONGATIONFORCE_FN1.SelectAll();
                }
                else
                {
                    txtEDGECOMB_WN1.Focus();
                    txtEDGECOMB_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtMAXFORCE_FN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtMAXFORCE_FN3.Visibility == Visibility.Visible)
                {
                    txtMAXFORCE_FN3.Focus();
                    txtMAXFORCE_FN3.SelectAll();
                }
                else if (txtELONGATIONFORCE_WN1.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_WN1.Focus();
                    txtELONGATIONFORCE_WN1.SelectAll();
                }
                else if (txtELONGATIONFORCE_FN1.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_FN1.Focus();
                    txtELONGATIONFORCE_FN1.SelectAll();
                }
                else
                {
                    txtEDGECOMB_WN1.Focus();
                    txtEDGECOMB_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtMAXFORCE_FN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtMAXFORCE_FN4.Visibility == Visibility.Visible)
                {
                    txtMAXFORCE_FN4.Focus();
                    txtMAXFORCE_FN4.SelectAll();
                }
                else if (txtELONGATIONFORCE_WN1.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_WN1.Focus();
                    txtELONGATIONFORCE_WN1.SelectAll();
                }
                else if (txtELONGATIONFORCE_FN1.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_FN1.Focus();
                    txtELONGATIONFORCE_FN1.SelectAll();
                }
                else
                {
                    txtEDGECOMB_WN1.Focus();
                    txtEDGECOMB_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtMAXFORCE_FN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtMAXFORCE_FN5.Visibility == Visibility.Visible)
                {
                    txtMAXFORCE_FN5.Focus();
                    txtMAXFORCE_FN5.SelectAll();
                }
                else if (txtELONGATIONFORCE_WN1.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_WN1.Focus();
                    txtELONGATIONFORCE_WN1.SelectAll();
                }
                else if (txtELONGATIONFORCE_FN1.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_FN1.Focus();
                    txtELONGATIONFORCE_FN1.SelectAll();
                }
                else
                {
                    txtEDGECOMB_WN1.Focus();
                    txtEDGECOMB_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtMAXFORCE_FN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtMAXFORCE_FN6.Visibility == Visibility.Visible)
                {
                    txtMAXFORCE_FN6.Focus();
                    txtMAXFORCE_FN6.SelectAll();
                }
                else if (txtELONGATIONFORCE_WN1.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_WN1.Focus();
                    txtELONGATIONFORCE_WN1.SelectAll();
                }
                else if (txtELONGATIONFORCE_FN1.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_FN1.Focus();
                    txtELONGATIONFORCE_FN1.SelectAll();
                }
                else
                {
                    txtEDGECOMB_WN1.Focus();
                    txtEDGECOMB_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtMAXFORCE_FN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtELONGATIONFORCE_WN1.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_WN1.Focus();
                    txtELONGATIONFORCE_WN1.SelectAll();
                }
                else if (txtELONGATIONFORCE_FN1.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_FN1.Focus();
                    txtELONGATIONFORCE_FN1.SelectAll();
                }
                else if (txtEDGECOMB_WN1.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_WN1.Focus();
                    txtEDGECOMB_WN1.SelectAll();
                }
                else
                {
                    txtEDGECOMB_FN1.Focus();
                    txtEDGECOMB_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }
        #endregion

        #region ELONGATIONFORCE_W
        private void txtELONGATIONFORCE_WN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtELONGATIONFORCE_WN2.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_WN2.Focus();
                    txtELONGATIONFORCE_WN2.SelectAll();
                }
                else if (txtELONGATIONFORCE_FN1.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_FN1.Focus();
                    txtELONGATIONFORCE_FN1.SelectAll();
                }
                else
                {
                    txtEDGECOMB_WN1.Focus();
                    txtEDGECOMB_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtELONGATIONFORCE_WN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtELONGATIONFORCE_WN3.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_WN3.Focus();
                    txtELONGATIONFORCE_WN3.SelectAll();
                }
                else if (txtELONGATIONFORCE_FN1.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_FN1.Focus();
                    txtELONGATIONFORCE_FN1.SelectAll();
                }
                else
                {
                    txtEDGECOMB_WN1.Focus();
                    txtEDGECOMB_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtELONGATIONFORCE_WN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtELONGATIONFORCE_WN4.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_WN4.Focus();
                    txtELONGATIONFORCE_WN4.SelectAll();
                }
                else if (txtELONGATIONFORCE_FN1.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_FN1.Focus();
                    txtELONGATIONFORCE_FN1.SelectAll();
                }
                else
                {
                    txtEDGECOMB_WN1.Focus();
                    txtEDGECOMB_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtELONGATIONFORCE_WN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtELONGATIONFORCE_WN5.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_WN5.Focus();
                    txtELONGATIONFORCE_WN5.SelectAll();
                }
                else if (txtELONGATIONFORCE_FN1.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_FN1.Focus();
                    txtELONGATIONFORCE_FN1.SelectAll();
                }
                else
                {
                    txtEDGECOMB_WN1.Focus();
                    txtEDGECOMB_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtELONGATIONFORCE_WN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtELONGATIONFORCE_WN6.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_WN6.Focus();
                    txtELONGATIONFORCE_WN6.SelectAll();
                }
                else if (txtELONGATIONFORCE_FN1.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_FN1.Focus();
                    txtELONGATIONFORCE_FN1.SelectAll();
                }
                else
                {
                    txtEDGECOMB_WN1.Focus();
                    txtEDGECOMB_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtELONGATIONFORCE_WN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtELONGATIONFORCE_FN1.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_FN1.Focus();
                    txtELONGATIONFORCE_FN1.SelectAll();
                }
                else if (txtEDGECOMB_WN1.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_WN1.Focus();
                    txtEDGECOMB_WN1.SelectAll();
                }
                else
                {
                    txtEDGECOMB_FN1.Focus();
                    txtEDGECOMB_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }
        #endregion

        #region ELONGATIONFORCE_F
        private void txtELONGATIONFORCE_FN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtELONGATIONFORCE_FN2.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_FN2.Focus();
                    txtELONGATIONFORCE_FN2.SelectAll();
                }
                else if (txtEDGECOMB_WN1.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_WN1.Focus();
                    txtEDGECOMB_WN1.SelectAll();
                }
                else if (txtEDGECOMB_FN1.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_FN1.Focus();
                    txtEDGECOMB_FN1.SelectAll();
                }
                else
                {
                    txtTEAR_WN1.Focus();
                    txtTEAR_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtELONGATIONFORCE_FN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtELONGATIONFORCE_FN3.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_FN3.Focus();
                    txtELONGATIONFORCE_FN3.SelectAll();
                }
                else if (txtEDGECOMB_WN1.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_WN1.Focus();
                    txtEDGECOMB_WN1.SelectAll();
                }
                else if (txtEDGECOMB_FN1.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_FN1.Focus();
                    txtEDGECOMB_FN1.SelectAll();
                }
                else
                {
                    txtTEAR_WN1.Focus();
                    txtTEAR_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtELONGATIONFORCE_FN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtELONGATIONFORCE_FN4.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_FN4.Focus();
                    txtELONGATIONFORCE_FN4.SelectAll();
                }
                else if (txtEDGECOMB_WN1.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_WN1.Focus();
                    txtEDGECOMB_WN1.SelectAll();
                }
                else if (txtEDGECOMB_FN1.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_FN1.Focus();
                    txtEDGECOMB_FN1.SelectAll();
                }
                else
                {
                    txtTEAR_WN1.Focus();
                    txtTEAR_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtELONGATIONFORCE_FN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtELONGATIONFORCE_FN5.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_FN5.Focus();
                    txtELONGATIONFORCE_FN5.SelectAll();
                }
                else if (txtEDGECOMB_WN1.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_WN1.Focus();
                    txtEDGECOMB_WN1.SelectAll();
                }
                else if (txtEDGECOMB_FN1.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_FN1.Focus();
                    txtEDGECOMB_FN1.SelectAll();
                }
                else
                {
                    txtTEAR_WN1.Focus();
                    txtTEAR_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtELONGATIONFORCE_FN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtELONGATIONFORCE_FN6.Visibility == Visibility.Visible)
                {
                    txtELONGATIONFORCE_FN6.Focus();
                    txtELONGATIONFORCE_FN6.SelectAll();
                }
                else if (txtEDGECOMB_WN1.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_WN1.Focus();
                    txtEDGECOMB_WN1.SelectAll();
                }
                else if (txtEDGECOMB_FN1.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_FN1.Focus();
                    txtEDGECOMB_FN1.SelectAll();
                }
                else
                {
                    txtTEAR_WN1.Focus();
                    txtTEAR_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtELONGATIONFORCE_FN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtEDGECOMB_WN1.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_WN1.Focus();
                    txtEDGECOMB_WN1.SelectAll();
                }
                else if (txtEDGECOMB_FN1.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_FN1.Focus();
                    txtEDGECOMB_FN1.SelectAll();
                }
                else if (txtTEAR_WN1.Visibility == Visibility.Visible)
                {
                    txtTEAR_WN1.Focus();
                    txtTEAR_WN1.SelectAll();
                }
                else
                {
                    txtTEAR_FN1.Focus();
                    txtTEAR_FN1.SelectAll();
                }

                e.Handled = true;
            }
        }
        #endregion

        #region EDGECOMB_W
        private void txtEDGECOMB_WN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtEDGECOMB_WN2.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_WN2.Focus();
                    txtEDGECOMB_WN2.SelectAll();
                }
                else if (txtEDGECOMB_FN1.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_FN1.Focus();
                    txtEDGECOMB_FN1.SelectAll();
                }
                else
                {
                    txtTEAR_WN1.Focus();
                    txtTEAR_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtEDGECOMB_WN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtEDGECOMB_WN3.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_WN3.Focus();
                    txtEDGECOMB_WN3.SelectAll();
                }
                else if (txtEDGECOMB_FN1.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_FN1.Focus();
                    txtEDGECOMB_FN1.SelectAll();
                }
                else
                {
                    txtTEAR_WN1.Focus();
                    txtTEAR_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtEDGECOMB_WN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtEDGECOMB_WN4.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_WN4.Focus();
                    txtEDGECOMB_WN4.SelectAll();
                }
                else if (txtEDGECOMB_FN1.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_FN1.Focus();
                    txtEDGECOMB_FN1.SelectAll();
                }
                else
                {
                    txtTEAR_WN1.Focus();
                    txtTEAR_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtEDGECOMB_WN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtEDGECOMB_WN5.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_WN5.Focus();
                    txtEDGECOMB_WN5.SelectAll();
                }
                else if (txtEDGECOMB_FN1.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_FN1.Focus();
                    txtEDGECOMB_FN1.SelectAll();
                }
                else
                {
                    txtTEAR_WN1.Focus();
                    txtTEAR_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtEDGECOMB_WN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtEDGECOMB_WN6.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_WN6.Focus();
                    txtEDGECOMB_WN6.SelectAll();
                }
                else if (txtEDGECOMB_FN1.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_FN1.Focus();
                    txtEDGECOMB_FN1.SelectAll();
                }
                else
                {
                    txtTEAR_WN1.Focus();
                    txtTEAR_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtEDGECOMB_WN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtEDGECOMB_FN1.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_FN1.Focus();
                    txtEDGECOMB_FN1.SelectAll();
                }
                else if (txtEDGECOMB_WN1.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_WN1.Focus();
                    txtEDGECOMB_WN1.SelectAll();
                }
                else
                {
                    txtTEAR_WN1.Focus();
                    txtTEAR_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }
        #endregion

        #region EDGECOMB_F
        private void txtEDGECOMB_FN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtEDGECOMB_FN2.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_FN2.Focus();
                    txtEDGECOMB_FN2.SelectAll();
                }
                else if (txtTEAR_WN1.Visibility == Visibility.Visible)
                {
                    txtTEAR_WN1.Focus();
                    txtTEAR_WN1.SelectAll();
                }
                else if (txtTEAR_FN1.Visibility == Visibility.Visible)
                {
                    txtTEAR_FN1.Focus();
                    txtTEAR_FN1.SelectAll();
                }
                else
                {
                    txtWidthN1.Focus();
                    txtWidthN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtEDGECOMB_FN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtEDGECOMB_FN3.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_FN3.Focus();
                    txtEDGECOMB_FN3.SelectAll();
                }
                else if (txtTEAR_WN1.Visibility == Visibility.Visible)
                {
                    txtTEAR_WN1.Focus();
                    txtTEAR_WN1.SelectAll();
                }
                else if (txtTEAR_FN1.Visibility == Visibility.Visible)
                {
                    txtTEAR_FN1.Focus();
                    txtTEAR_FN1.SelectAll();
                }
                else
                {
                    txtWidthN1.Focus();
                    txtWidthN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtEDGECOMB_FN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtEDGECOMB_FN4.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_FN4.Focus();
                    txtEDGECOMB_FN4.SelectAll();
                }
                else if (txtTEAR_WN1.Visibility == Visibility.Visible)
                {
                    txtTEAR_WN1.Focus();
                    txtTEAR_WN1.SelectAll();
                }
                else if (txtTEAR_FN1.Visibility == Visibility.Visible)
                {
                    txtTEAR_FN1.Focus();
                    txtTEAR_FN1.SelectAll();
                }
                else
                {
                    txtWidthN1.Focus();
                    txtWidthN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtEDGECOMB_FN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtEDGECOMB_FN5.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_FN5.Focus();
                    txtEDGECOMB_FN5.SelectAll();
                }
                else if (txtTEAR_WN1.Visibility == Visibility.Visible)
                {
                    txtTEAR_WN1.Focus();
                    txtTEAR_WN1.SelectAll();
                }
                else if (txtTEAR_FN1.Visibility == Visibility.Visible)
                {
                    txtTEAR_FN1.Focus();
                    txtTEAR_FN1.SelectAll();
                }
                else
                {
                    txtWidthN1.Focus();
                    txtWidthN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtEDGECOMB_FN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtEDGECOMB_FN6.Visibility == Visibility.Visible)
                {
                    txtEDGECOMB_FN6.Focus();
                    txtEDGECOMB_FN6.SelectAll();
                }
                else if (txtTEAR_WN1.Visibility == Visibility.Visible)
                {
                    txtTEAR_WN1.Focus();
                    txtTEAR_WN1.SelectAll();
                }
                else if (txtTEAR_FN1.Visibility == Visibility.Visible)
                {
                    txtTEAR_FN1.Focus();
                    txtTEAR_FN1.SelectAll();
                }
                else
                {
                    txtWidthN1.Focus();
                    txtWidthN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtEDGECOMB_FN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtTEAR_WN1.Visibility == Visibility.Visible)
                {
                    txtTEAR_WN1.Focus();
                    txtTEAR_WN1.SelectAll();
                }
                else if (txtTEAR_FN1.Visibility == Visibility.Visible)
                {
                    txtTEAR_FN1.Focus();
                    txtTEAR_FN1.SelectAll();
                }
                else if (txtWidthN1.Visibility == Visibility.Visible)
                {
                    txtWidthN1.Focus();
                    txtWidthN1.SelectAll();
                }
                else
                {
                    txtUSABLE_WIDTHN1.Focus();
                    txtUSABLE_WIDTHN1.SelectAll();
                }
                e.Handled = true;
            }
        }
        #endregion

        #region TEAR_W
        private void txtTEAR_WN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtTEAR_WN2.Visibility == Visibility.Visible)
                {
                    txtTEAR_WN2.Focus();
                    txtTEAR_WN2.SelectAll();
                }
                else if (txtTEAR_FN1.Visibility == Visibility.Visible)
                {
                    txtTEAR_FN1.Focus();
                    txtTEAR_FN1.SelectAll();
                }
                else if (txtWidthN1.Visibility == Visibility.Visible)
                {
                    txtWidthN1.Focus();
                    txtWidthN1.SelectAll();
                }
                else
                {
                    txtUSABLE_WIDTHN1.Focus();
                    txtUSABLE_WIDTHN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtTEAR_WN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtTEAR_WN3.Visibility == Visibility.Visible)
                {
                    txtTEAR_WN3.Focus();
                    txtTEAR_WN3.SelectAll();
                }
                else if (txtTEAR_FN1.Visibility == Visibility.Visible)
                {
                    txtTEAR_FN1.Focus();
                    txtTEAR_FN1.SelectAll();
                }
                else if (txtWidthN1.Visibility == Visibility.Visible)
                {
                    txtWidthN1.Focus();
                    txtWidthN1.SelectAll();
                }
                else
                {
                    txtUSABLE_WIDTHN1.Focus();
                    txtUSABLE_WIDTHN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtTEAR_WN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtTEAR_WN4.Visibility == Visibility.Visible)
                {
                    txtTEAR_WN4.Focus();
                    txtTEAR_WN4.SelectAll();
                }
                else if (txtTEAR_FN1.Visibility == Visibility.Visible)
                {
                    txtTEAR_FN1.Focus();
                    txtTEAR_FN1.SelectAll();
                }
                else if (txtWidthN1.Visibility == Visibility.Visible)
                {
                    txtWidthN1.Focus();
                    txtWidthN1.SelectAll();
                }
                else
                {
                    txtUSABLE_WIDTHN1.Focus();
                    txtUSABLE_WIDTHN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtTEAR_WN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtTEAR_WN5.Visibility == Visibility.Visible)
                {
                    txtTEAR_WN5.Focus();
                    txtTEAR_WN5.SelectAll();
                }
                else if (txtTEAR_FN1.Visibility == Visibility.Visible)
                {
                    txtTEAR_FN1.Focus();
                    txtTEAR_FN1.SelectAll();
                }
                else if (txtWidthN1.Visibility == Visibility.Visible)
                {
                    txtWidthN1.Focus();
                    txtWidthN1.SelectAll();
                }
                else
                {
                    txtUSABLE_WIDTHN1.Focus();
                    txtUSABLE_WIDTHN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtTEAR_WN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtTEAR_WN6.Visibility == Visibility.Visible)
                {
                    txtTEAR_WN6.Focus();
                    txtTEAR_WN6.SelectAll();
                }
                else if (txtTEAR_FN1.Visibility == Visibility.Visible)
                {
                    txtTEAR_FN1.Focus();
                    txtTEAR_FN1.SelectAll();
                }
                else if (txtWidthN1.Visibility == Visibility.Visible)
                {
                    txtWidthN1.Focus();
                    txtWidthN1.SelectAll();
                }
                else
                {
                    txtUSABLE_WIDTHN1.Focus();
                    txtUSABLE_WIDTHN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtTEAR_WN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtTEAR_FN1.Visibility == Visibility.Visible)
                {
                    txtTEAR_FN1.Focus();
                    txtTEAR_FN1.SelectAll();
                }
                else if (txtWidthN1.Visibility == Visibility.Visible)
                {
                    txtWidthN1.Focus();
                    txtWidthN1.SelectAll();
                }
                else if (txtUSABLE_WIDTHN1.Visibility == Visibility.Visible)
                {
                    txtUSABLE_WIDTHN1.Focus();
                    txtUSABLE_WIDTHN1.SelectAll();
                }
                else
                {
                    txtWIDTH_SILICONEN1.Focus();
                    txtWIDTH_SILICONEN1.SelectAll();
                }
                e.Handled = true;
            }
        }
        #endregion

        #region TEAR_F
        private void txtTEAR_FN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtTEAR_FN2.Visibility == Visibility.Visible)
                {
                    txtTEAR_FN2.Focus();
                    txtTEAR_FN2.SelectAll();
                }
                else if (txtWidthN1.Visibility == Visibility.Visible)
                {
                    txtWidthN1.Focus();
                    txtWidthN1.SelectAll();
                }
                else if (txtUSABLE_WIDTHN1.Visibility == Visibility.Visible)
                {
                    txtUSABLE_WIDTHN1.Focus();
                    txtUSABLE_WIDTHN1.SelectAll();
                }
                else
                {
                    txtWIDTH_SILICONEN1.Focus();
                    txtWIDTH_SILICONEN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtTEAR_FN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtTEAR_FN3.Visibility == Visibility.Visible)
                {
                    txtTEAR_FN3.Focus();
                    txtTEAR_FN3.SelectAll();
                }
                else if (txtWidthN1.Visibility == Visibility.Visible)
                {
                    txtWidthN1.Focus();
                    txtWidthN1.SelectAll();
                }
                else if (txtUSABLE_WIDTHN1.Visibility == Visibility.Visible)
                {
                    txtUSABLE_WIDTHN1.Focus();
                    txtUSABLE_WIDTHN1.SelectAll();
                }
                else
                {
                    txtWIDTH_SILICONEN1.Focus();
                    txtWIDTH_SILICONEN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtTEAR_FN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtTEAR_FN4.Visibility == Visibility.Visible)
                {
                    txtTEAR_FN4.Focus();
                    txtTEAR_FN4.SelectAll();
                }
                else if (txtWidthN1.Visibility == Visibility.Visible)
                {
                    txtWidthN1.Focus();
                    txtWidthN1.SelectAll();
                }
                else if (txtUSABLE_WIDTHN1.Visibility == Visibility.Visible)
                {
                    txtUSABLE_WIDTHN1.Focus();
                    txtUSABLE_WIDTHN1.SelectAll();
                }
                else
                {
                    txtWIDTH_SILICONEN1.Focus();
                    txtWIDTH_SILICONEN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtTEAR_FN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtTEAR_FN5.Visibility == Visibility.Visible)
                {
                    txtTEAR_FN5.Focus();
                    txtTEAR_FN5.SelectAll();
                }
                else if (txtWidthN1.Visibility == Visibility.Visible)
                {
                    txtWidthN1.Focus();
                    txtWidthN1.SelectAll();
                }
                else if (txtUSABLE_WIDTHN1.Visibility == Visibility.Visible)
                {
                    txtUSABLE_WIDTHN1.Focus();
                    txtUSABLE_WIDTHN1.SelectAll();
                }
                else
                {
                    txtWIDTH_SILICONEN1.Focus();
                    txtWIDTH_SILICONEN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtTEAR_FN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtTEAR_FN6.Visibility == Visibility.Visible)
                {
                    txtTEAR_FN6.Focus();
                    txtTEAR_FN6.SelectAll();
                }
                else if (txtWidthN1.Visibility == Visibility.Visible)
                {
                    txtWidthN1.Focus();
                    txtWidthN1.SelectAll();
                }
                else if (txtUSABLE_WIDTHN1.Visibility == Visibility.Visible)
                {
                    txtUSABLE_WIDTHN1.Focus();
                    txtUSABLE_WIDTHN1.SelectAll();
                }
                else
                {
                    txtWIDTH_SILICONEN1.Focus();
                    txtWIDTH_SILICONEN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtTEAR_FN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtWidthN1.Visibility == Visibility.Visible)
                {
                    txtWidthN1.Focus();
                    txtWidthN1.SelectAll();
                }
                else if (txtUSABLE_WIDTHN1.Visibility == Visibility.Visible)
                {
                    txtUSABLE_WIDTHN1.Focus();
                    txtUSABLE_WIDTHN1.SelectAll();
                }
                else if (txtWIDTH_SILICONEN1.Visibility == Visibility.Visible)
                {
                    txtWIDTH_SILICONEN1.Focus();
                    txtWIDTH_SILICONEN1.SelectAll();
                }
                else
                {
                    txtNUMTHREADS_WN1.Focus();
                    txtNUMTHREADS_WN1.SelectAll();
                }

                e.Handled = true;
            }
        }
        #endregion

        //Update 07/07/18
        #region BOW
        private void txtBOWN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtBOWN2.Visibility == Visibility.Visible)
                {
                    txtBOWN2.Focus();
                    txtBOWN2.SelectAll();
                }
                else if (txtBOWN3.Visibility == Visibility.Visible)
                {
                    txtBOWN3.Focus();
                    txtBOWN3.SelectAll();
                }
                else if (txtSKEWN1.Visibility == Visibility.Visible)
                {
                    txtSKEWN1.Focus();
                    txtSKEWN1.SelectAll();
                }
                else if (txtBENDING_WN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN1.Focus();
                    txtBENDING_WN1.SelectAll();
                }
                else if (txtBENDING_FN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN1.Focus();
                    txtBENDING_FN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN1.Focus();
                    txtFLEX_SCOTT_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtBOWN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtBOWN3.Visibility == Visibility.Visible)
                {
                    txtBOWN3.Focus();
                    txtBOWN3.SelectAll();
                }
                else if (txtBOWN4.Visibility == Visibility.Visible)
                {
                    txtBOWN4.Focus();
                    txtBOWN4.SelectAll();
                }
                else if (txtSKEWN1.Visibility == Visibility.Visible)
                {
                    txtSKEWN1.Focus();
                    txtSKEWN1.SelectAll();
                }
                else if (txtBENDING_WN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN1.Focus();
                    txtBENDING_WN1.SelectAll();
                }
                else if (txtBENDING_FN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN1.Focus();
                    txtBENDING_FN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN1.Focus();
                    txtFLEX_SCOTT_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtBOWN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtBOWN4.Visibility == Visibility.Visible)
                {
                    txtBOWN4.Focus();
                    txtBOWN4.SelectAll();
                }
                else if (txtBOWN5.Visibility == Visibility.Visible)
                {
                    txtBOWN5.Focus();
                    txtBOWN5.SelectAll();
                }
                else if (txtSKEWN1.Visibility == Visibility.Visible)
                {
                    txtSKEWN1.Focus();
                    txtSKEWN1.SelectAll();
                }
                else if (txtBENDING_WN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN1.Focus();
                    txtBENDING_WN1.SelectAll();
                }
                else if (txtBENDING_FN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN1.Focus();
                    txtBENDING_FN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN1.Focus();
                    txtFLEX_SCOTT_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtBOWN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtBOWN5.Visibility == Visibility.Visible)
                {
                    txtBOWN5.Focus();
                    txtBOWN5.SelectAll();
                }
                else if (txtBOWN6.Visibility == Visibility.Visible)
                {
                    txtBOWN6.Focus();
                    txtBOWN6.SelectAll();
                }
                else if (txtSKEWN1.Visibility == Visibility.Visible)
                {
                    txtSKEWN1.Focus();
                    txtSKEWN1.SelectAll();
                }
                else if (txtBENDING_WN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN1.Focus();
                    txtBENDING_WN1.SelectAll();
                }
                else if (txtBENDING_FN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN1.Focus();
                    txtBENDING_FN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN1.Focus();
                    txtFLEX_SCOTT_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtBOWN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtBOWN6.Visibility == Visibility.Visible)
                {
                    txtBOWN6.Focus();
                    txtBOWN6.SelectAll();
                }
                else if (txtSKEWN1.Visibility == Visibility.Visible)
                {
                    txtSKEWN1.Focus();
                    txtSKEWN1.SelectAll();
                }
                else if (txtBENDING_WN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN1.Focus();
                    txtBENDING_WN1.SelectAll();
                }
                else if (txtBENDING_FN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN1.Focus();
                    txtBENDING_FN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN1.Focus();
                    txtFLEX_SCOTT_WN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtBOWN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtSKEWN1.Visibility == Visibility.Visible)
                {
                    txtSKEWN1.Focus();
                    txtSKEWN1.SelectAll();
                }
                else if (txtBENDING_WN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN1.Focus();
                    txtBENDING_WN1.SelectAll();
                }
                else if (txtBENDING_FN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN1.Focus();
                    txtBENDING_FN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN1.Focus();
                    txtFLEX_SCOTT_WN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN1.Focus();
                    txtFLEX_SCOTT_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }
        #endregion

        #region SKEW
        private void txtSKEWN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtSKEWN2.Visibility == Visibility.Visible)
                {
                    txtSKEWN2.Focus();
                    txtSKEWN2.SelectAll();
                }
                else if (txtSKEWN3.Visibility == Visibility.Visible)
                {
                    txtSKEWN3.Focus();
                    txtSKEWN3.SelectAll();
                }
                else if (txtBENDING_WN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN1.Focus();
                    txtBENDING_WN1.SelectAll();
                }
                else if (txtBENDING_FN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN1.Focus();
                    txtBENDING_FN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN1.Focus();
                    txtFLEX_SCOTT_WN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN1.Focus();
                    txtFLEX_SCOTT_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtSKEWN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtSKEWN3.Visibility == Visibility.Visible)
                {
                    txtSKEWN3.Focus();
                    txtSKEWN3.SelectAll();
                }
                else if (txtSKEWN4.Visibility == Visibility.Visible)
                {
                    txtSKEWN4.Focus();
                    txtSKEWN4.SelectAll();
                }
                else if (txtBENDING_WN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN1.Focus();
                    txtBENDING_WN1.SelectAll();
                }
                else if (txtBENDING_FN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN1.Focus();
                    txtBENDING_FN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN1.Focus();
                    txtFLEX_SCOTT_WN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN1.Focus();
                    txtFLEX_SCOTT_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtSKEWN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtSKEWN4.Visibility == Visibility.Visible)
                {
                    txtSKEWN4.Focus();
                    txtSKEWN4.SelectAll();
                }
                else if (txtSKEWN5.Visibility == Visibility.Visible)
                {
                    txtSKEWN5.Focus();
                    txtSKEWN5.SelectAll();
                }
                else if (txtBENDING_WN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN1.Focus();
                    txtBENDING_WN1.SelectAll();
                }
                else if (txtBENDING_FN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN1.Focus();
                    txtBENDING_FN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN1.Focus();
                    txtFLEX_SCOTT_WN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN1.Focus();
                    txtFLEX_SCOTT_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtSKEWN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtSKEWN5.Visibility == Visibility.Visible)
                {
                    txtSKEWN5.Focus();
                    txtSKEWN5.SelectAll();
                }
                else if (txtSKEWN6.Visibility == Visibility.Visible)
                {
                    txtSKEWN6.Focus();
                    txtSKEWN6.SelectAll();
                }
                else if (txtBENDING_WN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN1.Focus();
                    txtBENDING_WN1.SelectAll();
                }
                else if (txtBENDING_FN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN1.Focus();
                    txtBENDING_FN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN1.Focus();
                    txtFLEX_SCOTT_WN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN1.Focus();
                    txtFLEX_SCOTT_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtSKEWN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtSKEWN6.Visibility == Visibility.Visible)
                {
                    txtSKEWN6.Focus();
                    txtSKEWN6.SelectAll();
                }
                else if (txtBENDING_WN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN1.Focus();
                    txtBENDING_WN1.SelectAll();
                }
                else if (txtBENDING_FN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN1.Focus();
                    txtBENDING_FN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN1.Focus();
                    txtFLEX_SCOTT_WN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN1.Focus();
                    txtFLEX_SCOTT_FN1.SelectAll();
                }
                e.Handled = true;
            }
        }

        private void txtSKEWN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtBENDING_WN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN1.Focus();
                    txtBENDING_WN1.SelectAll();
                }
                else if (txtBENDING_FN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN1.Focus();
                    txtBENDING_FN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN1.Focus();
                    txtFLEX_SCOTT_WN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN1.Focus();
                    txtFLEX_SCOTT_FN1.SelectAll();
                }
                else
                {
                    cmdApprove.Focus();
                }
                e.Handled = true;
            }
        }
        #endregion

        #region BENDING_W
        private void txtBENDING_WN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtBENDING_WN2.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN2.Focus();
                    txtBENDING_WN2.SelectAll();
                }
                else if (txtBENDING_WN3.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN3.Focus();
                    txtBENDING_WN3.SelectAll();
                }
                else if (txtBENDING_FN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN1.Focus();
                    txtBENDING_FN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN1.Focus();
                    txtFLEX_SCOTT_WN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN1.Focus();
                    txtFLEX_SCOTT_FN1.SelectAll();
                }
                else
                {
                    cmdApprove.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtBENDING_WN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtBENDING_WN3.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN3.Focus();
                    txtBENDING_WN3.SelectAll();
                }
                else if (txtBENDING_WN4.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN4.Focus();
                    txtBENDING_WN4.SelectAll();
                }
                else if (txtBENDING_FN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN1.Focus();
                    txtBENDING_FN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN1.Focus();
                    txtFLEX_SCOTT_WN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN1.Focus();
                    txtFLEX_SCOTT_FN1.SelectAll();
                }
                else
                {
                    cmdApprove.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtBENDING_WN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtBENDING_WN4.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN4.Focus();
                    txtBENDING_WN4.SelectAll();
                }
                else if (txtBENDING_WN5.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN5.Focus();
                    txtBENDING_WN5.SelectAll();
                }
                else if (txtBENDING_FN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN1.Focus();
                    txtBENDING_FN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN1.Focus();
                    txtFLEX_SCOTT_WN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN1.Focus();
                    txtFLEX_SCOTT_FN1.SelectAll();
                }
                else
                {
                    cmdApprove.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtBENDING_WN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtBENDING_WN5.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN5.Focus();
                    txtBENDING_WN5.SelectAll();
                }
                else if (txtBENDING_WN6.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN6.Focus();
                    txtBENDING_WN6.SelectAll();
                }
                else if (txtBENDING_FN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN1.Focus();
                    txtBENDING_FN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN1.Focus();
                    txtFLEX_SCOTT_WN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN1.Focus();
                    txtFLEX_SCOTT_FN1.SelectAll();
                }
                else
                {
                    cmdApprove.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtBENDING_WN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtBENDING_WN6.Visibility == Visibility.Visible)
                {
                    txtBENDING_WN6.Focus();
                    txtBENDING_WN6.SelectAll();
                }
                else if (txtBENDING_FN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN1.Focus();
                    txtBENDING_FN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN1.Focus();
                    txtFLEX_SCOTT_WN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN1.Focus();
                    txtFLEX_SCOTT_FN1.SelectAll();
                }
                else
                {
                    cmdApprove.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtBENDING_WN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtBENDING_FN1.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN1.Focus();
                    txtBENDING_FN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN1.Focus();
                    txtFLEX_SCOTT_WN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN1.Focus();
                    txtFLEX_SCOTT_FN1.SelectAll();
                }
                else
                {
                    cmdApprove.Focus();
                }
                e.Handled = true;
            }
        }
        #endregion

        #region BENDING_F
        private void txtBENDING_FN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtBENDING_FN2.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN2.Focus();
                    txtBENDING_FN2.SelectAll();
                }
                else if (txtBENDING_FN3.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN3.Focus();
                    txtBENDING_FN3.SelectAll();
                }
                else if (txtFLEX_SCOTT_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN1.Focus();
                    txtFLEX_SCOTT_WN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN1.Focus();
                    txtFLEX_SCOTT_FN1.SelectAll();
                }
                else
                {
                    cmdApprove.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtBENDING_FN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtBENDING_FN3.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN3.Focus();
                    txtBENDING_FN3.SelectAll();
                }
                else if (txtBENDING_FN4.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN4.Focus();
                    txtBENDING_FN4.SelectAll();
                }
                else if (txtFLEX_SCOTT_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN1.Focus();
                    txtFLEX_SCOTT_WN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN1.Focus();
                    txtFLEX_SCOTT_FN1.SelectAll();
                }
                else
                {
                    cmdApprove.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtBENDING_FN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtBENDING_FN4.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN4.Focus();
                    txtBENDING_FN4.SelectAll();
                }
                else if (txtBENDING_FN5.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN5.Focus();
                    txtBENDING_FN5.SelectAll();
                }
                else if (txtFLEX_SCOTT_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN1.Focus();
                    txtFLEX_SCOTT_WN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN1.Focus();
                    txtFLEX_SCOTT_FN1.SelectAll();
                }
                else
                {
                    cmdApprove.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtBENDING_FN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtBENDING_FN5.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN5.Focus();
                    txtBENDING_FN5.SelectAll();
                }
                else if (txtBENDING_FN6.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN6.Focus();
                    txtBENDING_FN6.SelectAll();
                }
                else if (txtFLEX_SCOTT_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN1.Focus();
                    txtFLEX_SCOTT_WN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN1.Focus();
                    txtFLEX_SCOTT_FN1.SelectAll();
                }
                else
                {
                    cmdApprove.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtBENDING_FN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtBENDING_FN6.Visibility == Visibility.Visible)
                {
                    txtBENDING_FN6.Focus();
                    txtBENDING_FN6.SelectAll();
                }
                else if (txtFLEX_SCOTT_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN1.Focus();
                    txtFLEX_SCOTT_WN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN1.Focus();
                    txtFLEX_SCOTT_FN1.SelectAll();
                }
                else
                {
                    cmdApprove.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtBENDING_FN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLEX_SCOTT_WN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN1.Focus();
                    txtFLEX_SCOTT_WN1.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN1.Focus();
                    txtFLEX_SCOTT_FN1.SelectAll();
                }
                else
                {
                    cmdApprove.Focus();
                }
                e.Handled = true;
            }
        }
        #endregion

        #region FLEX_SCOTT_W
        private void txtFLEX_SCOTT_WN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLEX_SCOTT_WN2.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN2.Focus();
                    txtFLEX_SCOTT_WN2.SelectAll();
                }
                else if (txtFLEX_SCOTT_WN3.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN3.Focus();
                    txtFLEX_SCOTT_WN3.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN1.Focus();
                    txtFLEX_SCOTT_FN1.SelectAll();
                }
                else
                {
                    cmdApprove.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtFLEX_SCOTT_WN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLEX_SCOTT_WN3.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN3.Focus();
                    txtFLEX_SCOTT_WN3.SelectAll();
                }
                else if (txtFLEX_SCOTT_WN4.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN4.Focus();
                    txtFLEX_SCOTT_WN4.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN1.Focus();
                    txtFLEX_SCOTT_FN1.SelectAll();
                }
                else
                {
                    cmdApprove.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtFLEX_SCOTT_WN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLEX_SCOTT_WN4.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN4.Focus();
                    txtFLEX_SCOTT_WN4.SelectAll();
                }
                else if (txtFLEX_SCOTT_WN5.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN5.Focus();
                    txtFLEX_SCOTT_WN5.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN1.Focus();
                    txtFLEX_SCOTT_FN1.SelectAll();
                }
                else
                {
                    cmdApprove.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtFLEX_SCOTT_WN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLEX_SCOTT_WN5.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN5.Focus();
                    txtFLEX_SCOTT_WN5.SelectAll();
                }
                else if (txtFLEX_SCOTT_WN6.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN6.Focus();
                    txtFLEX_SCOTT_WN6.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN1.Focus();
                    txtFLEX_SCOTT_FN1.SelectAll();
                }
                else
                {
                    cmdApprove.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtFLEX_SCOTT_WN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLEX_SCOTT_WN6.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_WN6.Focus();
                    txtFLEX_SCOTT_WN6.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN1.Focus();
                    txtFLEX_SCOTT_FN1.SelectAll();
                }
                else
                {
                    cmdApprove.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtFLEX_SCOTT_WN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLEX_SCOTT_FN1.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN1.Focus();
                    txtFLEX_SCOTT_FN1.SelectAll();
                }
                else
                {
                    cmdApprove.Focus();
                }
                e.Handled = true;
            }
        }
        #endregion

        #region FLEX_SCOTT_F
        private void txtFLEX_SCOTT_FN1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLEX_SCOTT_FN2.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN2.Focus();
                    txtFLEX_SCOTT_FN2.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN3.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN3.Focus();
                    txtFLEX_SCOTT_FN3.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN4.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN4.Focus();
                    txtFLEX_SCOTT_FN4.SelectAll();
                }
                else
                {
                    cmdApprove.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtFLEX_SCOTT_FN2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLEX_SCOTT_FN3.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN3.Focus();
                    txtFLEX_SCOTT_FN3.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN4.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN4.Focus();
                    txtFLEX_SCOTT_FN4.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN5.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN5.Focus();
                    txtFLEX_SCOTT_FN5.SelectAll();
                }
                else
                {
                    cmdApprove.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtFLEX_SCOTT_FN3_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLEX_SCOTT_FN4.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN4.Focus();
                    txtFLEX_SCOTT_FN4.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN5.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN5.Focus();
                    txtFLEX_SCOTT_FN5.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN6.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN6.Focus();
                    txtFLEX_SCOTT_FN6.SelectAll();
                }
                else
                {
                    cmdApprove.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtFLEX_SCOTT_FN4_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLEX_SCOTT_FN5.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN5.Focus();
                    txtFLEX_SCOTT_FN5.SelectAll();
                }
                else if (txtFLEX_SCOTT_FN6.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN6.Focus();
                    txtFLEX_SCOTT_FN6.SelectAll();
                }
                else
                {
                    cmdApprove.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtFLEX_SCOTT_FN5_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                if (txtFLEX_SCOTT_FN6.Visibility == Visibility.Visible)
                {
                    txtFLEX_SCOTT_FN6.Focus();
                    txtFLEX_SCOTT_FN6.SelectAll();
                }
                else
                {
                    cmdApprove.Focus();
                }
                e.Handled = true;
            }
        }

        private void txtFLEX_SCOTT_FN6_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
            {
                cmdApprove.Focus();
                e.Handled = true;
            }
        }
        #endregion

        #endregion

        #region LostFocus
        // Lost Focus
        #region WIDTH_LostFocus
        private void WIDTH_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtWidthN1.Text))
                {
                    if (Decimal.TryParse(txtWidthN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtWidthN1.Text);
                        _session.P_WIDTH = ave1;
                    }
                    else
                    {
                        txtWidthN1.Text = string.Empty;
                        _session.P_WIDTH = ave1;
                    }
                }
                else
                {
                    _session.P_WIDTH = null;
                }

                if (!string.IsNullOrEmpty(txtWidthN2.Text))
                {
                    if (Decimal.TryParse(txtWidthN2.Text, out value))
                    {
                        //ave2 = decimal.Parse(txtWidthN2.Text);
                    }
                    else
                    {
                        txtWidthN2.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtWidthN3.Text))
                {
                    if (Decimal.TryParse(txtWidthN3.Text, out value))
                    {
                        //ave3 = decimal.Parse(txtWidthN3.Text);
                    }
                    else
                    {
                        txtWidthN3.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtWidthN4.Text))
                {
                    if (Decimal.TryParse(txtWidthN4.Text, out value))
                    {
                        //ave4 = decimal.Parse(txtWidthN4.Text);
                    }
                    else
                    {
                        txtWidthN4.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtWidthN5.Text))
                {
                    if (Decimal.TryParse(txtWidthN5.Text, out value))
                    {
                        //ave5 = decimal.Parse(txtWidthN5.Text);
                    }
                    else
                    {
                        txtWidthN5.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtWidthN6.Text))
                {
                    if (Decimal.TryParse(txtWidthN6.Text, out value))
                    {
                        //ave6 = decimal.Parse(txtWidthN6.Text);
                    }
                    else
                    {
                        txtWidthN6.Text = string.Empty;
                    }
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtWidthAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtWidthAve.Text = "0";
                    else
                        txtWidthAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtWidthSpecification.Text))
                {
                    string temp = txtWidthSpecification.Text;
                    
                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtWidthN1.Foreground = Brushes.Red;
                                    else
                                        txtWidthN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtWidthN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtWidthN2.Foreground = Brushes.Red;
                                    else
                                        txtWidthN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtWidthN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtWidthN3.Foreground = Brushes.Red;
                                    else
                                        txtWidthN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtWidthN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtWidthN4.Foreground = Brushes.Red;
                                    else
                                        txtWidthN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtWidthN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtWidthN5.Foreground = Brushes.Red;
                                    else
                                        txtWidthN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtWidthN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtWidthN6.Foreground = Brushes.Red;
                                    else
                                        txtWidthN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtWidthN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtWidthN1.Foreground = Brushes.Red;
                                    else
                                        txtWidthN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtWidthN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtWidthN2.Foreground = Brushes.Red;
                                    else
                                        txtWidthN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtWidthN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtWidthN3.Foreground = Brushes.Red;
                                    else
                                        txtWidthN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtWidthN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtWidthN4.Foreground = Brushes.Red;
                                    else
                                        txtWidthN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtWidthN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtWidthN5.Foreground = Brushes.Red;
                                    else
                                        txtWidthN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtWidthN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtWidthN6.Foreground = Brushes.Red;
                                    else
                                        txtWidthN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtWidthN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtWidthN1.Foreground = Brushes.Black;
                                    else
                                        txtWidthN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtWidthN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtWidthN2.Foreground = Brushes.Black;
                                    else
                                        txtWidthN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtWidthN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtWidthN3.Foreground = Brushes.Black;
                                    else
                                        txtWidthN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtWidthN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtWidthN4.Foreground = Brushes.Black;
                                    else
                                        txtWidthN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtWidthN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtWidthN5.Foreground = Brushes.Black;
                                    else
                                        txtWidthN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtWidthN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtWidthN6.Foreground = Brushes.Black;
                                    else
                                        txtWidthN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtWidthN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtWidthN1.Foreground = Brushes.Black;
                            else
                                txtWidthN1.Foreground = Brushes.Red;
                        }
                        else
                            txtWidthN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtWidthN2.Foreground = Brushes.Black;
                            else
                                txtWidthN2.Foreground = Brushes.Red;
                        }
                        else
                            txtWidthN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtWidthN3.Foreground = Brushes.Black;
                            else
                                txtWidthN3.Foreground = Brushes.Red;
                        }
                        else
                            txtWidthN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtWidthN4.Foreground = Brushes.Black;
                            else
                                txtWidthN4.Foreground = Brushes.Red;
                        }
                        else
                            txtWidthN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtWidthN5.Foreground = Brushes.Black;
                            else
                                txtWidthN5.Foreground = Brushes.Red;
                        }
                        else
                            txtWidthN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtWidthN6.Foreground = Brushes.Black;
                            else
                                txtWidthN6.Foreground = Brushes.Red;
                        }
                        else
                            txtWidthN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtWidthN1.Foreground = Brushes.Black;
                    txtWidthN2.Foreground = Brushes.Black;
                    txtWidthN3.Foreground = Brushes.Black;
                    txtWidthN4.Foreground = Brushes.Black;
                    txtWidthN5.Foreground = Brushes.Black;
                    txtWidthN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region USABLE_WIDTH_LostFocus
        private void USABLE_WIDTH_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtUSABLE_WIDTHN1.Text))
                {
                    if (Decimal.TryParse(txtUSABLE_WIDTHN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtUSABLE_WIDTHN1.Text);
                        _session.P_USEWIDTH1 = ave1;
                    }
                    else
                    {
                        txtUSABLE_WIDTHN1.Text = string.Empty;
                        _session.P_USEWIDTH1 = null;
                    }
                }
                else
                {
                    _session.P_USEWIDTH1 = null;
                }

                if (!string.IsNullOrEmpty(txtUSABLE_WIDTHN2.Text))
                {
                    if (Decimal.TryParse(txtUSABLE_WIDTHN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtUSABLE_WIDTHN2.Text);
                        _session.P_USEWIDTH2 = ave2;
                    }
                    else
                    {
                        txtUSABLE_WIDTHN2.Text = string.Empty;
                        _session.P_USEWIDTH2 = null;
                    }
                }
                else
                {
                    _session.P_USEWIDTH2 = null;
                }

                if (!string.IsNullOrEmpty(txtUSABLE_WIDTHN3.Text))
                {
                    if (Decimal.TryParse(txtUSABLE_WIDTHN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtUSABLE_WIDTHN3.Text);
                        _session.P_USEWIDTH3 = ave3;
                    }
                    else
                    {
                        txtUSABLE_WIDTHN3.Text = string.Empty;
                        _session.P_USEWIDTH3 = null;
                    }
                }
                else
                {
                    _session.P_USEWIDTH3 = null;
                }

                if (!string.IsNullOrEmpty(txtUSABLE_WIDTHN4.Text))
                {
                    if (Decimal.TryParse(txtUSABLE_WIDTHN4.Text, out value))
                    {
                        //ave4 = decimal.Parse(txtUSABLE_WIDTHN4.Text);
                    }
                    else
                    {
                        txtUSABLE_WIDTHN4.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtUSABLE_WIDTHN5.Text))
                {
                    if (Decimal.TryParse(txtUSABLE_WIDTHN5.Text, out value))
                    {
                        //ave5 = decimal.Parse(txtUSABLE_WIDTHN5.Text);
                    }
                    else
                    {
                        txtUSABLE_WIDTHN5.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtUSABLE_WIDTHN6.Text))
                {
                    if (Decimal.TryParse(txtUSABLE_WIDTHN6.Text, out value))
                    {
                        //ave6 = decimal.Parse(txtUSABLE_WIDTHN6.Text);
                    }
                    else
                    {
                        txtUSABLE_WIDTHN6.Text = string.Empty;
                    }
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtUSABLE_WIDTHAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtUSABLE_WIDTHAve.Text = "0";
                    else
                        txtUSABLE_WIDTHAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtUSABLE_WIDTHSpecification.Text))
                {
                    string temp = txtUSABLE_WIDTHSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtUSABLE_WIDTHN1.Foreground = Brushes.Red;
                                    else
                                    {
                                        txtUSABLE_WIDTHN1.Foreground = Brushes.Black;
                                    }
                                }
                                else
                                    txtUSABLE_WIDTHN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtUSABLE_WIDTHN2.Foreground = Brushes.Red;
                                    else
                                    {
                                        txtUSABLE_WIDTHN2.Foreground = Brushes.Black;
                                    }
                                }
                                else
                                    txtUSABLE_WIDTHN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtUSABLE_WIDTHN3.Foreground = Brushes.Red;
                                    else
                                    {
                                        txtUSABLE_WIDTHN3.Foreground = Brushes.Black;
                                    }
                                }
                                else
                                    txtUSABLE_WIDTHN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtUSABLE_WIDTHN4.Foreground = Brushes.Red;
                                    else
                                    {
                                        txtUSABLE_WIDTHN4.Foreground = Brushes.Black;
                                    }
                                }
                                else
                                    txtUSABLE_WIDTHN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtUSABLE_WIDTHN5.Foreground = Brushes.Red;
                                    else
                                    {
                                        txtUSABLE_WIDTHN5.Foreground = Brushes.Black;
                                    }
                                }
                                else
                                    txtUSABLE_WIDTHN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtUSABLE_WIDTHN6.Foreground = Brushes.Red;
                                    else
                                    {
                                        txtUSABLE_WIDTHN6.Foreground = Brushes.Black;
                                    }
                                }
                                else
                                    txtUSABLE_WIDTHN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtUSABLE_WIDTHN1.Foreground = Brushes.Red;
                                    else
                                    {
                                        txtUSABLE_WIDTHN1.Foreground = Brushes.Black;
                                    }
                                }
                                else
                                    txtUSABLE_WIDTHN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtUSABLE_WIDTHN2.Foreground = Brushes.Red;
                                    else
                                    {
                                        txtUSABLE_WIDTHN2.Foreground = Brushes.Black;
                                    }
                                }
                                else
                                    txtUSABLE_WIDTHN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtUSABLE_WIDTHN3.Foreground = Brushes.Red;
                                    else
                                    {
                                        txtUSABLE_WIDTHN3.Foreground = Brushes.Black;
                                    }
                                }
                                else
                                    txtUSABLE_WIDTHN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtUSABLE_WIDTHN4.Foreground = Brushes.Red;
                                    else
                                    {
                                        txtUSABLE_WIDTHN4.Foreground = Brushes.Black;
                                    }
                                }
                                else
                                    txtUSABLE_WIDTHN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtUSABLE_WIDTHN5.Foreground = Brushes.Red;
                                    else
                                    {
                                        txtUSABLE_WIDTHN5.Foreground = Brushes.Black;
                                    }
                                }
                                else
                                    txtUSABLE_WIDTHN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtUSABLE_WIDTHN6.Foreground = Brushes.Red;
                                    else
                                    {
                                        txtUSABLE_WIDTHN6.Foreground = Brushes.Black;
                                    }
                                }
                                else
                                    txtUSABLE_WIDTHN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                    {
                                        txtUSABLE_WIDTHN1.Foreground = Brushes.Black;
                                    }
                                    else
                                        txtUSABLE_WIDTHN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtUSABLE_WIDTHN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                    {
                                        txtUSABLE_WIDTHN2.Foreground = Brushes.Black;
                                    }
                                    else
                                        txtUSABLE_WIDTHN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtUSABLE_WIDTHN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                    {
                                        txtUSABLE_WIDTHN3.Foreground = Brushes.Black;
                                    }
                                    else
                                        txtUSABLE_WIDTHN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtUSABLE_WIDTHN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                    {
                                        txtUSABLE_WIDTHN4.Foreground = Brushes.Black;
                                    }
                                    else
                                        txtUSABLE_WIDTHN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtUSABLE_WIDTHN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                    {
                                        txtUSABLE_WIDTHN5.Foreground = Brushes.Black;
                                    }
                                    else
                                        txtUSABLE_WIDTHN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtUSABLE_WIDTHN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                    {
                                        txtUSABLE_WIDTHN6.Foreground = Brushes.Black;
                                    }
                                    else
                                        txtUSABLE_WIDTHN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtUSABLE_WIDTHN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                            {
                                txtUSABLE_WIDTHN1.Foreground = Brushes.Black;
                            }
                            else
                                txtUSABLE_WIDTHN1.Foreground = Brushes.Red;
                        }
                        else
                            txtUSABLE_WIDTHN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                            {
                                txtUSABLE_WIDTHN2.Foreground = Brushes.Black;
                            }
                            else
                                txtUSABLE_WIDTHN2.Foreground = Brushes.Red;
                        }
                        else
                            txtUSABLE_WIDTHN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                            {
                                txtUSABLE_WIDTHN3.Foreground = Brushes.Black;
                            }
                            else
                                txtUSABLE_WIDTHN3.Foreground = Brushes.Red;
                        }
                        else
                            txtUSABLE_WIDTHN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                            {
                                txtUSABLE_WIDTHN4.Foreground = Brushes.Black;
                            }
                            else
                                txtUSABLE_WIDTHN4.Foreground = Brushes.Red;
                        }
                        else
                            txtUSABLE_WIDTHN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                            {
                                txtUSABLE_WIDTHN5.Foreground = Brushes.Black;
                            }
                            else
                                txtUSABLE_WIDTHN5.Foreground = Brushes.Red;
                        }
                        else
                            txtUSABLE_WIDTHN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                            {
                                txtUSABLE_WIDTHN6.Foreground = Brushes.Black;
                            }
                            else
                                txtUSABLE_WIDTHN6.Foreground = Brushes.Red;
                        }
                        else
                            txtUSABLE_WIDTHN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtUSABLE_WIDTHN1.Foreground = Brushes.Black;
                    txtUSABLE_WIDTHN2.Foreground = Brushes.Black;
                    txtUSABLE_WIDTHN3.Foreground = Brushes.Black;
                    txtUSABLE_WIDTHN4.Foreground = Brushes.Black;
                    txtUSABLE_WIDTHN5.Foreground = Brushes.Black;
                    txtUSABLE_WIDTHN6.Foreground = Brushes.Black;
                }
                #endregion

                #region Background
                if (_item_LCL_UCL != null)
                {
                    if (ave1 != null && ave1 != 0)
                    {
                        if (ave1 < _item_LCL_UCL.USABLE_WIDTH_LCL || _item_LCL_UCL.USABLE_WIDTH_UCL < ave1)
                        {
                            txtUSABLE_WIDTHN1.Background = Brushes.Yellow;
                            //txtUSABLE_WIDTHN1.Background = Brushes.Red;
                            //txtUSABLE_WIDTHN1.Foreground = Brushes.Black;
                        }
                        else
                            txtUSABLE_WIDTHN1.Background = Brushes.White;
                    }
                    else
                        txtUSABLE_WIDTHN1.Background = Brushes.White;

                    if (ave2 != null && ave2 != 0)
                    {
                        if (ave2 < _item_LCL_UCL.USABLE_WIDTH_LCL || _item_LCL_UCL.USABLE_WIDTH_UCL < ave2)
                            txtUSABLE_WIDTHN2.Background = Brushes.Yellow;
                        else
                            txtUSABLE_WIDTHN2.Background = Brushes.White;
                    }
                    else
                        txtUSABLE_WIDTHN2.Background = Brushes.White;

                    if (ave3 != null && ave3 != 0)
                    {
                        if (ave3 < _item_LCL_UCL.USABLE_WIDTH_LCL || _item_LCL_UCL.USABLE_WIDTH_UCL < ave3)
                            txtUSABLE_WIDTHN3.Background = Brushes.Yellow;
                        else
                            txtUSABLE_WIDTHN3.Background = Brushes.White;
                    }
                    else
                        txtUSABLE_WIDTHN3.Background = Brushes.White;

                    if (ave4 != null && ave4 != 0)
                    {
                        if (ave4 < _item_LCL_UCL.USABLE_WIDTH_LCL || _item_LCL_UCL.USABLE_WIDTH_UCL < ave4)
                            txtUSABLE_WIDTHN4.Background = Brushes.Yellow;
                        else
                            txtUSABLE_WIDTHN4.Background = Brushes.White;
                    }
                    else
                        txtUSABLE_WIDTHN4.Background = Brushes.White;

                    if (ave5 != null && ave5 != 0)
                    {
                        if (ave5 < _item_LCL_UCL.USABLE_WIDTH_LCL || _item_LCL_UCL.USABLE_WIDTH_UCL < ave5)
                            txtUSABLE_WIDTHN5.Background = Brushes.Yellow;
                        else
                            txtUSABLE_WIDTHN5.Background = Brushes.White;
                    }
                    else
                        txtUSABLE_WIDTHN5.Background = Brushes.White;

                    if (ave6 != null && ave6 != 0)
                    {
                        if (ave6 < _item_LCL_UCL.USABLE_WIDTH_LCL || _item_LCL_UCL.USABLE_WIDTH_UCL < ave6)
                            txtUSABLE_WIDTHN6.Background = Brushes.Yellow;
                        else
                            txtUSABLE_WIDTHN6.Background = Brushes.White;
                    }
                    else
                        txtUSABLE_WIDTHN6.Background = Brushes.White;
                }
                else
                {
                    txtUSABLE_WIDTHN1.Background = Brushes.White;
                    txtUSABLE_WIDTHN2.Background = Brushes.White;
                    txtUSABLE_WIDTHN3.Background = Brushes.White;
                    txtUSABLE_WIDTHN4.Background = Brushes.White;
                    txtUSABLE_WIDTHN5.Background = Brushes.White;
                    txtUSABLE_WIDTHN6.Background = Brushes.White;
                }
                #endregion
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region WIDTH_SILICONE_LostFocus
        private void WIDTH_SILICONE_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtWIDTH_SILICONEN1.Text))
                {
                    if (Decimal.TryParse(txtWIDTH_SILICONEN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtWIDTH_SILICONEN1.Text);
                        _session.P_WIDTHSILICONE1 = ave1;
                    }
                    else
                    {
                        txtWIDTH_SILICONEN1.Text = string.Empty;
                        _session.P_WIDTHSILICONE1 = ave1;
                    }
                }
                else
                {
                    _session.P_WIDTHSILICONE1 = null;
                }

                if (!string.IsNullOrEmpty(txtWIDTH_SILICONEN2.Text))
                {
                    if (Decimal.TryParse(txtWIDTH_SILICONEN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtWIDTH_SILICONEN2.Text);
                        _session.P_WIDTHSILICONE2 = ave2;
                    }
                    else
                    {
                        txtWIDTH_SILICONEN2.Text = string.Empty;
                        _session.P_WIDTHSILICONE2 = ave1;
                    }
                }
                else
                {
                    _session.P_WIDTHSILICONE2 = null;
                }

                if (!string.IsNullOrEmpty(txtWIDTH_SILICONEN3.Text))
                {
                    if (Decimal.TryParse(txtWIDTH_SILICONEN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtWIDTH_SILICONEN3.Text);
                        _session.P_WIDTHSILICONE3 = ave3;
                    }
                    else
                    {
                        txtWIDTH_SILICONEN3.Text = string.Empty;
                        _session.P_WIDTHSILICONE3 = ave1;
                    }
                }
                else
                {
                    _session.P_WIDTHSILICONE3 = null;
                }

                if (!string.IsNullOrEmpty(txtWIDTH_SILICONEN4.Text))
                {
                    if (Decimal.TryParse(txtWIDTH_SILICONEN4.Text, out value))
                    {
                        //ave4 = decimal.Parse(txtWIDTH_SILICONEN4.Text);
                    }
                    else
                    {
                        txtWIDTH_SILICONEN4.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtWIDTH_SILICONEN5.Text))
                {
                    if (Decimal.TryParse(txtWIDTH_SILICONEN5.Text, out value))
                    {
                        //ave5 = decimal.Parse(txtWIDTH_SILICONEN5.Text);
                    }
                    else
                    {
                        txtWIDTH_SILICONEN5.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtWIDTH_SILICONEN6.Text))
                {
                    if (Decimal.TryParse(txtWIDTH_SILICONEN6.Text, out value))
                    {
                        //ave6 = decimal.Parse(txtWIDTH_SILICONEN6.Text);
                    }
                    else
                    {
                        txtWIDTH_SILICONEN6.Text = string.Empty;
                    }
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtWIDTH_SILICONEAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtWIDTH_SILICONEAve.Text = "0";
                    else
                        txtWIDTH_SILICONEAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtWIDTH_SILICONESpecification.Text))
                {
                    string temp = txtWIDTH_SILICONESpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtWIDTH_SILICONEN1.Foreground = Brushes.Red;
                                    else
                                        txtWIDTH_SILICONEN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtWIDTH_SILICONEN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtWIDTH_SILICONEN2.Foreground = Brushes.Red;
                                    else
                                        txtWIDTH_SILICONEN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtWIDTH_SILICONEN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtWIDTH_SILICONEN3.Foreground = Brushes.Red;
                                    else
                                        txtWIDTH_SILICONEN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtWIDTH_SILICONEN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtWIDTH_SILICONEN4.Foreground = Brushes.Red;
                                    else
                                        txtWIDTH_SILICONEN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtWIDTH_SILICONEN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtWIDTH_SILICONEN5.Foreground = Brushes.Red;
                                    else
                                        txtWIDTH_SILICONEN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtWIDTH_SILICONEN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtWIDTH_SILICONEN6.Foreground = Brushes.Red;
                                    else
                                        txtWIDTH_SILICONEN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtWIDTH_SILICONEN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtWIDTH_SILICONEN1.Foreground = Brushes.Red;
                                    else
                                        txtWIDTH_SILICONEN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtWIDTH_SILICONEN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtWIDTH_SILICONEN2.Foreground = Brushes.Red;
                                    else
                                        txtWIDTH_SILICONEN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtWIDTH_SILICONEN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtWIDTH_SILICONEN3.Foreground = Brushes.Red;
                                    else
                                        txtWIDTH_SILICONEN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtWIDTH_SILICONEN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtWIDTH_SILICONEN4.Foreground = Brushes.Red;
                                    else
                                        txtWIDTH_SILICONEN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtWIDTH_SILICONEN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtWIDTH_SILICONEN5.Foreground = Brushes.Red;
                                    else
                                        txtWIDTH_SILICONEN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtWIDTH_SILICONEN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtWIDTH_SILICONEN6.Foreground = Brushes.Red;
                                    else
                                        txtWIDTH_SILICONEN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtWIDTH_SILICONEN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtWIDTH_SILICONEN1.Foreground = Brushes.Black;
                                    else
                                        txtWIDTH_SILICONEN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtWIDTH_SILICONEN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtWIDTH_SILICONEN2.Foreground = Brushes.Black;
                                    else
                                        txtWIDTH_SILICONEN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtWIDTH_SILICONEN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtWIDTH_SILICONEN3.Foreground = Brushes.Black;
                                    else
                                        txtWIDTH_SILICONEN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtWIDTH_SILICONEN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtWIDTH_SILICONEN4.Foreground = Brushes.Black;
                                    else
                                        txtWIDTH_SILICONEN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtWIDTH_SILICONEN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtWIDTH_SILICONEN5.Foreground = Brushes.Black;
                                    else
                                        txtWIDTH_SILICONEN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtWIDTH_SILICONEN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtWIDTH_SILICONEN6.Foreground = Brushes.Black;
                                    else
                                        txtWIDTH_SILICONEN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtWIDTH_SILICONEN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtWIDTH_SILICONEN1.Foreground = Brushes.Black;
                            else
                                txtWIDTH_SILICONEN1.Foreground = Brushes.Red;
                        }
                        else
                            txtWIDTH_SILICONEN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtWIDTH_SILICONEN2.Foreground = Brushes.Black;
                            else
                                txtWIDTH_SILICONEN2.Foreground = Brushes.Red;
                        }
                        else
                            txtWIDTH_SILICONEN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtWIDTH_SILICONEN3.Foreground = Brushes.Black;
                            else
                                txtWIDTH_SILICONEN3.Foreground = Brushes.Red;
                        }
                        else
                            txtWIDTH_SILICONEN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtWIDTH_SILICONEN4.Foreground = Brushes.Black;
                            else
                                txtWIDTH_SILICONEN4.Foreground = Brushes.Red;
                        }
                        else
                            txtWIDTH_SILICONEN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtWIDTH_SILICONEN5.Foreground = Brushes.Black;
                            else
                                txtWIDTH_SILICONEN5.Foreground = Brushes.Red;
                        }
                        else
                            txtWIDTH_SILICONEN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtWIDTH_SILICONEN6.Foreground = Brushes.Black;
                            else
                                txtWIDTH_SILICONEN6.Foreground = Brushes.Red;
                        }
                        else
                            txtWIDTH_SILICONEN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtWIDTH_SILICONEN1.Foreground = Brushes.Black;
                    txtWIDTH_SILICONEN2.Foreground = Brushes.Black;
                    txtWIDTH_SILICONEN3.Foreground = Brushes.Black;
                    txtWIDTH_SILICONEN4.Foreground = Brushes.Black;
                    txtWIDTH_SILICONEN5.Foreground = Brushes.Black;
                    txtWIDTH_SILICONEN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region NUMTHREADS_R0_W_LostFocus
        private void NUMTHREADS_R0_W_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtNUMTHREADS_R0_WN1.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_R0_WN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtNUMTHREADS_R0_WN1.Text);
                        _session.P_NUMTHREADS_W1 = ave1;
                    }
                    else
                    {
                        txtNUMTHREADS_R0_WN1.Text = string.Empty;
                        _session.P_NUMTHREADS_W1 = null;
                    }
                }
                else
                {
                    _session.P_NUMTHREADS_W1 = null;
                }

                if (!string.IsNullOrEmpty(txtNUMTHREADS_R0_WN2.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_R0_WN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtNUMTHREADS_R0_WN2.Text);
                        _session.P_NUMTHREADS_W2 = ave2;
                    }
                    else
                    {
                        txtNUMTHREADS_R0_WN2.Text = string.Empty;
                        _session.P_NUMTHREADS_W2 = null;
                    }
                }
                else
                {
                    _session.P_NUMTHREADS_W2 = null;
                }

                if (!string.IsNullOrEmpty(txtNUMTHREADS_R0_WN3.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_R0_WN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtNUMTHREADS_R0_WN3.Text);
                        _session.P_NUMTHREADS_W3 = ave3;
                    }
                    else
                    {
                        txtNUMTHREADS_R0_WN3.Text = string.Empty;
                        _session.P_NUMTHREADS_W3 = null;
                    }
                }
                else
                {
                    _session.P_NUMTHREADS_W3 = null;
                }

                if (!string.IsNullOrEmpty(txtNUMTHREADS_R0_WN4.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_R0_WN4.Text, out value))
                    {
                        //ave4 = decimal.Parse(txtNUMTHREADS_R0_WN4.Text);
                    }
                    else
                    {
                        txtNUMTHREADS_R0_WN4.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtNUMTHREADS_R0_WN5.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_R0_WN5.Text, out value))
                    {
                        //ave5 = decimal.Parse(txtNUMTHREADS_R0_WN5.Text);
                    }
                    else
                    {
                        txtNUMTHREADS_R0_WN5.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtNUMTHREADS_R0_WN6.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_R0_WN6.Text, out value))
                    {
                        //ave6 = decimal.Parse(txtNUMTHREADS_R0_WN6.Text);
                    }
                    else
                    {
                        txtNUMTHREADS_R0_WN6.Text = string.Empty;
                    }
                }

                decimal? Avg = 0;

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtNUMTHREADS_WAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtNUMTHREADS_WAve.Text = "0";
                    else
                        txtNUMTHREADS_WAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtNUMTHREADS_WSpecification.Text))
                {
                    string temp = txtNUMTHREADS_WSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                    {
                                        txtNUMTHREADS_R0_WN1.Foreground = Brushes.Red;
                                    }
                                    else
                                        txtNUMTHREADS_R0_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R0_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                    {
                                        txtNUMTHREADS_R0_WN2.Foreground = Brushes.Red;
                                    }
                                    else
                                        txtNUMTHREADS_R0_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R0_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                    {
                                        txtNUMTHREADS_R0_WN3.Foreground = Brushes.Red;
                                    }
                                    else
                                        txtNUMTHREADS_R0_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R0_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                    {
                                        txtNUMTHREADS_R0_WN4.Foreground = Brushes.Red;
                                    }
                                    else
                                        txtNUMTHREADS_R0_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R0_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                    {
                                        txtNUMTHREADS_R0_WN5.Foreground = Brushes.Red;
                                    }
                                    else
                                        txtNUMTHREADS_R0_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R0_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                    {
                                        txtNUMTHREADS_R0_WN6.Foreground = Brushes.Red;
                                    }
                                    else
                                        txtNUMTHREADS_R0_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R0_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                    {
                                        txtNUMTHREADS_R0_WN1.Foreground = Brushes.Red;
                                    }
                                    else
                                        txtNUMTHREADS_R0_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R0_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                    {
                                        txtNUMTHREADS_R0_WN2.Foreground = Brushes.Red;
                                    }
                                    else
                                        txtNUMTHREADS_R0_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R0_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                    {
                                        txtNUMTHREADS_R0_WN3.Foreground = Brushes.Red;
                                    }
                                    else
                                        txtNUMTHREADS_R0_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R0_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                    {
                                        txtNUMTHREADS_R0_WN4.Foreground = Brushes.Red;
                                    }
                                    else
                                        txtNUMTHREADS_R0_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R0_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                    {
                                        txtNUMTHREADS_R0_WN5.Foreground = Brushes.Red;
                                    }
                                    else
                                        txtNUMTHREADS_R0_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R0_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                    {
                                        txtNUMTHREADS_R0_WN6.Foreground = Brushes.Red;
                                    }
                                    else
                                        txtNUMTHREADS_R0_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R0_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtNUMTHREADS_R0_WN1.Foreground = Brushes.Black;
                                    else
                                    {
                                        txtNUMTHREADS_R0_WN1.Foreground = Brushes.Red;
                                    }
                                }
                                else
                                    txtNUMTHREADS_R0_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtNUMTHREADS_R0_WN2.Foreground = Brushes.Black;
                                    else
                                    {
                                        txtNUMTHREADS_R0_WN2.Foreground = Brushes.Red;
                                    }
                                }
                                else
                                    txtNUMTHREADS_R0_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtNUMTHREADS_R0_WN3.Foreground = Brushes.Black;
                                    else
                                    {
                                        txtNUMTHREADS_R0_WN3.Foreground = Brushes.Red;
                                    }
                                }
                                else
                                    txtNUMTHREADS_R0_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtNUMTHREADS_R0_WN4.Foreground = Brushes.Black;
                                    else
                                    {
                                        txtNUMTHREADS_R0_WN4.Foreground = Brushes.Red;
                                    }
                                }
                                else
                                    txtNUMTHREADS_R0_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtNUMTHREADS_R0_WN5.Foreground = Brushes.Black;
                                    else
                                    {
                                        txtNUMTHREADS_R0_WN5.Foreground = Brushes.Red;
                                    }
                                }
                                else
                                    txtNUMTHREADS_R0_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtNUMTHREADS_R0_WN6.Foreground = Brushes.Black;
                                    else
                                    {
                                        txtNUMTHREADS_R0_WN6.Foreground = Brushes.Red;
                                    }
                                }
                                else
                                    txtNUMTHREADS_R0_WN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtNUMTHREADS_R0_WN1.Foreground = Brushes.Black;
                            else
                            {
                                txtNUMTHREADS_R0_WN1.Foreground = Brushes.Red;
                            }
                        }
                        else
                            txtNUMTHREADS_R0_WN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtNUMTHREADS_R0_WN2.Foreground = Brushes.Black;
                            else
                            {
                                txtNUMTHREADS_R0_WN2.Foreground = Brushes.Red;
                            }
                        }
                        else
                            txtNUMTHREADS_R0_WN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtNUMTHREADS_R0_WN3.Foreground = Brushes.Black;
                            else
                            {
                                txtNUMTHREADS_R0_WN3.Foreground = Brushes.Red;
                            }
                        }
                        else
                            txtNUMTHREADS_R0_WN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtNUMTHREADS_R0_WN4.Foreground = Brushes.Black;
                            else
                            {
                                txtNUMTHREADS_R0_WN4.Foreground = Brushes.Red;
                            }
                        }
                        else
                            txtNUMTHREADS_R0_WN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtNUMTHREADS_R0_WN5.Foreground = Brushes.Black;
                            else
                            {
                                txtNUMTHREADS_R0_WN5.Foreground = Brushes.Red;
                            }
                        }
                        else
                            txtNUMTHREADS_R0_WN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtNUMTHREADS_R0_WN6.Foreground = Brushes.Black;
                            else
                            {
                                txtNUMTHREADS_R0_WN6.Foreground = Brushes.Red;
                            }
                        }
                        else
                            txtNUMTHREADS_R0_WN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtNUMTHREADS_R0_WN1.Foreground = Brushes.Black;
                    txtNUMTHREADS_R0_WN2.Foreground = Brushes.Black;
                    txtNUMTHREADS_R0_WN3.Foreground = Brushes.Black;
                    txtNUMTHREADS_R0_WN4.Foreground = Brushes.Black;
                    txtNUMTHREADS_R0_WN5.Foreground = Brushes.Black;
                    txtNUMTHREADS_R0_WN6.Foreground = Brushes.Black;
                }
                #endregion

                NumthreadsW();
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region NUMTHREADS_R1_W_LostFocus
        private void NUMTHREADS_R1_W_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtNUMTHREADS_R1_WN1.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_R1_WN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtNUMTHREADS_R1_WN1.Text);
                        _session.P_NUMTHREADS_W1 = ave1;
                    }
                    else
                    {
                        txtNUMTHREADS_R1_WN1.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtNUMTHREADS_R1_WN2.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_R1_WN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtNUMTHREADS_R1_WN2.Text);
                        _session.P_NUMTHREADS_W2 = ave2;
                    }
                    else
                    {
                        txtNUMTHREADS_R1_WN2.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtNUMTHREADS_R1_WN3.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_R1_WN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtNUMTHREADS_R1_WN3.Text);
                        _session.P_NUMTHREADS_W3 = ave3;
                    }
                    else
                    {
                        txtNUMTHREADS_R1_WN3.Text = string.Empty;
                    }
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtNUMTHREADS_WSpecification.Text))
                {
                    string temp = txtNUMTHREADS_WSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                    {
                                        txtNUMTHREADS_R1_WN1.Foreground = Brushes.Red;
                                    }
                                    else
                                    {
                                        txtNUMTHREADS_R1_WN1.Foreground = Brushes.Black;
                                    }
                                }
                                else
                                {
                                    txtNUMTHREADS_R1_WN1.Foreground = Brushes.Black;
                                }

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                    {
                                        txtNUMTHREADS_R1_WN2.Foreground = Brushes.Red;
                                    }
                                    else
                                    {
                                        txtNUMTHREADS_R1_WN2.Foreground = Brushes.Black;
                                    }
                                }
                                else
                                {
                                    txtNUMTHREADS_R1_WN2.Foreground = Brushes.Black;
                                }

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                    {
                                        txtNUMTHREADS_R1_WN3.Foreground = Brushes.Red;
                                    }
                                    else
                                    {
                                        txtNUMTHREADS_R1_WN3.Foreground = Brushes.Black;
                                    }
                                }
                                else
                                {
                                    txtNUMTHREADS_R1_WN3.Foreground = Brushes.Black;
                                }

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                    {
                                        txtNUMTHREADS_R1_WN4.Foreground = Brushes.Red;
                                    }
                                    else
                                    {
                                        txtNUMTHREADS_R1_WN4.Foreground = Brushes.Black;
                                    }
                                }
                                else
                                {
                                    txtNUMTHREADS_R1_WN4.Foreground = Brushes.Black;
                                }

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                    {
                                        txtNUMTHREADS_R1_WN5.Foreground = Brushes.Red;
                                    }
                                    else
                                    {
                                        txtNUMTHREADS_R1_WN5.Foreground = Brushes.Black;
                                    }
                                }
                                else
                                {
                                    txtNUMTHREADS_R1_WN5.Foreground = Brushes.Black;
                                }

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                    {
                                        txtNUMTHREADS_R1_WN6.Foreground = Brushes.Red;
                                    }
                                    else
                                    {
                                        txtNUMTHREADS_R1_WN6.Foreground = Brushes.Black;
                                    }
                                }
                                else
                                {
                                    txtNUMTHREADS_R1_WN6.Foreground = Brushes.Black;
                                }
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                    {
                                        txtNUMTHREADS_R1_WN1.Foreground = Brushes.Red;
                                    }
                                    else
                                    {
                                        txtNUMTHREADS_R1_WN1.Foreground = Brushes.Black;
                                    }
                                }
                                else
                                {
                                    txtNUMTHREADS_R1_WN1.Foreground = Brushes.Black;
                                }

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                    {
                                        txtNUMTHREADS_R1_WN2.Foreground = Brushes.Red;
                                    }
                                    else
                                    {
                                        txtNUMTHREADS_R1_WN2.Foreground = Brushes.Black;
                                    }
                                }
                                else
                                {
                                    txtNUMTHREADS_R1_WN2.Foreground = Brushes.Black;
                                }

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                    {
                                        txtNUMTHREADS_R1_WN3.Foreground = Brushes.Red;
                                    }
                                    else
                                    {
                                        txtNUMTHREADS_R1_WN3.Foreground = Brushes.Black;
                                    }
                                }
                                else
                                {
                                    txtNUMTHREADS_R1_WN3.Foreground = Brushes.Black;
                                }

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                    {
                                        txtNUMTHREADS_R1_WN4.Foreground = Brushes.Red;
                                    }
                                    else
                                    {
                                        txtNUMTHREADS_R1_WN4.Foreground = Brushes.Black;
                                    }
                                }
                                else
                                {
                                    txtNUMTHREADS_R1_WN4.Foreground = Brushes.Black;
                                }

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                    {
                                        txtNUMTHREADS_R1_WN5.Foreground = Brushes.Red;
                                    }
                                    else
                                    {
                                        txtNUMTHREADS_R1_WN5.Foreground = Brushes.Black;
                                    }
                                }
                                else
                                {
                                    txtNUMTHREADS_R1_WN5.Foreground = Brushes.Black;
                                }

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                    {
                                        txtNUMTHREADS_R1_WN6.Foreground = Brushes.Red;
                                    }
                                    else
                                    {
                                        txtNUMTHREADS_R1_WN6.Foreground = Brushes.Black;
                                    }
                                }
                                else
                                {
                                    txtNUMTHREADS_R1_WN6.Foreground = Brushes.Black;
                                }
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                    {
                                        txtNUMTHREADS_R1_WN1.Foreground = Brushes.Black;
                                    }
                                    else
                                    {
                                        txtNUMTHREADS_R1_WN1.Foreground = Brushes.Red;
                                    }
                                }
                                else
                                {
                                    txtNUMTHREADS_R1_WN1.Foreground = Brushes.Black;
                                }

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                    {
                                        txtNUMTHREADS_R1_WN2.Foreground = Brushes.Black;
                                    }
                                    else
                                    {
                                        txtNUMTHREADS_R1_WN2.Foreground = Brushes.Red;
                                    }
                                }
                                else
                                {
                                    txtNUMTHREADS_R1_WN2.Foreground = Brushes.Black;
                                }

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                    {
                                        txtNUMTHREADS_R1_WN3.Foreground = Brushes.Black;
                                    }
                                    else
                                    {
                                        txtNUMTHREADS_R1_WN3.Foreground = Brushes.Red;
                                    }
                                }
                                else
                                {
                                    txtNUMTHREADS_R1_WN3.Foreground = Brushes.Black;
                                }

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                    {
                                        txtNUMTHREADS_R1_WN4.Foreground = Brushes.Black;
                                    }
                                    else
                                    {
                                        txtNUMTHREADS_R1_WN4.Foreground = Brushes.Red;
                                    }
                                }
                                else
                                {
                                    txtNUMTHREADS_R1_WN4.Foreground = Brushes.Black;
                                }

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                    {
                                        txtNUMTHREADS_R1_WN5.Foreground = Brushes.Black;
                                    }
                                    else
                                    {
                                        txtNUMTHREADS_R1_WN5.Foreground = Brushes.Red;
                                    }
                                }
                                else
                                {
                                    txtNUMTHREADS_R1_WN5.Foreground = Brushes.Black;
                                }

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                    {
                                        txtNUMTHREADS_R1_WN6.Foreground = Brushes.Black;
                                    }
                                    else
                                    {
                                        txtNUMTHREADS_R1_WN6.Foreground = Brushes.Red;
                                    }
                                }
                                else
                                {
                                    txtNUMTHREADS_R1_WN6.Foreground = Brushes.Black;
                                }
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                            {
                                txtNUMTHREADS_R1_WN1.Foreground = Brushes.Black;
                            }
                            else
                            {
                                txtNUMTHREADS_R1_WN1.Foreground = Brushes.Red;
                            }
                        }
                        else
                        {
                            txtNUMTHREADS_R1_WN1.Foreground = Brushes.Black;
                        }

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                            {
                                txtNUMTHREADS_R1_WN2.Foreground = Brushes.Black;
                            }
                            else
                            {
                                txtNUMTHREADS_R1_WN2.Foreground = Brushes.Red;
                            }
                        }
                        else
                        {
                            txtNUMTHREADS_R1_WN2.Foreground = Brushes.Black;
                        }

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                            {
                                txtNUMTHREADS_R1_WN3.Foreground = Brushes.Black;
                            }
                            else
                            {
                                txtNUMTHREADS_R1_WN3.Foreground = Brushes.Red;
                            }
                        }
                        else
                        {
                            txtNUMTHREADS_R1_WN3.Foreground = Brushes.Black;
                        }

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                            {
                                txtNUMTHREADS_R1_WN4.Foreground = Brushes.Black;
                            }
                            else
                            {
                                txtNUMTHREADS_R1_WN4.Foreground = Brushes.Red;
                            }
                        }
                        else
                        {
                            txtNUMTHREADS_R1_WN4.Foreground = Brushes.Black;
                        }

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                            {
                                txtNUMTHREADS_R1_WN5.Foreground = Brushes.Black;
                            }
                            else
                            {
                                txtNUMTHREADS_R1_WN5.Foreground = Brushes.Red;
                            }
                        }
                        else
                        {
                            txtNUMTHREADS_R1_WN5.Foreground = Brushes.Black;
                        }

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                            {
                                txtNUMTHREADS_R1_WN6.Foreground = Brushes.Black;
                            }
                            else
                            {
                                txtNUMTHREADS_R1_WN6.Foreground = Brushes.Red;
                            }
                        }
                        else
                        {
                            txtNUMTHREADS_R1_WN6.Foreground = Brushes.Black;
                        }

                    }
                }
                else
                {
                    txtNUMTHREADS_R1_WN1.Foreground = Brushes.Black;
                    txtNUMTHREADS_R1_WN2.Foreground = Brushes.Black;
                    txtNUMTHREADS_R1_WN3.Foreground = Brushes.Black;
                    txtNUMTHREADS_R1_WN4.Foreground = Brushes.Black;
                    txtNUMTHREADS_R1_WN5.Foreground = Brushes.Black;
                    txtNUMTHREADS_R1_WN6.Foreground = Brushes.Black;
                }
                #endregion

                NumthreadsW();
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region NUMTHREADS_R2_W_LostFocus
        private void NUMTHREADS_R2_W_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtNUMTHREADS_R2_WN1.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_R2_WN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtNUMTHREADS_R2_WN1.Text);
                        _session.P_NUMTHREADS_W1 = ave1;
                    }
                    else
                    {
                        txtNUMTHREADS_R2_WN1.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtNUMTHREADS_R2_WN2.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_R2_WN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtNUMTHREADS_R2_WN2.Text);
                        _session.P_NUMTHREADS_W2 = ave2;
                    }
                    else
                    {
                        txtNUMTHREADS_R2_WN2.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtNUMTHREADS_R2_WN3.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_R2_WN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtNUMTHREADS_R2_WN3.Text);
                        _session.P_NUMTHREADS_W3 = ave3;
                    }
                    else
                    {
                        txtNUMTHREADS_R2_WN3.Text = string.Empty;
                    }
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtNUMTHREADS_WSpecification.Text))
                {
                    string temp = txtNUMTHREADS_WSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                    {
                                        txtNUMTHREADS_R2_WN1.Foreground = Brushes.Red;
                                    }
                                    else
                                        txtNUMTHREADS_R2_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R2_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                    {
                                        txtNUMTHREADS_R2_WN2.Foreground = Brushes.Red;
                                    }
                                    else
                                        txtNUMTHREADS_R2_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R2_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                    {
                                        txtNUMTHREADS_R2_WN3.Foreground = Brushes.Red;
                                    }
                                    else
                                        txtNUMTHREADS_R2_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R2_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                    {
                                        txtNUMTHREADS_R2_WN4.Foreground = Brushes.Red;
                                    }
                                    else
                                        txtNUMTHREADS_R2_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R2_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                    {
                                        txtNUMTHREADS_R2_WN5.Foreground = Brushes.Red;
                                    }
                                    else
                                        txtNUMTHREADS_R2_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R2_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                    {
                                        txtNUMTHREADS_R2_WN6.Foreground = Brushes.Red;
                                    }
                                    else
                                        txtNUMTHREADS_R2_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R2_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                    {
                                        txtNUMTHREADS_R2_WN1.Foreground = Brushes.Red;
                                    }
                                    else
                                        txtNUMTHREADS_R2_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R2_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                    {
                                        txtNUMTHREADS_R2_WN2.Foreground = Brushes.Red;
                                    }
                                    else
                                        txtNUMTHREADS_R2_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R2_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                    {
                                        txtNUMTHREADS_R2_WN3.Foreground = Brushes.Red;
                                    }
                                    else
                                        txtNUMTHREADS_R2_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R2_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                    {
                                        txtNUMTHREADS_R2_WN4.Foreground = Brushes.Red;
                                    }
                                    else
                                        txtNUMTHREADS_R2_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R2_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                    {
                                        txtNUMTHREADS_R2_WN5.Foreground = Brushes.Red;
                                    }
                                    else
                                        txtNUMTHREADS_R2_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R2_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                    {
                                        txtNUMTHREADS_R2_WN6.Foreground = Brushes.Red;
                                    }
                                    else
                                        txtNUMTHREADS_R2_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R2_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtNUMTHREADS_R2_WN1.Foreground = Brushes.Black;
                                    else
                                    {
                                        txtNUMTHREADS_R2_WN1.Foreground = Brushes.Red;
                                    }
                                }
                                else
                                    txtNUMTHREADS_R2_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtNUMTHREADS_R2_WN2.Foreground = Brushes.Black;
                                    else
                                    {
                                        txtNUMTHREADS_R2_WN2.Foreground = Brushes.Red;
                                    }
                                }
                                else
                                    txtNUMTHREADS_R2_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtNUMTHREADS_R2_WN3.Foreground = Brushes.Black;
                                    else
                                    {
                                        txtNUMTHREADS_R2_WN3.Foreground = Brushes.Red;
                                    }
                                }
                                else
                                    txtNUMTHREADS_R2_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtNUMTHREADS_R2_WN4.Foreground = Brushes.Black;
                                    else
                                    {
                                        txtNUMTHREADS_R2_WN4.Foreground = Brushes.Red;
                                    }
                                }
                                else
                                    txtNUMTHREADS_R2_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtNUMTHREADS_R2_WN5.Foreground = Brushes.Black;
                                    else
                                    {
                                        txtNUMTHREADS_R2_WN5.Foreground = Brushes.Red;
                                    }
                                }
                                else
                                    txtNUMTHREADS_R2_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtNUMTHREADS_R2_WN6.Foreground = Brushes.Black;
                                    else
                                    {
                                        txtNUMTHREADS_R2_WN6.Foreground = Brushes.Red;
                                    }
                                }
                                else
                                    txtNUMTHREADS_R2_WN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtNUMTHREADS_R2_WN1.Foreground = Brushes.Black;
                            else
                            {
                                txtNUMTHREADS_R2_WN1.Foreground = Brushes.Red;
                            }
                        }
                        else
                            txtNUMTHREADS_R2_WN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtNUMTHREADS_R2_WN2.Foreground = Brushes.Black;
                            else
                            {
                                txtNUMTHREADS_R2_WN2.Foreground = Brushes.Red;
                            }
                        }
                        else
                            txtNUMTHREADS_R2_WN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtNUMTHREADS_R2_WN3.Foreground = Brushes.Black;
                            else
                            {
                                txtNUMTHREADS_R2_WN3.Foreground = Brushes.Red;
                            }
                        }
                        else
                            txtNUMTHREADS_R2_WN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtNUMTHREADS_R2_WN4.Foreground = Brushes.Black;
                            else
                            {
                                txtNUMTHREADS_R2_WN4.Foreground = Brushes.Red;
                            }
                        }
                        else
                            txtNUMTHREADS_R2_WN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtNUMTHREADS_R2_WN5.Foreground = Brushes.Black;
                            else
                            {
                                txtNUMTHREADS_R2_WN5.Foreground = Brushes.Red;
                            }
                        }
                        else
                            txtNUMTHREADS_R2_WN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtNUMTHREADS_R2_WN6.Foreground = Brushes.Black;
                            else
                            {
                                txtNUMTHREADS_R2_WN6.Foreground = Brushes.Red;
                            }
                        }
                        else
                            txtNUMTHREADS_R2_WN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtNUMTHREADS_R2_WN1.Foreground = Brushes.Black;
                    txtNUMTHREADS_R2_WN2.Foreground = Brushes.Black;
                    txtNUMTHREADS_R2_WN3.Foreground = Brushes.Black;
                    txtNUMTHREADS_R2_WN4.Foreground = Brushes.Black;
                    txtNUMTHREADS_R2_WN5.Foreground = Brushes.Black;
                    txtNUMTHREADS_R2_WN6.Foreground = Brushes.Black;
                }
                #endregion

                NumthreadsW();
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        private bool chkNUMTHREADS_R1()
        {
            bool chkVisible = false;

            try
            {
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;

                if (!string.IsNullOrEmpty(txtNUMTHREADS_R0_WN1.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_R0_WN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtNUMTHREADS_R0_WN1.Text);
                    }
                }

                if (!string.IsNullOrEmpty(txtNUMTHREADS_R0_WN2.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_R0_WN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtNUMTHREADS_R0_WN2.Text);
                    }
                }

                if (!string.IsNullOrEmpty(txtNUMTHREADS_R0_WN3.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_R0_WN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtNUMTHREADS_R0_WN3.Text);
                    }
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtNUMTHREADS_WSpecification.Text))
                {
                    string temp = txtNUMTHREADS_WSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                    {
                                        txtNUMTHREADS_R0_WN1.Foreground = Brushes.Red;
                                        chkVisible = true;
                                    }
                                    else
                                        txtNUMTHREADS_R0_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R0_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                    {
                                        txtNUMTHREADS_R0_WN2.Foreground = Brushes.Red;
                                        chkVisible = true;
                                    }
                                    else
                                        txtNUMTHREADS_R0_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R0_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                    {
                                        txtNUMTHREADS_R0_WN3.Foreground = Brushes.Red;
                                        chkVisible = true;
                                    }
                                    else
                                        txtNUMTHREADS_R0_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R0_WN3.Foreground = Brushes.Black;

                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                    {
                                        txtNUMTHREADS_R0_WN1.Foreground = Brushes.Red;
                                        chkVisible = true;
                                    }
                                    else
                                        txtNUMTHREADS_R0_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R0_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                    {
                                        txtNUMTHREADS_R0_WN2.Foreground = Brushes.Red;
                                        chkVisible = true;
                                    }
                                    else
                                        txtNUMTHREADS_R0_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R0_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                    {
                                        txtNUMTHREADS_R0_WN3.Foreground = Brushes.Red;
                                        chkVisible = true;
                                    }
                                    else
                                        txtNUMTHREADS_R0_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_R0_WN3.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtNUMTHREADS_R0_WN1.Foreground = Brushes.Black;
                                    else
                                    {
                                        txtNUMTHREADS_R0_WN1.Foreground = Brushes.Red;
                                        chkVisible = true;
                                    }
                                }
                                else
                                    txtNUMTHREADS_R0_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtNUMTHREADS_R0_WN2.Foreground = Brushes.Black;
                                    else
                                    {
                                        txtNUMTHREADS_R0_WN2.Foreground = Brushes.Red;
                                        chkVisible = true;
                                    }
                                }
                                else
                                    txtNUMTHREADS_R0_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtNUMTHREADS_R0_WN3.Foreground = Brushes.Black;
                                    else
                                    {
                                        txtNUMTHREADS_R0_WN3.Foreground = Brushes.Red;
                                        chkVisible = true;
                                    }
                                }
                                else
                                    txtNUMTHREADS_R0_WN3.Foreground = Brushes.Black;

                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtNUMTHREADS_R0_WN1.Foreground = Brushes.Black;
                            else
                            {
                                txtNUMTHREADS_R0_WN1.Foreground = Brushes.Red;
                                chkVisible = true;
                            }
                        }
                        else
                            txtNUMTHREADS_R0_WN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtNUMTHREADS_R0_WN2.Foreground = Brushes.Black;
                            else
                            {
                                txtNUMTHREADS_R0_WN2.Foreground = Brushes.Red;
                                chkVisible = true;
                            }
                        }
                        else
                            txtNUMTHREADS_R0_WN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtNUMTHREADS_R0_WN3.Foreground = Brushes.Black;
                            else
                            {
                                txtNUMTHREADS_R0_WN3.Foreground = Brushes.Red;
                                chkVisible = true;
                            }
                        }
                        else
                            txtNUMTHREADS_R0_WN3.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtNUMTHREADS_R0_WN1.Foreground = Brushes.Black;
                    txtNUMTHREADS_R0_WN2.Foreground = Brushes.Black;
                    txtNUMTHREADS_R0_WN3.Foreground = Brushes.Black;
                    txtNUMTHREADS_R0_WN4.Foreground = Brushes.Black;
                    txtNUMTHREADS_R0_WN5.Foreground = Brushes.Black;
                    txtNUMTHREADS_R0_WN6.Foreground = Brushes.Black;
                }
                #endregion

                NUMTHREADSVisibleR1(chkVisible);

                return chkVisible;
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
                return chkVisible;
            }
        }

        private bool chkNUMTHREADS_R2()
        {
            bool chkVisible = false;

            try
            {
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;

                if (!string.IsNullOrEmpty(txtNUMTHREADS_R1_WN1.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_R1_WN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtNUMTHREADS_R1_WN1.Text);
                    }
                }

                if (!string.IsNullOrEmpty(txtNUMTHREADS_R1_WN2.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_R1_WN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtNUMTHREADS_R1_WN2.Text);
                    }
                }

                if (!string.IsNullOrEmpty(txtNUMTHREADS_R1_WN3.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_R1_WN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtNUMTHREADS_R1_WN3.Text);
                    }
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtNUMTHREADS_WSpecification.Text))
                {
                    string temp = txtNUMTHREADS_WSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                    {
                                        txtNUMTHREADS_R1_WN1.Foreground = Brushes.Red;
                                    }
                                    else
                                    {
                                        txtNUMTHREADS_R1_WN1.Foreground = Brushes.Black;
                                        chkVisible = true;
                                    }
                                }
                                else
                                {
                                    txtNUMTHREADS_R1_WN1.Foreground = Brushes.Black;
                                    chkVisible = true;
                                }

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                    {
                                        txtNUMTHREADS_R1_WN2.Foreground = Brushes.Red;
                                    }
                                    else
                                    {
                                        txtNUMTHREADS_R1_WN2.Foreground = Brushes.Black;
                                        chkVisible = true;
                                    }
                                }
                                else
                                {
                                    txtNUMTHREADS_R1_WN2.Foreground = Brushes.Black;
                                    chkVisible = true;
                                }

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                    {
                                        txtNUMTHREADS_R1_WN3.Foreground = Brushes.Red;
                                    }
                                    else
                                    {
                                        txtNUMTHREADS_R1_WN3.Foreground = Brushes.Black;
                                        chkVisible = true;
                                    }
                                }
                                else
                                {
                                    txtNUMTHREADS_R1_WN3.Foreground = Brushes.Black;
                                    chkVisible = true;
                                }

                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                    {
                                        txtNUMTHREADS_R1_WN1.Foreground = Brushes.Red;
                                    }
                                    else
                                    {
                                        txtNUMTHREADS_R1_WN1.Foreground = Brushes.Black;
                                        chkVisible = true;
                                    }
                                }
                                else
                                {
                                    txtNUMTHREADS_R1_WN1.Foreground = Brushes.Black;
                                    chkVisible = true;
                                }

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                    {
                                        txtNUMTHREADS_R1_WN2.Foreground = Brushes.Red;
                                    }
                                    else
                                    {
                                        txtNUMTHREADS_R1_WN2.Foreground = Brushes.Black;
                                        chkVisible = true;
                                    }
                                }
                                else
                                {
                                    txtNUMTHREADS_R1_WN2.Foreground = Brushes.Black;
                                    chkVisible = true;
                                }

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                    {
                                        txtNUMTHREADS_R1_WN3.Foreground = Brushes.Red;
                                    }
                                    else
                                    {
                                        txtNUMTHREADS_R1_WN3.Foreground = Brushes.Black;
                                        chkVisible = true;
                                    }
                                }
                                else
                                {
                                    txtNUMTHREADS_R1_WN3.Foreground = Brushes.Black;
                                    chkVisible = true;
                                }

                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                    {
                                        txtNUMTHREADS_R1_WN1.Foreground = Brushes.Black;
                                        chkVisible = true;
                                    }
                                    else
                                    {
                                        txtNUMTHREADS_R1_WN1.Foreground = Brushes.Red;
                                    }
                                }
                                else
                                {
                                    txtNUMTHREADS_R1_WN1.Foreground = Brushes.Black;
                                    chkVisible = true;
                                }

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                    {
                                        txtNUMTHREADS_R1_WN2.Foreground = Brushes.Black;
                                        chkVisible = true;
                                    }
                                    else
                                    {
                                        txtNUMTHREADS_R1_WN2.Foreground = Brushes.Red;
                                    }
                                }
                                else
                                {
                                    txtNUMTHREADS_R1_WN2.Foreground = Brushes.Black;
                                    chkVisible = true;
                                }

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                    {
                                        txtNUMTHREADS_R1_WN3.Foreground = Brushes.Black;
                                        chkVisible = true;
                                    }
                                    else
                                    {
                                        txtNUMTHREADS_R1_WN3.Foreground = Brushes.Red;
                                    }
                                }
                                else
                                {
                                    txtNUMTHREADS_R1_WN3.Foreground = Brushes.Black;
                                    chkVisible = true;
                                }

                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                            {
                                txtNUMTHREADS_R1_WN1.Foreground = Brushes.Black;
                                chkVisible = true;
                            }
                            else
                            {
                                txtNUMTHREADS_R1_WN1.Foreground = Brushes.Red;
                            }
                        }
                        else
                        {
                            txtNUMTHREADS_R1_WN1.Foreground = Brushes.Black;
                            chkVisible = true;
                        }

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                            {
                                txtNUMTHREADS_R1_WN2.Foreground = Brushes.Black;
                                chkVisible = true;
                            }
                            else
                            {
                                txtNUMTHREADS_R1_WN2.Foreground = Brushes.Red;
                            }
                        }
                        else
                        {
                            txtNUMTHREADS_R1_WN2.Foreground = Brushes.Black;
                            chkVisible = true;
                        }

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                            {
                                txtNUMTHREADS_R1_WN3.Foreground = Brushes.Black;
                                chkVisible = true;
                            }
                            else
                            {
                                txtNUMTHREADS_R1_WN3.Foreground = Brushes.Red;
                            }
                        }
                        else
                        {
                            txtNUMTHREADS_R1_WN3.Foreground = Brushes.Black;
                            chkVisible = true;
                        }

                    }
                }
                else
                {
                    txtNUMTHREADS_R1_WN1.Foreground = Brushes.Black;
                    txtNUMTHREADS_R1_WN2.Foreground = Brushes.Black;
                    txtNUMTHREADS_R1_WN3.Foreground = Brushes.Black;
                    txtNUMTHREADS_R1_WN4.Foreground = Brushes.Black;
                    txtNUMTHREADS_R1_WN5.Foreground = Brushes.Black;
                    txtNUMTHREADS_R1_WN6.Foreground = Brushes.Black;
                }
                #endregion

                NUMTHREADSVisibleR2(chkVisible);

                return chkVisible;
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
                return chkVisible;
            }
        }

        private void NUMTHREADSVisibleR1(bool chkVisible)
        {
            if (chkVisible == true)
            {
                if (txtNUMTHREADSRow1.IsVisible == false)
                    txtNUMTHREADSRow1.Visibility = Visibility.Visible;

                if (txtNUMTHREADS_R0_WN1.Foreground == Brushes.Red)
                {
                    txtNUMTHREADS_R1_WN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R2_WN1.Visibility = Visibility.Visible;
                }
                else
                {
                    txtNUMTHREADS_R1_WN1.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R1_WN1.Text = string.Empty;

                    txtNUMTHREADS_R2_WN1.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R2_WN1.Text = string.Empty;
                }

                if (txtNUMTHREADS_R0_WN2.Foreground == Brushes.Red)
                {
                    txtNUMTHREADS_R1_WN2.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R2_WN2.Visibility = Visibility.Visible;
                }
                else
                {
                    txtNUMTHREADS_R1_WN2.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R1_WN2.Text = string.Empty;

                    txtNUMTHREADS_R2_WN2.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R2_WN2.Text = string.Empty;
                }

                if (txtNUMTHREADS_R0_WN3.Foreground == Brushes.Red)
                {
                    txtNUMTHREADS_R1_WN3.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R2_WN3.Visibility = Visibility.Visible;
                }
                else
                {
                    txtNUMTHREADS_R1_WN3.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R1_WN3.Text = string.Empty;

                    txtNUMTHREADS_R2_WN3.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R2_WN3.Text = string.Empty;
                }

                if (txtNUMTHREADS_R0_WN4.Foreground == Brushes.Red)
                {
                    txtNUMTHREADS_R1_WN4.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R2_WN4.Visibility = Visibility.Visible;
                }
                else
                {
                    txtNUMTHREADS_R1_WN4.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R1_WN4.Text = string.Empty;

                    txtNUMTHREADS_R2_WN4.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R2_WN4.Text = string.Empty;
                }

                if (txtNUMTHREADS_R0_WN5.Foreground == Brushes.Red)
                {
                    txtNUMTHREADS_R1_WN5.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R2_WN5.Visibility = Visibility.Visible;
                }
                else
                {
                    txtNUMTHREADS_R1_WN5.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R1_WN5.Text = string.Empty;

                    txtNUMTHREADS_R2_WN5.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R2_WN5.Text = string.Empty;
                }

                if (txtNUMTHREADS_R0_WN6.Foreground == Brushes.Red)
                {
                    txtNUMTHREADS_R1_WN6.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R2_WN6.Visibility = Visibility.Visible;
                }
                else
                {
                    txtNUMTHREADS_R1_WN6.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R1_WN6.Text = string.Empty;

                    txtNUMTHREADS_R2_WN6.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R2_WN6.Text = string.Empty;
                }


                if (txtNUMTHREADS_R1_WN1.IsVisible == true || txtNUMTHREADS_R1_WN2.IsVisible == true || txtNUMTHREADS_R1_WN3.IsVisible == true
                || txtNUMTHREADS_R1_WN4.IsVisible == true || txtNUMTHREADS_R1_WN5.IsVisible == true || txtNUMTHREADS_R1_WN6.IsVisible == true)
                {
                    //txtNUMTHREADSRow2.Visibility = Visibility.Visible;
                    txtNUMTHREADSSum.Visibility = Visibility.Visible;
                }
                else
                {
                    if (txtNUMTHREADSRow1.IsVisible == true)
                    {
                        txtNUMTHREADSRow1.Visibility = Visibility.Collapsed;
                        txtNUMTHREADSRow2.Visibility = Visibility.Collapsed;
                        txtNUMTHREADSSum.Visibility = Visibility.Collapsed;

                        txtNUMTHREADS_R1_WN1.Text = string.Empty;
                        txtNUMTHREADS_R1_WN2.Text = string.Empty;
                        txtNUMTHREADS_R1_WN3.Text = string.Empty;
                        txtNUMTHREADS_R1_WN4.Text = string.Empty;
                        txtNUMTHREADS_R1_WN5.Text = string.Empty;
                        txtNUMTHREADS_R1_WN6.Text = string.Empty;

                        txtNUMTHREADS_R2_WN1.Text = string.Empty;
                        txtNUMTHREADS_R2_WN2.Text = string.Empty;
                        txtNUMTHREADS_R2_WN3.Text = string.Empty;
                        txtNUMTHREADS_R2_WN4.Text = string.Empty;
                        txtNUMTHREADS_R2_WN5.Text = string.Empty;
                        txtNUMTHREADS_R2_WN6.Text = string.Empty;

                        txtNUMTHREADS_WN1.Text = string.Empty;
                        txtNUMTHREADS_WN2.Text = string.Empty;
                        txtNUMTHREADS_WN3.Text = string.Empty;
                        txtNUMTHREADS_WN4.Text = string.Empty;
                        txtNUMTHREADS_WN5.Text = string.Empty;
                        txtNUMTHREADS_WN6.Text = string.Empty;

                        txtNUMTHREADS_R1_WN1.Visibility = Visibility.Hidden;
                        txtNUMTHREADS_R1_WN2.Visibility = Visibility.Hidden;
                        txtNUMTHREADS_R1_WN3.Visibility = Visibility.Hidden;
                        txtNUMTHREADS_R1_WN4.Visibility = Visibility.Hidden;
                        txtNUMTHREADS_R1_WN5.Visibility = Visibility.Hidden;
                        txtNUMTHREADS_R1_WN6.Visibility = Visibility.Hidden;

                        txtNUMTHREADS_R2_WN1.Visibility = Visibility.Hidden;
                        txtNUMTHREADS_R2_WN2.Visibility = Visibility.Hidden;
                        txtNUMTHREADS_R2_WN3.Visibility = Visibility.Hidden;
                        txtNUMTHREADS_R2_WN4.Visibility = Visibility.Hidden;
                        txtNUMTHREADS_R2_WN5.Visibility = Visibility.Hidden;
                        txtNUMTHREADS_R2_WN6.Visibility = Visibility.Hidden;
                    }
                }
            }
            else
            {
                if (txtNUMTHREADSRow1.IsVisible == true)
                {
                    txtNUMTHREADSRow1.Visibility = Visibility.Collapsed;
                    txtNUMTHREADSRow2.Visibility = Visibility.Collapsed;
                    txtNUMTHREADSSum.Visibility = Visibility.Collapsed;

                    txtNUMTHREADS_R1_WN1.Text = string.Empty;
                    txtNUMTHREADS_R1_WN2.Text = string.Empty;
                    txtNUMTHREADS_R1_WN3.Text = string.Empty;
                    txtNUMTHREADS_R1_WN4.Text = string.Empty;
                    txtNUMTHREADS_R1_WN5.Text = string.Empty;
                    txtNUMTHREADS_R1_WN6.Text = string.Empty;

                    txtNUMTHREADS_R2_WN1.Text = string.Empty;
                    txtNUMTHREADS_R2_WN2.Text = string.Empty;
                    txtNUMTHREADS_R2_WN3.Text = string.Empty;
                    txtNUMTHREADS_R2_WN4.Text = string.Empty;
                    txtNUMTHREADS_R2_WN5.Text = string.Empty;
                    txtNUMTHREADS_R2_WN6.Text = string.Empty;

                    txtNUMTHREADS_WN1.Text = string.Empty;
                    txtNUMTHREADS_WN2.Text = string.Empty;
                    txtNUMTHREADS_WN3.Text = string.Empty;
                    txtNUMTHREADS_WN4.Text = string.Empty;
                    txtNUMTHREADS_WN5.Text = string.Empty;
                    txtNUMTHREADS_WN6.Text = string.Empty;

                    txtNUMTHREADS_R1_WN1.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R1_WN2.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R1_WN3.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R1_WN4.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R1_WN5.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R1_WN6.Visibility = Visibility.Hidden;

                    txtNUMTHREADS_R2_WN1.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R2_WN2.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R2_WN3.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R2_WN4.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R2_WN5.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R2_WN6.Visibility = Visibility.Hidden;

                    txtNUMTHREADS_FN1.Focus();
                    txtNUMTHREADS_FN1.SelectAll();
                }
            }

        }

        private void NUMTHREADSVisibleR2(bool chkVisible)
        {
            if (chkVisible == true)
            {
                if (txtNUMTHREADSRow2.IsVisible == false)
                    txtNUMTHREADSRow2.Visibility = Visibility.Visible;

                if (txtNUMTHREADS_R1_WN1.IsVisible == true)
                {
                    if (txtNUMTHREADS_R1_WN1.Foreground == Brushes.Red)
                    {
                        txtNUMTHREADS_R2_WN1.Visibility = Visibility.Hidden;
                        txtNUMTHREADS_R2_WN1.Text = string.Empty;
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(txtNUMTHREADS_R1_WN1.Text))
                            txtNUMTHREADS_R2_WN1.Visibility = Visibility.Visible;
                        else
                        {
                            txtNUMTHREADS_R2_WN1.Visibility = Visibility.Hidden;
                            txtNUMTHREADS_R2_WN1.Text = string.Empty;
                        }
                    }
                }
                else
                {
                    txtNUMTHREADS_R2_WN1.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R2_WN1.Text = string.Empty;
                }

                if (txtNUMTHREADS_R1_WN2.IsVisible == true)
                {
                    if (txtNUMTHREADS_R1_WN2.Foreground == Brushes.Red)
                    {
                        txtNUMTHREADS_R2_WN2.Visibility = Visibility.Hidden;
                        txtNUMTHREADS_R2_WN2.Text = string.Empty;
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(txtNUMTHREADS_R1_WN2.Text))
                            txtNUMTHREADS_R2_WN2.Visibility = Visibility.Visible;
                        else
                        {
                            txtNUMTHREADS_R2_WN2.Visibility = Visibility.Hidden;
                            txtNUMTHREADS_R2_WN2.Text = string.Empty;
                        }
                    }
                }
                else
                {
                    txtNUMTHREADS_R2_WN2.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R2_WN2.Text = string.Empty;
                }

                if (txtNUMTHREADS_R1_WN3.IsVisible == true)
                {
                    if (txtNUMTHREADS_R1_WN3.Foreground == Brushes.Red)
                    {
                        txtNUMTHREADS_R2_WN3.Visibility = Visibility.Hidden;
                        txtNUMTHREADS_R2_WN3.Text = string.Empty;
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(txtNUMTHREADS_R1_WN3.Text))
                            txtNUMTHREADS_R2_WN3.Visibility = Visibility.Visible;
                        else
                        {
                            txtNUMTHREADS_R2_WN3.Visibility = Visibility.Hidden;
                            txtNUMTHREADS_R2_WN3.Text = string.Empty;
                        }
                    }
                }
                else
                {
                    txtNUMTHREADS_R2_WN3.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R2_WN3.Text = string.Empty;
                }

                if (txtNUMTHREADS_R1_WN4.IsVisible == true)
                {
                    if (txtNUMTHREADS_R1_WN4.Foreground == Brushes.Red)
                    {
                        txtNUMTHREADS_R2_WN4.Visibility = Visibility.Hidden;
                        txtNUMTHREADS_R2_WN4.Text = string.Empty;
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(txtNUMTHREADS_R1_WN4.Text))
                            txtNUMTHREADS_R2_WN4.Visibility = Visibility.Visible;
                        else
                        {
                            txtNUMTHREADS_R2_WN4.Visibility = Visibility.Hidden;
                            txtNUMTHREADS_R2_WN4.Text = string.Empty;
                        }
                    }
                }
                else
                {
                    txtNUMTHREADS_R2_WN4.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R2_WN4.Text = string.Empty;
                }

                if (txtNUMTHREADS_R1_WN5.IsVisible == true)
                {
                    if (txtNUMTHREADS_R1_WN5.Foreground == Brushes.Red)
                    {
                        txtNUMTHREADS_R2_WN5.Visibility = Visibility.Hidden;
                        txtNUMTHREADS_R2_WN5.Text = string.Empty;
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(txtNUMTHREADS_R1_WN5.Text))
                            txtNUMTHREADS_R2_WN5.Visibility = Visibility.Visible;
                        else
                        {
                            txtNUMTHREADS_R2_WN5.Visibility = Visibility.Hidden;
                            txtNUMTHREADS_R2_WN5.Text = string.Empty;
                        }
                    }
                }
                else
                {
                    txtNUMTHREADS_R2_WN5.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R2_WN5.Text = string.Empty;
                }

                if (txtNUMTHREADS_R1_WN6.IsVisible == true)
                {
                    if (txtNUMTHREADS_R1_WN6.Foreground == Brushes.Red)
                    {
                        txtNUMTHREADS_R2_WN6.Visibility = Visibility.Hidden;
                        txtNUMTHREADS_R2_WN6.Text = string.Empty;
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(txtNUMTHREADS_R1_WN5.Text))
                            txtNUMTHREADS_R2_WN6.Visibility = Visibility.Visible;
                        else
                        {
                            txtNUMTHREADS_R2_WN6.Visibility = Visibility.Hidden;
                            txtNUMTHREADS_R2_WN6.Text = string.Empty;
                        }
                    }
                }
                else
                {
                    txtNUMTHREADS_R2_WN6.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R2_WN6.Text = string.Empty;
                }

                if (txtNUMTHREADS_R2_WN1.IsVisible == true || txtNUMTHREADS_R2_WN2.IsVisible == true || txtNUMTHREADS_R2_WN3.IsVisible == true
                || txtNUMTHREADS_R2_WN4.IsVisible == true || txtNUMTHREADS_R2_WN5.IsVisible == true || txtNUMTHREADS_R2_WN6.IsVisible == true)
                {
                    if (txtNUMTHREADSRow2.IsVisible == false)
                        txtNUMTHREADSRow2.Visibility = Visibility.Visible;
                }
                else
                {
                    if (txtNUMTHREADSRow2.IsVisible == true)
                    {
                        txtNUMTHREADSRow2.Visibility = Visibility.Collapsed;

                        txtNUMTHREADS_R2_WN1.Text = string.Empty;
                        txtNUMTHREADS_R2_WN2.Text = string.Empty;
                        txtNUMTHREADS_R2_WN3.Text = string.Empty;
                        txtNUMTHREADS_R2_WN4.Text = string.Empty;
                        txtNUMTHREADS_R2_WN5.Text = string.Empty;
                        txtNUMTHREADS_R2_WN6.Text = string.Empty;


                        txtNUMTHREADS_R2_WN1.Visibility = Visibility.Hidden;
                        txtNUMTHREADS_R2_WN2.Visibility = Visibility.Hidden;
                        txtNUMTHREADS_R2_WN3.Visibility = Visibility.Hidden;
                        txtNUMTHREADS_R2_WN4.Visibility = Visibility.Hidden;
                        txtNUMTHREADS_R2_WN5.Visibility = Visibility.Hidden;
                        txtNUMTHREADS_R2_WN6.Visibility = Visibility.Hidden;

                        txtNUMTHREADS_WN1.Focus();
                        txtNUMTHREADS_WN1.SelectAll();
                    }
                }
            }
            else
            {
                if (txtNUMTHREADSRow2.IsVisible == true)
                {
                    txtNUMTHREADSRow2.Visibility = Visibility.Collapsed;

                    txtNUMTHREADS_R2_WN1.Text = string.Empty;
                    txtNUMTHREADS_R2_WN2.Text = string.Empty;
                    txtNUMTHREADS_R2_WN3.Text = string.Empty;
                    txtNUMTHREADS_R2_WN4.Text = string.Empty;
                    txtNUMTHREADS_R2_WN5.Text = string.Empty;
                    txtNUMTHREADS_R2_WN6.Text = string.Empty;


                    txtNUMTHREADS_R2_WN1.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R2_WN2.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R2_WN3.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R2_WN4.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R2_WN5.Visibility = Visibility.Hidden;
                    txtNUMTHREADS_R2_WN6.Visibility = Visibility.Hidden;
                }
            }
        }

        private void NumthreadsW()
        {
            if (txtNUMTHREADSSum.IsVisible == true)
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (_session.P_NUMTHREADS_W1 != null)
                {
                    ave1 = _session.P_NUMTHREADS_W1;
                    txtNUMTHREADS_WN1.Text = _session.P_NUMTHREADS_W1.ToString();
                }
                else
                    txtNUMTHREADS_WN1.Text = string.Empty;

                if (_session.P_NUMTHREADS_W2 != null)
                {
                    ave2 = _session.P_NUMTHREADS_W2;
                    txtNUMTHREADS_WN2.Text = _session.P_NUMTHREADS_W2.ToString();
                }
                else
                    txtNUMTHREADS_WN2.Text = string.Empty;

                if (_session.P_NUMTHREADS_W3 != null)
                {
                    ave3 = _session.P_NUMTHREADS_W3;
                    txtNUMTHREADS_WN3.Text = _session.P_NUMTHREADS_W3.ToString();
                }
                else
                    txtNUMTHREADS_WN3.Text = string.Empty;

                decimal? Avg = 0;

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtNUMTHREADS_WAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtNUMTHREADS_WAve.Text = "0";
                    else
                        txtNUMTHREADS_WAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtNUMTHREADS_WSpecification.Text))
                {
                    string temp = txtNUMTHREADS_WSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtNUMTHREADS_WN1.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtNUMTHREADS_WN2.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtNUMTHREADS_WN3.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_WN3.Foreground = Brushes.Black;

                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtNUMTHREADS_WN1.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtNUMTHREADS_WN2.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtNUMTHREADS_WN3.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_WN3.Foreground = Brushes.Black;

                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtNUMTHREADS_WN1.Foreground = Brushes.Black;
                                    else
                                        txtNUMTHREADS_WN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtNUMTHREADS_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtNUMTHREADS_WN2.Foreground = Brushes.Black;
                                    else
                                        txtNUMTHREADS_WN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtNUMTHREADS_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtNUMTHREADS_WN3.Foreground = Brushes.Black;
                                    else
                                        txtNUMTHREADS_WN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtNUMTHREADS_WN3.Foreground = Brushes.Black;

                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtNUMTHREADS_WN1.Foreground = Brushes.Black;
                            else
                                txtNUMTHREADS_WN1.Foreground = Brushes.Red;
                        }
                        else
                            txtNUMTHREADS_WN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtNUMTHREADS_WN2.Foreground = Brushes.Black;
                            else
                                txtNUMTHREADS_WN2.Foreground = Brushes.Red;
                        }
                        else
                            txtNUMTHREADS_WN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtNUMTHREADS_WN3.Foreground = Brushes.Black;
                            else
                                txtNUMTHREADS_WN3.Foreground = Brushes.Red;
                        }
                        else
                            txtNUMTHREADS_WN3.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtNUMTHREADS_WN1.Foreground = Brushes.Black;
                    txtNUMTHREADS_WN2.Foreground = Brushes.Black;
                    txtNUMTHREADS_WN3.Foreground = Brushes.Black;
                }
                #endregion
            }
            else
            {
                txtNUMTHREADS_WN1.Text = string.Empty;
                txtNUMTHREADS_WN2.Text = string.Empty;
                txtNUMTHREADS_WN3.Text = string.Empty;

                txtNUMTHREADS_WN1.Foreground = Brushes.Black;
                txtNUMTHREADS_WN2.Foreground = Brushes.Black;
                txtNUMTHREADS_WN3.Foreground = Brushes.Black;
            }
        }

        #region NUMTHREADS_F_LostFocus
        private void NUMTHREADS_F_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtNUMTHREADS_FN1.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_FN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtNUMTHREADS_FN1.Text);
                        _session.P_NUMTHREADS_F1 = ave1;
                    }
                    else
                    {
                        txtNUMTHREADS_FN1.Text = string.Empty;
                        _session.P_NUMTHREADS_F1 = null;
                    }
                }
                else
                {
                    _session.P_NUMTHREADS_F1 = null;
                }

                if (!string.IsNullOrEmpty(txtNUMTHREADS_FN2.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_FN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtNUMTHREADS_FN2.Text);
                        _session.P_NUMTHREADS_F2 = ave2;
                    }
                    else
                    {
                        txtNUMTHREADS_FN2.Text = string.Empty;
                        _session.P_NUMTHREADS_F2 = null;
                    }
                }
                else
                {
                    _session.P_NUMTHREADS_F2 = null;
                }

                if (!string.IsNullOrEmpty(txtNUMTHREADS_FN3.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_FN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtNUMTHREADS_FN3.Text);
                        _session.P_NUMTHREADS_F3 = ave3;
                    }
                    else
                    {
                        txtNUMTHREADS_FN3.Text = string.Empty;
                        _session.P_NUMTHREADS_F3 = null;
                    }
                }
                else
                {
                    _session.P_NUMTHREADS_F3 = null;
                }

                if (!string.IsNullOrEmpty(txtNUMTHREADS_FN4.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_FN4.Text, out value))
                    {
                        //ave4 = decimal.Parse(txtNUMTHREADS_FN4.Text);
                    }
                    else
                    {
                        txtNUMTHREADS_FN4.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtNUMTHREADS_FN5.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_FN5.Text, out value))
                    {
                        //ave5 = decimal.Parse(txtNUMTHREADS_FN5.Text);
                    }
                    else
                    {
                        txtNUMTHREADS_FN5.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtNUMTHREADS_FN6.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_FN6.Text, out value))
                    {
                        //ave6 = decimal.Parse(txtNUMTHREADS_FN6.Text);
                    }
                    else
                    {
                        txtNUMTHREADS_FN6.Text = string.Empty;
                    }
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtNUMTHREADS_FAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtNUMTHREADS_FAve.Text = "0";
                    else
                        txtNUMTHREADS_FAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtNUMTHREADS_FSpecification.Text))
                {
                    string temp = txtNUMTHREADS_FSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtNUMTHREADS_FN1.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_FN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtNUMTHREADS_FN2.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_FN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtNUMTHREADS_FN3.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_FN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtNUMTHREADS_FN4.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_FN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtNUMTHREADS_FN5.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_FN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtNUMTHREADS_FN6.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_FN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_FN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtNUMTHREADS_FN1.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_FN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtNUMTHREADS_FN2.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_FN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtNUMTHREADS_FN3.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_FN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtNUMTHREADS_FN4.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_FN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtNUMTHREADS_FN5.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_FN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtNUMTHREADS_FN6.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_FN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_FN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtNUMTHREADS_FN1.Foreground = Brushes.Black;
                                    else
                                        txtNUMTHREADS_FN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtNUMTHREADS_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtNUMTHREADS_FN2.Foreground = Brushes.Black;
                                    else
                                        txtNUMTHREADS_FN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtNUMTHREADS_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtNUMTHREADS_FN3.Foreground = Brushes.Black;
                                    else
                                        txtNUMTHREADS_FN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtNUMTHREADS_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtNUMTHREADS_FN4.Foreground = Brushes.Black;
                                    else
                                        txtNUMTHREADS_FN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtNUMTHREADS_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtNUMTHREADS_FN5.Foreground = Brushes.Black;
                                    else
                                        txtNUMTHREADS_FN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtNUMTHREADS_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtNUMTHREADS_FN6.Foreground = Brushes.Black;
                                    else
                                        txtNUMTHREADS_FN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtNUMTHREADS_FN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtNUMTHREADS_FN1.Foreground = Brushes.Black;
                            else
                                txtNUMTHREADS_FN1.Foreground = Brushes.Red;
                        }
                        else
                            txtNUMTHREADS_FN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtNUMTHREADS_FN2.Foreground = Brushes.Black;
                            else
                                txtNUMTHREADS_FN2.Foreground = Brushes.Red;
                        }
                        else
                            txtNUMTHREADS_FN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtNUMTHREADS_FN3.Foreground = Brushes.Black;
                            else
                                txtNUMTHREADS_FN3.Foreground = Brushes.Red;
                        }
                        else
                            txtNUMTHREADS_FN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtNUMTHREADS_FN4.Foreground = Brushes.Black;
                            else
                                txtNUMTHREADS_FN4.Foreground = Brushes.Red;
                        }
                        else
                            txtNUMTHREADS_FN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtNUMTHREADS_FN5.Foreground = Brushes.Black;
                            else
                                txtNUMTHREADS_FN5.Foreground = Brushes.Red;
                        }
                        else
                            txtNUMTHREADS_FN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtNUMTHREADS_FN6.Foreground = Brushes.Black;
                            else
                                txtNUMTHREADS_FN6.Foreground = Brushes.Red;
                        }
                        else
                            txtNUMTHREADS_FN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtNUMTHREADS_FN1.Foreground = Brushes.Black;
                    txtNUMTHREADS_FN2.Foreground = Brushes.Black;
                    txtNUMTHREADS_FN3.Foreground = Brushes.Black;
                    txtNUMTHREADS_FN4.Foreground = Brushes.Black;
                    txtNUMTHREADS_FN5.Foreground = Brushes.Black;
                    txtNUMTHREADS_FN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region NUMTHREADS_W_LostFocus
        private void NUMTHREADS_W_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtNUMTHREADS_WN1.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_WN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtNUMTHREADS_WN1.Text);
                        _session.P_NUMTHREADS_W1 = ave1;
                    }
                    else
                    {
                        txtNUMTHREADS_WN1.Text = string.Empty;
                        _session.P_NUMTHREADS_W1 = null;
                    }
                }
                else
                {
                    _session.P_NUMTHREADS_W1 = null;
                }

                if (!string.IsNullOrEmpty(txtNUMTHREADS_WN2.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_WN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtNUMTHREADS_WN2.Text);
                        _session.P_NUMTHREADS_W2 = ave2;
                    }
                    else
                    {
                        txtNUMTHREADS_WN2.Text = string.Empty;
                        _session.P_NUMTHREADS_W2 = null;
                    }
                }
                else
                {
                    _session.P_NUMTHREADS_W2 = null;
                }

                if (!string.IsNullOrEmpty(txtNUMTHREADS_WN3.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_WN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtNUMTHREADS_WN3.Text);
                        _session.P_NUMTHREADS_W3 = ave3;
                    }
                    else
                    {
                        txtNUMTHREADS_WN3.Text = string.Empty;
                        _session.P_NUMTHREADS_W3 = null;
                    }
                }
                else
                {
                    _session.P_NUMTHREADS_W3 = null;
                }

                if (!string.IsNullOrEmpty(txtNUMTHREADS_WN4.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_WN4.Text, out value))
                    {
                        //ave4 = decimal.Parse(txtNUMTHREADS_WN4.Text);
                    }
                    else
                    {
                        txtNUMTHREADS_WN4.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtNUMTHREADS_WN5.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_WN5.Text, out value))
                    {
                        //ave5 = decimal.Parse(txtNUMTHREADS_WN5.Text);
                    }
                    else
                    {
                        txtNUMTHREADS_WN5.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtNUMTHREADS_WN6.Text))
                {
                    if (Decimal.TryParse(txtNUMTHREADS_WN6.Text, out value))
                    {
                        //ave6 = decimal.Parse(txtNUMTHREADS_WN6.Text);
                    }
                    else
                    {
                        txtNUMTHREADS_WN6.Text = string.Empty;
                    }
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtNUMTHREADS_WAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtNUMTHREADS_WAve.Text = "0";
                    else
                        txtNUMTHREADS_WAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtNUMTHREADS_WSpecification.Text))
                {
                    string temp = txtNUMTHREADS_WSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtNUMTHREADS_WN1.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtNUMTHREADS_WN2.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtNUMTHREADS_WN3.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtNUMTHREADS_WN4.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtNUMTHREADS_WN5.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtNUMTHREADS_WN6.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtNUMTHREADS_WN1.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtNUMTHREADS_WN2.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtNUMTHREADS_WN3.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtNUMTHREADS_WN4.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtNUMTHREADS_WN5.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtNUMTHREADS_WN6.Foreground = Brushes.Red;
                                    else
                                        txtNUMTHREADS_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtNUMTHREADS_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtNUMTHREADS_WN1.Foreground = Brushes.Black;
                                    else
                                        txtNUMTHREADS_WN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtNUMTHREADS_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtNUMTHREADS_WN2.Foreground = Brushes.Black;
                                    else
                                        txtNUMTHREADS_WN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtNUMTHREADS_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtNUMTHREADS_WN3.Foreground = Brushes.Black;
                                    else
                                        txtNUMTHREADS_WN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtNUMTHREADS_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtNUMTHREADS_WN4.Foreground = Brushes.Black;
                                    else
                                        txtNUMTHREADS_WN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtNUMTHREADS_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtNUMTHREADS_WN5.Foreground = Brushes.Black;
                                    else
                                        txtNUMTHREADS_WN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtNUMTHREADS_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtNUMTHREADS_WN6.Foreground = Brushes.Black;
                                    else
                                        txtNUMTHREADS_WN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtNUMTHREADS_WN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtNUMTHREADS_WN1.Foreground = Brushes.Black;
                            else
                                txtNUMTHREADS_WN1.Foreground = Brushes.Red;
                        }
                        else
                            txtNUMTHREADS_WN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtNUMTHREADS_WN2.Foreground = Brushes.Black;
                            else
                                txtNUMTHREADS_WN2.Foreground = Brushes.Red;
                        }
                        else
                            txtNUMTHREADS_WN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtNUMTHREADS_WN3.Foreground = Brushes.Black;
                            else
                                txtNUMTHREADS_WN3.Foreground = Brushes.Red;
                        }
                        else
                            txtNUMTHREADS_WN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtNUMTHREADS_WN4.Foreground = Brushes.Black;
                            else
                                txtNUMTHREADS_WN4.Foreground = Brushes.Red;
                        }
                        else
                            txtNUMTHREADS_WN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtNUMTHREADS_WN5.Foreground = Brushes.Black;
                            else
                                txtNUMTHREADS_WN5.Foreground = Brushes.Red;
                        }
                        else
                            txtNUMTHREADS_WN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtNUMTHREADS_WN6.Foreground = Brushes.Black;
                            else
                                txtNUMTHREADS_WN6.Foreground = Brushes.Red;
                        }
                        else
                            txtNUMTHREADS_WN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtNUMTHREADS_WN1.Foreground = Brushes.Black;
                    txtNUMTHREADS_WN2.Foreground = Brushes.Black;
                    txtNUMTHREADS_WN3.Foreground = Brushes.Black;
                    txtNUMTHREADS_WN4.Foreground = Brushes.Black;
                    txtNUMTHREADS_WN5.Foreground = Brushes.Black;
                    txtNUMTHREADS_WN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region TOTALWEIGHT_LostFocus

        #region TOTALWEIGHT1_LostFocus
        private void TOTALWEIGHT1_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                decimal value;

                decimal? ave1 = null;

                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN1.Text))
                {
                    if (Decimal.TryParse(txtTOTALWEIGHTN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtTOTALWEIGHTN1.Text);
                        _session.P_TOTALWEIGHT1 = ave1;
                    }
                    else
                    {
                        txtTOTALWEIGHTN1.Text = string.Empty;
                        _session.P_TOTALWEIGHT1 = null;
                    }
                }
                else
                {
                    _session.P_TOTALWEIGHT1 = null;
                }

                avg_TotalWeight();

                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN1.Text) && !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN1.Text))
                {
                    cal_Coatweight1();
                }
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region TOTALWEIGHT2_LostFocus
        private void TOTALWEIGHT2_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                decimal value;

                decimal? ave2 = null;

                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN2.Text))
                {
                    if (Decimal.TryParse(txtTOTALWEIGHTN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtTOTALWEIGHTN2.Text);
                        _session.P_TOTALWEIGHT2 = ave2;
                    }
                    else
                    {
                        txtTOTALWEIGHTN2.Text = string.Empty;
                        _session.P_TOTALWEIGHT2 = null;
                    }
                }
                else
                {
                    _session.P_TOTALWEIGHT2 = null;
                }

                avg_TotalWeight();

                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN2.Text) && !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN2.Text))
                {
                    cal_Coatweight2();
                }
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region TOTALWEIGHT3_LostFocus
        private void TOTALWEIGHT3_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                decimal value;

                decimal? ave3 = null;

                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN3.Text))
                {
                    if (Decimal.TryParse(txtTOTALWEIGHTN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtTOTALWEIGHTN3.Text);
                        _session.P_TOTALWEIGHT3 = ave3;
                    }
                    else
                    {
                        txtTOTALWEIGHTN3.Text = string.Empty;
                        _session.P_TOTALWEIGHT3 = null;
                    }
                }
                else
                {
                    _session.P_TOTALWEIGHT3 = null;
                }

                avg_TotalWeight();

                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN3.Text) && !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN3.Text))
                {
                    cal_Coatweight3();
                }
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region TOTALWEIGHT4_LostFocus
        private void TOTALWEIGHT4_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                decimal value;

                decimal? ave4 = null;

                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN4.Text))
                {
                    if (Decimal.TryParse(txtTOTALWEIGHTN4.Text, out value))
                    {
                        ave4 = decimal.Parse(txtTOTALWEIGHTN4.Text);
                        _session.P_TOTALWEIGHT4 = ave4;
                    }
                    else
                    {
                        txtTOTALWEIGHTN4.Text = string.Empty;
                        _session.P_TOTALWEIGHT4 = null;
                    }
                }
                else
                {
                    _session.P_TOTALWEIGHT4 = null;
                }

                avg_TotalWeight();

                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN4.Text) && !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN4.Text))
                {
                    cal_Coatweight4();
                }
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region TOTALWEIGHT5_LostFocus
        private void TOTALWEIGHT5_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                decimal value;

                decimal? ave5 = null;

                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN5.Text))
                {
                    if (Decimal.TryParse(txtTOTALWEIGHTN5.Text, out value))
                    {
                        ave5 = decimal.Parse(txtTOTALWEIGHTN5.Text);
                        _session.P_TOTALWEIGHT5 = ave5;
                    }
                    else
                    {
                        txtTOTALWEIGHTN5.Text = string.Empty;
                        _session.P_TOTALWEIGHT5 = null;
                    }
                }
                else
                {
                    _session.P_TOTALWEIGHT5 = null;
                }

                avg_TotalWeight();

                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN5.Text) && !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN5.Text))
                {
                    cal_Coatweight5();
                }
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region TOTALWEIGHT6_LostFocus
        private void TOTALWEIGHT6_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                decimal value;

                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN6.Text))
                {
                    if (Decimal.TryParse(txtTOTALWEIGHTN6.Text, out value))
                    {
                        ave6 = decimal.Parse(txtTOTALWEIGHTN6.Text);
                        _session.P_TOTALWEIGHT6 = ave6;
                    }
                    else
                    {
                        txtTOTALWEIGHTN6.Text = string.Empty;
                        _session.P_TOTALWEIGHT6 = null;
                    }
                }
                else
                {
                    _session.P_TOTALWEIGHT6 = null;
                }

                avg_TotalWeight();

                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN6.Text) && !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN6.Text))
                {
                    cal_Coatweight6();
                }
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region avg_TotalWeight
        private void avg_TotalWeight()
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (_session.P_TOTALWEIGHT1 != null)
                ave1 = _session.P_TOTALWEIGHT1;

                if (_session.P_TOTALWEIGHT2 != null)
                    ave2 = _session.P_TOTALWEIGHT2;

                if (_session.P_TOTALWEIGHT3 != null)
                    ave3 = _session.P_TOTALWEIGHT3;

                if (_session.P_TOTALWEIGHT4 != null)
                    ave4 = _session.P_TOTALWEIGHT4;

                if (_session.P_TOTALWEIGHT5 != null)
                    ave5 = _session.P_TOTALWEIGHT5;

                if (_session.P_TOTALWEIGHT6 != null)
                    ave6 = _session.P_TOTALWEIGHT6;

                decimal? Avg = 0;

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtTOTALWEIGHTAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtTOTALWEIGHTAve.Text = "0";
                    else
                        txtTOTALWEIGHTAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtTOTALWEIGHTSpecification.Text))
                {
                    string temp = txtTOTALWEIGHTSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtTOTALWEIGHTN1.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtTOTALWEIGHTN2.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtTOTALWEIGHTN3.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtTOTALWEIGHTN4.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtTOTALWEIGHTN5.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtTOTALWEIGHTN6.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtTOTALWEIGHTN1.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtTOTALWEIGHTN2.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtTOTALWEIGHTN3.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtTOTALWEIGHTN4.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtTOTALWEIGHTN5.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtTOTALWEIGHTN6.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtTOTALWEIGHTN1.Foreground = Brushes.Black;
                                    else
                                        txtTOTALWEIGHTN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtTOTALWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtTOTALWEIGHTN2.Foreground = Brushes.Black;
                                    else
                                        txtTOTALWEIGHTN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtTOTALWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtTOTALWEIGHTN3.Foreground = Brushes.Black;
                                    else
                                        txtTOTALWEIGHTN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtTOTALWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtTOTALWEIGHTN4.Foreground = Brushes.Black;
                                    else
                                        txtTOTALWEIGHTN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtTOTALWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtTOTALWEIGHTN5.Foreground = Brushes.Black;
                                    else
                                        txtTOTALWEIGHTN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtTOTALWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtTOTALWEIGHTN6.Foreground = Brushes.Black;
                                    else
                                        txtTOTALWEIGHTN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtTOTALWEIGHTN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtTOTALWEIGHTN1.Foreground = Brushes.Black;
                            else
                                txtTOTALWEIGHTN1.Foreground = Brushes.Red;
                        }
                        else
                            txtTOTALWEIGHTN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtTOTALWEIGHTN2.Foreground = Brushes.Black;
                            else
                                txtTOTALWEIGHTN2.Foreground = Brushes.Red;
                        }
                        else
                            txtTOTALWEIGHTN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtTOTALWEIGHTN3.Foreground = Brushes.Black;
                            else
                                txtTOTALWEIGHTN3.Foreground = Brushes.Red;
                        }
                        else
                            txtTOTALWEIGHTN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtTOTALWEIGHTN4.Foreground = Brushes.Black;
                            else
                                txtTOTALWEIGHTN4.Foreground = Brushes.Red;
                        }
                        else
                            txtTOTALWEIGHTN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtTOTALWEIGHTN5.Foreground = Brushes.Black;
                            else
                                txtTOTALWEIGHTN5.Foreground = Brushes.Red;
                        }
                        else
                            txtTOTALWEIGHTN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtTOTALWEIGHTN6.Foreground = Brushes.Black;
                            else
                                txtTOTALWEIGHTN6.Foreground = Brushes.Red;
                        }
                        else
                            txtTOTALWEIGHTN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtTOTALWEIGHTN1.Foreground = Brushes.Black;
                    txtTOTALWEIGHTN2.Foreground = Brushes.Black;
                    txtTOTALWEIGHTN3.Foreground = Brushes.Black;
                    txtTOTALWEIGHTN4.Foreground = Brushes.Black;
                    txtTOTALWEIGHTN5.Foreground = Brushes.Black;
                    txtTOTALWEIGHTN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region TOTALWEIGHT_LostFocus
        //private void TOTALWEIGHT_LostFocus(object sender, RoutedEventArgs e)
        //{
        //    try
        //    {
        //        int? i = 0;
        //        decimal value;

        //        decimal? ave1 = null;
        //        decimal? ave2 = null;
        //        decimal? ave3 = null;
        //        decimal? ave4 = null;
        //        decimal? ave5 = null;
        //        decimal? ave6 = null;

        //        if (!string.IsNullOrEmpty(txtTOTALWEIGHTN1.Text))
        //        {
        //            if (Decimal.TryParse(txtTOTALWEIGHTN1.Text, out value))
        //            {
        //                ave1 = decimal.Parse(txtTOTALWEIGHTN1.Text);
        //                _session.P_TOTALWEIGHT1 = ave1;
        //            }
        //            else
        //            {
        //                txtTOTALWEIGHTN1.Text = string.Empty;
        //                _session.P_TOTALWEIGHT1 = null;
        //            }
        //        }
        //        else
        //        {
        //            _session.P_TOTALWEIGHT1 = null;
        //        }

        //        if (!string.IsNullOrEmpty(txtTOTALWEIGHTN2.Text))
        //        {
        //            if (Decimal.TryParse(txtTOTALWEIGHTN2.Text, out value))
        //            {
        //                ave2 = decimal.Parse(txtTOTALWEIGHTN2.Text);
        //                _session.P_TOTALWEIGHT2 = ave2;
        //            }
        //            else
        //            {
        //                txtTOTALWEIGHTN2.Text = string.Empty;
        //                _session.P_TOTALWEIGHT2 = null;
        //            }
        //        }
        //        else
        //        {
        //            _session.P_TOTALWEIGHT2 = null;
        //        }

        //        if (!string.IsNullOrEmpty(txtTOTALWEIGHTN3.Text))
        //        {
        //            if (Decimal.TryParse(txtTOTALWEIGHTN3.Text, out value))
        //            {
        //                ave3 = decimal.Parse(txtTOTALWEIGHTN3.Text);
        //                _session.P_TOTALWEIGHT3 = ave3;
        //            }
        //            else
        //            {
        //                txtTOTALWEIGHTN3.Text = string.Empty;
        //                _session.P_TOTALWEIGHT3 = null;
        //            }
        //        }
        //        else
        //        {
        //            _session.P_TOTALWEIGHT3 = null;
        //        }

        //        if (!string.IsNullOrEmpty(txtTOTALWEIGHTN4.Text))
        //        {
        //            if (Decimal.TryParse(txtTOTALWEIGHTN4.Text, out value))
        //            {
        //                ave4 = decimal.Parse(txtTOTALWEIGHTN4.Text);
        //                _session.P_TOTALWEIGHT4 = ave4;
        //            }
        //            else
        //            {
        //                txtTOTALWEIGHTN4.Text = string.Empty;
        //                _session.P_TOTALWEIGHT4 = null;
        //            }
        //        }
        //        else
        //        {
        //            _session.P_TOTALWEIGHT4 = null;
        //        }

        //        if (!string.IsNullOrEmpty(txtTOTALWEIGHTN5.Text))
        //        {
        //            if (Decimal.TryParse(txtTOTALWEIGHTN5.Text, out value))
        //            {
        //                ave5 = decimal.Parse(txtTOTALWEIGHTN5.Text);
        //                _session.P_TOTALWEIGHT5 = ave5;
        //            }
        //            else
        //            {
        //                txtTOTALWEIGHTN5.Text = string.Empty;
        //                _session.P_TOTALWEIGHT5 = null;
        //            }
        //        }
        //        else
        //        {
        //            _session.P_TOTALWEIGHT5 = null;
        //        }

        //        if (!string.IsNullOrEmpty(txtTOTALWEIGHTN6.Text))
        //        {
        //            if (Decimal.TryParse(txtTOTALWEIGHTN6.Text, out value))
        //            {
        //                ave6 = decimal.Parse(txtTOTALWEIGHTN6.Text);
        //                _session.P_TOTALWEIGHT6 = ave6;
        //            }
        //            else
        //            {
        //                txtTOTALWEIGHTN6.Text = string.Empty;
        //                _session.P_TOTALWEIGHT6 = null;
        //            }
        //        }
        //        else
        //        {
        //            _session.P_TOTALWEIGHT6 = null;
        //        }

        //        decimal? Avg = 0;

        //        #region Old

        //        //if (ave1 != null && ave1 != 0)
        //        //    i++;
        //        //else
        //        //    ave1 = 0;

        //        //if (ave2 != null && ave2 != 0)
        //        //    i++;
        //        //else
        //        //    ave2 = 0;

        //        //if (ave3 != null && ave3 != 0)
        //        //    i++;
        //        //else
        //        //    ave3 = 0;

        //        //if (ave4 != null && ave4 != 0)
        //        //    i++;
        //        //else
        //        //    ave4 = 0;

        //        //if (ave5 != null && ave5 != 0)
        //        //    i++;
        //        //else
        //        //    ave5 = 0;

        //        //if (ave6 != null && ave6 != 0)
        //        //    i++;
        //        //else
        //        //    ave6 = 0;

        //        #endregion

        //        #region New

        //        if (ave1 == null)
        //            ave1 = 0;
        //        else
        //            i++;

        //        if (ave2 == null)
        //            ave2 = 0;
        //        else
        //            i++;

        //        if (ave3 == null)
        //            ave3 = 0;
        //        else
        //            i++;

        //        if (ave4 == null)
        //            ave4 = 0;
        //        else
        //            i++;

        //        if (ave5 == null)
        //            ave5 = 0;
        //        else
        //            i++;

        //        if (ave6 == null)
        //            ave6 = 0;
        //        else
        //            i++;

        //        #endregion

        //        if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
        //        {
        //            Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

        //            txtTOTALWEIGHTAve.Text = Avg.Value.ToString("#,##0.##");

        //            if (!string.IsNullOrEmpty(txtTOTALWEIGHTN1.Text) && !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN1.Text))
        //            {
        //                cal_Coatweight1();
        //            }
        //            else if (!string.IsNullOrEmpty(txtTOTALWEIGHTN2.Text) && !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN2.Text))
        //            {

        //            }

        //        }
        //        else
        //        {
        //            if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
        //                txtTOTALWEIGHTAve.Text = "0";
        //            else
        //                txtTOTALWEIGHTAve.Text = "";
        //        }

        //        #region Foreground
        //        if (!string.IsNullOrEmpty(txtTOTALWEIGHTSpecification.Text))
        //        {
        //            string temp = txtTOTALWEIGHTSpecification.Text;

        //            decimal? num = null;
        //            decimal? num2 = null;
        //            decimal? num3 = null;

        //            decimal? lower = null;
        //            decimal? upper = null;

        //            String strString = temp.Substring(0, temp.Length).Trim();
        //            strString = strString.Replace(" ", "&").TrimEnd();
        //            String[] myArr = strString.Split('&');

        //            if (myArr.Length > 1)
        //            {
        //                if (myArr[1] != null)
        //                {
        //                    if (temp.Contains("MAX"))
        //                    {
        //                        if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
        //                            num = decimal.Parse(myArr[1].ToString().Trim());

        //                        if (ave1 != null && ave1 != 0)
        //                        {
        //                            if (num < ave1)
        //                                txtTOTALWEIGHTN1.Foreground = Brushes.Red;
        //                            else
        //                                txtTOTALWEIGHTN1.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtTOTALWEIGHTN1.Foreground = Brushes.Black;

        //                        if (ave2 != null && ave2 != 0)
        //                        {
        //                            if (num < ave2)
        //                                txtTOTALWEIGHTN2.Foreground = Brushes.Red;
        //                            else
        //                                txtTOTALWEIGHTN2.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtTOTALWEIGHTN2.Foreground = Brushes.Black;

        //                        if (ave3 != null && ave3 != 0)
        //                        {
        //                            if (num < ave3)
        //                                txtTOTALWEIGHTN3.Foreground = Brushes.Red;
        //                            else
        //                                txtTOTALWEIGHTN3.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtTOTALWEIGHTN3.Foreground = Brushes.Black;

        //                        if (ave4 != null && ave4 != 0)
        //                        {
        //                            if (num < ave4)
        //                                txtTOTALWEIGHTN4.Foreground = Brushes.Red;
        //                            else
        //                                txtTOTALWEIGHTN4.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtTOTALWEIGHTN4.Foreground = Brushes.Black;

        //                        if (ave5 != null && ave5 != 0)
        //                        {
        //                            if (num < ave5)
        //                                txtTOTALWEIGHTN5.Foreground = Brushes.Red;
        //                            else
        //                                txtTOTALWEIGHTN5.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtTOTALWEIGHTN5.Foreground = Brushes.Black;

        //                        if (ave6 != null && ave6 != 0)
        //                        {
        //                            if (num < ave6)
        //                                txtTOTALWEIGHTN6.Foreground = Brushes.Red;
        //                            else
        //                                txtTOTALWEIGHTN6.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtTOTALWEIGHTN6.Foreground = Brushes.Black;
        //                    }
        //                    else if (temp.Contains("MIN"))
        //                    {
        //                        if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
        //                            num = decimal.Parse(myArr[1].ToString().Trim());

        //                        if (ave1 != null && ave1 != 0)
        //                        {
        //                            if (num > ave1)
        //                                txtTOTALWEIGHTN1.Foreground = Brushes.Red;
        //                            else
        //                                txtTOTALWEIGHTN1.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtTOTALWEIGHTN1.Foreground = Brushes.Black;

        //                        if (ave2 != null && ave2 != 0)
        //                        {
        //                            if (num > ave2)
        //                                txtTOTALWEIGHTN2.Foreground = Brushes.Red;
        //                            else
        //                                txtTOTALWEIGHTN2.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtTOTALWEIGHTN2.Foreground = Brushes.Black;

        //                        if (ave3 != null && ave3 != 0)
        //                        {
        //                            if (num > ave3)
        //                                txtTOTALWEIGHTN3.Foreground = Brushes.Red;
        //                            else
        //                                txtTOTALWEIGHTN3.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtTOTALWEIGHTN3.Foreground = Brushes.Black;

        //                        if (ave4 != null && ave4 != 0)
        //                        {
        //                            if (num > ave4)
        //                                txtTOTALWEIGHTN4.Foreground = Brushes.Red;
        //                            else
        //                                txtTOTALWEIGHTN4.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtTOTALWEIGHTN4.Foreground = Brushes.Black;

        //                        if (ave5 != null && ave5 != 0)
        //                        {
        //                            if (num > ave5)
        //                                txtTOTALWEIGHTN5.Foreground = Brushes.Red;
        //                            else
        //                                txtTOTALWEIGHTN5.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtTOTALWEIGHTN5.Foreground = Brushes.Black;

        //                        if (ave6 != null && ave6 != 0)
        //                        {
        //                            if (num > ave6)
        //                                txtTOTALWEIGHTN6.Foreground = Brushes.Red;
        //                            else
        //                                txtTOTALWEIGHTN6.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtTOTALWEIGHTN6.Foreground = Brushes.Black;
        //                    }
        //                    else if (temp.Contains("+/-"))
        //                    {
        //                        if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
        //                            num = decimal.Parse(myArr[0].ToString().Trim());

        //                        if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
        //                            num2 = decimal.Parse(myArr[2].ToString().Trim());

        //                        lower = num - num2;
        //                        upper = num + num2;

        //                        if (ave1 != null && ave1 != 0)
        //                        {
        //                            if (lower <= ave1 && ave1 <= upper)
        //                                txtTOTALWEIGHTN1.Foreground = Brushes.Black;
        //                            else
        //                                txtTOTALWEIGHTN1.Foreground = Brushes.Red;
        //                        }
        //                        else
        //                            txtTOTALWEIGHTN1.Foreground = Brushes.Black;

        //                        if (ave2 != null && ave2 != 0)
        //                        {
        //                            if (lower <= ave2 && ave2 <= upper)
        //                                txtTOTALWEIGHTN2.Foreground = Brushes.Black;
        //                            else
        //                                txtTOTALWEIGHTN2.Foreground = Brushes.Red;
        //                        }
        //                        else
        //                            txtTOTALWEIGHTN2.Foreground = Brushes.Black;

        //                        if (ave3 != null && ave3 != 0)
        //                        {
        //                            if (lower <= ave3 && ave3 <= upper)
        //                                txtTOTALWEIGHTN3.Foreground = Brushes.Black;
        //                            else
        //                                txtTOTALWEIGHTN3.Foreground = Brushes.Red;
        //                        }
        //                        else
        //                            txtTOTALWEIGHTN3.Foreground = Brushes.Black;

        //                        if (ave4 != null && ave4 != 0)
        //                        {
        //                            if (lower <= ave4 && ave4 <= upper)
        //                                txtTOTALWEIGHTN4.Foreground = Brushes.Black;
        //                            else
        //                                txtTOTALWEIGHTN4.Foreground = Brushes.Red;
        //                        }
        //                        else
        //                            txtTOTALWEIGHTN4.Foreground = Brushes.Black;

        //                        if (ave5 != null && ave5 != 0)
        //                        {
        //                            if (lower <= ave5 && ave5 <= upper)
        //                                txtTOTALWEIGHTN5.Foreground = Brushes.Black;
        //                            else
        //                                txtTOTALWEIGHTN5.Foreground = Brushes.Red;
        //                        }
        //                        else
        //                            txtTOTALWEIGHTN5.Foreground = Brushes.Black;

        //                        if (ave6 != null && ave6 != 0)
        //                        {
        //                            if (lower <= ave6 && ave6 <= upper)
        //                                txtTOTALWEIGHTN6.Foreground = Brushes.Black;
        //                            else
        //                                txtTOTALWEIGHTN6.Foreground = Brushes.Red;
        //                        }
        //                        else
        //                            txtTOTALWEIGHTN6.Foreground = Brushes.Black;
        //                    }
        //                }
        //            }
        //            else
        //            {
        //                if (myArr.Length == 1)
        //                {
        //                    if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
        //                        num3 = decimal.Parse(myArr[0].ToString().Trim());
        //                }

        //                if (ave1 != null && ave1 != 0)
        //                {
        //                    if (ave1 == num3)
        //                        txtTOTALWEIGHTN1.Foreground = Brushes.Black;
        //                    else
        //                        txtTOTALWEIGHTN1.Foreground = Brushes.Red;
        //                }
        //                else
        //                    txtTOTALWEIGHTN1.Foreground = Brushes.Black;

        //                if (ave2 != null && ave2 != 0)
        //                {
        //                    if (ave2 == num3)
        //                        txtTOTALWEIGHTN2.Foreground = Brushes.Black;
        //                    else
        //                        txtTOTALWEIGHTN2.Foreground = Brushes.Red;
        //                }
        //                else
        //                    txtTOTALWEIGHTN2.Foreground = Brushes.Black;

        //                if (ave3 != null && ave3 != 0)
        //                {
        //                    if (ave3 == num3)
        //                        txtTOTALWEIGHTN3.Foreground = Brushes.Black;
        //                    else
        //                        txtTOTALWEIGHTN3.Foreground = Brushes.Red;
        //                }
        //                else
        //                    txtTOTALWEIGHTN3.Foreground = Brushes.Black;

        //                if (ave4 != null && ave4 != 0)
        //                {
        //                    if (ave4 == num3)
        //                        txtTOTALWEIGHTN4.Foreground = Brushes.Black;
        //                    else
        //                        txtTOTALWEIGHTN4.Foreground = Brushes.Red;
        //                }
        //                else
        //                    txtTOTALWEIGHTN4.Foreground = Brushes.Black;

        //                if (ave5 != null && ave5 != 0)
        //                {
        //                    if (ave5 == num3)
        //                        txtTOTALWEIGHTN5.Foreground = Brushes.Black;
        //                    else
        //                        txtTOTALWEIGHTN5.Foreground = Brushes.Red;
        //                }
        //                else
        //                    txtTOTALWEIGHTN5.Foreground = Brushes.Black;

        //                if (ave6 != null && ave6 != 0)
        //                {
        //                    if (ave6 == num3)
        //                        txtTOTALWEIGHTN6.Foreground = Brushes.Black;
        //                    else
        //                        txtTOTALWEIGHTN6.Foreground = Brushes.Red;
        //                }
        //                else
        //                    txtTOTALWEIGHTN6.Foreground = Brushes.Black;

        //            }
        //        }
        //        else
        //        {
        //            txtTOTALWEIGHTN1.Foreground = Brushes.Black;
        //            txtTOTALWEIGHTN2.Foreground = Brushes.Black;
        //            txtTOTALWEIGHTN3.Foreground = Brushes.Black;
        //            txtTOTALWEIGHTN4.Foreground = Brushes.Black;
        //            txtTOTALWEIGHTN5.Foreground = Brushes.Black;
        //            txtTOTALWEIGHTN6.Foreground = Brushes.Black;
        //        }
        //        #endregion

        //    }
        //    catch (Exception ex)
        //    {
        //        ex.Message.ToString().ShowMessageBox(true);
        //    }
        //}
        #endregion

        #endregion

        #region UNCOATEDWEIGHT_LostFocus

        #region UNCOATEDWEIGHT1_LostFocus
        private void UNCOATEDWEIGHT1_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                decimal value;

                decimal? ave1 = null;

                if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN1.Text))
                {
                    if (Decimal.TryParse(txtUNCOATEDWEIGHTN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtUNCOATEDWEIGHTN1.Text);
                        _session.P_UNCOATEDWEIGHT1 = ave1;
                    }
                    else
                    {
                        txtUNCOATEDWEIGHTN1.Text = string.Empty;
                        _session.P_UNCOATEDWEIGHT1 = null;
                    }
                }
                else
                {
                    _session.P_UNCOATEDWEIGHT1 = null;
                }

                avg_UncoatedWeight();

                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN1.Text) && !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN1.Text))
                {
                    cal_Coatweight1();
                }
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region UNCOATEDWEIGHT2_LostFocus
        private void UNCOATEDWEIGHT2_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                decimal value;

                decimal? ave2 = null;

                if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN2.Text))
                {
                    if (Decimal.TryParse(txtUNCOATEDWEIGHTN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtUNCOATEDWEIGHTN2.Text);
                        _session.P_UNCOATEDWEIGHT2 = ave2;
                    }
                    else
                    {
                        txtUNCOATEDWEIGHTN2.Text = string.Empty;
                        _session.P_UNCOATEDWEIGHT2 = null;
                    }
                }
                else
                {
                    _session.P_UNCOATEDWEIGHT2 = null;
                }

                avg_UncoatedWeight();

                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN2.Text) && !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN2.Text))
                {
                    cal_Coatweight2();
                }
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region UNCOATEDWEIGHT3_LostFocus
        private void UNCOATEDWEIGHT3_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                decimal value;

                decimal? ave3 = null;

                if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN3.Text))
                {
                    if (Decimal.TryParse(txtUNCOATEDWEIGHTN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtUNCOATEDWEIGHTN3.Text);
                        _session.P_UNCOATEDWEIGHT3 = ave3;
                    }
                    else
                    {
                        txtUNCOATEDWEIGHTN3.Text = string.Empty;
                        _session.P_UNCOATEDWEIGHT3 = null;
                    }
                }
                else
                {
                    _session.P_UNCOATEDWEIGHT3 = null;
                }

                avg_UncoatedWeight();

                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN3.Text) && !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN3.Text))
                {
                    cal_Coatweight3();
                }
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region UNCOATEDWEIGHT4_LostFocus
        private void UNCOATEDWEIGHT4_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                decimal value;

                decimal? ave4 = null;

                if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN4.Text))
                {
                    if (Decimal.TryParse(txtUNCOATEDWEIGHTN4.Text, out value))
                    {
                        ave4 = decimal.Parse(txtUNCOATEDWEIGHTN4.Text);
                        _session.P_UNCOATEDWEIGHT4 = ave4;
                    }
                    else
                    {
                        txtUNCOATEDWEIGHTN4.Text = string.Empty;
                        _session.P_UNCOATEDWEIGHT4 = null;
                    }
                }
                else
                {
                    _session.P_UNCOATEDWEIGHT4 = null;
                }

                avg_UncoatedWeight();

                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN4.Text) && !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN4.Text))
                {
                    cal_Coatweight4();
                }
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region UNCOATEDWEIGHT5_LostFocus
        private void UNCOATEDWEIGHT5_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                decimal value;

                decimal? ave5 = null;

                if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN5.Text))
                {
                    if (Decimal.TryParse(txtUNCOATEDWEIGHTN5.Text, out value))
                    {
                        ave5 = decimal.Parse(txtUNCOATEDWEIGHTN5.Text);
                        _session.P_UNCOATEDWEIGHT5 = ave5;
                    }
                    else
                    {
                        txtUNCOATEDWEIGHTN5.Text = string.Empty;
                        _session.P_UNCOATEDWEIGHT5 = null;
                    }
                }
                else
                {
                    _session.P_UNCOATEDWEIGHT5 = null;
                }

                avg_UncoatedWeight();

                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN5.Text) && !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN5.Text))
                {
                    cal_Coatweight5();
                }
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region UNCOATEDWEIGHT6_LostFocus
        private void UNCOATEDWEIGHT6_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                decimal value;

                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN6.Text))
                {
                    if (Decimal.TryParse(txtUNCOATEDWEIGHTN6.Text, out value))
                    {
                        ave6 = decimal.Parse(txtUNCOATEDWEIGHTN6.Text);
                        _session.P_UNCOATEDWEIGHT6 = ave6;
                    }
                    else
                    {
                        txtUNCOATEDWEIGHTN6.Text = string.Empty;
                        _session.P_UNCOATEDWEIGHT6 = null;
                    }
                }
                else
                {
                    _session.P_UNCOATEDWEIGHT6 = null;
                }

                avg_UncoatedWeight();

                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN6.Text) && !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN6.Text))
                {
                    cal_Coatweight6();
                }
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region avg_UncoatedWeight
        private void avg_UncoatedWeight()
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (_session.P_UNCOATEDWEIGHT1 != null)
                    ave1 = _session.P_UNCOATEDWEIGHT1;

                if (_session.P_UNCOATEDWEIGHT2 != null)
                    ave2 = _session.P_UNCOATEDWEIGHT2;

                if (_session.P_UNCOATEDWEIGHT3 != null)
                    ave3 = _session.P_UNCOATEDWEIGHT3;

                if (_session.P_UNCOATEDWEIGHT4 != null)
                    ave4 = _session.P_UNCOATEDWEIGHT4;

                if (_session.P_UNCOATEDWEIGHT5 != null)
                    ave5 = _session.P_UNCOATEDWEIGHT5;

                if (_session.P_UNCOATEDWEIGHT6 != null)
                    ave6 = _session.P_UNCOATEDWEIGHT6;

                decimal? Avg = 0;

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtUNCOATEDWEIGHTAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtUNCOATEDWEIGHTAve.Text = "0";
                    else
                        txtUNCOATEDWEIGHTAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTSpecification.Text))
                {
                    string temp = txtUNCOATEDWEIGHTSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtUNCOATEDWEIGHTN1.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtUNCOATEDWEIGHTN2.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtUNCOATEDWEIGHTN3.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtUNCOATEDWEIGHTN4.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtUNCOATEDWEIGHTN5.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtUNCOATEDWEIGHTN6.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtUNCOATEDWEIGHTN1.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtUNCOATEDWEIGHTN2.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtUNCOATEDWEIGHTN3.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtUNCOATEDWEIGHTN4.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtUNCOATEDWEIGHTN5.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtUNCOATEDWEIGHTN6.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;
                                    else
                                        txtUNCOATEDWEIGHTN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;
                                    else
                                        txtUNCOATEDWEIGHTN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;
                                    else
                                        txtUNCOATEDWEIGHTN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;
                                    else
                                        txtUNCOATEDWEIGHTN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;
                                    else
                                        txtUNCOATEDWEIGHTN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
                                    else
                                        txtUNCOATEDWEIGHTN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;
                            else
                                txtUNCOATEDWEIGHTN1.Foreground = Brushes.Red;
                        }
                        else
                            txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;
                            else
                                txtUNCOATEDWEIGHTN2.Foreground = Brushes.Red;
                        }
                        else
                            txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;
                            else
                                txtUNCOATEDWEIGHTN3.Foreground = Brushes.Red;
                        }
                        else
                            txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;
                            else
                                txtUNCOATEDWEIGHTN4.Foreground = Brushes.Red;
                        }
                        else
                            txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;
                            else
                                txtUNCOATEDWEIGHTN5.Foreground = Brushes.Red;
                        }
                        else
                            txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
                            else
                                txtUNCOATEDWEIGHTN6.Foreground = Brushes.Red;
                        }
                        else
                            txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;
                    txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;
                    txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;
                    txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;
                    txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;
                    txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region UNCOATEDWEIGHT_LostFocus
        //private void UNCOATEDWEIGHT_LostFocus(object sender, RoutedEventArgs e)
        //{
        //    try
        //    {
        //        int? i = 0;
        //        decimal value;

        //        decimal? ave1 = null;
        //        decimal? ave2 = null;
        //        decimal? ave3 = null;
        //        decimal? ave4 = null;
        //        decimal? ave5 = null;
        //        decimal? ave6 = null;

        //        if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN1.Text))
        //        {
        //            if (Decimal.TryParse(txtUNCOATEDWEIGHTN1.Text, out value))
        //            {
        //                ave1 = decimal.Parse(txtUNCOATEDWEIGHTN1.Text);
        //                _session.P_UNCOATEDWEIGHT1 = ave1;
        //            }
        //            else
        //            {
        //                txtUNCOATEDWEIGHTN1.Text = string.Empty;
        //                _session.P_UNCOATEDWEIGHT1 = null;
        //            }
        //        }
        //        else
        //        {
        //            _session.P_UNCOATEDWEIGHT1 = null;
        //        }

        //        if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN2.Text))
        //        {
        //            if (Decimal.TryParse(txtUNCOATEDWEIGHTN2.Text, out value))
        //            {
        //                ave2 = decimal.Parse(txtUNCOATEDWEIGHTN2.Text);
        //                _session.P_UNCOATEDWEIGHT2 = ave2;
        //            }
        //            else
        //            {
        //                txtUNCOATEDWEIGHTN2.Text = string.Empty;
        //                _session.P_UNCOATEDWEIGHT2 = null;
        //            }
        //        }
        //        else
        //        {
        //            _session.P_UNCOATEDWEIGHT2 = null;
        //        }

        //        if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN3.Text))
        //        {
        //            if (Decimal.TryParse(txtUNCOATEDWEIGHTN3.Text, out value))
        //            {
        //                ave3 = decimal.Parse(txtUNCOATEDWEIGHTN3.Text);
        //                _session.P_UNCOATEDWEIGHT3 = ave3;
        //            }
        //            else
        //            {
        //                txtUNCOATEDWEIGHTN3.Text = string.Empty;
        //                _session.P_UNCOATEDWEIGHT3 = null;
        //            }
        //        }
        //        else
        //        {
        //            _session.P_UNCOATEDWEIGHT3 = null;
        //        }

        //        if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN4.Text))
        //        {
        //            if (Decimal.TryParse(txtUNCOATEDWEIGHTN4.Text, out value))
        //            {
        //                ave4 = decimal.Parse(txtUNCOATEDWEIGHTN4.Text);
        //                _session.P_UNCOATEDWEIGHT4 = ave4;
        //            }
        //            else
        //            {
        //                txtUNCOATEDWEIGHTN4.Text = string.Empty;
        //                _session.P_UNCOATEDWEIGHT4 = null;
        //            }
        //        }
        //        else
        //        {
        //            _session.P_UNCOATEDWEIGHT4 = null;
        //        }

        //        if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN5.Text))
        //        {
        //            if (Decimal.TryParse(txtUNCOATEDWEIGHTN5.Text, out value))
        //            {
        //                ave5 = decimal.Parse(txtUNCOATEDWEIGHTN5.Text);
        //                _session.P_UNCOATEDWEIGHT5 = ave5;
        //            }
        //            else
        //            {
        //                txtUNCOATEDWEIGHTN5.Text = string.Empty;
        //                _session.P_UNCOATEDWEIGHT5 = null;
        //            }
        //        }
        //        else
        //        {
        //            _session.P_UNCOATEDWEIGHT5 = null;
        //        }

        //        if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN6.Text))
        //        {
        //            if (Decimal.TryParse(txtUNCOATEDWEIGHTN6.Text, out value))
        //            {
        //                ave6 = decimal.Parse(txtUNCOATEDWEIGHTN6.Text);
        //                _session.P_UNCOATEDWEIGHT6 = ave6;
        //            }
        //            else
        //            {
        //                txtUNCOATEDWEIGHTN6.Text = string.Empty;
        //                _session.P_UNCOATEDWEIGHT6 = null;
        //            }
        //        }
        //        else
        //        {
        //            _session.P_UNCOATEDWEIGHT6 = null;
        //        }

        //        decimal? Avg = 0;

        //        #region Old
                
        //        //if (ave1 != null && ave1 != 0)
        //        //    i++;
        //        //else
        //        //    ave1 = 0;

        //        //if (ave2 != null && ave2 != 0)
        //        //    i++;
        //        //else
        //        //    ave2 = 0;

        //        //if (ave3 != null && ave3 != 0)
        //        //    i++;
        //        //else
        //        //    ave3 = 0;

        //        //if (ave4 != null && ave4 != 0)
        //        //    i++;
        //        //else
        //        //    ave4 = 0;

        //        //if (ave5 != null && ave5 != 0)
        //        //    i++;
        //        //else
        //        //    ave5 = 0;

        //        //if (ave6 != null && ave6 != 0)
        //        //    i++;
        //        //else
        //        //    ave6 = 0;

        //        #endregion

        //        #region New

        //        if (ave1 == null)
        //            ave1 = 0;
        //        else
        //            i++;

        //        if (ave2 == null)
        //            ave2 = 0;
        //        else
        //            i++;

        //        if (ave3 == null)
        //            ave3 = 0;
        //        else
        //            i++;

        //        if (ave4 == null)
        //            ave4 = 0;
        //        else
        //            i++;

        //        if (ave5 == null)
        //            ave5 = 0;
        //        else
        //            i++;

        //        if (ave6 == null)
        //            ave6 = 0;
        //        else
        //            i++;

        //        #endregion

        //        if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
        //        {
        //            Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

        //            txtUNCOATEDWEIGHTAve.Text = Avg.Value.ToString("#,##0.##");
        //        }
        //        else
        //        {
        //            if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
        //                txtUNCOATEDWEIGHTAve.Text = "0";
        //            else
        //                txtUNCOATEDWEIGHTAve.Text = "";
        //        }

        //        #region Foreground
        //        if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTSpecification.Text))
        //        {
        //            string temp = txtUNCOATEDWEIGHTSpecification.Text;

        //            decimal? num = null;
        //            decimal? num2 = null;
        //            decimal? num3 = null;

        //            decimal? lower = null;
        //            decimal? upper = null;

        //            String strString = temp.Substring(0, temp.Length).Trim();
        //            strString = strString.Replace(" ", "&").TrimEnd();
        //            String[] myArr = strString.Split('&');

        //            if (myArr.Length > 1)
        //            {
        //                if (myArr[1] != null)
        //                {
        //                    if (temp.Contains("MAX"))
        //                    {
        //                        if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
        //                            num = decimal.Parse(myArr[1].ToString().Trim());

        //                        if (ave1 != null && ave1 != 0)
        //                        {
        //                            if (num < ave1)
        //                                txtUNCOATEDWEIGHTN1.Foreground = Brushes.Red;
        //                            else
        //                                txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;

        //                        if (ave2 != null && ave2 != 0)
        //                        {
        //                            if (num < ave2)
        //                                txtUNCOATEDWEIGHTN2.Foreground = Brushes.Red;
        //                            else
        //                                txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;

        //                        if (ave3 != null && ave3 != 0)
        //                        {
        //                            if (num < ave3)
        //                                txtUNCOATEDWEIGHTN3.Foreground = Brushes.Red;
        //                            else
        //                                txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;

        //                        if (ave4 != null && ave4 != 0)
        //                        {
        //                            if (num < ave4)
        //                                txtUNCOATEDWEIGHTN4.Foreground = Brushes.Red;
        //                            else
        //                                txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;

        //                        if (ave5 != null && ave5 != 0)
        //                        {
        //                            if (num < ave5)
        //                                txtUNCOATEDWEIGHTN5.Foreground = Brushes.Red;
        //                            else
        //                                txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;

        //                        if (ave6 != null && ave6 != 0)
        //                        {
        //                            if (num < ave6)
        //                                txtUNCOATEDWEIGHTN6.Foreground = Brushes.Red;
        //                            else
        //                                txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
        //                    }
        //                    else if (temp.Contains("MIN"))
        //                    {
        //                        if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
        //                            num = decimal.Parse(myArr[1].ToString().Trim());

        //                        if (ave1 != null && ave1 != 0)
        //                        {
        //                            if (num > ave1)
        //                                txtUNCOATEDWEIGHTN1.Foreground = Brushes.Red;
        //                            else
        //                                txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;

        //                        if (ave2 != null && ave2 != 0)
        //                        {
        //                            if (num > ave2)
        //                                txtUNCOATEDWEIGHTN2.Foreground = Brushes.Red;
        //                            else
        //                                txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;

        //                        if (ave3 != null && ave3 != 0)
        //                        {
        //                            if (num > ave3)
        //                                txtUNCOATEDWEIGHTN3.Foreground = Brushes.Red;
        //                            else
        //                                txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;

        //                        if (ave4 != null && ave4 != 0)
        //                        {
        //                            if (num > ave4)
        //                                txtUNCOATEDWEIGHTN4.Foreground = Brushes.Red;
        //                            else
        //                                txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;

        //                        if (ave5 != null && ave5 != 0)
        //                        {
        //                            if (num > ave5)
        //                                txtUNCOATEDWEIGHTN5.Foreground = Brushes.Red;
        //                            else
        //                                txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;

        //                        if (ave6 != null && ave6 != 0)
        //                        {
        //                            if (num > ave6)
        //                                txtUNCOATEDWEIGHTN6.Foreground = Brushes.Red;
        //                            else
        //                                txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
        //                    }
        //                    else if (temp.Contains("+/-"))
        //                    {
        //                        if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
        //                            num = decimal.Parse(myArr[0].ToString().Trim());

        //                        if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
        //                            num2 = decimal.Parse(myArr[2].ToString().Trim());

        //                        lower = num - num2;
        //                        upper = num + num2;

        //                        if (ave1 != null && ave1 != 0)
        //                        {
        //                            if (lower <= ave1 && ave1 <= upper)
        //                                txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;
        //                            else
        //                                txtUNCOATEDWEIGHTN1.Foreground = Brushes.Red;
        //                        }
        //                        else
        //                            txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;

        //                        if (ave2 != null && ave2 != 0)
        //                        {
        //                            if (lower <= ave2 && ave2 <= upper)
        //                                txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;
        //                            else
        //                                txtUNCOATEDWEIGHTN2.Foreground = Brushes.Red;
        //                        }
        //                        else
        //                            txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;

        //                        if (ave3 != null && ave3 != 0)
        //                        {
        //                            if (lower <= ave3 && ave3 <= upper)
        //                                txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;
        //                            else
        //                                txtUNCOATEDWEIGHTN3.Foreground = Brushes.Red;
        //                        }
        //                        else
        //                            txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;

        //                        if (ave4 != null && ave4 != 0)
        //                        {
        //                            if (lower <= ave4 && ave4 <= upper)
        //                                txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;
        //                            else
        //                                txtUNCOATEDWEIGHTN4.Foreground = Brushes.Red;
        //                        }
        //                        else
        //                            txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;

        //                        if (ave5 != null && ave5 != 0)
        //                        {
        //                            if (lower <= ave5 && ave5 <= upper)
        //                                txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;
        //                            else
        //                                txtUNCOATEDWEIGHTN5.Foreground = Brushes.Red;
        //                        }
        //                        else
        //                            txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;

        //                        if (ave6 != null && ave6 != 0)
        //                        {
        //                            if (lower <= ave6 && ave6 <= upper)
        //                                txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
        //                            else
        //                                txtUNCOATEDWEIGHTN6.Foreground = Brushes.Red;
        //                        }
        //                        else
        //                            txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
        //                    }
        //                }
        //            }
        //            else
        //            {
        //                if (myArr.Length == 1)
        //                {
        //                    if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
        //                        num3 = decimal.Parse(myArr[0].ToString().Trim());
        //                }

        //                if (ave1 != null && ave1 != 0)
        //                {
        //                    if (ave1 == num3)
        //                        txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;
        //                    else
        //                        txtUNCOATEDWEIGHTN1.Foreground = Brushes.Red;
        //                }
        //                else
        //                    txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;

        //                if (ave2 != null && ave2 != 0)
        //                {
        //                    if (ave2 == num3)
        //                        txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;
        //                    else
        //                        txtUNCOATEDWEIGHTN2.Foreground = Brushes.Red;
        //                }
        //                else
        //                    txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;

        //                if (ave3 != null && ave3 != 0)
        //                {
        //                    if (ave3 == num3)
        //                        txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;
        //                    else
        //                        txtUNCOATEDWEIGHTN3.Foreground = Brushes.Red;
        //                }
        //                else
        //                    txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;

        //                if (ave4 != null && ave4 != 0)
        //                {
        //                    if (ave4 == num3)
        //                        txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;
        //                    else
        //                        txtUNCOATEDWEIGHTN4.Foreground = Brushes.Red;
        //                }
        //                else
        //                    txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;

        //                if (ave5 != null && ave5 != 0)
        //                {
        //                    if (ave5 == num3)
        //                        txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;
        //                    else
        //                        txtUNCOATEDWEIGHTN5.Foreground = Brushes.Red;
        //                }
        //                else
        //                    txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;

        //                if (ave6 != null && ave6 != 0)
        //                {
        //                    if (ave6 == num3)
        //                        txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
        //                    else
        //                        txtUNCOATEDWEIGHTN6.Foreground = Brushes.Red;
        //                }
        //                else
        //                    txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;

        //            }
        //        }
        //        else
        //        {
        //            txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;
        //            txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;
        //            txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;
        //            txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;
        //            txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;
        //            txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
        //        }
        //        #endregion

        //    }
        //    catch (Exception ex)
        //    {
        //        ex.Message.ToString().ShowMessageBox(true);
        //    }
        //}
        #endregion

        #endregion

        #region COATINGWEIGHT_LostFocus
        private void COATINGWEIGHT_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtCOATINGWEIGHTN1.Text))
                {
                    if (Decimal.TryParse(txtCOATINGWEIGHTN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtCOATINGWEIGHTN1.Text);
                        _session.P_COATWEIGHT1 = ave1;
                    }
                    else
                    {
                        txtCOATINGWEIGHTN1.Text = string.Empty;
                        _session.P_COATWEIGHT1 = null;
                    }
                }
                else
                {
                    _session.P_COATWEIGHT1 = null;
                }

                if (!string.IsNullOrEmpty(txtCOATINGWEIGHTN2.Text))
                {
                    if (Decimal.TryParse(txtCOATINGWEIGHTN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtCOATINGWEIGHTN2.Text);
                        _session.P_COATWEIGHT2 = ave2;
                    }
                    else
                    {
                        txtCOATINGWEIGHTN2.Text = string.Empty;
                        _session.P_COATWEIGHT2 = null;
                    }
                }
                else
                {
                    _session.P_COATWEIGHT2 = null;
                }

                if (!string.IsNullOrEmpty(txtCOATINGWEIGHTN3.Text))
                {
                    if (Decimal.TryParse(txtCOATINGWEIGHTN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtCOATINGWEIGHTN3.Text);
                        _session.P_COATWEIGHT3 = ave3;
                    }
                    else
                    {
                        txtCOATINGWEIGHTN3.Text = string.Empty;
                        _session.P_COATWEIGHT3 = null;
                    }
                }
                else
                {
                    _session.P_COATWEIGHT3 = null;
                }

                if (!string.IsNullOrEmpty(txtCOATINGWEIGHTN4.Text))
                {
                    if (Decimal.TryParse(txtCOATINGWEIGHTN4.Text, out value))
                    {
                        ave4 = decimal.Parse(txtCOATINGWEIGHTN4.Text);
                        _session.P_COATWEIGHT4 = ave4;
                    }
                    else
                    {
                        txtCOATINGWEIGHTN4.Text = string.Empty;
                        _session.P_COATWEIGHT4 = null;
                    }
                }
                else
                {
                    _session.P_COATWEIGHT4 = null;
                }

                if (!string.IsNullOrEmpty(txtCOATINGWEIGHTN5.Text))
                {
                    if (Decimal.TryParse(txtCOATINGWEIGHTN5.Text, out value))
                    {
                        ave5 = decimal.Parse(txtCOATINGWEIGHTN5.Text);
                        _session.P_COATWEIGHT5 = ave5;
                    }
                    else
                    {
                        txtCOATINGWEIGHTN5.Text = string.Empty;
                        _session.P_COATWEIGHT5 = null;
                    }
                }
                else
                {
                    _session.P_COATWEIGHT5 = null;
                }

                if (!string.IsNullOrEmpty(txtCOATINGWEIGHTN6.Text))
                {
                    if (Decimal.TryParse(txtCOATINGWEIGHTN6.Text, out value))
                    {
                        ave6 = decimal.Parse(txtCOATINGWEIGHTN6.Text);
                        _session.P_COATWEIGHT6 = ave6;
                    }
                    else
                    {
                        txtCOATINGWEIGHTN6.Text = string.Empty;
                        _session.P_COATWEIGHT6 = null;
                    }
                }
                else
                {
                    _session.P_COATWEIGHT6 = null;
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtCOATINGWEIGHTAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtCOATINGWEIGHTAve.Text = "0";
                    else
                        txtCOATINGWEIGHTAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtCOATINGWEIGHTSpecification.Text))
                {
                    string temp = txtCOATINGWEIGHTSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtCOATINGWEIGHTN1.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtCOATINGWEIGHTN2.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtCOATINGWEIGHTN3.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtCOATINGWEIGHTN4.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtCOATINGWEIGHTN5.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtCOATINGWEIGHTN6.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtCOATINGWEIGHTN1.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtCOATINGWEIGHTN2.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtCOATINGWEIGHTN3.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtCOATINGWEIGHTN4.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtCOATINGWEIGHTN5.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtCOATINGWEIGHTN6.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtCOATINGWEIGHTN1.Foreground = Brushes.Black;
                                    else
                                        txtCOATINGWEIGHTN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtCOATINGWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtCOATINGWEIGHTN2.Foreground = Brushes.Black;
                                    else
                                        txtCOATINGWEIGHTN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtCOATINGWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtCOATINGWEIGHTN3.Foreground = Brushes.Black;
                                    else
                                        txtCOATINGWEIGHTN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtCOATINGWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtCOATINGWEIGHTN4.Foreground = Brushes.Black;
                                    else
                                        txtCOATINGWEIGHTN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtCOATINGWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtCOATINGWEIGHTN5.Foreground = Brushes.Black;
                                    else
                                        txtCOATINGWEIGHTN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtCOATINGWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                                    else
                                        txtCOATINGWEIGHTN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtCOATINGWEIGHTN1.Foreground = Brushes.Black;
                            else
                                txtCOATINGWEIGHTN1.Foreground = Brushes.Red;
                        }
                        else
                            txtCOATINGWEIGHTN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtCOATINGWEIGHTN2.Foreground = Brushes.Black;
                            else
                                txtCOATINGWEIGHTN2.Foreground = Brushes.Red;
                        }
                        else
                            txtCOATINGWEIGHTN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtCOATINGWEIGHTN3.Foreground = Brushes.Black;
                            else
                                txtCOATINGWEIGHTN3.Foreground = Brushes.Red;
                        }
                        else
                            txtCOATINGWEIGHTN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtCOATINGWEIGHTN4.Foreground = Brushes.Black;
                            else
                                txtCOATINGWEIGHTN4.Foreground = Brushes.Red;
                        }
                        else
                            txtCOATINGWEIGHTN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtCOATINGWEIGHTN5.Foreground = Brushes.Black;
                            else
                                txtCOATINGWEIGHTN5.Foreground = Brushes.Red;
                        }
                        else
                            txtCOATINGWEIGHTN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                            else
                                txtCOATINGWEIGHTN6.Foreground = Brushes.Red;
                        }
                        else
                            txtCOATINGWEIGHTN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtCOATINGWEIGHTN1.Foreground = Brushes.Black;
                    txtCOATINGWEIGHTN2.Foreground = Brushes.Black;
                    txtCOATINGWEIGHTN3.Foreground = Brushes.Black;
                    txtCOATINGWEIGHTN4.Foreground = Brushes.Black;
                    txtCOATINGWEIGHTN5.Foreground = Brushes.Black;
                    txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region THICKNESS_LostFocus
        private void THICKNESS_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtTHICKNESSN1.Text))
                {
                    if (Decimal.TryParse(txtTHICKNESSN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtTHICKNESSN1.Text);
                        _session.P_THICKNESS1 = ave1;
                    }
                    else
                    {
                        txtTHICKNESSN1.Text = string.Empty;
                        _session.P_THICKNESS1 = null;
                    }
                }
                else
                {
                    _session.P_THICKNESS1 = null;
                }

                if (!string.IsNullOrEmpty(txtTHICKNESSN2.Text))
                {
                    if (Decimal.TryParse(txtTHICKNESSN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtTHICKNESSN2.Text);
                        _session.P_THICKNESS2 = ave2;
                    }
                    else
                    {
                        txtTHICKNESSN2.Text = string.Empty;
                        _session.P_THICKNESS2 = null;
                    }
                }
                else
                {
                    _session.P_THICKNESS2 = null;
                }

                if (!string.IsNullOrEmpty(txtTHICKNESSN3.Text))
                {
                    if (Decimal.TryParse(txtTHICKNESSN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtTHICKNESSN3.Text);
                        _session.P_THICKNESS3 = ave3;
                    }
                    else
                    {
                        txtTHICKNESSN3.Text = string.Empty;
                        _session.P_THICKNESS3 = null;
                    }
                }
                else
                {
                    _session.P_THICKNESS3 = null;
                }

                if (!string.IsNullOrEmpty(txtTHICKNESSN4.Text))
                {
                    if (Decimal.TryParse(txtTHICKNESSN4.Text, out value))
                    {
                        //ave4 = decimal.Parse(txtTHICKNESSN4.Text);
                    }
                    else
                    {
                        txtTHICKNESSN4.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtTHICKNESSN5.Text))
                {
                    if (Decimal.TryParse(txtTHICKNESSN5.Text, out value))
                    {
                        //ave5 = decimal.Parse(txtTHICKNESSN5.Text);
                    }
                    else
                    {
                        txtTHICKNESSN5.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtTHICKNESSN6.Text))
                {
                    if (Decimal.TryParse(txtTHICKNESSN6.Text, out value))
                    {
                        //ave6 = decimal.Parse(txtTHICKNESSN6.Text);
                    }
                    else
                    {
                        txtTHICKNESSN6.Text = string.Empty;
                    }
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtTHICKNESSAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtTHICKNESSAve.Text = "0";
                    else
                        txtTHICKNESSAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtTHICKNESSSpecification.Text))
                {
                    string temp = txtTHICKNESSSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtTHICKNESSN1.Foreground = Brushes.Red;
                                    else
                                        txtTHICKNESSN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtTHICKNESSN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtTHICKNESSN2.Foreground = Brushes.Red;
                                    else
                                        txtTHICKNESSN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtTHICKNESSN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtTHICKNESSN3.Foreground = Brushes.Red;
                                    else
                                        txtTHICKNESSN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtTHICKNESSN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtTHICKNESSN4.Foreground = Brushes.Red;
                                    else
                                        txtTHICKNESSN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtTHICKNESSN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtTHICKNESSN5.Foreground = Brushes.Red;
                                    else
                                        txtTHICKNESSN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtTHICKNESSN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtTHICKNESSN6.Foreground = Brushes.Red;
                                    else
                                        txtTHICKNESSN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtTHICKNESSN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtTHICKNESSN1.Foreground = Brushes.Red;
                                    else
                                        txtTHICKNESSN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtTHICKNESSN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtTHICKNESSN2.Foreground = Brushes.Red;
                                    else
                                        txtTHICKNESSN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtTHICKNESSN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtTHICKNESSN3.Foreground = Brushes.Red;
                                    else
                                        txtTHICKNESSN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtTHICKNESSN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtTHICKNESSN4.Foreground = Brushes.Red;
                                    else
                                        txtTHICKNESSN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtTHICKNESSN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtTHICKNESSN5.Foreground = Brushes.Red;
                                    else
                                        txtTHICKNESSN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtTHICKNESSN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtTHICKNESSN6.Foreground = Brushes.Red;
                                    else
                                        txtTHICKNESSN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtTHICKNESSN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtTHICKNESSN1.Foreground = Brushes.Black;
                                    else
                                        txtTHICKNESSN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtTHICKNESSN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtTHICKNESSN2.Foreground = Brushes.Black;
                                    else
                                        txtTHICKNESSN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtTHICKNESSN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtTHICKNESSN3.Foreground = Brushes.Black;
                                    else
                                        txtTHICKNESSN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtTHICKNESSN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtTHICKNESSN4.Foreground = Brushes.Black;
                                    else
                                        txtTHICKNESSN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtTHICKNESSN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtTHICKNESSN5.Foreground = Brushes.Black;
                                    else
                                        txtTHICKNESSN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtTHICKNESSN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtTHICKNESSN6.Foreground = Brushes.Black;
                                    else
                                        txtTHICKNESSN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtTHICKNESSN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtTHICKNESSN1.Foreground = Brushes.Black;
                            else
                                txtTHICKNESSN1.Foreground = Brushes.Red;
                        }
                        else
                            txtTHICKNESSN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtTHICKNESSN2.Foreground = Brushes.Black;
                            else
                                txtTHICKNESSN2.Foreground = Brushes.Red;
                        }
                        else
                            txtTHICKNESSN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtTHICKNESSN3.Foreground = Brushes.Black;
                            else
                                txtTHICKNESSN3.Foreground = Brushes.Red;
                        }
                        else
                            txtTHICKNESSN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtTHICKNESSN4.Foreground = Brushes.Black;
                            else
                                txtTHICKNESSN4.Foreground = Brushes.Red;
                        }
                        else
                            txtTHICKNESSN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtTHICKNESSN5.Foreground = Brushes.Black;
                            else
                                txtTHICKNESSN5.Foreground = Brushes.Red;
                        }
                        else
                            txtTHICKNESSN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtTHICKNESSN6.Foreground = Brushes.Black;
                            else
                                txtTHICKNESSN6.Foreground = Brushes.Red;
                        }
                        else
                            txtTHICKNESSN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtTHICKNESSN1.Foreground = Brushes.Black;
                    txtTHICKNESSN2.Foreground = Brushes.Black;
                    txtTHICKNESSN3.Foreground = Brushes.Black;
                    txtTHICKNESSN4.Foreground = Brushes.Black;
                    txtTHICKNESSN5.Foreground = Brushes.Black;
                    txtTHICKNESSN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region FLAMMABILITY_F_LostFocus
        private void FLAMMABILITY_F_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtFLAMMABILITY_FN1.Text))
                {
                    if (Decimal.TryParse(txtFLAMMABILITY_FN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtFLAMMABILITY_FN1.Text);
                        _session.P_FLAMMABILITY_F = ave1;
                    }
                    else
                    {
                        txtFLAMMABILITY_FN1.Text = string.Empty;
                        _session.P_FLAMMABILITY_F = null;
                    }
                }
                else
                {
                    _session.P_FLAMMABILITY_F = null;
                }

                if (!string.IsNullOrEmpty(txtFLAMMABILITY_FN2.Text))
                {
                    if (Decimal.TryParse(txtFLAMMABILITY_FN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtFLAMMABILITY_FN2.Text);
                        _session.P_FLAMMABILITY_F2 = ave2;
                    }
                    else
                    {
                        txtFLAMMABILITY_FN2.Text = string.Empty;
                        _session.P_FLAMMABILITY_F2 = null;
                    }
                }
                else
                {
                    _session.P_FLAMMABILITY_F2 = null;
                }

                if (!string.IsNullOrEmpty(txtFLAMMABILITY_FN3.Text))
                {
                    if (Decimal.TryParse(txtFLAMMABILITY_FN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtFLAMMABILITY_FN3.Text);
                        _session.P_FLAMMABILITY_F3 = ave3;
                    }
                    else
                    {
                        txtFLAMMABILITY_FN3.Text = string.Empty;
                        _session.P_FLAMMABILITY_F3 = null;
                    }
                }
                else
                {
                    _session.P_FLAMMABILITY_F3 = null;
                }

                if (!string.IsNullOrEmpty(txtFLAMMABILITY_FN4.Text))
                {
                    if (Decimal.TryParse(txtFLAMMABILITY_FN4.Text, out value))
                    {
                        ave4 = decimal.Parse(txtFLAMMABILITY_FN4.Text);
                        _session.P_FLAMMABILITY_F4 = ave4;
                    }
                    else
                    {
                        txtFLAMMABILITY_FN4.Text = string.Empty;
                        _session.P_FLAMMABILITY_F4 = null;
                    }
                }
                else
                {
                    _session.P_FLAMMABILITY_F4 = null;
                }

                if (!string.IsNullOrEmpty(txtFLAMMABILITY_FN5.Text))
                {
                    if (Decimal.TryParse(txtFLAMMABILITY_FN5.Text, out value))
                    {
                        ave5 = decimal.Parse(txtFLAMMABILITY_FN5.Text);
                        _session.P_FLAMMABILITY_F5 = ave5;
                    }
                    else
                    {
                        txtFLAMMABILITY_FN5.Text = string.Empty;
                        _session.P_FLAMMABILITY_F5 = null;
                    }
                }
                else
                {
                    _session.P_FLAMMABILITY_F5 = null;
                }

                if (!string.IsNullOrEmpty(txtFLAMMABILITY_FN6.Text))
                {
                    if (Decimal.TryParse(txtFLAMMABILITY_FN6.Text, out value))
                    {
                        //ave6 = decimal.Parse(txtFLAMMABILITY_FN6.Text);
                    }
                    else
                    {
                        txtFLAMMABILITY_FN6.Text = string.Empty;
                    }
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtFLAMMABILITY_FAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtFLAMMABILITY_FAve.Text = "0";
                    else
                        txtFLAMMABILITY_FAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtFLAMMABILITY_FSpecification.Text))
                {
                    string temp = txtFLAMMABILITY_FSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtFLAMMABILITY_FN1.Foreground = Brushes.Red;
                                    else
                                        txtFLAMMABILITY_FN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLAMMABILITY_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtFLAMMABILITY_FN2.Foreground = Brushes.Red;
                                    else
                                        txtFLAMMABILITY_FN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLAMMABILITY_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtFLAMMABILITY_FN3.Foreground = Brushes.Red;
                                    else
                                        txtFLAMMABILITY_FN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLAMMABILITY_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtFLAMMABILITY_FN4.Foreground = Brushes.Red;
                                    else
                                        txtFLAMMABILITY_FN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLAMMABILITY_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtFLAMMABILITY_FN5.Foreground = Brushes.Red;
                                    else
                                        txtFLAMMABILITY_FN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLAMMABILITY_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtFLAMMABILITY_FN6.Foreground = Brushes.Red;
                                    else
                                        txtFLAMMABILITY_FN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLAMMABILITY_FN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtFLAMMABILITY_FN1.Foreground = Brushes.Red;
                                    else
                                        txtFLAMMABILITY_FN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLAMMABILITY_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtFLAMMABILITY_FN2.Foreground = Brushes.Red;
                                    else
                                        txtFLAMMABILITY_FN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLAMMABILITY_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtFLAMMABILITY_FN3.Foreground = Brushes.Red;
                                    else
                                        txtFLAMMABILITY_FN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLAMMABILITY_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtFLAMMABILITY_FN4.Foreground = Brushes.Red;
                                    else
                                        txtFLAMMABILITY_FN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLAMMABILITY_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtFLAMMABILITY_FN5.Foreground = Brushes.Red;
                                    else
                                        txtFLAMMABILITY_FN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLAMMABILITY_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtFLAMMABILITY_FN6.Foreground = Brushes.Red;
                                    else
                                        txtFLAMMABILITY_FN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLAMMABILITY_FN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtFLAMMABILITY_FN1.Foreground = Brushes.Black;
                                    else
                                        txtFLAMMABILITY_FN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLAMMABILITY_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtFLAMMABILITY_FN2.Foreground = Brushes.Black;
                                    else
                                        txtFLAMMABILITY_FN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLAMMABILITY_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtFLAMMABILITY_FN3.Foreground = Brushes.Black;
                                    else
                                        txtFLAMMABILITY_FN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLAMMABILITY_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtFLAMMABILITY_FN4.Foreground = Brushes.Black;
                                    else
                                        txtFLAMMABILITY_FN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLAMMABILITY_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtFLAMMABILITY_FN5.Foreground = Brushes.Black;
                                    else
                                        txtFLAMMABILITY_FN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLAMMABILITY_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtFLAMMABILITY_FN6.Foreground = Brushes.Black;
                                    else
                                        txtFLAMMABILITY_FN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLAMMABILITY_FN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtFLAMMABILITY_FN1.Foreground = Brushes.Black;
                            else
                                txtFLAMMABILITY_FN1.Foreground = Brushes.Red;
                        }
                        else
                            txtFLAMMABILITY_FN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtFLAMMABILITY_FN2.Foreground = Brushes.Black;
                            else
                                txtFLAMMABILITY_FN2.Foreground = Brushes.Red;
                        }
                        else
                            txtFLAMMABILITY_FN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtFLAMMABILITY_FN3.Foreground = Brushes.Black;
                            else
                                txtFLAMMABILITY_FN3.Foreground = Brushes.Red;
                        }
                        else
                            txtFLAMMABILITY_FN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtFLAMMABILITY_FN4.Foreground = Brushes.Black;
                            else
                                txtFLAMMABILITY_FN4.Foreground = Brushes.Red;
                        }
                        else
                            txtFLAMMABILITY_FN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtFLAMMABILITY_FN5.Foreground = Brushes.Black;
                            else
                                txtFLAMMABILITY_FN5.Foreground = Brushes.Red;
                        }
                        else
                            txtFLAMMABILITY_FN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtFLAMMABILITY_FN6.Foreground = Brushes.Black;
                            else
                                txtFLAMMABILITY_FN6.Foreground = Brushes.Red;
                        }
                        else
                            txtFLAMMABILITY_FN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtFLAMMABILITY_FN1.Foreground = Brushes.Black;
                    txtFLAMMABILITY_FN2.Foreground = Brushes.Black;
                    txtFLAMMABILITY_FN3.Foreground = Brushes.Black;
                    txtFLAMMABILITY_FN4.Foreground = Brushes.Black;
                    txtFLAMMABILITY_FN5.Foreground = Brushes.Black;
                    txtFLAMMABILITY_FN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region FLAMMABILITY_W_LostFocus
        private void FLAMMABILITY_W_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtFLAMMABILITY_WN1.Text))
                {
                    if (Decimal.TryParse(txtFLAMMABILITY_WN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtFLAMMABILITY_WN1.Text);
                        _session.P_FLAMMABILITY_W = ave1;
                    }
                    else
                    {
                        txtFLAMMABILITY_WN1.Text = string.Empty;
                        _session.P_FLAMMABILITY_W = null;
                    }
                }
                else
                {
                    _session.P_FLAMMABILITY_W = null;
                }

                if (!string.IsNullOrEmpty(txtFLAMMABILITY_WN2.Text))
                {
                    if (Decimal.TryParse(txtFLAMMABILITY_WN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtFLAMMABILITY_WN2.Text);
                        _session.P_FLAMMABILITY_W2 = ave2;
                    }
                    else
                    {
                        txtFLAMMABILITY_WN2.Text = string.Empty;
                        _session.P_FLAMMABILITY_W2 = null;
                    }
                }
                else
                {
                    _session.P_FLAMMABILITY_W2 = null;
                }

                if (!string.IsNullOrEmpty(txtFLAMMABILITY_WN3.Text))
                {
                    if (Decimal.TryParse(txtFLAMMABILITY_WN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtFLAMMABILITY_WN3.Text);
                        _session.P_FLAMMABILITY_W3 = ave3;
                    }
                    else
                    {
                        txtFLAMMABILITY_WN3.Text = string.Empty;
                        _session.P_FLAMMABILITY_W3 = null;
                    }
                }
                else
                {
                    _session.P_FLAMMABILITY_W3 = null;
                }

                if (!string.IsNullOrEmpty(txtFLAMMABILITY_WN4.Text))
                {
                    if (Decimal.TryParse(txtFLAMMABILITY_WN4.Text, out value))
                    {
                        ave4 = decimal.Parse(txtFLAMMABILITY_WN4.Text);
                        _session.P_FLAMMABILITY_W4 = ave4;
                    }
                    else
                    {
                        txtFLAMMABILITY_WN4.Text = string.Empty;
                        _session.P_FLAMMABILITY_W4 = null;
                    }
                }
                else
                {
                    _session.P_FLAMMABILITY_W4 = null;
                }

                if (!string.IsNullOrEmpty(txtFLAMMABILITY_WN5.Text))
                {
                    if (Decimal.TryParse(txtFLAMMABILITY_WN5.Text, out value))
                    {
                        ave5 = decimal.Parse(txtFLAMMABILITY_WN5.Text);
                        _session.P_FLAMMABILITY_W5 = ave5;
                    }
                    else
                    {
                        txtFLAMMABILITY_WN5.Text = string.Empty;
                        _session.P_FLAMMABILITY_W5 = null;
                    }
                }
                else
                {
                    _session.P_FLAMMABILITY_W5 = null;
                }

                if (!string.IsNullOrEmpty(txtFLAMMABILITY_WN6.Text))
                {
                    if (Decimal.TryParse(txtFLAMMABILITY_WN6.Text, out value))
                    {
                        //ave6 = decimal.Parse(txtFLAMMABILITY_WN6.Text);
                    }
                    else
                    {
                        txtFLAMMABILITY_WN6.Text = string.Empty;
                    }
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtFLAMMABILITY_WAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtFLAMMABILITY_WAve.Text = "0";
                    else
                        txtFLAMMABILITY_WAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtFLAMMABILITY_WSpecification.Text))
                {
                    string temp = txtFLAMMABILITY_WSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtFLAMMABILITY_WN1.Foreground = Brushes.Red;
                                    else
                                        txtFLAMMABILITY_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLAMMABILITY_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtFLAMMABILITY_WN2.Foreground = Brushes.Red;
                                    else
                                        txtFLAMMABILITY_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLAMMABILITY_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtFLAMMABILITY_WN3.Foreground = Brushes.Red;
                                    else
                                        txtFLAMMABILITY_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLAMMABILITY_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtFLAMMABILITY_WN4.Foreground = Brushes.Red;
                                    else
                                        txtFLAMMABILITY_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLAMMABILITY_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtFLAMMABILITY_WN5.Foreground = Brushes.Red;
                                    else
                                        txtFLAMMABILITY_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLAMMABILITY_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtFLAMMABILITY_WN6.Foreground = Brushes.Red;
                                    else
                                        txtFLAMMABILITY_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLAMMABILITY_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtFLAMMABILITY_WN1.Foreground = Brushes.Red;
                                    else
                                        txtFLAMMABILITY_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLAMMABILITY_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtFLAMMABILITY_WN2.Foreground = Brushes.Red;
                                    else
                                        txtFLAMMABILITY_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLAMMABILITY_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtFLAMMABILITY_WN3.Foreground = Brushes.Red;
                                    else
                                        txtFLAMMABILITY_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLAMMABILITY_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtFLAMMABILITY_WN4.Foreground = Brushes.Red;
                                    else
                                        txtFLAMMABILITY_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLAMMABILITY_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtFLAMMABILITY_WN5.Foreground = Brushes.Red;
                                    else
                                        txtFLAMMABILITY_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLAMMABILITY_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtFLAMMABILITY_WN6.Foreground = Brushes.Red;
                                    else
                                        txtFLAMMABILITY_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLAMMABILITY_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtFLAMMABILITY_WN1.Foreground = Brushes.Black;
                                    else
                                        txtFLAMMABILITY_WN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLAMMABILITY_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtFLAMMABILITY_WN2.Foreground = Brushes.Black;
                                    else
                                        txtFLAMMABILITY_WN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLAMMABILITY_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtFLAMMABILITY_WN3.Foreground = Brushes.Black;
                                    else
                                        txtFLAMMABILITY_WN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLAMMABILITY_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtFLAMMABILITY_WN4.Foreground = Brushes.Black;
                                    else
                                        txtFLAMMABILITY_WN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLAMMABILITY_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtFLAMMABILITY_WN5.Foreground = Brushes.Black;
                                    else
                                        txtFLAMMABILITY_WN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLAMMABILITY_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtFLAMMABILITY_WN6.Foreground = Brushes.Black;
                                    else
                                        txtFLAMMABILITY_WN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLAMMABILITY_WN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtFLAMMABILITY_WN1.Foreground = Brushes.Black;
                            else
                                txtFLAMMABILITY_WN1.Foreground = Brushes.Red;
                        }
                        else
                            txtFLAMMABILITY_WN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtFLAMMABILITY_WN2.Foreground = Brushes.Black;
                            else
                                txtFLAMMABILITY_WN2.Foreground = Brushes.Red;
                        }
                        else
                            txtFLAMMABILITY_WN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtFLAMMABILITY_WN3.Foreground = Brushes.Black;
                            else
                                txtFLAMMABILITY_WN3.Foreground = Brushes.Red;
                        }
                        else
                            txtFLAMMABILITY_WN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtFLAMMABILITY_WN4.Foreground = Brushes.Black;
                            else
                                txtFLAMMABILITY_WN4.Foreground = Brushes.Red;
                        }
                        else
                            txtFLAMMABILITY_WN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtFLAMMABILITY_WN5.Foreground = Brushes.Black;
                            else
                                txtFLAMMABILITY_WN5.Foreground = Brushes.Red;
                        }
                        else
                            txtFLAMMABILITY_WN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtFLAMMABILITY_WN6.Foreground = Brushes.Black;
                            else
                                txtFLAMMABILITY_WN6.Foreground = Brushes.Red;
                        }
                        else
                            txtFLAMMABILITY_WN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtFLAMMABILITY_WN1.Foreground = Brushes.Black;
                    txtFLAMMABILITY_WN2.Foreground = Brushes.Black;
                    txtFLAMMABILITY_WN3.Foreground = Brushes.Black;
                    txtFLAMMABILITY_WN4.Foreground = Brushes.Black;
                    txtFLAMMABILITY_WN5.Foreground = Brushes.Black;
                    txtFLAMMABILITY_WN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region STIFFNES_F_LostFocus
        private void STIFFNES_F_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtSTIFFNES_FN1.Text))
                {
                    if (Decimal.TryParse(txtSTIFFNES_FN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtSTIFFNES_FN1.Text);
                        _session.P_STIFFNESS_F1 = ave1;
                    }
                    else
                    {
                        txtSTIFFNES_FN1.Text = string.Empty;
                        _session.P_STIFFNESS_F1 = null;
                    }
                }
                else
                {
                    _session.P_STIFFNESS_F1 = null;
                }

                if (!string.IsNullOrEmpty(txtSTIFFNES_FN2.Text))
                {
                    if (Decimal.TryParse(txtSTIFFNES_FN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtSTIFFNES_FN2.Text);
                        _session.P_STIFFNESS_F2 = ave2;
                    }
                    else
                    {
                        txtSTIFFNES_FN2.Text = string.Empty;
                        _session.P_STIFFNESS_F2 = null;
                    }
                }
                else
                {
                    _session.P_STIFFNESS_F2 = null;
                }

                if (!string.IsNullOrEmpty(txtSTIFFNES_FN3.Text))
                {
                    if (Decimal.TryParse(txtSTIFFNES_FN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtSTIFFNES_FN3.Text);
                        _session.P_STIFFNESS_F3 = ave3;
                    }
                    else
                    {
                        txtSTIFFNES_FN3.Text = string.Empty;
                        _session.P_STIFFNESS_F3 = null;
                    }
                }
                else
                {
                    _session.P_STIFFNESS_F3 = null;
                }

                if (!string.IsNullOrEmpty(txtSTIFFNES_FN4.Text))
                {
                    if (Decimal.TryParse(txtSTIFFNES_FN4.Text, out value))
                    {
                        //ave4 = decimal.Parse(txtSTIFFNES_FN4.Text);
                    }
                    else
                    {
                        txtSTIFFNES_FN4.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtSTIFFNES_FN5.Text))
                {
                    if (Decimal.TryParse(txtSTIFFNES_FN5.Text, out value))
                    {
                        //ave5 = decimal.Parse(txtSTIFFNES_FN5.Text);
                    }
                    else
                    {
                        txtSTIFFNES_FN5.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtSTIFFNES_FN6.Text))
                {
                    if (Decimal.TryParse(txtSTIFFNES_FN6.Text, out value))
                    {
                        //ave6 = decimal.Parse(txtSTIFFNES_FN6.Text);
                    }
                    else
                    {
                        txtSTIFFNES_FN6.Text = string.Empty;
                    }
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtSTIFFNES_FAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtSTIFFNES_FAve.Text = "0";
                    else
                        txtSTIFFNES_FAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtSTIFFNES_FSpecification.Text))
                {
                    string temp = txtSTIFFNES_FSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtSTIFFNES_FN1.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtSTIFFNES_FN2.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtSTIFFNES_FN3.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtSTIFFNES_FN4.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtSTIFFNES_FN5.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtSTIFFNES_FN6.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtSTIFFNES_FN1.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtSTIFFNES_FN2.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtSTIFFNES_FN3.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtSTIFFNES_FN4.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtSTIFFNES_FN5.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtSTIFFNES_FN6.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtSTIFFNES_FN1.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_FN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtSTIFFNES_FN2.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_FN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtSTIFFNES_FN3.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_FN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtSTIFFNES_FN4.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_FN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtSTIFFNES_FN5.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_FN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtSTIFFNES_FN6.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_FN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_FN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtSTIFFNES_FN1.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_FN1.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_FN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtSTIFFNES_FN2.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_FN2.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_FN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtSTIFFNES_FN3.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_FN3.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_FN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtSTIFFNES_FN4.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_FN4.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_FN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtSTIFFNES_FN5.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_FN5.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_FN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtSTIFFNES_FN6.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_FN6.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_FN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtSTIFFNES_FN1.Foreground = Brushes.Black;
                    txtSTIFFNES_FN2.Foreground = Brushes.Black;
                    txtSTIFFNES_FN3.Foreground = Brushes.Black;
                    txtSTIFFNES_FN4.Foreground = Brushes.Black;
                    txtSTIFFNES_FN5.Foreground = Brushes.Black;
                    txtSTIFFNES_FN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region STIFFNES_W_LostFocus
        private void STIFFNES_W_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtSTIFFNES_WN1.Text))
                {
                    if (Decimal.TryParse(txtSTIFFNES_WN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtSTIFFNES_WN1.Text);
                        _session.P_STIFFNESS_W1 = ave1;
                    }
                    else
                    {
                        txtSTIFFNES_WN1.Text = string.Empty;
                        _session.P_STIFFNESS_W1 = null;
                    }
                }
                else
                {
                    _session.P_STIFFNESS_W1 = null;
                }

                if (!string.IsNullOrEmpty(txtSTIFFNES_WN2.Text))
                {
                    if (Decimal.TryParse(txtSTIFFNES_WN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtSTIFFNES_WN2.Text);
                        _session.P_STIFFNESS_W2 = ave2;
                    }
                    else
                    {
                        txtSTIFFNES_WN2.Text = string.Empty;
                        _session.P_STIFFNESS_W2 = null;
                    }
                }
                else
                {
                    _session.P_STIFFNESS_W2 = null;
                }

                if (!string.IsNullOrEmpty(txtSTIFFNES_WN3.Text))
                {
                    if (Decimal.TryParse(txtSTIFFNES_WN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtSTIFFNES_WN3.Text);
                        _session.P_STIFFNESS_W3 = ave3;
                    }
                    else
                    {
                        txtSTIFFNES_WN3.Text = string.Empty;
                        _session.P_STIFFNESS_W3 = null;
                    }
                }
                else
                {
                    _session.P_STIFFNESS_W3 = null;
                }

                if (!string.IsNullOrEmpty(txtSTIFFNES_WN4.Text))
                {
                    if (Decimal.TryParse(txtSTIFFNES_WN4.Text, out value))
                    {
                        //ave4 = decimal.Parse(txtSTIFFNES_WN4.Text);
                    }
                    else
                    {
                        txtSTIFFNES_WN4.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtSTIFFNES_WN5.Text))
                {
                    if (Decimal.TryParse(txtSTIFFNES_WN5.Text, out value))
                    {
                        //ave5 = decimal.Parse(txtSTIFFNES_WN5.Text);
                    }
                    else
                    {
                        txtSTIFFNES_WN5.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtSTIFFNES_WN6.Text))
                {
                    if (Decimal.TryParse(txtSTIFFNES_WN6.Text, out value))
                    {
                        //ave6 = decimal.Parse(txtSTIFFNES_WN6.Text);
                    }
                    else
                    {
                        txtSTIFFNES_WN6.Text = string.Empty;
                    }
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtSTIFFNES_WAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtSTIFFNES_WAve.Text = "0";
                    else
                        txtSTIFFNES_WAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtSTIFFNES_WSpecification.Text))
                {
                    string temp = txtSTIFFNES_WSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtSTIFFNES_WN1.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtSTIFFNES_WN2.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtSTIFFNES_WN3.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtSTIFFNES_WN4.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtSTIFFNES_WN5.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtSTIFFNES_WN6.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtSTIFFNES_WN1.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtSTIFFNES_WN2.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtSTIFFNES_WN3.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtSTIFFNES_WN4.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtSTIFFNES_WN5.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtSTIFFNES_WN6.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtSTIFFNES_WN1.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_WN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtSTIFFNES_WN2.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_WN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtSTIFFNES_WN3.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_WN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtSTIFFNES_WN4.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_WN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtSTIFFNES_WN5.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_WN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtSTIFFNES_WN6.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_WN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_WN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtSTIFFNES_WN1.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_WN1.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_WN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtSTIFFNES_WN2.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_WN2.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_WN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtSTIFFNES_WN3.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_WN3.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_WN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtSTIFFNES_WN4.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_WN4.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_WN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtSTIFFNES_WN5.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_WN5.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_WN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtSTIFFNES_WN6.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_WN6.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_WN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtSTIFFNES_WN1.Foreground = Brushes.Black;
                    txtSTIFFNES_WN2.Foreground = Brushes.Black;
                    txtSTIFFNES_WN3.Foreground = Brushes.Black;
                    txtSTIFFNES_WN4.Foreground = Brushes.Black;
                    txtSTIFFNES_WN5.Foreground = Brushes.Black;
                    txtSTIFFNES_WN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region STATIC_AIR_LostFocus
        private void STATIC_AIR_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtSTATIC_AIRN1.Text))
                {
                    if (Decimal.TryParse(txtSTATIC_AIRN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtSTATIC_AIRN1.Text);
                        _session.P_STATIC_AIR1 = ave1;
                    }
                    else
                    {
                        txtSTATIC_AIRN1.Text = string.Empty;
                        _session.P_STATIC_AIR1 = null;
                    }
                }
                else
                {
                    _session.P_STATIC_AIR1 = null;
                }

                if (!string.IsNullOrEmpty(txtSTATIC_AIRN2.Text))
                {
                    if (Decimal.TryParse(txtSTATIC_AIRN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtSTATIC_AIRN2.Text);
                        _session.P_STATIC_AIR2 = ave2;
                    }
                    else
                    {
                        txtSTATIC_AIRN2.Text = string.Empty;
                        _session.P_STATIC_AIR2 = null;
                    }
                }
                else
                {
                    _session.P_STATIC_AIR2 = null;
                }

                if (!string.IsNullOrEmpty(txtSTATIC_AIRN3.Text))
                {
                    if (Decimal.TryParse(txtSTATIC_AIRN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtSTATIC_AIRN3.Text);
                        _session.P_STATIC_AIR3 = ave3;
                    }
                    else
                    {
                        txtSTATIC_AIRN3.Text = string.Empty;
                        _session.P_STATIC_AIR3 = null;
                    }
                }
                else
                {
                    _session.P_STATIC_AIR3 = null;
                }

                if (!string.IsNullOrEmpty(txtSTATIC_AIRN4.Text))
                {
                    if (Decimal.TryParse(txtSTATIC_AIRN4.Text, out value))
                    {
                        ave4 = decimal.Parse(txtSTATIC_AIRN4.Text);
                        _session.P_STATIC_AIR4 = ave4;
                    }
                    else
                    {
                        txtSTATIC_AIRN4.Text = string.Empty;
                        _session.P_STATIC_AIR4 = null;
                    }
                }
                else
                {
                    _session.P_STATIC_AIR4 = null;
                }

                if (!string.IsNullOrEmpty(txtSTATIC_AIRN5.Text))
                {
                    if (Decimal.TryParse(txtSTATIC_AIRN5.Text, out value))
                    {
                        ave5 = decimal.Parse(txtSTATIC_AIRN5.Text);
                        _session.P_STATIC_AIR5 = ave5;
                    }
                    else
                    {
                        txtSTATIC_AIRN5.Text = string.Empty;
                        _session.P_STATIC_AIR5 = null;
                    }
                }
                else
                {
                    _session.P_STATIC_AIR5 = null;
                }

                if (!string.IsNullOrEmpty(txtSTATIC_AIRN6.Text))
                {
                    if (Decimal.TryParse(txtSTATIC_AIRN6.Text, out value))
                    {
                        ave6 = decimal.Parse(txtSTATIC_AIRN6.Text);
                        _session.P_STATIC_AIR6 = ave6;
                    }
                    else
                    {
                        txtSTATIC_AIRN6.Text = string.Empty;
                        _session.P_STATIC_AIR6 = null;
                    }
                }
                else
                {
                    _session.P_STATIC_AIR6 = null;
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 3);

                    txtSTATIC_AIRAve.Text = Avg.Value.ToString("#,##0.###");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtSTATIC_AIRAve.Text = "0";
                    else
                        txtSTATIC_AIRAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtSTATIC_AIRSpecification.Text))
                {
                    string temp = txtSTATIC_AIRSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtSTATIC_AIRN1.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtSTATIC_AIRN2.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtSTATIC_AIRN3.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtSTATIC_AIRN4.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtSTATIC_AIRN5.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtSTATIC_AIRN6.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtSTATIC_AIRN1.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtSTATIC_AIRN2.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtSTATIC_AIRN3.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtSTATIC_AIRN4.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtSTATIC_AIRN5.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtSTATIC_AIRN6.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtSTATIC_AIRN1.Foreground = Brushes.Black;
                                    else
                                        txtSTATIC_AIRN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTATIC_AIRN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtSTATIC_AIRN2.Foreground = Brushes.Black;
                                    else
                                        txtSTATIC_AIRN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTATIC_AIRN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtSTATIC_AIRN3.Foreground = Brushes.Black;
                                    else
                                        txtSTATIC_AIRN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTATIC_AIRN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtSTATIC_AIRN4.Foreground = Brushes.Black;
                                    else
                                        txtSTATIC_AIRN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTATIC_AIRN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtSTATIC_AIRN5.Foreground = Brushes.Black;
                                    else
                                        txtSTATIC_AIRN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTATIC_AIRN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtSTATIC_AIRN6.Foreground = Brushes.Black;
                                    else
                                        txtSTATIC_AIRN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTATIC_AIRN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtSTATIC_AIRN1.Foreground = Brushes.Black;
                            else
                                txtSTATIC_AIRN1.Foreground = Brushes.Red;
                        }
                        else
                            txtSTATIC_AIRN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtSTATIC_AIRN2.Foreground = Brushes.Black;
                            else
                                txtSTATIC_AIRN2.Foreground = Brushes.Red;
                        }
                        else
                            txtSTATIC_AIRN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtSTATIC_AIRN3.Foreground = Brushes.Black;
                            else
                                txtSTATIC_AIRN3.Foreground = Brushes.Red;
                        }
                        else
                            txtSTATIC_AIRN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtSTATIC_AIRN4.Foreground = Brushes.Black;
                            else
                                txtSTATIC_AIRN4.Foreground = Brushes.Red;
                        }
                        else
                            txtSTATIC_AIRN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtSTATIC_AIRN5.Foreground = Brushes.Black;
                            else
                                txtSTATIC_AIRN5.Foreground = Brushes.Red;
                        }
                        else
                            txtSTATIC_AIRN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtSTATIC_AIRN6.Foreground = Brushes.Black;
                            else
                                txtSTATIC_AIRN6.Foreground = Brushes.Red;
                        }
                        else
                            txtSTATIC_AIRN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtSTATIC_AIRN1.Foreground = Brushes.Black;
                    txtSTATIC_AIRN2.Foreground = Brushes.Black;
                    txtSTATIC_AIRN3.Foreground = Brushes.Black;
                    txtSTATIC_AIRN4.Foreground = Brushes.Black;
                    txtSTATIC_AIRN5.Foreground = Brushes.Black;
                    txtSTATIC_AIRN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region DYNAMIC_AIR_LostFocus
        private void DYNAMIC_AIR_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtDYNAMIC_AIRN1.Text))
                {
                    if (Decimal.TryParse(txtDYNAMIC_AIRN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtDYNAMIC_AIRN1.Text);
                        _session.P_DYNAMIC_AIR1 = ave1;
                    }
                    else
                    {
                        txtDYNAMIC_AIRN1.Text = string.Empty;
                        _session.P_DYNAMIC_AIR1 = null;
                    }
                }
                else
                {
                    _session.P_DYNAMIC_AIR1 = null;
                }

                if (!string.IsNullOrEmpty(txtDYNAMIC_AIRN2.Text))
                {
                    if (Decimal.TryParse(txtDYNAMIC_AIRN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtDYNAMIC_AIRN2.Text);
                        _session.P_DYNAMIC_AIR2 = ave2;
                    }
                    else
                    {
                        txtDYNAMIC_AIRN2.Text = string.Empty;
                        _session.P_DYNAMIC_AIR2 = null;
                    }
                }
                else
                {
                    _session.P_DYNAMIC_AIR2 = null;
                }

                if (!string.IsNullOrEmpty(txtDYNAMIC_AIRN3.Text))
                {
                    if (Decimal.TryParse(txtDYNAMIC_AIRN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtDYNAMIC_AIRN3.Text);
                        _session.P_DYNAMIC_AIR3 = ave3;
                    }
                    else
                    {
                        txtDYNAMIC_AIRN3.Text = string.Empty;
                        _session.P_DYNAMIC_AIR3 = null;
                    }
                }
                else
                {
                    _session.P_DYNAMIC_AIR3 = null;
                }

                if (!string.IsNullOrEmpty(txtDYNAMIC_AIRN4.Text))
                {
                    if (Decimal.TryParse(txtDYNAMIC_AIRN4.Text, out value))
                    {
                        //ave4 = decimal.Parse(txtDYNAMIC_AIRN4.Text);
                    }
                    else
                    {
                        txtDYNAMIC_AIRN4.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtDYNAMIC_AIRN5.Text))
                {
                    if (Decimal.TryParse(txtDYNAMIC_AIRN5.Text, out value))
                    {
                        //ave5 = decimal.Parse(txtDYNAMIC_AIRN5.Text);
                    }
                    else
                    {
                        txtDYNAMIC_AIRN5.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtDYNAMIC_AIRN6.Text))
                {
                    if (Decimal.TryParse(txtDYNAMIC_AIRN6.Text, out value))
                    {
                        //ave6 = decimal.Parse(txtDYNAMIC_AIRN6.Text);
                    }
                    else
                    {
                        txtDYNAMIC_AIRN6.Text = string.Empty;
                    }
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtDYNAMIC_AIRAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtDYNAMIC_AIRAve.Text = "0";
                    else
                        txtDYNAMIC_AIRAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtDYNAMIC_AIRSpecification.Text))
                {
                    string temp = txtDYNAMIC_AIRSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtDYNAMIC_AIRN1.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtDYNAMIC_AIRN2.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtDYNAMIC_AIRN3.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtDYNAMIC_AIRN4.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtDYNAMIC_AIRN5.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtDYNAMIC_AIRN6.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtDYNAMIC_AIRN1.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtDYNAMIC_AIRN2.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtDYNAMIC_AIRN3.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtDYNAMIC_AIRN4.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtDYNAMIC_AIRN5.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtDYNAMIC_AIRN6.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtDYNAMIC_AIRN1.Foreground = Brushes.Black;
                                    else
                                        txtDYNAMIC_AIRN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtDYNAMIC_AIRN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtDYNAMIC_AIRN2.Foreground = Brushes.Black;
                                    else
                                        txtDYNAMIC_AIRN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtDYNAMIC_AIRN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtDYNAMIC_AIRN3.Foreground = Brushes.Black;
                                    else
                                        txtDYNAMIC_AIRN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtDYNAMIC_AIRN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtDYNAMIC_AIRN4.Foreground = Brushes.Black;
                                    else
                                        txtDYNAMIC_AIRN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtDYNAMIC_AIRN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtDYNAMIC_AIRN5.Foreground = Brushes.Black;
                                    else
                                        txtDYNAMIC_AIRN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtDYNAMIC_AIRN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtDYNAMIC_AIRN6.Foreground = Brushes.Black;
                                    else
                                        txtDYNAMIC_AIRN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtDYNAMIC_AIRN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtDYNAMIC_AIRN1.Foreground = Brushes.Black;
                            else
                                txtDYNAMIC_AIRN1.Foreground = Brushes.Red;
                        }
                        else
                            txtDYNAMIC_AIRN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtDYNAMIC_AIRN2.Foreground = Brushes.Black;
                            else
                                txtDYNAMIC_AIRN2.Foreground = Brushes.Red;
                        }
                        else
                            txtDYNAMIC_AIRN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtDYNAMIC_AIRN3.Foreground = Brushes.Black;
                            else
                                txtDYNAMIC_AIRN3.Foreground = Brushes.Red;
                        }
                        else
                            txtDYNAMIC_AIRN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtDYNAMIC_AIRN4.Foreground = Brushes.Black;
                            else
                                txtDYNAMIC_AIRN4.Foreground = Brushes.Red;
                        }
                        else
                            txtDYNAMIC_AIRN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtDYNAMIC_AIRN5.Foreground = Brushes.Black;
                            else
                                txtDYNAMIC_AIRN5.Foreground = Brushes.Red;
                        }
                        else
                            txtDYNAMIC_AIRN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtDYNAMIC_AIRN6.Foreground = Brushes.Black;
                            else
                                txtDYNAMIC_AIRN6.Foreground = Brushes.Red;
                        }
                        else
                            txtDYNAMIC_AIRN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtDYNAMIC_AIRN1.Foreground = Brushes.Black;
                    txtDYNAMIC_AIRN2.Foreground = Brushes.Black;
                    txtDYNAMIC_AIRN3.Foreground = Brushes.Black;
                    txtDYNAMIC_AIRN4.Foreground = Brushes.Black;
                    txtDYNAMIC_AIRN5.Foreground = Brushes.Black;
                    txtDYNAMIC_AIRN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region EXPONENT_LostFocus
        private void EXPONENT_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtEXPONENTN1.Text))
                {
                    if (Decimal.TryParse(txtEXPONENTN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtEXPONENTN1.Text);
                        _session.P_EXPONENT1 = ave1;
                    }
                    else
                    {
                        txtEXPONENTN1.Text = string.Empty;
                        _session.P_EXPONENT1 = null;
                    }
                }
                else
                {
                    _session.P_EXPONENT1 = null;
                }

                if (!string.IsNullOrEmpty(txtEXPONENTN2.Text))
                {
                    if (Decimal.TryParse(txtEXPONENTN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtEXPONENTN2.Text);
                        _session.P_EXPONENT2 = ave2;
                    }
                    else
                    {
                        txtEXPONENTN2.Text = string.Empty;
                        _session.P_EXPONENT2 = null;
                    }
                }
                else
                {
                    _session.P_EXPONENT2 = null;
                }

                if (!string.IsNullOrEmpty(txtEXPONENTN3.Text))
                {
                    if (Decimal.TryParse(txtEXPONENTN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtEXPONENTN3.Text);
                        _session.P_EXPONENT3 = ave3;
                    }
                    else
                    {
                        txtEXPONENTN3.Text = string.Empty;
                        _session.P_EXPONENT3 = null;
                    }
                }
                else
                {
                    _session.P_EXPONENT3 = null;
                }

                if (!string.IsNullOrEmpty(txtEXPONENTN4.Text))
                {
                    if (Decimal.TryParse(txtEXPONENTN4.Text, out value))
                    {
                        //ave4 = decimal.Parse(txtEXPONENTN4.Text);
                    }
                    else
                    {
                        txtEXPONENTN4.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtEXPONENTN5.Text))
                {
                    if (Decimal.TryParse(txtEXPONENTN5.Text, out value))
                    {
                        //ave5 = decimal.Parse(txtEXPONENTN5.Text);
                    }
                    else
                    {
                        txtEXPONENTN5.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtEXPONENTN6.Text))
                {
                    if (Decimal.TryParse(txtEXPONENTN6.Text, out value))
                    {
                        //ave6 = decimal.Parse(txtEXPONENTN6.Text);
                    }
                    else
                    {
                        txtEXPONENTN6.Text = string.Empty;
                    }
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtEXPONENTAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtEXPONENTAve.Text = "0";
                    else
                        txtEXPONENTAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtEXPONENTSpecification.Text))
                {
                    string temp = txtEXPONENTSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtEXPONENTN1.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtEXPONENTN2.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtEXPONENTN3.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtEXPONENTN4.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtEXPONENTN5.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtEXPONENTN6.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtEXPONENTN1.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtEXPONENTN2.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtEXPONENTN3.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtEXPONENTN4.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtEXPONENTN5.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtEXPONENTN6.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtEXPONENTN1.Foreground = Brushes.Black;
                                    else
                                        txtEXPONENTN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtEXPONENTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtEXPONENTN2.Foreground = Brushes.Black;
                                    else
                                        txtEXPONENTN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtEXPONENTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtEXPONENTN3.Foreground = Brushes.Black;
                                    else
                                        txtEXPONENTN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtEXPONENTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtEXPONENTN4.Foreground = Brushes.Black;
                                    else
                                        txtEXPONENTN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtEXPONENTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtEXPONENTN5.Foreground = Brushes.Black;
                                    else
                                        txtEXPONENTN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtEXPONENTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtEXPONENTN6.Foreground = Brushes.Black;
                                    else
                                        txtEXPONENTN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtEXPONENTN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtEXPONENTN1.Foreground = Brushes.Black;
                            else
                                txtEXPONENTN1.Foreground = Brushes.Red;
                        }
                        else
                            txtEXPONENTN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtEXPONENTN2.Foreground = Brushes.Black;
                            else
                                txtEXPONENTN2.Foreground = Brushes.Red;
                        }
                        else
                            txtEXPONENTN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtEXPONENTN3.Foreground = Brushes.Black;
                            else
                                txtEXPONENTN3.Foreground = Brushes.Red;
                        }
                        else
                            txtEXPONENTN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtEXPONENTN4.Foreground = Brushes.Black;
                            else
                                txtEXPONENTN4.Foreground = Brushes.Red;
                        }
                        else
                            txtEXPONENTN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtEXPONENTN5.Foreground = Brushes.Black;
                            else
                                txtEXPONENTN5.Foreground = Brushes.Red;
                        }
                        else
                            txtEXPONENTN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtEXPONENTN6.Foreground = Brushes.Black;
                            else
                                txtEXPONENTN6.Foreground = Brushes.Red;
                        }
                        else
                            txtEXPONENTN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtEXPONENTN1.Foreground = Brushes.Black;
                    txtEXPONENTN2.Foreground = Brushes.Black;
                    txtEXPONENTN3.Foreground = Brushes.Black;
                    txtEXPONENTN4.Foreground = Brushes.Black;
                    txtEXPONENTN5.Foreground = Brushes.Black;
                    txtEXPONENTN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region DIMENSCHANGE_F_LostFocus
        private void DIMENSCHANGE_F_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtDIMENSCHANGE_FN1.Text))
                {
                    if (Decimal.TryParse(txtDIMENSCHANGE_FN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtDIMENSCHANGE_FN1.Text);
                        _session.P_DIMENSCHANGE_F1 = ave1;
                    }
                    else
                    {
                        txtDIMENSCHANGE_FN1.Text = string.Empty;
                        _session.P_DIMENSCHANGE_F1 = null;
                    }
                }
                else
                {
                    _session.P_DIMENSCHANGE_F1 = null;
                }

                if (!string.IsNullOrEmpty(txtDIMENSCHANGE_FN2.Text))
                {
                    if (Decimal.TryParse(txtDIMENSCHANGE_FN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtDIMENSCHANGE_FN2.Text);
                        _session.P_DIMENSCHANGE_F2 = ave2;
                    }
                    else
                    {
                        txtDIMENSCHANGE_FN2.Text = string.Empty;
                        _session.P_DIMENSCHANGE_F2 = null;
                    }
                }
                else
                {
                    _session.P_DIMENSCHANGE_F2 = null;
                }

                if (!string.IsNullOrEmpty(txtDIMENSCHANGE_FN3.Text))
                {
                    if (Decimal.TryParse(txtDIMENSCHANGE_FN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtDIMENSCHANGE_FN3.Text);
                        _session.P_DIMENSCHANGE_F3 = ave3;
                    }
                    else
                    {
                        txtDIMENSCHANGE_FN3.Text = string.Empty;
                        _session.P_DIMENSCHANGE_F3 = null;
                    }
                }
                else
                {
                    _session.P_DIMENSCHANGE_F3 = null;
                }

                if (!string.IsNullOrEmpty(txtDIMENSCHANGE_FN4.Text))
                {
                    if (Decimal.TryParse(txtDIMENSCHANGE_FN4.Text, out value))
                    {
                        //ave4 = decimal.Parse(txtDIMENSCHANGE_FN4.Text);
                    }
                    else
                    {
                        txtDIMENSCHANGE_FN4.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtDIMENSCHANGE_FN5.Text))
                {
                    if (Decimal.TryParse(txtDIMENSCHANGE_FN5.Text, out value))
                    {
                        //ave5 = decimal.Parse(txtDIMENSCHANGE_FN5.Text);
                    }
                    else
                    {
                        txtDIMENSCHANGE_FN5.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtDIMENSCHANGE_FN6.Text))
                {
                    if (Decimal.TryParse(txtDIMENSCHANGE_FN6.Text, out value))
                    {
                        //ave6 = decimal.Parse(txtDIMENSCHANGE_FN6.Text);
                    }
                    else
                    {
                        txtDIMENSCHANGE_FN6.Text = string.Empty;
                    }
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtDIMENSCHANGE_FAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtDIMENSCHANGE_FAve.Text = "0";
                    else
                        txtDIMENSCHANGE_FAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtDIMENSCHANGE_FSpecification.Text))
                {
                    string temp = txtDIMENSCHANGE_FSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtDIMENSCHANGE_FN1.Foreground = Brushes.Red;
                                    else
                                        txtDIMENSCHANGE_FN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtDIMENSCHANGE_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtDIMENSCHANGE_FN2.Foreground = Brushes.Red;
                                    else
                                        txtDIMENSCHANGE_FN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtDIMENSCHANGE_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtDIMENSCHANGE_FN3.Foreground = Brushes.Red;
                                    else
                                        txtDIMENSCHANGE_FN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtDIMENSCHANGE_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtDIMENSCHANGE_FN4.Foreground = Brushes.Red;
                                    else
                                        txtDIMENSCHANGE_FN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtDIMENSCHANGE_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtDIMENSCHANGE_FN5.Foreground = Brushes.Red;
                                    else
                                        txtDIMENSCHANGE_FN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtDIMENSCHANGE_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtDIMENSCHANGE_FN6.Foreground = Brushes.Red;
                                    else
                                        txtDIMENSCHANGE_FN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtDIMENSCHANGE_FN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtDIMENSCHANGE_FN1.Foreground = Brushes.Red;
                                    else
                                        txtDIMENSCHANGE_FN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtDIMENSCHANGE_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtDIMENSCHANGE_FN2.Foreground = Brushes.Red;
                                    else
                                        txtDIMENSCHANGE_FN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtDIMENSCHANGE_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtDIMENSCHANGE_FN3.Foreground = Brushes.Red;
                                    else
                                        txtDIMENSCHANGE_FN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtDIMENSCHANGE_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtDIMENSCHANGE_FN4.Foreground = Brushes.Red;
                                    else
                                        txtDIMENSCHANGE_FN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtDIMENSCHANGE_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtDIMENSCHANGE_FN5.Foreground = Brushes.Red;
                                    else
                                        txtDIMENSCHANGE_FN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtDIMENSCHANGE_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtDIMENSCHANGE_FN6.Foreground = Brushes.Red;
                                    else
                                        txtDIMENSCHANGE_FN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtDIMENSCHANGE_FN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtDIMENSCHANGE_FN1.Foreground = Brushes.Black;
                                    else
                                        txtDIMENSCHANGE_FN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtDIMENSCHANGE_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtDIMENSCHANGE_FN2.Foreground = Brushes.Black;
                                    else
                                        txtDIMENSCHANGE_FN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtDIMENSCHANGE_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtDIMENSCHANGE_FN3.Foreground = Brushes.Black;
                                    else
                                        txtDIMENSCHANGE_FN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtDIMENSCHANGE_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtDIMENSCHANGE_FN4.Foreground = Brushes.Black;
                                    else
                                        txtDIMENSCHANGE_FN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtDIMENSCHANGE_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtDIMENSCHANGE_FN5.Foreground = Brushes.Black;
                                    else
                                        txtDIMENSCHANGE_FN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtDIMENSCHANGE_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtDIMENSCHANGE_FN6.Foreground = Brushes.Black;
                                    else
                                        txtDIMENSCHANGE_FN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtDIMENSCHANGE_FN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtDIMENSCHANGE_FN1.Foreground = Brushes.Black;
                            else
                                txtDIMENSCHANGE_FN1.Foreground = Brushes.Red;
                        }
                        else
                            txtDIMENSCHANGE_FN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtDIMENSCHANGE_FN2.Foreground = Brushes.Black;
                            else
                                txtDIMENSCHANGE_FN2.Foreground = Brushes.Red;
                        }
                        else
                            txtDIMENSCHANGE_FN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtDIMENSCHANGE_FN3.Foreground = Brushes.Black;
                            else
                                txtDIMENSCHANGE_FN3.Foreground = Brushes.Red;
                        }
                        else
                            txtDIMENSCHANGE_FN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtDIMENSCHANGE_FN4.Foreground = Brushes.Black;
                            else
                                txtDIMENSCHANGE_FN4.Foreground = Brushes.Red;
                        }
                        else
                            txtDIMENSCHANGE_FN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtDIMENSCHANGE_FN5.Foreground = Brushes.Black;
                            else
                                txtDIMENSCHANGE_FN5.Foreground = Brushes.Red;
                        }
                        else
                            txtDIMENSCHANGE_FN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtDIMENSCHANGE_FN6.Foreground = Brushes.Black;
                            else
                                txtDIMENSCHANGE_FN6.Foreground = Brushes.Red;
                        }
                        else
                            txtDIMENSCHANGE_FN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtDIMENSCHANGE_FN1.Foreground = Brushes.Black;
                    txtDIMENSCHANGE_FN2.Foreground = Brushes.Black;
                    txtDIMENSCHANGE_FN3.Foreground = Brushes.Black;
                    txtDIMENSCHANGE_FN4.Foreground = Brushes.Black;
                    txtDIMENSCHANGE_FN5.Foreground = Brushes.Black;
                    txtDIMENSCHANGE_FN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region DIMENSCHANGE_W_LostFocus
        private void DIMENSCHANGE_W_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                int? i = 0;
                decimal value;


                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtDIMENSCHANGE_WN1.Text))
                {
                    if (Decimal.TryParse(txtDIMENSCHANGE_WN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtDIMENSCHANGE_WN1.Text);
                        _session.P_DIMENSCHANGE_W1 = ave1;
                    }
                    else
                    {
                        txtDIMENSCHANGE_WN1.Text = string.Empty;
                        _session.P_DIMENSCHANGE_W1 = null;
                    }
                }
                else
                {
                    _session.P_DIMENSCHANGE_W1 = null;
                }

                if (!string.IsNullOrEmpty(txtDIMENSCHANGE_WN2.Text))
                {
                    if (Decimal.TryParse(txtDIMENSCHANGE_WN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtDIMENSCHANGE_WN2.Text);
                        _session.P_DIMENSCHANGE_W2 = ave2;
                    }
                    else
                    {
                        txtDIMENSCHANGE_WN2.Text = string.Empty;
                        _session.P_DIMENSCHANGE_W2 = null;
                    }
                }
                else
                {
                    _session.P_DIMENSCHANGE_W2 = null;
                }

                if (!string.IsNullOrEmpty(txtDIMENSCHANGE_WN3.Text))
                {
                    if (Decimal.TryParse(txtDIMENSCHANGE_WN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtDIMENSCHANGE_WN3.Text);
                        _session.P_DIMENSCHANGE_W3 = ave3;
                    }
                    else
                    {
                        txtDIMENSCHANGE_WN3.Text = string.Empty;
                        _session.P_DIMENSCHANGE_W3 = null;
                    }
                }
                else
                {
                    _session.P_DIMENSCHANGE_W3 = null;
                }

                if (!string.IsNullOrEmpty(txtDIMENSCHANGE_WN4.Text))
                {
                    if (Decimal.TryParse(txtDIMENSCHANGE_WN4.Text, out value))
                    {
                        //ave4 = decimal.Parse(txtDIMENSCHANGE_WN4.Text);
                    }
                    else
                    {
                        txtDIMENSCHANGE_WN4.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtDIMENSCHANGE_WN5.Text))
                {
                    if (Decimal.TryParse(txtDIMENSCHANGE_WN5.Text, out value))
                    {
                        //ave5 = decimal.Parse(txtDIMENSCHANGE_WN5.Text);
                    }
                    else
                    {
                        txtDIMENSCHANGE_WN5.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtDIMENSCHANGE_WN6.Text))
                {
                    if (Decimal.TryParse(txtDIMENSCHANGE_WN6.Text, out value))
                    {
                        //ave6 = decimal.Parse(txtDIMENSCHANGE_WN6.Text);
                    }
                    else
                    {
                        txtDIMENSCHANGE_WN6.Text = string.Empty;
                    }
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtDIMENSCHANGE_WAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtDIMENSCHANGE_WAve.Text = "0";
                    else
                        txtDIMENSCHANGE_WAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtDIMENSCHANGE_WSpecification.Text))
                {
                    string temp = txtDIMENSCHANGE_WSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtDIMENSCHANGE_WN1.Foreground = Brushes.Red;
                                    else
                                        txtDIMENSCHANGE_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtDIMENSCHANGE_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtDIMENSCHANGE_WN2.Foreground = Brushes.Red;
                                    else
                                        txtDIMENSCHANGE_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtDIMENSCHANGE_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtDIMENSCHANGE_WN3.Foreground = Brushes.Red;
                                    else
                                        txtDIMENSCHANGE_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtDIMENSCHANGE_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtDIMENSCHANGE_WN4.Foreground = Brushes.Red;
                                    else
                                        txtDIMENSCHANGE_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtDIMENSCHANGE_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtDIMENSCHANGE_WN5.Foreground = Brushes.Red;
                                    else
                                        txtDIMENSCHANGE_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtDIMENSCHANGE_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtDIMENSCHANGE_WN6.Foreground = Brushes.Red;
                                    else
                                        txtDIMENSCHANGE_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtDIMENSCHANGE_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtDIMENSCHANGE_WN1.Foreground = Brushes.Red;
                                    else
                                        txtDIMENSCHANGE_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtDIMENSCHANGE_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtDIMENSCHANGE_WN2.Foreground = Brushes.Red;
                                    else
                                        txtDIMENSCHANGE_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtDIMENSCHANGE_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtDIMENSCHANGE_WN3.Foreground = Brushes.Red;
                                    else
                                        txtDIMENSCHANGE_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtDIMENSCHANGE_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtDIMENSCHANGE_WN4.Foreground = Brushes.Red;
                                    else
                                        txtDIMENSCHANGE_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtDIMENSCHANGE_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtDIMENSCHANGE_WN5.Foreground = Brushes.Red;
                                    else
                                        txtDIMENSCHANGE_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtDIMENSCHANGE_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtDIMENSCHANGE_WN6.Foreground = Brushes.Red;
                                    else
                                        txtDIMENSCHANGE_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtDIMENSCHANGE_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtDIMENSCHANGE_WN1.Foreground = Brushes.Black;
                                    else
                                        txtDIMENSCHANGE_WN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtDIMENSCHANGE_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtDIMENSCHANGE_WN2.Foreground = Brushes.Black;
                                    else
                                        txtDIMENSCHANGE_WN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtDIMENSCHANGE_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtDIMENSCHANGE_WN3.Foreground = Brushes.Black;
                                    else
                                        txtDIMENSCHANGE_WN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtDIMENSCHANGE_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtDIMENSCHANGE_WN4.Foreground = Brushes.Black;
                                    else
                                        txtDIMENSCHANGE_WN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtDIMENSCHANGE_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtDIMENSCHANGE_WN5.Foreground = Brushes.Black;
                                    else
                                        txtDIMENSCHANGE_WN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtDIMENSCHANGE_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtDIMENSCHANGE_WN6.Foreground = Brushes.Black;
                                    else
                                        txtDIMENSCHANGE_WN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtDIMENSCHANGE_WN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtDIMENSCHANGE_WN1.Foreground = Brushes.Black;
                            else
                                txtDIMENSCHANGE_WN1.Foreground = Brushes.Red;
                        }
                        else
                            txtDIMENSCHANGE_WN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtDIMENSCHANGE_WN2.Foreground = Brushes.Black;
                            else
                                txtDIMENSCHANGE_WN2.Foreground = Brushes.Red;
                        }
                        else
                            txtDIMENSCHANGE_WN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtDIMENSCHANGE_WN3.Foreground = Brushes.Black;
                            else
                                txtDIMENSCHANGE_WN3.Foreground = Brushes.Red;
                        }
                        else
                            txtDIMENSCHANGE_WN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtDIMENSCHANGE_WN4.Foreground = Brushes.Black;
                            else
                                txtDIMENSCHANGE_WN4.Foreground = Brushes.Red;
                        }
                        else
                            txtDIMENSCHANGE_WN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtDIMENSCHANGE_WN5.Foreground = Brushes.Black;
                            else
                                txtDIMENSCHANGE_WN5.Foreground = Brushes.Red;
                        }
                        else
                            txtDIMENSCHANGE_WN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtDIMENSCHANGE_WN6.Foreground = Brushes.Black;
                            else
                                txtDIMENSCHANGE_WN6.Foreground = Brushes.Red;
                        }
                        else
                            txtDIMENSCHANGE_WN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtDIMENSCHANGE_WN1.Foreground = Brushes.Black;
                    txtDIMENSCHANGE_WN2.Foreground = Brushes.Black;
                    txtDIMENSCHANGE_WN3.Foreground = Brushes.Black;
                    txtDIMENSCHANGE_WN4.Foreground = Brushes.Black;
                    txtDIMENSCHANGE_WN5.Foreground = Brushes.Black;
                    txtDIMENSCHANGE_WN6.Foreground = Brushes.Black;
                }

                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region FLEXABRASION_F_LostFocus
        private void FLEXABRASION_F_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtFLEXABRASION_FN1.Text))
                {
                    if (Decimal.TryParse(txtFLEXABRASION_FN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtFLEXABRASION_FN1.Text);
                        _session.P_FLEXABRASION_F1 = ave1;
                    }
                    else
                    {
                        txtFLEXABRASION_FN1.Text = string.Empty;
                        _session.P_FLEXABRASION_F1 = null;
                    }
                }
                else
                {
                    _session.P_FLEXABRASION_F1 = null;
                }

                if (!string.IsNullOrEmpty(txtFLEXABRASION_FN2.Text))
                {
                    if (Decimal.TryParse(txtFLEXABRASION_FN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtFLEXABRASION_FN2.Text);
                        _session.P_FLEXABRASION_F2 = ave2;
                    }
                    else
                    {
                        txtFLEXABRASION_FN2.Text = string.Empty;
                        _session.P_FLEXABRASION_F2 = null;
                    }
                }
                else
                {
                    _session.P_FLEXABRASION_F2 = null;
                }

                if (!string.IsNullOrEmpty(txtFLEXABRASION_FN3.Text))
                {
                    if (Decimal.TryParse(txtFLEXABRASION_FN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtFLEXABRASION_FN3.Text);
                        _session.P_FLEXABRASION_F3 = ave3;
                    }
                    else
                    {
                        txtFLEXABRASION_FN3.Text = string.Empty;
                        _session.P_FLEXABRASION_F3 = null;
                    }
                }
                else
                {
                    _session.P_FLEXABRASION_F3 = null;
                }

                if (!string.IsNullOrEmpty(txtFLEXABRASION_FN4.Text))
                {
                    if (Decimal.TryParse(txtFLEXABRASION_FN4.Text, out value))
                    {
                        //ave4 = decimal.Parse(txtFLEXABRASION_FN4.Text);
                    }
                    else
                    {
                        txtFLEXABRASION_FN4.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtFLEXABRASION_FN5.Text))
                {
                    if (Decimal.TryParse(txtFLEXABRASION_FN5.Text, out value))
                    {
                        //ave5 = decimal.Parse(txtFLEXABRASION_FN5.Text);
                    }
                    else
                    {
                        txtFLEXABRASION_FN5.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtFLEXABRASION_FN6.Text))
                {
                    if (Decimal.TryParse(txtFLEXABRASION_FN6.Text, out value))
                    {
                        //ave6 = decimal.Parse(txtFLEXABRASION_FN6.Text);
                    }
                    else
                    {
                        txtFLEXABRASION_FN6.Text = string.Empty;
                    }
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;
                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtFLEXABRASION_FAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtFLEXABRASION_FAve.Text = "0";
                    else
                        txtFLEXABRASION_FAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtFLEXABRASION_FSpecification.Text))
                {
                    string temp = txtFLEXABRASION_FSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtFLEXABRASION_FN1.Foreground = Brushes.Red;
                                    else
                                        txtFLEXABRASION_FN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEXABRASION_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtFLEXABRASION_FN2.Foreground = Brushes.Red;
                                    else
                                        txtFLEXABRASION_FN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEXABRASION_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtFLEXABRASION_FN3.Foreground = Brushes.Red;
                                    else
                                        txtFLEXABRASION_FN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEXABRASION_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtFLEXABRASION_FN4.Foreground = Brushes.Red;
                                    else
                                        txtFLEXABRASION_FN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEXABRASION_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtFLEXABRASION_FN5.Foreground = Brushes.Red;
                                    else
                                        txtFLEXABRASION_FN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEXABRASION_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtFLEXABRASION_FN6.Foreground = Brushes.Red;
                                    else
                                        txtFLEXABRASION_FN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEXABRASION_FN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtFLEXABRASION_FN1.Foreground = Brushes.Red;
                                    else
                                        txtFLEXABRASION_FN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEXABRASION_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtFLEXABRASION_FN2.Foreground = Brushes.Red;
                                    else
                                        txtFLEXABRASION_FN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEXABRASION_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtFLEXABRASION_FN3.Foreground = Brushes.Red;
                                    else
                                        txtFLEXABRASION_FN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEXABRASION_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtFLEXABRASION_FN4.Foreground = Brushes.Red;
                                    else
                                        txtFLEXABRASION_FN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEXABRASION_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtFLEXABRASION_FN5.Foreground = Brushes.Red;
                                    else
                                        txtFLEXABRASION_FN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEXABRASION_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtFLEXABRASION_FN6.Foreground = Brushes.Red;
                                    else
                                        txtFLEXABRASION_FN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEXABRASION_FN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtFLEXABRASION_FN1.Foreground = Brushes.Black;
                                    else
                                        txtFLEXABRASION_FN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLEXABRASION_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtFLEXABRASION_FN2.Foreground = Brushes.Black;
                                    else
                                        txtFLEXABRASION_FN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLEXABRASION_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtFLEXABRASION_FN3.Foreground = Brushes.Black;
                                    else
                                        txtFLEXABRASION_FN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLEXABRASION_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtFLEXABRASION_FN4.Foreground = Brushes.Black;
                                    else
                                        txtFLEXABRASION_FN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLEXABRASION_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtFLEXABRASION_FN5.Foreground = Brushes.Black;
                                    else
                                        txtFLEXABRASION_FN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLEXABRASION_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtFLEXABRASION_FN6.Foreground = Brushes.Black;
                                    else
                                        txtFLEXABRASION_FN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLEXABRASION_FN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtFLEXABRASION_FN1.Foreground = Brushes.Black;
                            else
                                txtFLEXABRASION_FN1.Foreground = Brushes.Red;
                        }
                        else
                            txtFLEXABRASION_FN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtFLEXABRASION_FN2.Foreground = Brushes.Black;
                            else
                                txtFLEXABRASION_FN2.Foreground = Brushes.Red;
                        }
                        else
                            txtFLEXABRASION_FN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtFLEXABRASION_FN3.Foreground = Brushes.Black;
                            else
                                txtFLEXABRASION_FN3.Foreground = Brushes.Red;
                        }
                        else
                            txtFLEXABRASION_FN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtFLEXABRASION_FN4.Foreground = Brushes.Black;
                            else
                                txtFLEXABRASION_FN4.Foreground = Brushes.Red;
                        }
                        else
                            txtFLEXABRASION_FN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtFLEXABRASION_FN5.Foreground = Brushes.Black;
                            else
                                txtFLEXABRASION_FN5.Foreground = Brushes.Red;
                        }
                        else
                            txtFLEXABRASION_FN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtFLEXABRASION_FN6.Foreground = Brushes.Black;
                            else
                                txtFLEXABRASION_FN6.Foreground = Brushes.Red;
                        }
                        else
                            txtFLEXABRASION_FN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtFLEXABRASION_FN1.Foreground = Brushes.Black;
                    txtFLEXABRASION_FN2.Foreground = Brushes.Black;
                    txtFLEXABRASION_FN3.Foreground = Brushes.Black;
                    txtFLEXABRASION_FN4.Foreground = Brushes.Black;
                    txtFLEXABRASION_FN5.Foreground = Brushes.Black;
                    txtFLEXABRASION_FN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region FLEXABRASION_W_LostFocus
        private void FLEXABRASION_W_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtFLEXABRASION_WN1.Text))
                {
                    if (Decimal.TryParse(txtFLEXABRASION_WN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtFLEXABRASION_WN1.Text);
                        _session.P_FLEXABRASION_W1 = ave1;
                    }
                    else
                    {
                        txtFLEXABRASION_WN1.Text = string.Empty;
                        _session.P_FLEXABRASION_W1 = null;
                    }
                }
                else
                {
                    _session.P_FLEXABRASION_W1 = null;
                }

                if (!string.IsNullOrEmpty(txtFLEXABRASION_WN2.Text))
                {
                    if (Decimal.TryParse(txtFLEXABRASION_WN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtFLEXABRASION_WN2.Text);
                        _session.P_FLEXABRASION_W2 = ave2;
                    }
                    else
                    {
                        txtFLEXABRASION_WN2.Text = string.Empty;
                        _session.P_FLEXABRASION_W2 = null;
                    }
                }
                else
                {
                    _session.P_FLEXABRASION_W2 = null;
                }

                if (!string.IsNullOrEmpty(txtFLEXABRASION_WN3.Text))
                {
                    if (Decimal.TryParse(txtFLEXABRASION_WN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtFLEXABRASION_WN3.Text);
                        _session.P_FLEXABRASION_W3 = ave3;
                    }
                    else
                    {
                        txtFLEXABRASION_WN3.Text = string.Empty;
                        _session.P_FLEXABRASION_W3 = null;
                    }
                }
                else
                {
                    _session.P_FLEXABRASION_W3 = null;
                }

                if (!string.IsNullOrEmpty(txtFLEXABRASION_WN4.Text))
                {
                    if (Decimal.TryParse(txtFLEXABRASION_WN4.Text, out value))
                    {
                        //ave4 = decimal.Parse(txtFLEXABRASION_WN4.Text);
                    }
                    else
                    {
                        txtFLEXABRASION_WN4.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtFLEXABRASION_WN5.Text))
                {
                    if (Decimal.TryParse(txtFLEXABRASION_WN5.Text, out value))
                    {
                        //ave5 = decimal.Parse(txtFLEXABRASION_WN5.Text);
                    }
                    else
                    {
                        txtFLEXABRASION_WN5.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtFLEXABRASION_WN6.Text))
                {
                    if (Decimal.TryParse(txtFLEXABRASION_WN6.Text, out value))
                    {
                        //ave6 = decimal.Parse(txtFLEXABRASION_WN6.Text);
                    }
                    else
                    {
                        txtFLEXABRASION_WN6.Text = string.Empty;
                    }
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;
                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtFLEXABRASION_WAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtFLEXABRASION_WAve.Text = "0";
                    else
                        txtFLEXABRASION_WAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtFLEXABRASION_WSpecification.Text))
                {
                    string temp = txtFLEXABRASION_WSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtFLEXABRASION_WN1.Foreground = Brushes.Red;
                                    else
                                        txtFLEXABRASION_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEXABRASION_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtFLEXABRASION_WN2.Foreground = Brushes.Red;
                                    else
                                        txtFLEXABRASION_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEXABRASION_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtFLEXABRASION_WN3.Foreground = Brushes.Red;
                                    else
                                        txtFLEXABRASION_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEXABRASION_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtFLEXABRASION_WN4.Foreground = Brushes.Red;
                                    else
                                        txtFLEXABRASION_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEXABRASION_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtFLEXABRASION_WN5.Foreground = Brushes.Red;
                                    else
                                        txtFLEXABRASION_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEXABRASION_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtFLEXABRASION_WN6.Foreground = Brushes.Red;
                                    else
                                        txtFLEXABRASION_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEXABRASION_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtFLEXABRASION_WN1.Foreground = Brushes.Red;
                                    else
                                        txtFLEXABRASION_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEXABRASION_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtFLEXABRASION_WN2.Foreground = Brushes.Red;
                                    else
                                        txtFLEXABRASION_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEXABRASION_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtFLEXABRASION_WN3.Foreground = Brushes.Red;
                                    else
                                        txtFLEXABRASION_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEXABRASION_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtFLEXABRASION_WN4.Foreground = Brushes.Red;
                                    else
                                        txtFLEXABRASION_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEXABRASION_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtFLEXABRASION_WN5.Foreground = Brushes.Red;
                                    else
                                        txtFLEXABRASION_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEXABRASION_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtFLEXABRASION_WN6.Foreground = Brushes.Red;
                                    else
                                        txtFLEXABRASION_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEXABRASION_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtFLEXABRASION_WN1.Foreground = Brushes.Black;
                                    else
                                        txtFLEXABRASION_WN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLEXABRASION_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtFLEXABRASION_WN2.Foreground = Brushes.Black;
                                    else
                                        txtFLEXABRASION_WN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLEXABRASION_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtFLEXABRASION_WN3.Foreground = Brushes.Black;
                                    else
                                        txtFLEXABRASION_WN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLEXABRASION_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtFLEXABRASION_WN4.Foreground = Brushes.Black;
                                    else
                                        txtFLEXABRASION_WN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLEXABRASION_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtFLEXABRASION_WN5.Foreground = Brushes.Black;
                                    else
                                        txtFLEXABRASION_WN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLEXABRASION_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtFLEXABRASION_WN6.Foreground = Brushes.Black;
                                    else
                                        txtFLEXABRASION_WN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLEXABRASION_WN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtFLEXABRASION_WN1.Foreground = Brushes.Black;
                            else
                                txtFLEXABRASION_WN1.Foreground = Brushes.Red;
                        }
                        else
                            txtFLEXABRASION_WN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtFLEXABRASION_WN2.Foreground = Brushes.Black;
                            else
                                txtFLEXABRASION_WN2.Foreground = Brushes.Red;
                        }
                        else
                            txtFLEXABRASION_WN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtFLEXABRASION_WN3.Foreground = Brushes.Black;
                            else
                                txtFLEXABRASION_WN3.Foreground = Brushes.Red;
                        }
                        else
                            txtFLEXABRASION_WN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtFLEXABRASION_WN4.Foreground = Brushes.Black;
                            else
                                txtFLEXABRASION_WN4.Foreground = Brushes.Red;
                        }
                        else
                            txtFLEXABRASION_WN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtFLEXABRASION_WN5.Foreground = Brushes.Black;
                            else
                                txtFLEXABRASION_WN5.Foreground = Brushes.Red;
                        }
                        else
                            txtFLEXABRASION_WN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtFLEXABRASION_WN6.Foreground = Brushes.Black;
                            else
                                txtFLEXABRASION_WN6.Foreground = Brushes.Red;
                        }
                        else
                            txtFLEXABRASION_WN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtFLEXABRASION_WN1.Foreground = Brushes.Black;
                    txtFLEXABRASION_WN2.Foreground = Brushes.Black;
                    txtFLEXABRASION_WN3.Foreground = Brushes.Black;
                    txtFLEXABRASION_WN4.Foreground = Brushes.Black;
                    txtFLEXABRASION_WN5.Foreground = Brushes.Black;
                    txtFLEXABRASION_WN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        //-- LostFocus --//
        #region MAXFORCE_F_LostFocus
        private void MAXFORCE_F_LostFocus(object sender, RoutedEventArgs e)
        {
            MAXFORCE_F();
        }
        #endregion

        #region MAXFORCE_W_LostFocus
        private void MAXFORCE_W_LostFocus(object sender, RoutedEventArgs e)
        {
            MAXFORCE_W();
        }
        #endregion

        #region ELONGATIONFORCE_F_LostFocus
        private void ELONGATIONFORCE_F_LostFocus(object sender, RoutedEventArgs e)
        {
            ELONGATIONFORCE_F();
        }
        #endregion

        #region ELONGATIONFORCE_W_LostFocus
        private void ELONGATIONFORCE_W_LostFocus(object sender, RoutedEventArgs e)
        {
            ELONGATIONFORCE_W();
        }
        #endregion

        #region EDGECOMB_F_LostFocus
        private void EDGECOMB_F_LostFocus(object sender, RoutedEventArgs e)
        {
            EDGECOMB_F();
        }
        #endregion

        #region EDGECOMB_W_LostFocus
        private void EDGECOMB_W_LostFocus(object sender, RoutedEventArgs e)
        {
            EDGECOMB_W();
        }
        #endregion

        #region TEAR_F_LostFocus
        private void TEAR_F_LostFocus(object sender, RoutedEventArgs e)
        {
            TEAR_F();
        }
        #endregion

        #region TEAR_W_LostFocus
        private void TEAR_W_LostFocus(object sender, RoutedEventArgs e)
        {
            TEAR_W();
        }
        #endregion

        // ปรับ 10/06/18
        #region MAXFORCE_F
        private void MAXFORCE_F()
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtMAXFORCE_FN1.Text))
                {
                    if (Decimal.TryParse(txtMAXFORCE_FN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtMAXFORCE_FN1.Text);
                        _session.P_MAXFORCE_F1 = ave1;
                    }
                    else
                    {
                        txtMAXFORCE_FN1.Text = string.Empty;
                        _session.P_MAXFORCE_F1 = null;
                        ave1 = null;
                    }
                }
                else
                {
                    _session.P_MAXFORCE_F1 = null;
                    ave1 = null;
                }

                if (!string.IsNullOrEmpty(txtMAXFORCE_FN2.Text))
                {
                    if (Decimal.TryParse(txtMAXFORCE_FN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtMAXFORCE_FN2.Text);
                        _session.P_MAXFORCE_F2 = ave2;
                    }
                    else
                    {
                        txtMAXFORCE_FN2.Text = string.Empty;
                        _session.P_MAXFORCE_F2 = null;
                        ave2 = null;
                    }
                }
                else
                {
                    _session.P_MAXFORCE_F2 = null;
                    ave2 = null;
                }

                if (!string.IsNullOrEmpty(txtMAXFORCE_FN3.Text))
                {
                    if (Decimal.TryParse(txtMAXFORCE_FN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtMAXFORCE_FN3.Text);
                        _session.P_MAXFORCE_F3 = ave3;
                    }
                    else
                    {
                        txtMAXFORCE_FN3.Text = string.Empty;
                        _session.P_MAXFORCE_F3 = null;
                        ave3 = null;
                    }
                }
                else
                {
                    _session.P_MAXFORCE_F3 = null;
                    ave3 = null;
                }

                if (!string.IsNullOrEmpty(txtMAXFORCE_FN4.Text))
                {
                    if (Decimal.TryParse(txtMAXFORCE_FN4.Text, out value))
                    {
                        ave4 = decimal.Parse(txtMAXFORCE_FN4.Text);
                        _session.P_MAXFORCE_F4 = ave4;
                    }
                    else
                    {
                        txtMAXFORCE_FN4.Text = string.Empty;
                        _session.P_MAXFORCE_F4 = null;
                        ave4 = null;
                    }
                }
                else
                {
                    _session.P_MAXFORCE_F4 = null;
                    ave4 = null;
                }

                if (!string.IsNullOrEmpty(txtMAXFORCE_FN5.Text))
                {
                    if (Decimal.TryParse(txtMAXFORCE_FN5.Text, out value))
                    {
                        ave5 = decimal.Parse(txtMAXFORCE_FN5.Text);
                        _session.P_MAXFORCE_F5 = ave5;
                    }
                    else
                    {
                        txtMAXFORCE_FN5.Text = string.Empty;
                        _session.P_MAXFORCE_F5 = null;
                        ave5 = null;
                    }
                }
                else
                {
                    _session.P_MAXFORCE_F5 = null;
                    ave5 = null;
                }

                if (!string.IsNullOrEmpty(txtMAXFORCE_FN6.Text))
                {
                    if (Decimal.TryParse(txtMAXFORCE_FN6.Text, out value))
                    {
                        ave6 = decimal.Parse(txtMAXFORCE_FN6.Text);
                        _session.P_MAXFORCE_F6 = ave6;
                    }
                    else
                    {
                        txtMAXFORCE_FN6.Text = string.Empty;
                        _session.P_MAXFORCE_F6 = null;
                        ave6 = null;
                    }
                }
                else
                {
                    _session.P_MAXFORCE_F6 = null;
                    ave6 = null;
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;
                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtMAXFORCE_FAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtMAXFORCE_FAve.Text = "0";
                    else
                        txtMAXFORCE_FAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtMAXFORCE_FSpecification.Text))
                {
                    string temp = txtMAXFORCE_FSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtMAXFORCE_FN1.Foreground = Brushes.Red;
                                    else
                                        txtMAXFORCE_FN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtMAXFORCE_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtMAXFORCE_FN2.Foreground = Brushes.Red;
                                    else
                                        txtMAXFORCE_FN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtMAXFORCE_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtMAXFORCE_FN3.Foreground = Brushes.Red;
                                    else
                                        txtMAXFORCE_FN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtMAXFORCE_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtMAXFORCE_FN4.Foreground = Brushes.Red;
                                    else
                                        txtMAXFORCE_FN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtMAXFORCE_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtMAXFORCE_FN5.Foreground = Brushes.Red;
                                    else
                                        txtMAXFORCE_FN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtMAXFORCE_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtMAXFORCE_FN6.Foreground = Brushes.Red;
                                    else
                                        txtMAXFORCE_FN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtMAXFORCE_FN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtMAXFORCE_FN1.Foreground = Brushes.Red;
                                    else
                                        txtMAXFORCE_FN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtMAXFORCE_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtMAXFORCE_FN2.Foreground = Brushes.Red;
                                    else
                                        txtMAXFORCE_FN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtMAXFORCE_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtMAXFORCE_FN3.Foreground = Brushes.Red;
                                    else
                                        txtMAXFORCE_FN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtMAXFORCE_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtMAXFORCE_FN4.Foreground = Brushes.Red;
                                    else
                                        txtMAXFORCE_FN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtMAXFORCE_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtMAXFORCE_FN5.Foreground = Brushes.Red;
                                    else
                                        txtMAXFORCE_FN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtMAXFORCE_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtMAXFORCE_FN6.Foreground = Brushes.Red;
                                    else
                                        txtMAXFORCE_FN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtMAXFORCE_FN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtMAXFORCE_FN1.Foreground = Brushes.Black;
                                    else
                                        txtMAXFORCE_FN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtMAXFORCE_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtMAXFORCE_FN2.Foreground = Brushes.Black;
                                    else
                                        txtMAXFORCE_FN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtMAXFORCE_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtMAXFORCE_FN3.Foreground = Brushes.Black;
                                    else
                                        txtMAXFORCE_FN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtMAXFORCE_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtMAXFORCE_FN4.Foreground = Brushes.Black;
                                    else
                                        txtMAXFORCE_FN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtMAXFORCE_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtMAXFORCE_FN5.Foreground = Brushes.Black;
                                    else
                                        txtMAXFORCE_FN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtMAXFORCE_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtMAXFORCE_FN6.Foreground = Brushes.Black;
                                    else
                                        txtMAXFORCE_FN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtMAXFORCE_FN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtMAXFORCE_FN1.Foreground = Brushes.Black;
                            else
                                txtMAXFORCE_FN1.Foreground = Brushes.Red;
                        }
                        else
                            txtMAXFORCE_FN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtMAXFORCE_FN2.Foreground = Brushes.Black;
                            else
                                txtMAXFORCE_FN2.Foreground = Brushes.Red;
                        }
                        else
                            txtMAXFORCE_FN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtMAXFORCE_FN3.Foreground = Brushes.Black;
                            else
                                txtMAXFORCE_FN3.Foreground = Brushes.Red;
                        }
                        else
                            txtMAXFORCE_FN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtMAXFORCE_FN4.Foreground = Brushes.Black;
                            else
                                txtMAXFORCE_FN4.Foreground = Brushes.Red;
                        }
                        else
                            txtMAXFORCE_FN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtMAXFORCE_FN5.Foreground = Brushes.Black;
                            else
                                txtMAXFORCE_FN5.Foreground = Brushes.Red;
                        }
                        else
                            txtMAXFORCE_FN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtMAXFORCE_FN6.Foreground = Brushes.Black;
                            else
                                txtMAXFORCE_FN6.Foreground = Brushes.Red;
                        }
                        else
                            txtMAXFORCE_FN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtMAXFORCE_FN1.Foreground = Brushes.Black;
                    txtMAXFORCE_FN2.Foreground = Brushes.Black;
                    txtMAXFORCE_FN3.Foreground = Brushes.Black;
                    txtMAXFORCE_FN4.Foreground = Brushes.Black;
                    txtMAXFORCE_FN5.Foreground = Brushes.Black;
                    txtMAXFORCE_FN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region MAXFORCE_W
        private void MAXFORCE_W()
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtMAXFORCE_WN1.Text))
                {
                    if (Decimal.TryParse(txtMAXFORCE_WN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtMAXFORCE_WN1.Text);
                        _session.P_MAXFORCE_W1 = ave1;
                    }
                    else
                    {
                        txtMAXFORCE_WN1.Text = string.Empty;
                        _session.P_MAXFORCE_W1 = null;
                    }
                }
                else
                {
                    _session.P_MAXFORCE_W1 = null;
                }

                if (!string.IsNullOrEmpty(txtMAXFORCE_WN2.Text))
                {
                    if (Decimal.TryParse(txtMAXFORCE_WN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtMAXFORCE_WN2.Text);
                        _session.P_MAXFORCE_W2 = ave2;
                    }
                    else
                    {
                        txtMAXFORCE_WN2.Text = string.Empty;
                        _session.P_MAXFORCE_W2 = null;
                    }
                }
                else
                {
                    _session.P_MAXFORCE_W2 = null;
                }

                if (!string.IsNullOrEmpty(txtMAXFORCE_WN3.Text))
                {
                    if (Decimal.TryParse(txtMAXFORCE_WN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtMAXFORCE_WN3.Text);
                        _session.P_MAXFORCE_W3 = ave3;
                    }
                    else
                    {
                        txtMAXFORCE_WN3.Text = string.Empty;
                        _session.P_MAXFORCE_W3 = null;
                    }
                }
                else
                {
                    _session.P_MAXFORCE_W3 = null;
                }

                if (!string.IsNullOrEmpty(txtMAXFORCE_WN4.Text))
                {
                    if (Decimal.TryParse(txtMAXFORCE_WN4.Text, out value))
                    {
                        ave4 = decimal.Parse(txtMAXFORCE_WN4.Text);
                        _session.P_MAXFORCE_W4 = ave4;
                    }
                    else
                    {
                        txtMAXFORCE_WN4.Text = string.Empty;
                        _session.P_MAXFORCE_W4 = null;
                    }
                }
                else
                {
                    _session.P_MAXFORCE_W4 = null;
                }

                if (!string.IsNullOrEmpty(txtMAXFORCE_WN5.Text))
                {
                    if (Decimal.TryParse(txtMAXFORCE_WN5.Text, out value))
                    {
                        ave5 = decimal.Parse(txtMAXFORCE_WN5.Text);
                        _session.P_MAXFORCE_W5 = ave5;
                    }
                    else
                    {
                        txtMAXFORCE_WN5.Text = string.Empty;
                        _session.P_MAXFORCE_W5 = null;
                    }
                }
                else
                {
                    _session.P_MAXFORCE_W5 = null;
                }

                if (!string.IsNullOrEmpty(txtMAXFORCE_WN6.Text))
                {
                    if (Decimal.TryParse(txtMAXFORCE_WN6.Text, out value))
                    {
                        ave6 = decimal.Parse(txtMAXFORCE_WN6.Text);
                        _session.P_MAXFORCE_W6 = ave6;
                    }
                    else
                    {
                        txtMAXFORCE_WN6.Text = string.Empty;
                        _session.P_MAXFORCE_W6 = null;
                    }
                }
                else
                {
                    _session.P_MAXFORCE_W6 = null;
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                  else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                  else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                  else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                  else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                  else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtMAXFORCE_WAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtMAXFORCE_WAve.Text = "0";
                    else
                        txtMAXFORCE_WAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtMAXFORCE_WSpecification.Text))
                {
                    string temp = txtMAXFORCE_WSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtMAXFORCE_WN1.Foreground = Brushes.Red;
                                    else
                                        txtMAXFORCE_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtMAXFORCE_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtMAXFORCE_WN2.Foreground = Brushes.Red;
                                    else
                                        txtMAXFORCE_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtMAXFORCE_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtMAXFORCE_WN3.Foreground = Brushes.Red;
                                    else
                                        txtMAXFORCE_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtMAXFORCE_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtMAXFORCE_WN4.Foreground = Brushes.Red;
                                    else
                                        txtMAXFORCE_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtMAXFORCE_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtMAXFORCE_WN5.Foreground = Brushes.Red;
                                    else
                                        txtMAXFORCE_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtMAXFORCE_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtMAXFORCE_WN6.Foreground = Brushes.Red;
                                    else
                                        txtMAXFORCE_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtMAXFORCE_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtMAXFORCE_WN1.Foreground = Brushes.Red;
                                    else
                                        txtMAXFORCE_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtMAXFORCE_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtMAXFORCE_WN2.Foreground = Brushes.Red;
                                    else
                                        txtMAXFORCE_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtMAXFORCE_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtMAXFORCE_WN3.Foreground = Brushes.Red;
                                    else
                                        txtMAXFORCE_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtMAXFORCE_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtMAXFORCE_WN4.Foreground = Brushes.Red;
                                    else
                                        txtMAXFORCE_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtMAXFORCE_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtMAXFORCE_WN5.Foreground = Brushes.Red;
                                    else
                                        txtMAXFORCE_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtMAXFORCE_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtMAXFORCE_WN6.Foreground = Brushes.Red;
                                    else
                                        txtMAXFORCE_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtMAXFORCE_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtMAXFORCE_WN1.Foreground = Brushes.Black;
                                    else
                                        txtMAXFORCE_WN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtMAXFORCE_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtMAXFORCE_WN2.Foreground = Brushes.Black;
                                    else
                                        txtMAXFORCE_WN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtMAXFORCE_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtMAXFORCE_WN3.Foreground = Brushes.Black;
                                    else
                                        txtMAXFORCE_WN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtMAXFORCE_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtMAXFORCE_WN4.Foreground = Brushes.Black;
                                    else
                                        txtMAXFORCE_WN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtMAXFORCE_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtMAXFORCE_WN5.Foreground = Brushes.Black;
                                    else
                                        txtMAXFORCE_WN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtMAXFORCE_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtMAXFORCE_WN6.Foreground = Brushes.Black;
                                    else
                                        txtMAXFORCE_WN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtMAXFORCE_WN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtMAXFORCE_WN1.Foreground = Brushes.Black;
                            else
                                txtMAXFORCE_WN1.Foreground = Brushes.Red;
                        }
                        else
                            txtMAXFORCE_WN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtMAXFORCE_WN2.Foreground = Brushes.Black;
                            else
                                txtMAXFORCE_WN2.Foreground = Brushes.Red;
                        }
                        else
                            txtMAXFORCE_WN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtMAXFORCE_WN3.Foreground = Brushes.Black;
                            else
                                txtMAXFORCE_WN3.Foreground = Brushes.Red;
                        }
                        else
                            txtMAXFORCE_WN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtMAXFORCE_WN4.Foreground = Brushes.Black;
                            else
                                txtMAXFORCE_WN4.Foreground = Brushes.Red;
                        }
                        else
                            txtMAXFORCE_WN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtMAXFORCE_WN5.Foreground = Brushes.Black;
                            else
                                txtMAXFORCE_WN5.Foreground = Brushes.Red;
                        }
                        else
                            txtMAXFORCE_WN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtMAXFORCE_WN6.Foreground = Brushes.Black;
                            else
                                txtMAXFORCE_WN6.Foreground = Brushes.Red;
                        }
                        else
                            txtMAXFORCE_WN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtMAXFORCE_WN1.Foreground = Brushes.Black;
                    txtMAXFORCE_WN2.Foreground = Brushes.Black;
                    txtMAXFORCE_WN3.Foreground = Brushes.Black;
                    txtMAXFORCE_WN4.Foreground = Brushes.Black;
                    txtMAXFORCE_WN5.Foreground = Brushes.Black;
                    txtMAXFORCE_WN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region ELONGATIONFORCE_F
        private void ELONGATIONFORCE_F()
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtELONGATIONFORCE_FN1.Text))
                {
                    if (Decimal.TryParse(txtELONGATIONFORCE_FN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtELONGATIONFORCE_FN1.Text);
                        _session.P_ELOGATION_F1 = ave1;
                    }
                    else
                    {
                        txtELONGATIONFORCE_FN1.Text = string.Empty;
                        _session.P_ELOGATION_F1 = null;
                    }
                }
                else
                {
                    _session.P_ELOGATION_F1 = null;
                }

                if (!string.IsNullOrEmpty(txtELONGATIONFORCE_FN2.Text))
                {
                    if (Decimal.TryParse(txtELONGATIONFORCE_FN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtELONGATIONFORCE_FN2.Text);
                        _session.P_ELOGATION_F2 = ave2;
                    }
                    else
                    {
                        txtELONGATIONFORCE_FN2.Text = string.Empty;
                        _session.P_ELOGATION_F2 = null;
                    }
                }
                else
                {
                    _session.P_ELOGATION_F2 = null;
                }

                if (!string.IsNullOrEmpty(txtELONGATIONFORCE_FN3.Text))
                {
                    if (Decimal.TryParse(txtELONGATIONFORCE_FN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtELONGATIONFORCE_FN3.Text);
                        _session.P_ELOGATION_F3 = ave3;
                    }
                    else
                    {
                        txtELONGATIONFORCE_FN3.Text = string.Empty;
                        _session.P_ELOGATION_F3 = null;
                    }
                }
                else
                {
                    _session.P_ELOGATION_F3 = null;
                }

                if (!string.IsNullOrEmpty(txtELONGATIONFORCE_FN4.Text))
                {
                    if (Decimal.TryParse(txtELONGATIONFORCE_FN4.Text, out value))
                    {
                        ave4 = decimal.Parse(txtELONGATIONFORCE_FN4.Text);
                        _session.P_ELOGATION_F4 = ave4;
                    }
                    else
                    {
                        txtELONGATIONFORCE_FN4.Text = string.Empty;
                        _session.P_ELOGATION_F4 = null;
                    }
                }
                else
                {
                    _session.P_ELOGATION_F4 = null;
                }

                if (!string.IsNullOrEmpty(txtELONGATIONFORCE_FN5.Text))
                {
                    if (Decimal.TryParse(txtELONGATIONFORCE_FN5.Text, out value))
                    {
                        ave5 = decimal.Parse(txtELONGATIONFORCE_FN5.Text);
                        _session.P_ELOGATION_F5 = ave5;
                    }
                    else
                    {
                        txtELONGATIONFORCE_FN5.Text = string.Empty;
                        _session.P_ELOGATION_F5 = null;
                    }
                }
                else
                {
                    _session.P_ELOGATION_F5 = null;
                }

                if (!string.IsNullOrEmpty(txtELONGATIONFORCE_FN6.Text))
                {
                    if (Decimal.TryParse(txtELONGATIONFORCE_FN6.Text, out value))
                    {
                        ave6 = decimal.Parse(txtELONGATIONFORCE_FN6.Text);
                        _session.P_ELOGATION_F6 = ave6;
                    }
                    else
                    {
                        txtELONGATIONFORCE_FN6.Text = string.Empty;
                        _session.P_ELOGATION_F6 = null;
                    }
                }
                else
                {
                    _session.P_ELOGATION_F6 = null;
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtELONGATIONFORCE_FAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtELONGATIONFORCE_FAve.Text = "0";
                    else
                        txtELONGATIONFORCE_FAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtELONGATIONFORCE_FSpecification.Text))
                {
                    string temp = txtELONGATIONFORCE_FSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtELONGATIONFORCE_FN1.Foreground = Brushes.Red;
                                    else
                                        txtELONGATIONFORCE_FN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtELONGATIONFORCE_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtELONGATIONFORCE_FN2.Foreground = Brushes.Red;
                                    else
                                        txtELONGATIONFORCE_FN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtELONGATIONFORCE_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtELONGATIONFORCE_FN3.Foreground = Brushes.Red;
                                    else
                                        txtELONGATIONFORCE_FN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtELONGATIONFORCE_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtELONGATIONFORCE_FN4.Foreground = Brushes.Red;
                                    else
                                        txtELONGATIONFORCE_FN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtELONGATIONFORCE_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtELONGATIONFORCE_FN5.Foreground = Brushes.Red;
                                    else
                                        txtELONGATIONFORCE_FN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtELONGATIONFORCE_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtELONGATIONFORCE_FN6.Foreground = Brushes.Red;
                                    else
                                        txtELONGATIONFORCE_FN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtELONGATIONFORCE_FN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtELONGATIONFORCE_FN1.Foreground = Brushes.Red;
                                    else
                                        txtELONGATIONFORCE_FN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtELONGATIONFORCE_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtELONGATIONFORCE_FN2.Foreground = Brushes.Red;
                                    else
                                        txtELONGATIONFORCE_FN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtELONGATIONFORCE_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtELONGATIONFORCE_FN3.Foreground = Brushes.Red;
                                    else
                                        txtELONGATIONFORCE_FN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtELONGATIONFORCE_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtELONGATIONFORCE_FN4.Foreground = Brushes.Red;
                                    else
                                        txtELONGATIONFORCE_FN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtELONGATIONFORCE_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtELONGATIONFORCE_FN5.Foreground = Brushes.Red;
                                    else
                                        txtELONGATIONFORCE_FN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtELONGATIONFORCE_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtELONGATIONFORCE_FN6.Foreground = Brushes.Red;
                                    else
                                        txtELONGATIONFORCE_FN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtELONGATIONFORCE_FN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtELONGATIONFORCE_FN1.Foreground = Brushes.Black;
                                    else
                                        txtELONGATIONFORCE_FN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtELONGATIONFORCE_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtELONGATIONFORCE_FN2.Foreground = Brushes.Black;
                                    else
                                        txtELONGATIONFORCE_FN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtELONGATIONFORCE_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtELONGATIONFORCE_FN3.Foreground = Brushes.Black;
                                    else
                                        txtELONGATIONFORCE_FN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtELONGATIONFORCE_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtELONGATIONFORCE_FN4.Foreground = Brushes.Black;
                                    else
                                        txtELONGATIONFORCE_FN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtELONGATIONFORCE_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtELONGATIONFORCE_FN5.Foreground = Brushes.Black;
                                    else
                                        txtELONGATIONFORCE_FN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtELONGATIONFORCE_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtELONGATIONFORCE_FN6.Foreground = Brushes.Black;
                                    else
                                        txtELONGATIONFORCE_FN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtELONGATIONFORCE_FN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtELONGATIONFORCE_FN1.Foreground = Brushes.Black;
                            else
                                txtELONGATIONFORCE_FN1.Foreground = Brushes.Red;
                        }
                        else
                            txtELONGATIONFORCE_FN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtELONGATIONFORCE_FN2.Foreground = Brushes.Black;
                            else
                                txtELONGATIONFORCE_FN2.Foreground = Brushes.Red;
                        }
                        else
                            txtELONGATIONFORCE_FN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtELONGATIONFORCE_FN3.Foreground = Brushes.Black;
                            else
                                txtELONGATIONFORCE_FN3.Foreground = Brushes.Red;
                        }
                        else
                            txtELONGATIONFORCE_FN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtELONGATIONFORCE_FN4.Foreground = Brushes.Black;
                            else
                                txtELONGATIONFORCE_FN4.Foreground = Brushes.Red;
                        }
                        else
                            txtELONGATIONFORCE_FN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtELONGATIONFORCE_FN5.Foreground = Brushes.Black;
                            else
                                txtELONGATIONFORCE_FN5.Foreground = Brushes.Red;
                        }
                        else
                            txtELONGATIONFORCE_FN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtELONGATIONFORCE_FN6.Foreground = Brushes.Black;
                            else
                                txtELONGATIONFORCE_FN6.Foreground = Brushes.Red;
                        }
                        else
                            txtELONGATIONFORCE_FN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtELONGATIONFORCE_FN1.Foreground = Brushes.Black;
                    txtELONGATIONFORCE_FN2.Foreground = Brushes.Black;
                    txtELONGATIONFORCE_FN3.Foreground = Brushes.Black;
                    txtELONGATIONFORCE_FN4.Foreground = Brushes.Black;
                    txtELONGATIONFORCE_FN5.Foreground = Brushes.Black;
                    txtELONGATIONFORCE_FN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region ELONGATIONFORCE_W
        private void ELONGATIONFORCE_W()
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtELONGATIONFORCE_WN1.Text))
                {
                    if (Decimal.TryParse(txtELONGATIONFORCE_WN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtELONGATIONFORCE_WN1.Text);
                        _session.P_ELOGATION_W1 = ave1;
                    }
                    else
                    {
                        txtELONGATIONFORCE_WN1.Text = string.Empty;
                        _session.P_ELOGATION_W1 = null;
                    }
                }
                else
                {
                    _session.P_ELOGATION_W1 = null;
                }

                if (!string.IsNullOrEmpty(txtELONGATIONFORCE_WN2.Text))
                {
                    if (Decimal.TryParse(txtELONGATIONFORCE_WN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtELONGATIONFORCE_WN2.Text);
                        _session.P_ELOGATION_W2 = ave2;
                    }
                    else
                    {
                        txtELONGATIONFORCE_WN2.Text = string.Empty;
                        _session.P_ELOGATION_W2 = null;
                    }
                }
                else
                {
                    _session.P_ELOGATION_W2 = null;
                }

                if (!string.IsNullOrEmpty(txtELONGATIONFORCE_WN3.Text))
                {
                    if (Decimal.TryParse(txtELONGATIONFORCE_WN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtELONGATIONFORCE_WN3.Text);
                        _session.P_ELOGATION_W3 = ave3;
                    }
                    else
                    {
                        txtELONGATIONFORCE_WN3.Text = string.Empty;
                        _session.P_ELOGATION_W3 = null;
                    }
                }
                else
                {
                    _session.P_ELOGATION_W3 = null;
                }

                if (!string.IsNullOrEmpty(txtELONGATIONFORCE_WN4.Text))
                {
                    if (Decimal.TryParse(txtELONGATIONFORCE_WN4.Text, out value))
                    {
                        ave4 = decimal.Parse(txtELONGATIONFORCE_WN4.Text);
                        _session.P_ELOGATION_W4 = ave4;
                    }
                    else
                    {
                        txtELONGATIONFORCE_WN4.Text = string.Empty;
                        _session.P_ELOGATION_W4 = null;
                    }
                }
                else
                {
                    _session.P_ELOGATION_W4 = null;
                }

                if (!string.IsNullOrEmpty(txtELONGATIONFORCE_WN5.Text))
                {
                    if (Decimal.TryParse(txtELONGATIONFORCE_WN5.Text, out value))
                    {
                        ave5 = decimal.Parse(txtELONGATIONFORCE_WN5.Text);
                        _session.P_ELOGATION_W5 = ave5;
                    }
                    else
                    {
                        txtELONGATIONFORCE_WN5.Text = string.Empty;
                        _session.P_ELOGATION_W5 = null;
                    }
                }
                else
                {
                    _session.P_ELOGATION_W5 = null;
                }

                if (!string.IsNullOrEmpty(txtELONGATIONFORCE_WN6.Text))
                {
                    if (Decimal.TryParse(txtELONGATIONFORCE_WN6.Text, out value))
                    {
                        ave6 = decimal.Parse(txtELONGATIONFORCE_WN6.Text);
                        _session.P_ELOGATION_W6 = ave6;
                    }
                    else
                    {
                        txtELONGATIONFORCE_WN6.Text = string.Empty;
                        _session.P_ELOGATION_W6 = null;
                    }
                }
                else
                {
                    _session.P_ELOGATION_W6 = null;
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtELONGATIONFORCE_WAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtELONGATIONFORCE_WAve.Text = "0";
                    else
                        txtELONGATIONFORCE_WAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtELONGATIONFORCE_WSpecification.Text))
                {
                    string temp = txtELONGATIONFORCE_WSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtELONGATIONFORCE_WN1.Foreground = Brushes.Red;
                                    else
                                        txtELONGATIONFORCE_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtELONGATIONFORCE_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtELONGATIONFORCE_WN2.Foreground = Brushes.Red;
                                    else
                                        txtELONGATIONFORCE_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtELONGATIONFORCE_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtELONGATIONFORCE_WN3.Foreground = Brushes.Red;
                                    else
                                        txtELONGATIONFORCE_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtELONGATIONFORCE_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtELONGATIONFORCE_WN4.Foreground = Brushes.Red;
                                    else
                                        txtELONGATIONFORCE_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtELONGATIONFORCE_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtELONGATIONFORCE_WN5.Foreground = Brushes.Red;
                                    else
                                        txtELONGATIONFORCE_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtELONGATIONFORCE_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtELONGATIONFORCE_WN6.Foreground = Brushes.Red;
                                    else
                                        txtELONGATIONFORCE_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtELONGATIONFORCE_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtELONGATIONFORCE_WN1.Foreground = Brushes.Red;
                                    else
                                        txtELONGATIONFORCE_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtELONGATIONFORCE_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtELONGATIONFORCE_WN2.Foreground = Brushes.Red;
                                    else
                                        txtELONGATIONFORCE_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtELONGATIONFORCE_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtELONGATIONFORCE_WN3.Foreground = Brushes.Red;
                                    else
                                        txtELONGATIONFORCE_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtELONGATIONFORCE_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtELONGATIONFORCE_WN4.Foreground = Brushes.Red;
                                    else
                                        txtELONGATIONFORCE_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtELONGATIONFORCE_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtELONGATIONFORCE_WN5.Foreground = Brushes.Red;
                                    else
                                        txtELONGATIONFORCE_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtELONGATIONFORCE_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtELONGATIONFORCE_WN6.Foreground = Brushes.Red;
                                    else
                                        txtELONGATIONFORCE_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtELONGATIONFORCE_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtELONGATIONFORCE_WN1.Foreground = Brushes.Black;
                                    else
                                        txtELONGATIONFORCE_WN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtELONGATIONFORCE_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtELONGATIONFORCE_WN2.Foreground = Brushes.Black;
                                    else
                                        txtELONGATIONFORCE_WN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtELONGATIONFORCE_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtELONGATIONFORCE_WN3.Foreground = Brushes.Black;
                                    else
                                        txtELONGATIONFORCE_WN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtELONGATIONFORCE_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtELONGATIONFORCE_WN4.Foreground = Brushes.Black;
                                    else
                                        txtELONGATIONFORCE_WN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtELONGATIONFORCE_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtELONGATIONFORCE_WN5.Foreground = Brushes.Black;
                                    else
                                        txtELONGATIONFORCE_WN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtELONGATIONFORCE_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtELONGATIONFORCE_WN6.Foreground = Brushes.Black;
                                    else
                                        txtELONGATIONFORCE_WN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtELONGATIONFORCE_WN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtELONGATIONFORCE_WN1.Foreground = Brushes.Black;
                            else
                                txtELONGATIONFORCE_WN1.Foreground = Brushes.Red;
                        }
                        else
                            txtELONGATIONFORCE_WN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtELONGATIONFORCE_WN2.Foreground = Brushes.Black;
                            else
                                txtELONGATIONFORCE_WN2.Foreground = Brushes.Red;
                        }
                        else
                            txtELONGATIONFORCE_WN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtELONGATIONFORCE_WN3.Foreground = Brushes.Black;
                            else
                                txtELONGATIONFORCE_WN3.Foreground = Brushes.Red;
                        }
                        else
                            txtELONGATIONFORCE_WN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtELONGATIONFORCE_WN4.Foreground = Brushes.Black;
                            else
                                txtELONGATIONFORCE_WN4.Foreground = Brushes.Red;
                        }
                        else
                            txtELONGATIONFORCE_WN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtELONGATIONFORCE_WN5.Foreground = Brushes.Black;
                            else
                                txtELONGATIONFORCE_WN5.Foreground = Brushes.Red;
                        }
                        else
                            txtELONGATIONFORCE_WN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtELONGATIONFORCE_WN6.Foreground = Brushes.Black;
                            else
                                txtELONGATIONFORCE_WN6.Foreground = Brushes.Red;
                        }
                        else
                            txtELONGATIONFORCE_WN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtELONGATIONFORCE_WN1.Foreground = Brushes.Black;
                    txtELONGATIONFORCE_WN2.Foreground = Brushes.Black;
                    txtELONGATIONFORCE_WN3.Foreground = Brushes.Black;
                    txtELONGATIONFORCE_WN4.Foreground = Brushes.Black;
                    txtELONGATIONFORCE_WN5.Foreground = Brushes.Black;
                    txtELONGATIONFORCE_WN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region EDGECOMB_F
        private void EDGECOMB_F()
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtEDGECOMB_FN1.Text))
                {
                    if (Decimal.TryParse(txtEDGECOMB_FN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtEDGECOMB_FN1.Text);
                        _session.P_EDGECOMB_F1 = ave1;
                    }
                    else
                    {
                        txtEDGECOMB_FN1.Text = string.Empty;
                        _session.P_EDGECOMB_F1 = null;
                    }
                }
                else
                {
                    _session.P_EDGECOMB_F1 = null;
                }

                if (!string.IsNullOrEmpty(txtEDGECOMB_FN2.Text))
                {
                    if (Decimal.TryParse(txtEDGECOMB_FN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtEDGECOMB_FN2.Text);
                        _session.P_EDGECOMB_F2 = ave2;
                    }
                    else
                    {
                        txtEDGECOMB_FN2.Text = string.Empty;
                        _session.P_EDGECOMB_F2 = null;
                    }
                }
                else
                {
                    _session.P_EDGECOMB_F2 = null;
                }

                if (!string.IsNullOrEmpty(txtEDGECOMB_FN3.Text))
                {
                    if (Decimal.TryParse(txtEDGECOMB_FN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtEDGECOMB_FN3.Text);
                        _session.P_EDGECOMB_F3 = ave3;
                    }
                    else
                    {
                        txtEDGECOMB_FN3.Text = string.Empty;
                        _session.P_EDGECOMB_F3 = null;
                    }
                }
                else
                {
                    _session.P_EDGECOMB_F3 = null;
                }

                if (!string.IsNullOrEmpty(txtEDGECOMB_FN4.Text))
                {
                    if (Decimal.TryParse(txtEDGECOMB_FN4.Text, out value))
                    {
                        //ave4 = decimal.Parse(txtEDGECOMB_FN4.Text);
                    }
                    else
                    {
                        txtEDGECOMB_FN4.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtEDGECOMB_FN5.Text))
                {
                    if (Decimal.TryParse(txtEDGECOMB_FN5.Text, out value))
                    {
                        //ave5 = decimal.Parse(txtEDGECOMB_FN5.Text);
                    }
                    else
                    {
                        txtEDGECOMB_FN5.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtEDGECOMB_FN6.Text))
                {
                    if (Decimal.TryParse(txtEDGECOMB_FN6.Text, out value))
                    {
                        //ave6 = decimal.Parse(txtEDGECOMB_FN6.Text);
                    }
                    else
                    {
                        txtEDGECOMB_FN6.Text = string.Empty;
                    }
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtEDGECOMB_FAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtEDGECOMB_FAve.Text = "0";
                    else
                        txtEDGECOMB_FAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtEDGECOMB_FSpecification.Text))
                {
                    string temp = txtEDGECOMB_FSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtEDGECOMB_FN1.Foreground = Brushes.Red;
                                    else
                                        txtEDGECOMB_FN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtEDGECOMB_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtEDGECOMB_FN2.Foreground = Brushes.Red;
                                    else
                                        txtEDGECOMB_FN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtEDGECOMB_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtEDGECOMB_FN3.Foreground = Brushes.Red;
                                    else
                                        txtEDGECOMB_FN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtEDGECOMB_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtEDGECOMB_FN4.Foreground = Brushes.Red;
                                    else
                                        txtEDGECOMB_FN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtEDGECOMB_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtEDGECOMB_FN5.Foreground = Brushes.Red;
                                    else
                                        txtEDGECOMB_FN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtEDGECOMB_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtEDGECOMB_FN6.Foreground = Brushes.Red;
                                    else
                                        txtEDGECOMB_FN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtEDGECOMB_FN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtEDGECOMB_FN1.Foreground = Brushes.Red;
                                    else
                                        txtEDGECOMB_FN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtEDGECOMB_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtEDGECOMB_FN2.Foreground = Brushes.Red;
                                    else
                                        txtEDGECOMB_FN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtEDGECOMB_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtEDGECOMB_FN3.Foreground = Brushes.Red;
                                    else
                                        txtEDGECOMB_FN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtEDGECOMB_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtEDGECOMB_FN4.Foreground = Brushes.Red;
                                    else
                                        txtEDGECOMB_FN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtEDGECOMB_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtEDGECOMB_FN5.Foreground = Brushes.Red;
                                    else
                                        txtEDGECOMB_FN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtEDGECOMB_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtEDGECOMB_FN6.Foreground = Brushes.Red;
                                    else
                                        txtEDGECOMB_FN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtEDGECOMB_FN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtEDGECOMB_FN1.Foreground = Brushes.Black;
                                    else
                                        txtEDGECOMB_FN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtEDGECOMB_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtEDGECOMB_FN2.Foreground = Brushes.Black;
                                    else
                                        txtEDGECOMB_FN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtEDGECOMB_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtEDGECOMB_FN3.Foreground = Brushes.Black;
                                    else
                                        txtEDGECOMB_FN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtEDGECOMB_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtEDGECOMB_FN4.Foreground = Brushes.Black;
                                    else
                                        txtEDGECOMB_FN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtEDGECOMB_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtEDGECOMB_FN5.Foreground = Brushes.Black;
                                    else
                                        txtEDGECOMB_FN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtEDGECOMB_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtEDGECOMB_FN6.Foreground = Brushes.Black;
                                    else
                                        txtEDGECOMB_FN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtEDGECOMB_FN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtEDGECOMB_FN1.Foreground = Brushes.Black;
                            else
                                txtEDGECOMB_FN1.Foreground = Brushes.Red;
                        }
                        else
                            txtEDGECOMB_FN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtEDGECOMB_FN2.Foreground = Brushes.Black;
                            else
                                txtEDGECOMB_FN2.Foreground = Brushes.Red;
                        }
                        else
                            txtEDGECOMB_FN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtEDGECOMB_FN3.Foreground = Brushes.Black;
                            else
                                txtEDGECOMB_FN3.Foreground = Brushes.Red;
                        }
                        else
                            txtEDGECOMB_FN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtEDGECOMB_FN4.Foreground = Brushes.Black;
                            else
                                txtEDGECOMB_FN4.Foreground = Brushes.Red;
                        }
                        else
                            txtEDGECOMB_FN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtEDGECOMB_FN5.Foreground = Brushes.Black;
                            else
                                txtEDGECOMB_FN5.Foreground = Brushes.Red;
                        }
                        else
                            txtEDGECOMB_FN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtEDGECOMB_FN6.Foreground = Brushes.Black;
                            else
                                txtEDGECOMB_FN6.Foreground = Brushes.Red;
                        }
                        else
                            txtEDGECOMB_FN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtEDGECOMB_FN1.Foreground = Brushes.Black;
                    txtEDGECOMB_FN2.Foreground = Brushes.Black;
                    txtEDGECOMB_FN3.Foreground = Brushes.Black;
                    txtEDGECOMB_FN4.Foreground = Brushes.Black;
                    txtEDGECOMB_FN5.Foreground = Brushes.Black;
                    txtEDGECOMB_FN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region EDGECOMB_W
        private void EDGECOMB_W()
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtEDGECOMB_WN1.Text))
                {
                    if (Decimal.TryParse(txtEDGECOMB_WN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtEDGECOMB_WN1.Text);
                        _session.P_EDGECOMB_W1 = ave1;
                    }
                    else
                    {
                        txtEDGECOMB_WN1.Text = string.Empty;
                        _session.P_EDGECOMB_W1 = null;
                    }
                }
                else
                {
                    _session.P_EDGECOMB_W1 = null;
                }

                if (!string.IsNullOrEmpty(txtEDGECOMB_WN2.Text))
                {
                    if (Decimal.TryParse(txtEDGECOMB_WN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtEDGECOMB_WN2.Text);
                        _session.P_EDGECOMB_W2 = ave2;
                    }
                    else
                    {
                        txtEDGECOMB_WN2.Text = string.Empty;
                        _session.P_EDGECOMB_W2 = null;
                    }
                }
                else
                {
                    _session.P_EDGECOMB_W2 = null;
                }

                if (!string.IsNullOrEmpty(txtEDGECOMB_WN3.Text))
                {
                    if (Decimal.TryParse(txtEDGECOMB_WN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtEDGECOMB_WN3.Text);
                        _session.P_EDGECOMB_W3 = ave3;
                    }
                    else
                    {
                        txtEDGECOMB_WN3.Text = string.Empty;
                        _session.P_EDGECOMB_W3 = null;
                    }
                }
                else
                {
                    _session.P_EDGECOMB_W3 = null;
                }

                if (!string.IsNullOrEmpty(txtEDGECOMB_WN4.Text))
                {
                    if (Decimal.TryParse(txtEDGECOMB_WN4.Text, out value))
                    {
                        //ave4 = decimal.Parse(txtEDGECOMB_WN4.Text);
                    }
                    else
                    {
                        txtEDGECOMB_WN4.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtEDGECOMB_WN5.Text))
                {
                    if (Decimal.TryParse(txtEDGECOMB_WN5.Text, out value))
                    {
                        //ave5 = decimal.Parse(txtEDGECOMB_WN5.Text);
                    }
                    else
                    {
                        txtEDGECOMB_WN5.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtEDGECOMB_WN6.Text))
                {
                    if (Decimal.TryParse(txtEDGECOMB_WN6.Text, out value))
                    {
                        //ave6 = decimal.Parse(txtEDGECOMB_WN6.Text);
                    }
                    else
                    {
                        txtEDGECOMB_WN6.Text = string.Empty;
                    }
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtEDGECOMB_WAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtEDGECOMB_WAve.Text = "0";
                    else
                        txtEDGECOMB_WAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtEDGECOMB_WSpecification.Text))
                {
                    string temp = txtEDGECOMB_WSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtEDGECOMB_WN1.Foreground = Brushes.Red;
                                    else
                                        txtEDGECOMB_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtEDGECOMB_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtEDGECOMB_WN2.Foreground = Brushes.Red;
                                    else
                                        txtEDGECOMB_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtEDGECOMB_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtEDGECOMB_WN3.Foreground = Brushes.Red;
                                    else
                                        txtEDGECOMB_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtEDGECOMB_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtEDGECOMB_WN4.Foreground = Brushes.Red;
                                    else
                                        txtEDGECOMB_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtEDGECOMB_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtEDGECOMB_WN5.Foreground = Brushes.Red;
                                    else
                                        txtEDGECOMB_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtEDGECOMB_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtEDGECOMB_WN6.Foreground = Brushes.Red;
                                    else
                                        txtEDGECOMB_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtEDGECOMB_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtEDGECOMB_WN1.Foreground = Brushes.Red;
                                    else
                                        txtEDGECOMB_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtEDGECOMB_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtEDGECOMB_WN2.Foreground = Brushes.Red;
                                    else
                                        txtEDGECOMB_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtEDGECOMB_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtEDGECOMB_WN3.Foreground = Brushes.Red;
                                    else
                                        txtEDGECOMB_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtEDGECOMB_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtEDGECOMB_WN4.Foreground = Brushes.Red;
                                    else
                                        txtEDGECOMB_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtEDGECOMB_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtEDGECOMB_WN5.Foreground = Brushes.Red;
                                    else
                                        txtEDGECOMB_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtEDGECOMB_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtEDGECOMB_WN6.Foreground = Brushes.Red;
                                    else
                                        txtEDGECOMB_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtEDGECOMB_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtEDGECOMB_WN1.Foreground = Brushes.Black;
                                    else
                                        txtEDGECOMB_WN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtEDGECOMB_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtEDGECOMB_WN2.Foreground = Brushes.Black;
                                    else
                                        txtEDGECOMB_WN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtEDGECOMB_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtEDGECOMB_WN3.Foreground = Brushes.Black;
                                    else
                                        txtEDGECOMB_WN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtEDGECOMB_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtEDGECOMB_WN4.Foreground = Brushes.Black;
                                    else
                                        txtEDGECOMB_WN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtEDGECOMB_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtEDGECOMB_WN5.Foreground = Brushes.Black;
                                    else
                                        txtEDGECOMB_WN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtEDGECOMB_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtEDGECOMB_WN6.Foreground = Brushes.Black;
                                    else
                                        txtEDGECOMB_WN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtEDGECOMB_WN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtEDGECOMB_WN1.Foreground = Brushes.Black;
                            else
                                txtEDGECOMB_WN1.Foreground = Brushes.Red;
                        }
                        else
                            txtEDGECOMB_WN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtEDGECOMB_WN2.Foreground = Brushes.Black;
                            else
                                txtEDGECOMB_WN2.Foreground = Brushes.Red;
                        }
                        else
                            txtEDGECOMB_WN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtEDGECOMB_WN3.Foreground = Brushes.Black;
                            else
                                txtEDGECOMB_WN3.Foreground = Brushes.Red;
                        }
                        else
                            txtEDGECOMB_WN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtEDGECOMB_WN4.Foreground = Brushes.Black;
                            else
                                txtEDGECOMB_WN4.Foreground = Brushes.Red;
                        }
                        else
                            txtEDGECOMB_WN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtEDGECOMB_WN5.Foreground = Brushes.Black;
                            else
                                txtEDGECOMB_WN5.Foreground = Brushes.Red;
                        }
                        else
                            txtEDGECOMB_WN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtEDGECOMB_WN6.Foreground = Brushes.Black;
                            else
                                txtEDGECOMB_WN6.Foreground = Brushes.Red;
                        }
                        else
                            txtEDGECOMB_WN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtEDGECOMB_WN1.Foreground = Brushes.Black;
                    txtEDGECOMB_WN2.Foreground = Brushes.Black;
                    txtEDGECOMB_WN3.Foreground = Brushes.Black;
                    txtEDGECOMB_WN4.Foreground = Brushes.Black;
                    txtEDGECOMB_WN5.Foreground = Brushes.Black;
                    txtEDGECOMB_WN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region TEAR_F
        private void TEAR_F()
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtTEAR_FN1.Text))
                {
                    if (Decimal.TryParse(txtTEAR_FN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtTEAR_FN1.Text);
                        _session.P_TEAR_F1 = ave1;
                    }
                    else
                    {
                        txtTEAR_FN1.Text = string.Empty;
                        _session.P_TEAR_F1 = null;
                    }
                }
                else
                {
                    _session.P_TEAR_F1 = null;
                }

                if (!string.IsNullOrEmpty(txtTEAR_FN2.Text))
                {
                    if (Decimal.TryParse(txtTEAR_FN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtTEAR_FN2.Text);
                        _session.P_TEAR_F2 = ave2;
                    }
                    else
                    {
                        txtTEAR_FN2.Text = string.Empty;
                        _session.P_TEAR_F2 = null;
                    }
                }
                else
                {
                    _session.P_TEAR_F2 = null;
                }

                if (!string.IsNullOrEmpty(txtTEAR_FN3.Text))
                {
                    if (Decimal.TryParse(txtTEAR_FN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtTEAR_FN3.Text);
                        _session.P_TEAR_F3 = ave3;
                    }
                    else
                    {
                        txtTEAR_FN3.Text = string.Empty;
                        _session.P_TEAR_F3 = null;
                    }
                }
                else
                {
                    _session.P_TEAR_F3 = null;
                }

                if (!string.IsNullOrEmpty(txtTEAR_FN4.Text))
                {
                    if (Decimal.TryParse(txtTEAR_FN4.Text, out value))
                    {
                        //ave4 = decimal.Parse(txtTEAR_FN4.Text);
                    }
                    else
                    {
                        txtTEAR_FN4.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtTEAR_FN5.Text))
                {
                    if (Decimal.TryParse(txtTEAR_FN5.Text, out value))
                    {
                        //ave5 = decimal.Parse(txtTEAR_FN5.Text);
                    }
                    else
                    {
                        txtTEAR_FN5.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtTEAR_FN6.Text))
                {
                    if (Decimal.TryParse(txtTEAR_FN6.Text, out value))
                    {
                        //ave6 = decimal.Parse(txtTEAR_FN6.Text);
                    }
                    else
                    {
                        txtTEAR_FN6.Text = string.Empty;
                    }
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtTEAR_FAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtTEAR_FAve.Text = "0";
                    else
                        txtTEAR_FAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtTEAR_FSpecification.Text))
                {
                    string temp = txtTEAR_FSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtTEAR_FN1.Foreground = Brushes.Red;
                                    else
                                        txtTEAR_FN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtTEAR_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtTEAR_FN2.Foreground = Brushes.Red;
                                    else
                                        txtTEAR_FN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtTEAR_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtTEAR_FN3.Foreground = Brushes.Red;
                                    else
                                        txtTEAR_FN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtTEAR_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtTEAR_FN4.Foreground = Brushes.Red;
                                    else
                                        txtTEAR_FN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtTEAR_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtTEAR_FN5.Foreground = Brushes.Red;
                                    else
                                        txtTEAR_FN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtTEAR_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtTEAR_FN6.Foreground = Brushes.Red;
                                    else
                                        txtTEAR_FN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtTEAR_FN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtTEAR_FN1.Foreground = Brushes.Red;
                                    else
                                        txtTEAR_FN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtTEAR_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtTEAR_FN2.Foreground = Brushes.Red;
                                    else
                                        txtTEAR_FN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtTEAR_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtTEAR_FN3.Foreground = Brushes.Red;
                                    else
                                        txtTEAR_FN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtTEAR_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtTEAR_FN4.Foreground = Brushes.Red;
                                    else
                                        txtTEAR_FN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtTEAR_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtTEAR_FN5.Foreground = Brushes.Red;
                                    else
                                        txtTEAR_FN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtTEAR_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtTEAR_FN6.Foreground = Brushes.Red;
                                    else
                                        txtTEAR_FN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtTEAR_FN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtTEAR_FN1.Foreground = Brushes.Black;
                                    else
                                        txtTEAR_FN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtTEAR_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtTEAR_FN2.Foreground = Brushes.Black;
                                    else
                                        txtTEAR_FN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtTEAR_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtTEAR_FN3.Foreground = Brushes.Black;
                                    else
                                        txtTEAR_FN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtTEAR_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtTEAR_FN4.Foreground = Brushes.Black;
                                    else
                                        txtTEAR_FN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtTEAR_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtTEAR_FN5.Foreground = Brushes.Black;
                                    else
                                        txtTEAR_FN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtTEAR_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtTEAR_FN6.Foreground = Brushes.Black;
                                    else
                                        txtTEAR_FN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtTEAR_FN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtTEAR_FN1.Foreground = Brushes.Black;
                            else
                                txtTEAR_FN1.Foreground = Brushes.Red;
                        }
                        else
                            txtTEAR_FN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtTEAR_FN2.Foreground = Brushes.Black;
                            else
                                txtTEAR_FN2.Foreground = Brushes.Red;
                        }
                        else
                            txtTEAR_FN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtTEAR_FN3.Foreground = Brushes.Black;
                            else
                                txtTEAR_FN3.Foreground = Brushes.Red;
                        }
                        else
                            txtTEAR_FN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtTEAR_FN4.Foreground = Brushes.Black;
                            else
                                txtTEAR_FN4.Foreground = Brushes.Red;
                        }
                        else
                            txtTEAR_FN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtTEAR_FN5.Foreground = Brushes.Black;
                            else
                                txtTEAR_FN5.Foreground = Brushes.Red;
                        }
                        else
                            txtTEAR_FN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtTEAR_FN6.Foreground = Brushes.Black;
                            else
                                txtTEAR_FN6.Foreground = Brushes.Red;
                        }
                        else
                            txtTEAR_FN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtTEAR_FN1.Foreground = Brushes.Black;
                    txtTEAR_FN2.Foreground = Brushes.Black;
                    txtTEAR_FN3.Foreground = Brushes.Black;
                    txtTEAR_FN4.Foreground = Brushes.Black;
                    txtTEAR_FN5.Foreground = Brushes.Black;
                    txtTEAR_FN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region TEAR_W
        private void TEAR_W()
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtTEAR_WN1.Text))
                {
                    if (Decimal.TryParse(txtTEAR_WN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtTEAR_WN1.Text);
                        _session.P_TEAR_W1 = ave1;
                    }
                    else
                    {
                        txtTEAR_WN1.Text = string.Empty;
                        _session.P_TEAR_W1 = null;
                    }
                }
                else
                {
                    _session.P_TEAR_W1 = null;
                }

                if (!string.IsNullOrEmpty(txtTEAR_WN2.Text))
                {
                    if (Decimal.TryParse(txtTEAR_WN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtTEAR_WN2.Text);
                        _session.P_TEAR_W2 = ave2;
                    }
                    else
                    {
                        txtTEAR_WN2.Text = string.Empty;
                        _session.P_TEAR_W2 = null;
                    }
                }
                else
                {
                    _session.P_TEAR_W2 = null;
                }

                if (!string.IsNullOrEmpty(txtTEAR_WN3.Text))
                {
                    if (Decimal.TryParse(txtTEAR_WN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtTEAR_WN3.Text);
                        _session.P_TEAR_W3 = ave3;
                    }
                    else
                    {
                        txtTEAR_WN3.Text = string.Empty;
                        _session.P_TEAR_W3 = null;
                    }
                }
                else
                {
                    _session.P_TEAR_W3 = null;
                }

                if (!string.IsNullOrEmpty(txtTEAR_WN4.Text))
                {
                    if (Decimal.TryParse(txtTEAR_WN4.Text, out value))
                    {
                        //ave4 = decimal.Parse(txtTEAR_WN4.Text);
                    }
                    else
                    {
                        txtTEAR_WN4.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtTEAR_WN5.Text))
                {
                    if (Decimal.TryParse(txtTEAR_WN5.Text, out value))
                    {
                        //ave5 = decimal.Parse(txtTEAR_WN5.Text);
                    }
                    else
                    {
                        txtTEAR_WN5.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtTEAR_WN6.Text))
                {
                    if (Decimal.TryParse(txtTEAR_WN6.Text, out value))
                    {
                        //ave6 = decimal.Parse(txtTEAR_WN6.Text);
                    }
                    else
                    {
                        txtTEAR_WN6.Text = string.Empty;
                    }
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtTEAR_WAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtTEAR_WAve.Text = "0";
                    else
                        txtTEAR_WAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtTEAR_WSpecification.Text))
                {
                    string temp = txtTEAR_WSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtTEAR_WN1.Foreground = Brushes.Red;
                                    else
                                        txtTEAR_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtTEAR_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtTEAR_WN2.Foreground = Brushes.Red;
                                    else
                                        txtTEAR_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtTEAR_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtTEAR_WN3.Foreground = Brushes.Red;
                                    else
                                        txtTEAR_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtTEAR_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtTEAR_WN4.Foreground = Brushes.Red;
                                    else
                                        txtTEAR_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtTEAR_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtTEAR_WN5.Foreground = Brushes.Red;
                                    else
                                        txtTEAR_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtTEAR_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtTEAR_WN6.Foreground = Brushes.Red;
                                    else
                                        txtTEAR_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtTEAR_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtTEAR_WN1.Foreground = Brushes.Red;
                                    else
                                        txtTEAR_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtTEAR_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtTEAR_WN2.Foreground = Brushes.Red;
                                    else
                                        txtTEAR_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtTEAR_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtTEAR_WN3.Foreground = Brushes.Red;
                                    else
                                        txtTEAR_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtTEAR_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtTEAR_WN4.Foreground = Brushes.Red;
                                    else
                                        txtTEAR_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtTEAR_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtTEAR_WN5.Foreground = Brushes.Red;
                                    else
                                        txtTEAR_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtTEAR_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtTEAR_WN6.Foreground = Brushes.Red;
                                    else
                                        txtTEAR_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtTEAR_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtTEAR_WN1.Foreground = Brushes.Black;
                                    else
                                        txtTEAR_WN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtTEAR_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtTEAR_WN2.Foreground = Brushes.Black;
                                    else
                                        txtTEAR_WN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtTEAR_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtTEAR_WN3.Foreground = Brushes.Black;
                                    else
                                        txtTEAR_WN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtTEAR_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtTEAR_WN4.Foreground = Brushes.Black;
                                    else
                                        txtTEAR_WN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtTEAR_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtTEAR_WN5.Foreground = Brushes.Black;
                                    else
                                        txtTEAR_WN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtTEAR_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtTEAR_WN6.Foreground = Brushes.Black;
                                    else
                                        txtTEAR_WN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtTEAR_WN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtTEAR_WN1.Foreground = Brushes.Black;
                            else
                                txtTEAR_WN1.Foreground = Brushes.Red;
                        }
                        else
                            txtTEAR_WN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtTEAR_WN2.Foreground = Brushes.Black;
                            else
                                txtTEAR_WN2.Foreground = Brushes.Red;
                        }
                        else
                            txtTEAR_WN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtTEAR_WN3.Foreground = Brushes.Black;
                            else
                                txtTEAR_WN3.Foreground = Brushes.Red;
                        }
                        else
                            txtTEAR_WN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtTEAR_WN4.Foreground = Brushes.Black;
                            else
                                txtTEAR_WN4.Foreground = Brushes.Red;
                        }
                        else
                            txtTEAR_WN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtTEAR_WN5.Foreground = Brushes.Black;
                            else
                                txtTEAR_WN5.Foreground = Brushes.Red;
                        }
                        else
                            txtTEAR_WN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtTEAR_WN6.Foreground = Brushes.Black;
                            else
                                txtTEAR_WN6.Foreground = Brushes.Red;
                        }
                        else
                            txtTEAR_WN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtTEAR_WN1.Foreground = Brushes.Black;
                    txtTEAR_WN2.Foreground = Brushes.Black;
                    txtTEAR_WN3.Foreground = Brushes.Black;
                    txtTEAR_WN4.Foreground = Brushes.Black;
                    txtTEAR_WN5.Foreground = Brushes.Black;
                    txtTEAR_WN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        // Update 07/07/18
        #region BOW_LostFocus
        private void BOW_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtBOWN1.Text))
                {
                    if (Decimal.TryParse(txtBOWN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtBOWN1.Text);
                        _session.P_BOW1 = ave1;
                    }
                    else
                    {
                        txtBOWN1.Text = string.Empty;
                        _session.P_BOW1 = null;
                    }
                }
                else
                {
                    _session.P_BOW1 = null;
                }

                if (!string.IsNullOrEmpty(txtBOWN2.Text))
                {
                    if (Decimal.TryParse(txtBOWN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtBOWN2.Text);
                        _session.P_BOW2 = ave2;
                    }
                    else
                    {
                        txtBOWN2.Text = string.Empty;
                        _session.P_BOW2 = null;
                    }
                }
                else
                {
                    _session.P_BOW2 = null;
                }

                if (!string.IsNullOrEmpty(txtBOWN3.Text))
                {
                    if (Decimal.TryParse(txtBOWN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtBOWN3.Text);
                        _session.P_BOW3 = ave3;
                    }
                    else
                    {
                        txtBOWN3.Text = string.Empty;
                        _session.P_BOW3 = null;
                    }
                }
                else
                {
                    _session.P_BOW3 = null;
                }

                if (!string.IsNullOrEmpty(txtBOWN4.Text))
                {
                    if (Decimal.TryParse(txtBOWN4.Text, out value))
                    {
                        //ave4 = decimal.Parse(txtBOWN4.Text);
                    }
                    else
                    {
                        txtBOWN4.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtBOWN5.Text))
                {
                    if (Decimal.TryParse(txtBOWN5.Text, out value))
                    {
                        //ave5 = decimal.Parse(txtBOWN5.Text);
                    }
                    else
                    {
                        txtBOWN5.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtBOWN6.Text))
                {
                    if (Decimal.TryParse(txtBOWN6.Text, out value))
                    {
                        //ave6 = decimal.Parse(txtBOWN6.Text);
                    }
                    else
                    {
                        txtBOWN6.Text = string.Empty;
                    }
                }

                decimal? Avg = 0;

                #region Old
                
                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtBOWAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtBOWAve.Text = "0";
                    else
                        txtBOWAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtBOWSpecification.Text))
                {
                    string temp = txtBOWSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtBOWN1.Foreground = Brushes.Red;
                                    else
                                        txtBOWN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtBOWN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtBOWN2.Foreground = Brushes.Red;
                                    else
                                        txtBOWN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtBOWN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtBOWN3.Foreground = Brushes.Red;
                                    else
                                        txtBOWN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtBOWN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtBOWN4.Foreground = Brushes.Red;
                                    else
                                        txtBOWN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtBOWN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtBOWN5.Foreground = Brushes.Red;
                                    else
                                        txtBOWN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtBOWN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtBOWN6.Foreground = Brushes.Red;
                                    else
                                        txtBOWN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtBOWN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtBOWN1.Foreground = Brushes.Red;
                                    else
                                        txtBOWN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtBOWN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtBOWN2.Foreground = Brushes.Red;
                                    else
                                        txtBOWN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtBOWN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtBOWN3.Foreground = Brushes.Red;
                                    else
                                        txtBOWN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtBOWN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtBOWN4.Foreground = Brushes.Red;
                                    else
                                        txtBOWN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtBOWN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtBOWN5.Foreground = Brushes.Red;
                                    else
                                        txtBOWN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtBOWN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtBOWN6.Foreground = Brushes.Red;
                                    else
                                        txtBOWN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtBOWN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtBOWN1.Foreground = Brushes.Black;
                                    else
                                        txtBOWN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtBOWN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtBOWN2.Foreground = Brushes.Black;
                                    else
                                        txtBOWN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtBOWN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtBOWN3.Foreground = Brushes.Black;
                                    else
                                        txtBOWN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtBOWN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtBOWN4.Foreground = Brushes.Black;
                                    else
                                        txtBOWN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtBOWN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtBOWN5.Foreground = Brushes.Black;
                                    else
                                        txtBOWN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtBOWN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtBOWN6.Foreground = Brushes.Black;
                                    else
                                        txtBOWN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtBOWN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtBOWN1.Foreground = Brushes.Black;
                            else
                                txtBOWN1.Foreground = Brushes.Red;
                        }
                        else
                            txtBOWN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtBOWN2.Foreground = Brushes.Black;
                            else
                                txtBOWN2.Foreground = Brushes.Red;
                        }
                        else
                            txtBOWN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtBOWN3.Foreground = Brushes.Black;
                            else
                                txtBOWN3.Foreground = Brushes.Red;
                        }
                        else
                            txtBOWN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtBOWN4.Foreground = Brushes.Black;
                            else
                                txtBOWN4.Foreground = Brushes.Red;
                        }
                        else
                            txtBOWN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtBOWN5.Foreground = Brushes.Black;
                            else
                                txtBOWN5.Foreground = Brushes.Red;
                        }
                        else
                            txtBOWN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtBOWN6.Foreground = Brushes.Black;
                            else
                                txtBOWN6.Foreground = Brushes.Red;
                        }
                        else
                            txtBOWN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtBOWN1.Foreground = Brushes.Black;
                    txtBOWN2.Foreground = Brushes.Black;
                    txtBOWN3.Foreground = Brushes.Black;
                    txtBOWN4.Foreground = Brushes.Black;
                    txtBOWN5.Foreground = Brushes.Black;
                    txtBOWN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region SKEW_LostFocus
        private void SKEW_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtSKEWN1.Text))
                {
                    if (Decimal.TryParse(txtSKEWN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtSKEWN1.Text);
                        _session.P_SKEW1 = ave1;
                    }
                    else
                    {
                        txtSKEWN1.Text = string.Empty;
                        _session.P_SKEW1 = null;
                    }
                }
                else
                {
                    _session.P_SKEW1 = null;
                }

                if (!string.IsNullOrEmpty(txtSKEWN2.Text))
                {
                    if (Decimal.TryParse(txtSKEWN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtSKEWN2.Text);
                        _session.P_SKEW2 = ave2;
                    }
                    else
                    {
                        txtSKEWN2.Text = string.Empty;
                        _session.P_SKEW2 = null;
                    }
                }
                else
                {
                    _session.P_SKEW2 = null;
                }

                if (!string.IsNullOrEmpty(txtSKEWN3.Text))
                {
                    if (Decimal.TryParse(txtSKEWN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtSKEWN3.Text);
                        _session.P_SKEW3 = ave3;
                    }
                    else
                    {
                        txtSKEWN3.Text = string.Empty;
                        _session.P_SKEW3 = null;
                    }
                }
                else
                {
                    _session.P_SKEW3 = null;
                }

                if (!string.IsNullOrEmpty(txtSKEWN4.Text))
                {
                    if (Decimal.TryParse(txtSKEWN4.Text, out value))
                    {
                        //ave4 = decimal.Parse(txtSKEWN4.Text);
                    }
                    else
                    {
                        txtSKEWN4.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtSKEWN5.Text))
                {
                    if (Decimal.TryParse(txtSKEWN5.Text, out value))
                    {
                        //ave5 = decimal.Parse(txtSKEWN5.Text);
                    }
                    else
                    {
                        txtSKEWN5.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtSKEWN6.Text))
                {
                    if (Decimal.TryParse(txtSKEWN6.Text, out value))
                    {
                        //ave6 = decimal.Parse(txtSKEWN6.Text);
                    }
                    else
                    {
                        txtSKEWN6.Text = string.Empty;
                    }
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtSKEWAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtSKEWAve.Text = "0";
                    else
                        txtSKEWAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtSKEWSpecification.Text))
                {
                    string temp = txtSKEWSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtSKEWN1.Foreground = Brushes.Red;
                                    else
                                        txtSKEWN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtSKEWN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtSKEWN2.Foreground = Brushes.Red;
                                    else
                                        txtSKEWN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtSKEWN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtSKEWN3.Foreground = Brushes.Red;
                                    else
                                        txtSKEWN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtSKEWN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtSKEWN4.Foreground = Brushes.Red;
                                    else
                                        txtSKEWN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtSKEWN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtSKEWN5.Foreground = Brushes.Red;
                                    else
                                        txtSKEWN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtSKEWN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtSKEWN6.Foreground = Brushes.Red;
                                    else
                                        txtSKEWN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtSKEWN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtSKEWN1.Foreground = Brushes.Red;
                                    else
                                        txtSKEWN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtSKEWN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtSKEWN2.Foreground = Brushes.Red;
                                    else
                                        txtSKEWN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtSKEWN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtSKEWN3.Foreground = Brushes.Red;
                                    else
                                        txtSKEWN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtSKEWN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtSKEWN4.Foreground = Brushes.Red;
                                    else
                                        txtSKEWN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtSKEWN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtSKEWN5.Foreground = Brushes.Red;
                                    else
                                        txtSKEWN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtSKEWN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtSKEWN6.Foreground = Brushes.Red;
                                    else
                                        txtSKEWN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtSKEWN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtSKEWN1.Foreground = Brushes.Black;
                                    else
                                        txtSKEWN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtSKEWN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtSKEWN2.Foreground = Brushes.Black;
                                    else
                                        txtSKEWN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtSKEWN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtSKEWN3.Foreground = Brushes.Black;
                                    else
                                        txtSKEWN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtSKEWN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtSKEWN4.Foreground = Brushes.Black;
                                    else
                                        txtSKEWN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtSKEWN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtSKEWN5.Foreground = Brushes.Black;
                                    else
                                        txtSKEWN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtSKEWN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtSKEWN6.Foreground = Brushes.Black;
                                    else
                                        txtSKEWN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtSKEWN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtSKEWN1.Foreground = Brushes.Black;
                            else
                                txtSKEWN1.Foreground = Brushes.Red;
                        }
                        else
                            txtSKEWN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtSKEWN2.Foreground = Brushes.Black;
                            else
                                txtSKEWN2.Foreground = Brushes.Red;
                        }
                        else
                            txtSKEWN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtSKEWN3.Foreground = Brushes.Black;
                            else
                                txtSKEWN3.Foreground = Brushes.Red;
                        }
                        else
                            txtSKEWN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtSKEWN4.Foreground = Brushes.Black;
                            else
                                txtSKEWN4.Foreground = Brushes.Red;
                        }
                        else
                            txtSKEWN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtSKEWN5.Foreground = Brushes.Black;
                            else
                                txtSKEWN5.Foreground = Brushes.Red;
                        }
                        else
                            txtSKEWN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtSKEWN6.Foreground = Brushes.Black;
                            else
                                txtSKEWN6.Foreground = Brushes.Red;
                        }
                        else
                            txtSKEWN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtSKEWN1.Foreground = Brushes.Black;
                    txtSKEWN2.Foreground = Brushes.Black;
                    txtSKEWN3.Foreground = Brushes.Black;
                    txtSKEWN4.Foreground = Brushes.Black;
                    txtSKEWN5.Foreground = Brushes.Black;
                    txtSKEWN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region BENDING_F_LostFocus
        private void BENDING_F_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtBENDING_FN1.Text))
                {
                    if (Decimal.TryParse(txtBENDING_FN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtBENDING_FN1.Text);
                        _session.P_BENDING_F1 = ave1;
                    }
                    else
                    {
                        txtBENDING_FN1.Text = string.Empty;
                        _session.P_BENDING_F1 = null;
                    }
                }
                else
                {
                    _session.P_BENDING_F1 = null;
                }

                if (!string.IsNullOrEmpty(txtBENDING_FN2.Text))
                {
                    if (Decimal.TryParse(txtBENDING_FN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtBENDING_FN2.Text);
                        _session.P_BENDING_F2 = ave2;
                    }
                    else
                    {
                        txtBENDING_FN2.Text = string.Empty;
                        _session.P_BENDING_F2 = null;
                    }
                }
                else
                {
                    _session.P_BENDING_F2 = null;
                }

                if (!string.IsNullOrEmpty(txtBENDING_FN3.Text))
                {
                    if (Decimal.TryParse(txtBENDING_FN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtBENDING_FN3.Text);
                        _session.P_BENDING_F3 = ave3;
                    }
                    else
                    {
                        txtBENDING_FN3.Text = string.Empty;
                        _session.P_BENDING_F3 = null;
                    }
                }
                else
                {
                    _session.P_BENDING_F3 = null;
                }

                if (!string.IsNullOrEmpty(txtBENDING_FN4.Text))
                {
                    if (Decimal.TryParse(txtBENDING_FN4.Text, out value))
                    {
                        //ave4 = decimal.Parse(txtBENDING_FN4.Text);
                    }
                    else
                    {
                        txtBENDING_FN4.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtBENDING_FN5.Text))
                {
                    if (Decimal.TryParse(txtBENDING_FN5.Text, out value))
                    {
                        //ave5 = decimal.Parse(txtBENDING_FN5.Text);
                    }
                    else
                    {
                        txtBENDING_FN5.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtBENDING_FN6.Text))
                {
                    if (Decimal.TryParse(txtBENDING_FN6.Text, out value))
                    {
                        //ave6 = decimal.Parse(txtBENDING_FN6.Text);
                    }
                    else
                    {
                        txtBENDING_FN6.Text = string.Empty;
                    }
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtBENDING_FAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtBENDING_FAve.Text = "0";
                    else
                        txtBENDING_FAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtBENDING_FSpecification.Text))
                {
                    string temp = txtBENDING_FSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtBENDING_FN1.Foreground = Brushes.Red;
                                    else
                                        txtBENDING_FN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtBENDING_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtBENDING_FN2.Foreground = Brushes.Red;
                                    else
                                        txtBENDING_FN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtBENDING_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtBENDING_FN3.Foreground = Brushes.Red;
                                    else
                                        txtBENDING_FN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtBENDING_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtBENDING_FN4.Foreground = Brushes.Red;
                                    else
                                        txtBENDING_FN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtBENDING_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtBENDING_FN5.Foreground = Brushes.Red;
                                    else
                                        txtBENDING_FN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtBENDING_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtBENDING_FN6.Foreground = Brushes.Red;
                                    else
                                        txtBENDING_FN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtBENDING_FN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtBENDING_FN1.Foreground = Brushes.Red;
                                    else
                                        txtBENDING_FN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtBENDING_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtBENDING_FN2.Foreground = Brushes.Red;
                                    else
                                        txtBENDING_FN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtBENDING_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtBENDING_FN3.Foreground = Brushes.Red;
                                    else
                                        txtBENDING_FN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtBENDING_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtBENDING_FN4.Foreground = Brushes.Red;
                                    else
                                        txtBENDING_FN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtBENDING_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtBENDING_FN5.Foreground = Brushes.Red;
                                    else
                                        txtBENDING_FN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtBENDING_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtBENDING_FN6.Foreground = Brushes.Red;
                                    else
                                        txtBENDING_FN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtBENDING_FN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtBENDING_FN1.Foreground = Brushes.Black;
                                    else
                                        txtBENDING_FN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtBENDING_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtBENDING_FN2.Foreground = Brushes.Black;
                                    else
                                        txtBENDING_FN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtBENDING_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtBENDING_FN3.Foreground = Brushes.Black;
                                    else
                                        txtBENDING_FN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtBENDING_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtBENDING_FN4.Foreground = Brushes.Black;
                                    else
                                        txtBENDING_FN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtBENDING_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtBENDING_FN5.Foreground = Brushes.Black;
                                    else
                                        txtBENDING_FN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtBENDING_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtBENDING_FN6.Foreground = Brushes.Black;
                                    else
                                        txtBENDING_FN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtBENDING_FN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtBENDING_FN1.Foreground = Brushes.Black;
                            else
                                txtBENDING_FN1.Foreground = Brushes.Red;
                        }
                        else
                            txtBENDING_FN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtBENDING_FN2.Foreground = Brushes.Black;
                            else
                                txtBENDING_FN2.Foreground = Brushes.Red;
                        }
                        else
                            txtBENDING_FN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtBENDING_FN3.Foreground = Brushes.Black;
                            else
                                txtBENDING_FN3.Foreground = Brushes.Red;
                        }
                        else
                            txtBENDING_FN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtBENDING_FN4.Foreground = Brushes.Black;
                            else
                                txtBENDING_FN4.Foreground = Brushes.Red;
                        }
                        else
                            txtBENDING_FN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtBENDING_FN5.Foreground = Brushes.Black;
                            else
                                txtBENDING_FN5.Foreground = Brushes.Red;
                        }
                        else
                            txtBENDING_FN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtBENDING_FN6.Foreground = Brushes.Black;
                            else
                                txtBENDING_FN6.Foreground = Brushes.Red;
                        }
                        else
                            txtBENDING_FN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtBENDING_FN1.Foreground = Brushes.Black;
                    txtBENDING_FN2.Foreground = Brushes.Black;
                    txtBENDING_FN3.Foreground = Brushes.Black;
                    txtBENDING_FN4.Foreground = Brushes.Black;
                    txtBENDING_FN5.Foreground = Brushes.Black;
                    txtBENDING_FN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region BENDING_W_LostFocus
        private void BENDING_W_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                int? i = 0;
                decimal value;


                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtBENDING_WN1.Text))
                {
                    if (Decimal.TryParse(txtBENDING_WN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtBENDING_WN1.Text);
                        _session.P_BENDING_W1 = ave1;
                    }
                    else
                    {
                        txtBENDING_WN1.Text = string.Empty;
                        _session.P_BENDING_W1 = null;
                    }
                }
                else
                {
                    _session.P_BENDING_W1 = null;
                }

                if (!string.IsNullOrEmpty(txtBENDING_WN2.Text))
                {
                    if (Decimal.TryParse(txtBENDING_WN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtBENDING_WN2.Text);
                        _session.P_BENDING_W2 = ave2;
                    }
                    else
                    {
                        txtBENDING_WN2.Text = string.Empty;
                        _session.P_BENDING_W2 = null;
                    }
                }
                else
                {
                    _session.P_BENDING_W2 = null;
                }

                if (!string.IsNullOrEmpty(txtBENDING_WN3.Text))
                {
                    if (Decimal.TryParse(txtBENDING_WN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtBENDING_WN3.Text);
                        _session.P_BENDING_W3 = ave3;
                    }
                    else
                    {
                        txtBENDING_WN3.Text = string.Empty;
                        _session.P_BENDING_W3 = null;
                    }
                }
                else
                {
                    _session.P_BENDING_W3 = null;
                }

                if (!string.IsNullOrEmpty(txtBENDING_WN4.Text))
                {
                    if (Decimal.TryParse(txtBENDING_WN4.Text, out value))
                    {
                        //ave4 = decimal.Parse(txtBENDING_WN4.Text);
                    }
                    else
                    {
                        txtBENDING_WN4.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtBENDING_WN5.Text))
                {
                    if (Decimal.TryParse(txtBENDING_WN5.Text, out value))
                    {
                        //ave5 = decimal.Parse(txtBENDING_WN5.Text);
                    }
                    else
                    {
                        txtBENDING_WN5.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtBENDING_WN6.Text))
                {
                    if (Decimal.TryParse(txtBENDING_WN6.Text, out value))
                    {
                        //ave6 = decimal.Parse(txtBENDING_WN6.Text);
                    }
                    else
                    {
                        txtBENDING_WN6.Text = string.Empty;
                    }
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtBENDING_WAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtBENDING_WAve.Text = "0";
                    else
                        txtBENDING_WAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtBENDING_WSpecification.Text))
                {
                    string temp = txtBENDING_WSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtBENDING_WN1.Foreground = Brushes.Red;
                                    else
                                        txtBENDING_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtBENDING_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtBENDING_WN2.Foreground = Brushes.Red;
                                    else
                                        txtBENDING_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtBENDING_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtBENDING_WN3.Foreground = Brushes.Red;
                                    else
                                        txtBENDING_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtBENDING_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtBENDING_WN4.Foreground = Brushes.Red;
                                    else
                                        txtBENDING_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtBENDING_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtBENDING_WN5.Foreground = Brushes.Red;
                                    else
                                        txtBENDING_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtBENDING_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtBENDING_WN6.Foreground = Brushes.Red;
                                    else
                                        txtBENDING_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtBENDING_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtBENDING_WN1.Foreground = Brushes.Red;
                                    else
                                        txtBENDING_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtBENDING_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtBENDING_WN2.Foreground = Brushes.Red;
                                    else
                                        txtBENDING_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtBENDING_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtBENDING_WN3.Foreground = Brushes.Red;
                                    else
                                        txtBENDING_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtBENDING_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtBENDING_WN4.Foreground = Brushes.Red;
                                    else
                                        txtBENDING_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtBENDING_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtBENDING_WN5.Foreground = Brushes.Red;
                                    else
                                        txtBENDING_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtBENDING_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtBENDING_WN6.Foreground = Brushes.Red;
                                    else
                                        txtBENDING_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtBENDING_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtBENDING_WN1.Foreground = Brushes.Black;
                                    else
                                        txtBENDING_WN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtBENDING_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtBENDING_WN2.Foreground = Brushes.Black;
                                    else
                                        txtBENDING_WN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtBENDING_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtBENDING_WN3.Foreground = Brushes.Black;
                                    else
                                        txtBENDING_WN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtBENDING_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtBENDING_WN4.Foreground = Brushes.Black;
                                    else
                                        txtBENDING_WN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtBENDING_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtBENDING_WN5.Foreground = Brushes.Black;
                                    else
                                        txtBENDING_WN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtBENDING_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtBENDING_WN6.Foreground = Brushes.Black;
                                    else
                                        txtBENDING_WN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtBENDING_WN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtBENDING_WN1.Foreground = Brushes.Black;
                            else
                                txtBENDING_WN1.Foreground = Brushes.Red;
                        }
                        else
                            txtBENDING_WN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtBENDING_WN2.Foreground = Brushes.Black;
                            else
                                txtBENDING_WN2.Foreground = Brushes.Red;
                        }
                        else
                            txtBENDING_WN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtBENDING_WN3.Foreground = Brushes.Black;
                            else
                                txtBENDING_WN3.Foreground = Brushes.Red;
                        }
                        else
                            txtBENDING_WN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtBENDING_WN4.Foreground = Brushes.Black;
                            else
                                txtBENDING_WN4.Foreground = Brushes.Red;
                        }
                        else
                            txtBENDING_WN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtBENDING_WN5.Foreground = Brushes.Black;
                            else
                                txtBENDING_WN5.Foreground = Brushes.Red;
                        }
                        else
                            txtBENDING_WN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtBENDING_WN6.Foreground = Brushes.Black;
                            else
                                txtBENDING_WN6.Foreground = Brushes.Red;
                        }
                        else
                            txtBENDING_WN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtBENDING_WN1.Foreground = Brushes.Black;
                    txtBENDING_WN2.Foreground = Brushes.Black;
                    txtBENDING_WN3.Foreground = Brushes.Black;
                    txtBENDING_WN4.Foreground = Brushes.Black;
                    txtBENDING_WN5.Foreground = Brushes.Black;
                    txtBENDING_WN6.Foreground = Brushes.Black;
                }

                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region FLEX_SCOTT_F_LostFocus
        private void FLEX_SCOTT_F_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtFLEX_SCOTT_FN1.Text))
                {
                    if (Decimal.TryParse(txtFLEX_SCOTT_FN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtFLEX_SCOTT_FN1.Text);
                        _session.P_FLEX_SCOTT_F1 = ave1;
                    }
                    else
                    {
                        txtFLEX_SCOTT_FN1.Text = string.Empty;
                        _session.P_FLEX_SCOTT_F1 = null;
                    }
                }
                else
                {
                    _session.P_FLEX_SCOTT_F1 = null;
                }

                if (!string.IsNullOrEmpty(txtFLEX_SCOTT_FN2.Text))
                {
                    if (Decimal.TryParse(txtFLEX_SCOTT_FN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtFLEX_SCOTT_FN2.Text);
                        _session.P_FLEX_SCOTT_F2 = ave2;
                    }
                    else
                    {
                        txtFLEX_SCOTT_FN2.Text = string.Empty;
                        _session.P_FLEX_SCOTT_F2 = null;
                    }
                }
                else
                {
                    _session.P_FLEX_SCOTT_F2 = null;
                }

                if (!string.IsNullOrEmpty(txtFLEX_SCOTT_FN3.Text))
                {
                    if (Decimal.TryParse(txtFLEX_SCOTT_FN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtFLEX_SCOTT_FN3.Text);
                        _session.P_FLEX_SCOTT_F3 = ave3;
                    }
                    else
                    {
                        txtFLEX_SCOTT_FN3.Text = string.Empty;
                        _session.P_FLEX_SCOTT_F3 = null;
                    }
                }
                else
                {
                    _session.P_FLEX_SCOTT_F3 = null;
                }

                if (!string.IsNullOrEmpty(txtFLEX_SCOTT_FN4.Text))
                {
                    if (Decimal.TryParse(txtFLEX_SCOTT_FN4.Text, out value))
                    {
                        //ave4 = decimal.Parse(txtFLEX_SCOTT_FN4.Text);
                    }
                    else
                    {
                        txtFLEX_SCOTT_FN4.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtFLEX_SCOTT_FN5.Text))
                {
                    if (Decimal.TryParse(txtFLEX_SCOTT_FN5.Text, out value))
                    {
                        //ave5 = decimal.Parse(txtFLEX_SCOTT_FN5.Text);
                    }
                    else
                    {
                        txtFLEX_SCOTT_FN5.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtFLEX_SCOTT_FN6.Text))
                {
                    if (Decimal.TryParse(txtFLEX_SCOTT_FN6.Text, out value))
                    {
                        //ave6 = decimal.Parse(txtFLEX_SCOTT_FN6.Text);
                    }
                    else
                    {
                        txtFLEX_SCOTT_FN6.Text = string.Empty;
                    }
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtFLEX_SCOTT_FAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtFLEX_SCOTT_FAve.Text = "0";
                    else
                        txtFLEX_SCOTT_FAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtFLEX_SCOTT_FSpecification.Text))
                {
                    string temp = txtFLEX_SCOTT_FSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtFLEX_SCOTT_FN1.Foreground = Brushes.Red;
                                    else
                                        txtFLEX_SCOTT_FN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEX_SCOTT_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtFLEX_SCOTT_FN2.Foreground = Brushes.Red;
                                    else
                                        txtFLEX_SCOTT_FN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEX_SCOTT_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtFLEX_SCOTT_FN3.Foreground = Brushes.Red;
                                    else
                                        txtFLEX_SCOTT_FN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEX_SCOTT_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtFLEX_SCOTT_FN4.Foreground = Brushes.Red;
                                    else
                                        txtFLEX_SCOTT_FN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEX_SCOTT_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtFLEX_SCOTT_FN5.Foreground = Brushes.Red;
                                    else
                                        txtFLEX_SCOTT_FN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEX_SCOTT_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtFLEX_SCOTT_FN6.Foreground = Brushes.Red;
                                    else
                                        txtFLEX_SCOTT_FN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEX_SCOTT_FN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtFLEX_SCOTT_FN1.Foreground = Brushes.Red;
                                    else
                                        txtFLEX_SCOTT_FN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEX_SCOTT_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtFLEX_SCOTT_FN2.Foreground = Brushes.Red;
                                    else
                                        txtFLEX_SCOTT_FN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEX_SCOTT_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtFLEX_SCOTT_FN3.Foreground = Brushes.Red;
                                    else
                                        txtFLEX_SCOTT_FN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEX_SCOTT_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtFLEX_SCOTT_FN4.Foreground = Brushes.Red;
                                    else
                                        txtFLEX_SCOTT_FN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEX_SCOTT_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtFLEX_SCOTT_FN5.Foreground = Brushes.Red;
                                    else
                                        txtFLEX_SCOTT_FN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEX_SCOTT_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtFLEX_SCOTT_FN6.Foreground = Brushes.Red;
                                    else
                                        txtFLEX_SCOTT_FN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEX_SCOTT_FN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtFLEX_SCOTT_FN1.Foreground = Brushes.Black;
                                    else
                                        txtFLEX_SCOTT_FN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLEX_SCOTT_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtFLEX_SCOTT_FN2.Foreground = Brushes.Black;
                                    else
                                        txtFLEX_SCOTT_FN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLEX_SCOTT_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtFLEX_SCOTT_FN3.Foreground = Brushes.Black;
                                    else
                                        txtFLEX_SCOTT_FN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLEX_SCOTT_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtFLEX_SCOTT_FN4.Foreground = Brushes.Black;
                                    else
                                        txtFLEX_SCOTT_FN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLEX_SCOTT_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtFLEX_SCOTT_FN5.Foreground = Brushes.Black;
                                    else
                                        txtFLEX_SCOTT_FN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLEX_SCOTT_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtFLEX_SCOTT_FN6.Foreground = Brushes.Black;
                                    else
                                        txtFLEX_SCOTT_FN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLEX_SCOTT_FN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtFLEX_SCOTT_FN1.Foreground = Brushes.Black;
                            else
                                txtFLEX_SCOTT_FN1.Foreground = Brushes.Red;
                        }
                        else
                            txtFLEX_SCOTT_FN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtFLEX_SCOTT_FN2.Foreground = Brushes.Black;
                            else
                                txtFLEX_SCOTT_FN2.Foreground = Brushes.Red;
                        }
                        else
                            txtFLEX_SCOTT_FN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtFLEX_SCOTT_FN3.Foreground = Brushes.Black;
                            else
                                txtFLEX_SCOTT_FN3.Foreground = Brushes.Red;
                        }
                        else
                            txtFLEX_SCOTT_FN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtFLEX_SCOTT_FN4.Foreground = Brushes.Black;
                            else
                                txtFLEX_SCOTT_FN4.Foreground = Brushes.Red;
                        }
                        else
                            txtFLEX_SCOTT_FN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtFLEX_SCOTT_FN5.Foreground = Brushes.Black;
                            else
                                txtFLEX_SCOTT_FN5.Foreground = Brushes.Red;
                        }
                        else
                            txtFLEX_SCOTT_FN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtFLEX_SCOTT_FN6.Foreground = Brushes.Black;
                            else
                                txtFLEX_SCOTT_FN6.Foreground = Brushes.Red;
                        }
                        else
                            txtFLEX_SCOTT_FN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtFLEX_SCOTT_FN1.Foreground = Brushes.Black;
                    txtFLEX_SCOTT_FN2.Foreground = Brushes.Black;
                    txtFLEX_SCOTT_FN3.Foreground = Brushes.Black;
                    txtFLEX_SCOTT_FN4.Foreground = Brushes.Black;
                    txtFLEX_SCOTT_FN5.Foreground = Brushes.Black;
                    txtFLEX_SCOTT_FN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region FLEX_SCOTT_W_LostFocus
        private void FLEX_SCOTT_W_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (!string.IsNullOrEmpty(txtFLEX_SCOTT_WN1.Text))
                {
                    if (Decimal.TryParse(txtFLEX_SCOTT_WN1.Text, out value))
                    {
                        ave1 = decimal.Parse(txtFLEX_SCOTT_WN1.Text);
                        _session.P_FLEX_SCOTT_W1 = ave1;
                    }
                    else
                    {
                        txtFLEX_SCOTT_WN1.Text = string.Empty;
                        _session.P_FLEX_SCOTT_W1 = null;
                    }
                }
                else
                {
                    _session.P_FLEX_SCOTT_W1 = null;
                }

                if (!string.IsNullOrEmpty(txtFLEX_SCOTT_WN2.Text))
                {
                    if (Decimal.TryParse(txtFLEX_SCOTT_WN2.Text, out value))
                    {
                        ave2 = decimal.Parse(txtFLEX_SCOTT_WN2.Text);
                        _session.P_FLEX_SCOTT_W2 = ave2;
                    }
                    else
                    {
                        txtFLEX_SCOTT_WN2.Text = string.Empty;
                        _session.P_FLEX_SCOTT_W2 = null;
                    }
                }
                else
                {
                    _session.P_FLEX_SCOTT_W2 = null;
                }

                if (!string.IsNullOrEmpty(txtFLEX_SCOTT_WN3.Text))
                {
                    if (Decimal.TryParse(txtFLEX_SCOTT_WN3.Text, out value))
                    {
                        ave3 = decimal.Parse(txtFLEX_SCOTT_WN3.Text);
                        _session.P_FLEX_SCOTT_W3 = ave3;
                    }
                    else
                    {
                        txtFLEX_SCOTT_WN3.Text = string.Empty;
                        _session.P_FLEX_SCOTT_W3 = null;
                    }
                }
                else
                {
                    _session.P_FLEX_SCOTT_W3 = null;
                }

                if (!string.IsNullOrEmpty(txtFLEX_SCOTT_WN4.Text))
                {
                    if (Decimal.TryParse(txtFLEX_SCOTT_WN4.Text, out value))
                    {
                        //ave4 = decimal.Parse(txtFLEX_SCOTT_WN4.Text);
                    }
                    else
                    {
                        txtFLEX_SCOTT_WN4.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtFLEX_SCOTT_WN5.Text))
                {
                    if (Decimal.TryParse(txtFLEX_SCOTT_WN5.Text, out value))
                    {
                        //ave5 = decimal.Parse(txtFLEX_SCOTT_WN5.Text);
                    }
                    else
                    {
                        txtFLEX_SCOTT_WN5.Text = string.Empty;
                    }
                }

                if (!string.IsNullOrEmpty(txtFLEX_SCOTT_WN6.Text))
                {
                    if (Decimal.TryParse(txtFLEX_SCOTT_WN6.Text, out value))
                    {
                        //ave6 = decimal.Parse(txtFLEX_SCOTT_WN6.Text);
                    }
                    else
                    {
                        txtFLEX_SCOTT_WN6.Text = string.Empty;
                    }
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtFLEX_SCOTT_WAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtFLEX_SCOTT_WAve.Text = "0";
                    else
                        txtFLEX_SCOTT_WAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtFLEX_SCOTT_WSpecification.Text))
                {
                    string temp = txtFLEX_SCOTT_WSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtFLEX_SCOTT_WN1.Foreground = Brushes.Red;
                                    else
                                        txtFLEX_SCOTT_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEX_SCOTT_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtFLEX_SCOTT_WN2.Foreground = Brushes.Red;
                                    else
                                        txtFLEX_SCOTT_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEX_SCOTT_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtFLEX_SCOTT_WN3.Foreground = Brushes.Red;
                                    else
                                        txtFLEX_SCOTT_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEX_SCOTT_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtFLEX_SCOTT_WN4.Foreground = Brushes.Red;
                                    else
                                        txtFLEX_SCOTT_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEX_SCOTT_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtFLEX_SCOTT_WN5.Foreground = Brushes.Red;
                                    else
                                        txtFLEX_SCOTT_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEX_SCOTT_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtFLEX_SCOTT_WN6.Foreground = Brushes.Red;
                                    else
                                        txtFLEX_SCOTT_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEX_SCOTT_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtFLEX_SCOTT_WN1.Foreground = Brushes.Red;
                                    else
                                        txtFLEX_SCOTT_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEX_SCOTT_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtFLEX_SCOTT_WN2.Foreground = Brushes.Red;
                                    else
                                        txtFLEX_SCOTT_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEX_SCOTT_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtFLEX_SCOTT_WN3.Foreground = Brushes.Red;
                                    else
                                        txtFLEX_SCOTT_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEX_SCOTT_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtFLEX_SCOTT_WN4.Foreground = Brushes.Red;
                                    else
                                        txtFLEX_SCOTT_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEX_SCOTT_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtFLEX_SCOTT_WN5.Foreground = Brushes.Red;
                                    else
                                        txtFLEX_SCOTT_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEX_SCOTT_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtFLEX_SCOTT_WN6.Foreground = Brushes.Red;
                                    else
                                        txtFLEX_SCOTT_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtFLEX_SCOTT_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtFLEX_SCOTT_WN1.Foreground = Brushes.Black;
                                    else
                                        txtFLEX_SCOTT_WN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLEX_SCOTT_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtFLEX_SCOTT_WN2.Foreground = Brushes.Black;
                                    else
                                        txtFLEX_SCOTT_WN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLEX_SCOTT_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtFLEX_SCOTT_WN3.Foreground = Brushes.Black;
                                    else
                                        txtFLEX_SCOTT_WN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLEX_SCOTT_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtFLEX_SCOTT_WN4.Foreground = Brushes.Black;
                                    else
                                        txtFLEX_SCOTT_WN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLEX_SCOTT_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtFLEX_SCOTT_WN5.Foreground = Brushes.Black;
                                    else
                                        txtFLEX_SCOTT_WN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLEX_SCOTT_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtFLEX_SCOTT_WN6.Foreground = Brushes.Black;
                                    else
                                        txtFLEX_SCOTT_WN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtFLEX_SCOTT_WN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtFLEX_SCOTT_WN1.Foreground = Brushes.Black;
                            else
                                txtFLEX_SCOTT_WN1.Foreground = Brushes.Red;
                        }
                        else
                            txtFLEX_SCOTT_WN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtFLEX_SCOTT_WN2.Foreground = Brushes.Black;
                            else
                                txtFLEX_SCOTT_WN2.Foreground = Brushes.Red;
                        }
                        else
                            txtFLEX_SCOTT_WN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtFLEX_SCOTT_WN3.Foreground = Brushes.Black;
                            else
                                txtFLEX_SCOTT_WN3.Foreground = Brushes.Red;
                        }
                        else
                            txtFLEX_SCOTT_WN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtFLEX_SCOTT_WN4.Foreground = Brushes.Black;
                            else
                                txtFLEX_SCOTT_WN4.Foreground = Brushes.Red;
                        }
                        else
                            txtFLEX_SCOTT_WN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtFLEX_SCOTT_WN5.Foreground = Brushes.Black;
                            else
                                txtFLEX_SCOTT_WN5.Foreground = Brushes.Red;
                        }
                        else
                            txtFLEX_SCOTT_WN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtFLEX_SCOTT_WN6.Foreground = Brushes.Black;
                            else
                                txtFLEX_SCOTT_WN6.Foreground = Brushes.Red;
                        }
                        else
                            txtFLEX_SCOTT_WN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtFLEX_SCOTT_WN1.Foreground = Brushes.Black;
                    txtFLEX_SCOTT_WN2.Foreground = Brushes.Black;
                    txtFLEX_SCOTT_WN3.Foreground = Brushes.Black;
                    txtFLEX_SCOTT_WN4.Foreground = Brushes.Black;
                    txtFLEX_SCOTT_WN5.Foreground = Brushes.Black;
                    txtFLEX_SCOTT_WN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion       

        //Update 04/01/21
        #region Cel Coatweight

        #region cal_Coatweight1

        private void cal_Coatweight1()
        {
            try
            {
                decimal value;

                decimal? ave1 = null;
                decimal? total1 = 0;
                decimal? uncoated1 = 0;
          
                #region Total

                #region total1
                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN1.Text))
                {
                    if (Decimal.TryParse(txtTOTALWEIGHTN1.Text, out value))
                    {
                        total1 = decimal.Parse(txtTOTALWEIGHTN1.Text);
                    }
                }
                #endregion

                #endregion

                #region uncoated

                #region uncoated1
                if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN1.Text))
                {
                    if (Decimal.TryParse(txtUNCOATEDWEIGHTN1.Text, out value))
                    {
                        uncoated1 = decimal.Parse(txtUNCOATEDWEIGHTN1.Text);
                    }
                }
                #endregion

                #endregion

                #region P_COATWEIGHT1

                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN1.Text) || !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN1.Text))
                {
                    _session.P_COATWEIGHT1 = (total1 - uncoated1);
                    ave1 = _session.P_COATWEIGHT1;
                    txtCOATINGWEIGHTN1.Text = ave1.ToString();
                }
                else
                {
                    if (string.IsNullOrEmpty(txtCOATINGWEIGHTN1.Text))
                    {
                        txtCOATINGWEIGHTN1.Text = string.Empty;
                        _session.P_COATWEIGHT1 = null;
                    }
                }

                #endregion

                avg_CoatedWeight();
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }

        #endregion

        #region cal_Coatweight2

        private void cal_Coatweight2()
        {
            try
            {
                decimal value;

                decimal? ave2 = null;
                decimal? total2 = 0;
                decimal? uncoated2 = 0;

                #region Total

                #region total2
                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN2.Text))
                {
                    if (Decimal.TryParse(txtTOTALWEIGHTN2.Text, out value))
                    {
                        total2 = decimal.Parse(txtTOTALWEIGHTN2.Text);
                    }
                }
                #endregion

                #endregion

                #region uncoated

                #region uncoated2
                if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN2.Text))
                {
                    if (Decimal.TryParse(txtUNCOATEDWEIGHTN2.Text, out value))
                    {
                        uncoated2 = decimal.Parse(txtUNCOATEDWEIGHTN2.Text);
                    }
                }
                #endregion

                #endregion

                #region P_COATWEIGHT2

                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN2.Text) || !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN2.Text))
                {
                    _session.P_COATWEIGHT2 = (total2 - uncoated2);
                    ave2 = _session.P_COATWEIGHT2;
                    txtCOATINGWEIGHTN2.Text = ave2.ToString();
                }
                else
                {
                    if (string.IsNullOrEmpty(txtCOATINGWEIGHTN2.Text))
                    {
                        txtCOATINGWEIGHTN2.Text = string.Empty;
                        _session.P_COATWEIGHT2 = null;
                    }
                }

                #endregion

                avg_CoatedWeight();
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }

        #endregion

        #region cal_Coatweight3

        private void cal_Coatweight3()
        {
            try
            {
                decimal value;

                decimal? ave3 = null;
                decimal? total3 = 0;
                decimal? uncoated3 = 0;

                #region Total

                #region total3
                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN3.Text))
                {
                    if (Decimal.TryParse(txtTOTALWEIGHTN3.Text, out value))
                    {
                        total3 = decimal.Parse(txtTOTALWEIGHTN3.Text);
                    }
                }
                #endregion

                #endregion

                #region uncoated

                #region uncoated3
                if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN3.Text))
                {
                    if (Decimal.TryParse(txtUNCOATEDWEIGHTN3.Text, out value))
                    {
                        uncoated3 = decimal.Parse(txtUNCOATEDWEIGHTN3.Text);
                    }
                }
                #endregion

                #endregion

                #region P_COATWEIGHT3

                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN3.Text) || !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN3.Text))
                {
                    _session.P_COATWEIGHT3 = (total3 - uncoated3);
                    ave3 = _session.P_COATWEIGHT3;
                    txtCOATINGWEIGHTN3.Text = ave3.ToString();
                }
                else
                {
                    if (string.IsNullOrEmpty(txtCOATINGWEIGHTN3.Text))
                    {
                        txtCOATINGWEIGHTN3.Text = string.Empty;
                        _session.P_COATWEIGHT3 = null;
                    }
                }

                #endregion

                avg_CoatedWeight();
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }

        #endregion

        #region cal_Coatweight4

        private void cal_Coatweight4()
        {
            try
            {
                decimal value;

                decimal? ave4 = null;
                decimal? total4 = 0;
                decimal? uncoated4 = 0;

                #region Total

                #region total4
                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN4.Text))
                {
                    if (Decimal.TryParse(txtTOTALWEIGHTN4.Text, out value))
                    {
                        total4 = decimal.Parse(txtTOTALWEIGHTN4.Text);
                    }
                }
                #endregion

                #endregion

                #region uncoated

                #region uncoated4
                if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN4.Text))
                {
                    if (Decimal.TryParse(txtUNCOATEDWEIGHTN4.Text, out value))
                    {
                        uncoated4 = decimal.Parse(txtUNCOATEDWEIGHTN4.Text);
                    }
                }
                #endregion

                #endregion

                #region P_COATWEIGHT4

                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN4.Text) || !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN4.Text))
                {
                    _session.P_COATWEIGHT4 = (total4 - uncoated4);
                    ave4 = _session.P_COATWEIGHT4;
                    txtCOATINGWEIGHTN4.Text = ave4.ToString();
                }
                else
                {
                    if (string.IsNullOrEmpty(txtCOATINGWEIGHTN4.Text))
                    {
                        txtCOATINGWEIGHTN4.Text = string.Empty;
                        _session.P_COATWEIGHT4 = null;
                    }
                }

                #endregion

                avg_CoatedWeight();
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }

        #endregion

        #region cal_Coatweight5

        private void cal_Coatweight5()
        {
            try
            {
                decimal value;

                decimal? ave5 = null;
                decimal? total5 = 0;
                decimal? uncoated5 = 0;

                #region Total

                #region total5
                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN5.Text))
                {
                    if (Decimal.TryParse(txtTOTALWEIGHTN5.Text, out value))
                    {
                        total5 = decimal.Parse(txtTOTALWEIGHTN5.Text);
                    }
                }
                #endregion

                #endregion

                #region uncoated

                #region uncoated5
                if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN5.Text))
                {
                    if (Decimal.TryParse(txtUNCOATEDWEIGHTN5.Text, out value))
                    {
                        uncoated5 = decimal.Parse(txtUNCOATEDWEIGHTN5.Text);
                    }
                }
                #endregion

                #endregion

                #region P_COATWEIGHT5

                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN5.Text) || !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN5.Text))
                {
                    _session.P_COATWEIGHT5 = (total5 - uncoated5);
                    ave5 = _session.P_COATWEIGHT5;
                    txtCOATINGWEIGHTN5.Text = ave5.ToString();
                }
                else
                {
                    if (string.IsNullOrEmpty(txtCOATINGWEIGHTN5.Text))
                    {
                        txtCOATINGWEIGHTN5.Text = string.Empty;
                        _session.P_COATWEIGHT5 = null;
                    }
                }

                #endregion

                avg_CoatedWeight();
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }

        #endregion

        #region cal_Coatweight6

        private void cal_Coatweight6()
        {
            try
            {
                decimal value;

                decimal? ave6 = null;
                decimal? total6 = 0;
                decimal? uncoated6 = 0;

                #region Total

                #region total6
                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN6.Text))
                {
                    if (Decimal.TryParse(txtTOTALWEIGHTN6.Text, out value))
                    {
                        total6 = decimal.Parse(txtTOTALWEIGHTN6.Text);
                    }
                }
                #endregion

                #endregion

                #region uncoated

                #region uncoated6
                if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN6.Text))
                {
                    if (Decimal.TryParse(txtUNCOATEDWEIGHTN6.Text, out value))
                    {
                        uncoated6 = decimal.Parse(txtUNCOATEDWEIGHTN6.Text);
                    }
                }
                #endregion

                #endregion

                #region P_COATWEIGHT6

                if (!string.IsNullOrEmpty(txtTOTALWEIGHTN6.Text) || !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN6.Text))
                {
                    _session.P_COATWEIGHT6 = (total6 - uncoated6);
                    ave6 = _session.P_COATWEIGHT6;
                    txtCOATINGWEIGHTN6.Text = ave6.ToString();
                }
                else
                {
                    if (string.IsNullOrEmpty(txtCOATINGWEIGHTN6.Text))
                    {
                        txtCOATINGWEIGHTN6.Text = string.Empty;
                        _session.P_COATWEIGHT6 = null;
                    }
                }

                #endregion

                avg_CoatedWeight();
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }

        #endregion

        #region avg_CoatedWeight

        private void avg_CoatedWeight()
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? ave1 = null;
                decimal? ave2 = null;
                decimal? ave3 = null;
                decimal? ave4 = null;
                decimal? ave5 = null;
                decimal? ave6 = null;

                if (_session.P_COATWEIGHT1 != null)
                    ave1 = _session.P_COATWEIGHT1;

                if (_session.P_COATWEIGHT2 != null)
                    ave2 = _session.P_COATWEIGHT2;

                if (_session.P_COATWEIGHT3 != null)
                    ave3 = _session.P_COATWEIGHT3;

                if (_session.P_COATWEIGHT4 != null)
                    ave4 = _session.P_COATWEIGHT4;

                if (_session.P_COATWEIGHT5 != null)
                    ave5 = _session.P_COATWEIGHT5;

                if (_session.P_COATWEIGHT6 != null)
                    ave6 = _session.P_COATWEIGHT6;

                decimal? Avg = 0;

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtCOATINGWEIGHTAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtCOATINGWEIGHTAve.Text = "0";
                    else
                        txtCOATINGWEIGHTAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtCOATINGWEIGHTSpecification.Text))
                {
                    string temp = txtCOATINGWEIGHTSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtCOATINGWEIGHTN1.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtCOATINGWEIGHTN2.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtCOATINGWEIGHTN3.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtCOATINGWEIGHTN4.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtCOATINGWEIGHTN5.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtCOATINGWEIGHTN6.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtCOATINGWEIGHTN1.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtCOATINGWEIGHTN2.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtCOATINGWEIGHTN3.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtCOATINGWEIGHTN4.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtCOATINGWEIGHTN5.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtCOATINGWEIGHTN6.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtCOATINGWEIGHTN1.Foreground = Brushes.Black;
                                    else
                                        txtCOATINGWEIGHTN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtCOATINGWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtCOATINGWEIGHTN2.Foreground = Brushes.Black;
                                    else
                                        txtCOATINGWEIGHTN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtCOATINGWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtCOATINGWEIGHTN3.Foreground = Brushes.Black;
                                    else
                                        txtCOATINGWEIGHTN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtCOATINGWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtCOATINGWEIGHTN4.Foreground = Brushes.Black;
                                    else
                                        txtCOATINGWEIGHTN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtCOATINGWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtCOATINGWEIGHTN5.Foreground = Brushes.Black;
                                    else
                                        txtCOATINGWEIGHTN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtCOATINGWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                                    else
                                        txtCOATINGWEIGHTN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtCOATINGWEIGHTN1.Foreground = Brushes.Black;
                            else
                                txtCOATINGWEIGHTN1.Foreground = Brushes.Red;
                        }
                        else
                            txtCOATINGWEIGHTN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtCOATINGWEIGHTN2.Foreground = Brushes.Black;
                            else
                                txtCOATINGWEIGHTN2.Foreground = Brushes.Red;
                        }
                        else
                            txtCOATINGWEIGHTN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtCOATINGWEIGHTN3.Foreground = Brushes.Black;
                            else
                                txtCOATINGWEIGHTN3.Foreground = Brushes.Red;
                        }
                        else
                            txtCOATINGWEIGHTN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtCOATINGWEIGHTN4.Foreground = Brushes.Black;
                            else
                                txtCOATINGWEIGHTN4.Foreground = Brushes.Red;
                        }
                        else
                            txtCOATINGWEIGHTN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtCOATINGWEIGHTN5.Foreground = Brushes.Black;
                            else
                                txtCOATINGWEIGHTN5.Foreground = Brushes.Red;
                        }
                        else
                            txtCOATINGWEIGHTN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                            else
                                txtCOATINGWEIGHTN6.Foreground = Brushes.Red;
                        }
                        else
                            txtCOATINGWEIGHTN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtCOATINGWEIGHTN1.Foreground = Brushes.Black;
                    txtCOATINGWEIGHTN2.Foreground = Brushes.Black;
                    txtCOATINGWEIGHTN3.Foreground = Brushes.Black;
                    txtCOATINGWEIGHTN4.Foreground = Brushes.Black;
                    txtCOATINGWEIGHTN5.Foreground = Brushes.Black;
                    txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                }
                #endregion
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }

        #endregion

        #region TotalWeight_UncoatedWeight

        //private void TotalWeight_UncoatedWeight()
        //{
        //    try
        //    {
        //        int? i = 0;
        //        decimal value;

        //        decimal? ave1 = null;
        //        decimal? ave2 = null;
        //        decimal? ave3 = null;
        //        decimal? ave4 = null;
        //        decimal? ave5 = null;
        //        decimal? ave6 = null;

        //        decimal? total1 = 0;
        //        decimal? total2 = 0;
        //        decimal? total3 = 0;
        //        decimal? total4 = 0;
        //        decimal? total5 = 0;
        //        decimal? total6 = 0;

        //        decimal? uncoated1 = 0;
        //        decimal? uncoated2 = 0;
        //        decimal? uncoated3 = 0;
        //        decimal? uncoated4 = 0;
        //        decimal? uncoated5 = 0;
        //        decimal? uncoated6 = 0;

        //        #region Total

        //        #region total1
        //        if (!string.IsNullOrEmpty(txtTOTALWEIGHTN1.Text))
        //        {
        //            if (Decimal.TryParse(txtTOTALWEIGHTN1.Text, out value))
        //            {
        //                total1 = decimal.Parse(txtTOTALWEIGHTN1.Text);
        //            }
        //        }
        //        #endregion

        //        #region total2
        //        if (!string.IsNullOrEmpty(txtTOTALWEIGHTN2.Text))
        //        {
        //            if (Decimal.TryParse(txtTOTALWEIGHTN2.Text, out value))
        //            {
        //                total2 = decimal.Parse(txtTOTALWEIGHTN2.Text);
        //            }
        //        }
        //        #endregion

        //        #region total3
        //        if (!string.IsNullOrEmpty(txtTOTALWEIGHTN3.Text))
        //        {
        //            if (Decimal.TryParse(txtTOTALWEIGHTN3.Text, out value))
        //            {
        //                total3 = decimal.Parse(txtTOTALWEIGHTN3.Text);
        //            }
        //        }
        //        #endregion

        //        #region total4
        //        if (!string.IsNullOrEmpty(txtTOTALWEIGHTN4.Text))
        //        {
        //            if (Decimal.TryParse(txtTOTALWEIGHTN4.Text, out value))
        //            {
        //                total4 = decimal.Parse(txtTOTALWEIGHTN4.Text);
        //            }
        //        }
        //        #endregion

        //        #region total5
        //        if (!string.IsNullOrEmpty(txtTOTALWEIGHTN5.Text))
        //        {
        //            if (Decimal.TryParse(txtTOTALWEIGHTN5.Text, out value))
        //            {
        //                total5 = decimal.Parse(txtTOTALWEIGHTN5.Text);
        //            }
        //        }
        //        #endregion

        //        #region total6
        //        if (!string.IsNullOrEmpty(txtTOTALWEIGHTN6.Text))
        //        {
        //            if (Decimal.TryParse(txtTOTALWEIGHTN6.Text, out value))
        //            {
        //                total6 = decimal.Parse(txtTOTALWEIGHTN6.Text);
        //            }
        //        }
        //        #endregion

        //        #endregion

        //        #region uncoated

        //        #region uncoated1
        //        if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN1.Text))
        //        {
        //            if (Decimal.TryParse(txtUNCOATEDWEIGHTN1.Text, out value))
        //            {
        //                uncoated1 = decimal.Parse(txtUNCOATEDWEIGHTN1.Text);
        //            }
        //        }
        //        #endregion

        //        #region uncoated2
        //        if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN2.Text))
        //        {
        //            if (Decimal.TryParse(txtUNCOATEDWEIGHTN2.Text, out value))
        //            {
        //                uncoated2 = decimal.Parse(txtUNCOATEDWEIGHTN2.Text);
        //            }
        //        }
        //        #endregion

        //        #region uncoated3
        //        if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN3.Text))
        //        {
        //            if (Decimal.TryParse(txtUNCOATEDWEIGHTN3.Text, out value))
        //            {
        //                uncoated3 = decimal.Parse(txtUNCOATEDWEIGHTN3.Text);
        //            }
        //        }
        //        #endregion

        //        #region uncoated4
        //        if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN4.Text))
        //        {
        //            if (Decimal.TryParse(txtUNCOATEDWEIGHTN4.Text, out value))
        //            {
        //                uncoated4 = decimal.Parse(txtUNCOATEDWEIGHTN4.Text);
        //            }
        //        }
        //        #endregion

        //        #region uncoated5
        //        if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN5.Text))
        //        {
        //            if (Decimal.TryParse(txtUNCOATEDWEIGHTN5.Text, out value))
        //            {
        //                uncoated5 = decimal.Parse(txtUNCOATEDWEIGHTN5.Text);
        //            }
        //        }
        //        #endregion

        //        #region uncoated6
        //        if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN6.Text))
        //        {
        //            if (Decimal.TryParse(txtUNCOATEDWEIGHTN6.Text, out value))
        //            {
        //                uncoated6 = decimal.Parse(txtUNCOATEDWEIGHTN6.Text);
        //            }
        //        }
        //        #endregion

        //        #endregion

        //        #region P_COATWEIGHT1

        //        if (!string.IsNullOrEmpty(txtTOTALWEIGHTN1.Text) || !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN1.Text))
        //        {
        //            _session.P_COATWEIGHT1 = (total1 - uncoated1);
        //            ave1 = _session.P_COATWEIGHT1;
        //            txtCOATINGWEIGHTN1.Text = ave1.ToString();
        //        }
        //        else
        //        {
        //            if (string.IsNullOrEmpty(txtCOATINGWEIGHTN1.Text))
        //            {
        //                txtCOATINGWEIGHTN1.Text = string.Empty;
        //                _session.P_COATWEIGHT1 = null;
        //            }
        //        }

        //        #endregion

        //        #region P_COATWEIGHT2

        //        if (!string.IsNullOrEmpty(txtTOTALWEIGHTN2.Text) || !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN2.Text))
        //        {
        //            _session.P_COATWEIGHT2 = (total2 - uncoated2);
        //            ave2 = _session.P_COATWEIGHT2;
        //            txtCOATINGWEIGHTN2.Text = ave2.ToString();
        //        }
        //        else
        //        {
        //            if (string.IsNullOrEmpty(txtCOATINGWEIGHTN2.Text))
        //            {
        //                txtCOATINGWEIGHTN2.Text = string.Empty;
        //                _session.P_COATWEIGHT2 = null;
        //            }
        //        }

        //        #endregion

        //        #region P_COATWEIGHT3

        //        if (!string.IsNullOrEmpty(txtTOTALWEIGHTN3.Text) || !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN3.Text))
        //        {
        //            _session.P_COATWEIGHT3 = (total3 - uncoated3);
        //            ave3 = _session.P_COATWEIGHT3;
        //            txtCOATINGWEIGHTN3.Text = ave3.ToString();
        //        }
        //        else
        //        {
        //            if (string.IsNullOrEmpty(txtCOATINGWEIGHTN3.Text))
        //            {
        //                txtCOATINGWEIGHTN3.Text = string.Empty;
        //                _session.P_COATWEIGHT3 = null;
        //            }
        //        }

        //        #endregion

        //        #region P_COATWEIGHT4

        //        if (!string.IsNullOrEmpty(txtTOTALWEIGHTN4.Text) || !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN4.Text))
        //        {
        //            _session.P_COATWEIGHT4 = (total4 - uncoated4);
        //            ave4 = _session.P_COATWEIGHT4;
        //            txtCOATINGWEIGHTN4.Text = ave4.ToString();
        //        }
        //        else
        //        {
        //            if (string.IsNullOrEmpty(txtCOATINGWEIGHTN4.Text))
        //            {
        //                txtCOATINGWEIGHTN4.Text = string.Empty;
        //                _session.P_COATWEIGHT4 = null;
        //            }
        //        }

        //        #endregion

        //        #region P_COATWEIGHT5

        //        if (!string.IsNullOrEmpty(txtTOTALWEIGHTN5.Text) || !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN5.Text))
        //        {
        //            _session.P_COATWEIGHT5 = (total5 - uncoated5);
        //            ave5 = _session.P_COATWEIGHT5;
        //            txtCOATINGWEIGHTN5.Text = ave5.ToString();
        //        }
        //        else
        //        {
        //            if (string.IsNullOrEmpty(txtCOATINGWEIGHTN5.Text))
        //            {
        //                txtCOATINGWEIGHTN5.Text = string.Empty;
        //                _session.P_COATWEIGHT5 = null;
        //            }
        //        }

        //        #endregion

        //        #region P_COATWEIGHT6

        //        if (!string.IsNullOrEmpty(txtTOTALWEIGHTN6.Text) || !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN6.Text))
        //        {
        //            _session.P_COATWEIGHT6 = (total6 - uncoated6);
        //            ave6 = _session.P_COATWEIGHT6;
        //            txtCOATINGWEIGHTN6.Text = ave6.ToString();
        //        }
        //        else
        //        {
        //            if (string.IsNullOrEmpty(txtCOATINGWEIGHTN6.Text))
        //            {
        //                txtCOATINGWEIGHTN6.Text = string.Empty;
        //                _session.P_COATWEIGHT6 = null;
        //            }
        //        }

        //        #endregion

        //        decimal? Avg = 0;

        //        #region New

        //        if (ave1 == null)
        //            ave1 = 0;
        //        else
        //            i++;

        //        if (ave2 == null)
        //            ave2 = 0;
        //        else
        //            i++;

        //        if (ave3 == null)
        //            ave3 = 0;
        //        else
        //            i++;

        //        if (ave4 == null)
        //            ave4 = 0;
        //        else
        //            i++;

        //        if (ave5 == null)
        //            ave5 = 0;
        //        else
        //            i++;

        //        if (ave6 == null)
        //            ave6 = 0;
        //        else
        //            i++;

        //        #endregion

        //        if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
        //        {
        //            Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

        //            txtCOATINGWEIGHTAve.Text = Avg.Value.ToString("#,##0.##");
        //        }
        //        else
        //        {
        //            if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
        //                txtCOATINGWEIGHTAve.Text = "0";
        //            else
        //                txtCOATINGWEIGHTAve.Text = "";
        //        }

        //        #region Foreground
        //        if (!string.IsNullOrEmpty(txtCOATINGWEIGHTSpecification.Text))
        //        {
        //            string temp = txtCOATINGWEIGHTSpecification.Text;

        //            decimal? num = null;
        //            decimal? num2 = null;
        //            decimal? num3 = null;

        //            decimal? lower = null;
        //            decimal? upper = null;

        //            String strString = temp.Substring(0, temp.Length).Trim();
        //            strString = strString.Replace(" ", "&").TrimEnd();
        //            String[] myArr = strString.Split('&');

        //            if (myArr.Length > 1)
        //            {
        //                if (myArr[1] != null)
        //                {
        //                    if (temp.Contains("MAX"))
        //                    {
        //                        if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
        //                            num = decimal.Parse(myArr[1].ToString().Trim());

        //                        if (ave1 != null && ave1 != 0)
        //                        {
        //                            if (num < ave1)
        //                                txtCOATINGWEIGHTN1.Foreground = Brushes.Red;
        //                            else
        //                                txtCOATINGWEIGHTN1.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtCOATINGWEIGHTN1.Foreground = Brushes.Black;

        //                        if (ave2 != null && ave2 != 0)
        //                        {
        //                            if (num < ave2)
        //                                txtCOATINGWEIGHTN2.Foreground = Brushes.Red;
        //                            else
        //                                txtCOATINGWEIGHTN2.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtCOATINGWEIGHTN2.Foreground = Brushes.Black;

        //                        if (ave3 != null && ave3 != 0)
        //                        {
        //                            if (num < ave3)
        //                                txtCOATINGWEIGHTN3.Foreground = Brushes.Red;
        //                            else
        //                                txtCOATINGWEIGHTN3.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtCOATINGWEIGHTN3.Foreground = Brushes.Black;

        //                        if (ave4 != null && ave4 != 0)
        //                        {
        //                            if (num < ave4)
        //                                txtCOATINGWEIGHTN4.Foreground = Brushes.Red;
        //                            else
        //                                txtCOATINGWEIGHTN4.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtCOATINGWEIGHTN4.Foreground = Brushes.Black;

        //                        if (ave5 != null && ave5 != 0)
        //                        {
        //                            if (num < ave5)
        //                                txtCOATINGWEIGHTN5.Foreground = Brushes.Red;
        //                            else
        //                                txtCOATINGWEIGHTN5.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtCOATINGWEIGHTN5.Foreground = Brushes.Black;

        //                        if (ave6 != null && ave6 != 0)
        //                        {
        //                            if (num < ave6)
        //                                txtCOATINGWEIGHTN6.Foreground = Brushes.Red;
        //                            else
        //                                txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
        //                    }
        //                    else if (temp.Contains("MIN"))
        //                    {
        //                        if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
        //                            num = decimal.Parse(myArr[1].ToString().Trim());

        //                        if (ave1 != null && ave1 != 0)
        //                        {
        //                            if (num > ave1)
        //                                txtCOATINGWEIGHTN1.Foreground = Brushes.Red;
        //                            else
        //                                txtCOATINGWEIGHTN1.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtCOATINGWEIGHTN1.Foreground = Brushes.Black;

        //                        if (ave2 != null && ave2 != 0)
        //                        {
        //                            if (num > ave2)
        //                                txtCOATINGWEIGHTN2.Foreground = Brushes.Red;
        //                            else
        //                                txtCOATINGWEIGHTN2.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtCOATINGWEIGHTN2.Foreground = Brushes.Black;

        //                        if (ave3 != null && ave3 != 0)
        //                        {
        //                            if (num > ave3)
        //                                txtCOATINGWEIGHTN3.Foreground = Brushes.Red;
        //                            else
        //                                txtCOATINGWEIGHTN3.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtCOATINGWEIGHTN3.Foreground = Brushes.Black;

        //                        if (ave4 != null && ave4 != 0)
        //                        {
        //                            if (num > ave4)
        //                                txtCOATINGWEIGHTN4.Foreground = Brushes.Red;
        //                            else
        //                                txtCOATINGWEIGHTN4.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtCOATINGWEIGHTN4.Foreground = Brushes.Black;

        //                        if (ave5 != null && ave5 != 0)
        //                        {
        //                            if (num > ave5)
        //                                txtCOATINGWEIGHTN5.Foreground = Brushes.Red;
        //                            else
        //                                txtCOATINGWEIGHTN5.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtCOATINGWEIGHTN5.Foreground = Brushes.Black;

        //                        if (ave6 != null && ave6 != 0)
        //                        {
        //                            if (num > ave6)
        //                                txtCOATINGWEIGHTN6.Foreground = Brushes.Red;
        //                            else
        //                                txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
        //                        }
        //                        else
        //                            txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
        //                    }
        //                    else if (temp.Contains("+/-"))
        //                    {
        //                        if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
        //                            num = decimal.Parse(myArr[0].ToString().Trim());

        //                        if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
        //                            num2 = decimal.Parse(myArr[2].ToString().Trim());

        //                        lower = num - num2;
        //                        upper = num + num2;

        //                        if (ave1 != null && ave1 != 0)
        //                        {
        //                            if (lower <= ave1 && ave1 <= upper)
        //                                txtCOATINGWEIGHTN1.Foreground = Brushes.Black;
        //                            else
        //                                txtCOATINGWEIGHTN1.Foreground = Brushes.Red;
        //                        }
        //                        else
        //                            txtCOATINGWEIGHTN1.Foreground = Brushes.Black;

        //                        if (ave2 != null && ave2 != 0)
        //                        {
        //                            if (lower <= ave2 && ave2 <= upper)
        //                                txtCOATINGWEIGHTN2.Foreground = Brushes.Black;
        //                            else
        //                                txtCOATINGWEIGHTN2.Foreground = Brushes.Red;
        //                        }
        //                        else
        //                            txtCOATINGWEIGHTN2.Foreground = Brushes.Black;

        //                        if (ave3 != null && ave3 != 0)
        //                        {
        //                            if (lower <= ave3 && ave3 <= upper)
        //                                txtCOATINGWEIGHTN3.Foreground = Brushes.Black;
        //                            else
        //                                txtCOATINGWEIGHTN3.Foreground = Brushes.Red;
        //                        }
        //                        else
        //                            txtCOATINGWEIGHTN3.Foreground = Brushes.Black;

        //                        if (ave4 != null && ave4 != 0)
        //                        {
        //                            if (lower <= ave4 && ave4 <= upper)
        //                                txtCOATINGWEIGHTN4.Foreground = Brushes.Black;
        //                            else
        //                                txtCOATINGWEIGHTN4.Foreground = Brushes.Red;
        //                        }
        //                        else
        //                            txtCOATINGWEIGHTN4.Foreground = Brushes.Black;

        //                        if (ave5 != null && ave5 != 0)
        //                        {
        //                            if (lower <= ave5 && ave5 <= upper)
        //                                txtCOATINGWEIGHTN5.Foreground = Brushes.Black;
        //                            else
        //                                txtCOATINGWEIGHTN5.Foreground = Brushes.Red;
        //                        }
        //                        else
        //                            txtCOATINGWEIGHTN5.Foreground = Brushes.Black;

        //                        if (ave6 != null && ave6 != 0)
        //                        {
        //                            if (lower <= ave6 && ave6 <= upper)
        //                                txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
        //                            else
        //                                txtCOATINGWEIGHTN6.Foreground = Brushes.Red;
        //                        }
        //                        else
        //                            txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
        //                    }
        //                }
        //            }
        //            else
        //            {
        //                if (myArr.Length == 1)
        //                {
        //                    if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
        //                        num3 = decimal.Parse(myArr[0].ToString().Trim());
        //                }

        //                if (ave1 != null && ave1 != 0)
        //                {
        //                    if (ave1 == num3)
        //                        txtCOATINGWEIGHTN1.Foreground = Brushes.Black;
        //                    else
        //                        txtCOATINGWEIGHTN1.Foreground = Brushes.Red;
        //                }
        //                else
        //                    txtCOATINGWEIGHTN1.Foreground = Brushes.Black;

        //                if (ave2 != null && ave2 != 0)
        //                {
        //                    if (ave2 == num3)
        //                        txtCOATINGWEIGHTN2.Foreground = Brushes.Black;
        //                    else
        //                        txtCOATINGWEIGHTN2.Foreground = Brushes.Red;
        //                }
        //                else
        //                    txtCOATINGWEIGHTN2.Foreground = Brushes.Black;

        //                if (ave3 != null && ave3 != 0)
        //                {
        //                    if (ave3 == num3)
        //                        txtCOATINGWEIGHTN3.Foreground = Brushes.Black;
        //                    else
        //                        txtCOATINGWEIGHTN3.Foreground = Brushes.Red;
        //                }
        //                else
        //                    txtCOATINGWEIGHTN3.Foreground = Brushes.Black;

        //                if (ave4 != null && ave4 != 0)
        //                {
        //                    if (ave4 == num3)
        //                        txtCOATINGWEIGHTN4.Foreground = Brushes.Black;
        //                    else
        //                        txtCOATINGWEIGHTN4.Foreground = Brushes.Red;
        //                }
        //                else
        //                    txtCOATINGWEIGHTN4.Foreground = Brushes.Black;

        //                if (ave5 != null && ave5 != 0)
        //                {
        //                    if (ave5 == num3)
        //                        txtCOATINGWEIGHTN5.Foreground = Brushes.Black;
        //                    else
        //                        txtCOATINGWEIGHTN5.Foreground = Brushes.Red;
        //                }
        //                else
        //                    txtCOATINGWEIGHTN5.Foreground = Brushes.Black;

        //                if (ave6 != null && ave6 != 0)
        //                {
        //                    if (ave6 == num3)
        //                        txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
        //                    else
        //                        txtCOATINGWEIGHTN6.Foreground = Brushes.Red;
        //                }
        //                else
        //                    txtCOATINGWEIGHTN6.Foreground = Brushes.Black;

        //            }
        //        }
        //        else
        //        {
        //            txtCOATINGWEIGHTN1.Foreground = Brushes.Black;
        //            txtCOATINGWEIGHTN2.Foreground = Brushes.Black;
        //            txtCOATINGWEIGHTN3.Foreground = Brushes.Black;
        //            txtCOATINGWEIGHTN4.Foreground = Brushes.Black;
        //            txtCOATINGWEIGHTN5.Foreground = Brushes.Black;
        //            txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
        //        }
        //        #endregion
        //    }
        //    catch (Exception ex)
        //    {
        //        ex.Message.ToString().ShowMessageBox(true);
        //    }
        //}

        #endregion

        #endregion

        #endregion

        #endregion

        #endregion

        #endregion

        #region chkManual_Checked
        private void chkManual_Checked(object sender, RoutedEventArgs e)
        {
            chk_MAXFORCE_W(true);
            chk_MAXFORCE_F(true);
            chk_ELONGATIONFORCE_W(true);
            chk_ELONGATIONFORCE_F(true);
            chk_EDGECOMB_W(true);
            chk_EDGECOMB_F(true);
            chk_TEAR_W(true);
            chk_TEAR_F(true);
        }
        #endregion

        #region chkManual_Unchecked
        private void chkManual_Unchecked(object sender, RoutedEventArgs e)
        {
            chk_MAXFORCE_W(false);
            chk_MAXFORCE_F(false);
            chk_ELONGATIONFORCE_W(false);
            chk_ELONGATIONFORCE_F(false);
            chk_EDGECOMB_W(false);
            chk_EDGECOMB_F(false);
            chk_TEAR_W(false);
            chk_TEAR_F(false);
        }
        #endregion

        #region private Methods

        #region Clear Control
        /// <summary>
        /// ClearControl
        /// </summary>
        private void ClearControl()
        {
            _session = new LAB_INSERTPRODUCTION();
            _item_LCL_UCL = new LAB_GETITEM_LCL_UCL();

            setDefForeground();

            txtITMCODE.Text = string.Empty;
            txtWEAVINGLOG.Text = string.Empty;
            txtFINISHINGLOT.Text = string.Empty;
            dteEntryDate.SelectedDate = DateTime.Now;

            chkManual.IsChecked = false;
            chk_MAXFORCE_W(false);
            chk_MAXFORCE_F(false);
            chk_ELONGATIONFORCE_W(false);
            chk_ELONGATIONFORCE_F(false);
            chk_EDGECOMB_W(false);
            chk_EDGECOMB_F(false);
            chk_TEAR_W(false);
            chk_TEAR_F(false);

            N_WIDTH(null);
            N_USABLE_WIDTH(null);
            N_WIDTH_SILICONE(null);
            N_NUMTHREADS_F(null);
            N_NUMTHREADS_W(null);

            N_NUMTHREADS_R0_W(null);
            N_NUMTHREADS_R1_W(null);
            N_NUMTHREADS_R2_W(null);


            N_TOTALWEIGHT(null);
            N_UNCOATEDWEIGHT(null);
            N_COATINGWEIGHT(null);
            N_THICKNESS(null);
            N_FLAMMABILITY_F(null);
            N_FLAMMABILITY_W(null);
            N_STIFFNES_F(null);
            N_STIFFNES_W(null);
            N_STATIC_AIR(null);
            N_DYNAMIC_AIR(null);
            N_EXPONENT(null);
            N_DIMENSCHANGE_F(null);
            N_DIMENSCHANGE_W(null);
            N_FLEXABRASION_F(null);
            N_FLEXABRASION_W(null);

            // ปรับ 10/06/18
            N_MAXFORCE_W(null);
            N_MAXFORCE_F(null);
            N_ELONGATIONFORCE_W(null);
            N_ELONGATIONFORCE_F(null);
            N_EDGECOMB_W(null);
            N_EDGECOMB_F(null);
            N_TEAR_W(null);
            N_TEAR_F(null);

            //Update 07/07/18
            N_BOW(null);
            N_SKEW(null);
            N_BENDING_F(null);
            N_BENDING_W(null);
            N_FLEX_SCOTT_F(null);
            N_FLEX_SCOTT_W(null);

            cmdRetestDynamicAir.Visibility = Visibility.Hidden;
            cmdRetestStaticAir.Visibility = Visibility.Hidden;
            cmdRetestStiffness.Visibility = Visibility.Hidden;

            cmdRetestTotalWeight.Visibility = Visibility.Hidden;
            cmdRetestUncoatedWeight.Visibility = Visibility.Hidden;
            cmdRetestCoatingWeight.Visibility = Visibility.Hidden;

            txtNUMTHREADSRow1.Visibility = Visibility.Collapsed;
            txtNUMTHREADSRow2.Visibility = Visibility.Collapsed;
            txtNUMTHREADSSum.Visibility = Visibility.Collapsed;

            txtITMCODE.Focus();
            txtITMCODE.SelectAll();
        }

        #endregion

        #region setDefForeground
        private void setDefForeground()
        {
            txtWidthN1.Foreground = Brushes.Black;
            txtWidthN2.Foreground = Brushes.Black;
            txtWidthN3.Foreground = Brushes.Black;
            txtWidthN4.Foreground = Brushes.Black;
            txtWidthN5.Foreground = Brushes.Black;
            txtWidthN6.Foreground = Brushes.Black;
            txtUSABLE_WIDTHN1.Foreground = Brushes.Black;
            txtUSABLE_WIDTHN2.Foreground = Brushes.Black;
            txtUSABLE_WIDTHN3.Foreground = Brushes.Black;
            txtUSABLE_WIDTHN4.Foreground = Brushes.Black;
            txtUSABLE_WIDTHN5.Foreground = Brushes.Black;
            txtUSABLE_WIDTHN6.Foreground = Brushes.Black;
            txtWIDTH_SILICONEN1.Foreground = Brushes.Black;
            txtWIDTH_SILICONEN2.Foreground = Brushes.Black;
            txtWIDTH_SILICONEN3.Foreground = Brushes.Black;
            txtWIDTH_SILICONEN4.Foreground = Brushes.Black;
            txtWIDTH_SILICONEN5.Foreground = Brushes.Black;
            txtWIDTH_SILICONEN6.Foreground = Brushes.Black;
            txtNUMTHREADS_FN1.Foreground = Brushes.Black;
            txtNUMTHREADS_FN2.Foreground = Brushes.Black;
            txtNUMTHREADS_FN3.Foreground = Brushes.Black;
            txtNUMTHREADS_FN4.Foreground = Brushes.Black;
            txtNUMTHREADS_FN5.Foreground = Brushes.Black;
            txtNUMTHREADS_FN6.Foreground = Brushes.Black;
            txtNUMTHREADS_WN1.Foreground = Brushes.Black;
            txtNUMTHREADS_WN2.Foreground = Brushes.Black;
            txtNUMTHREADS_WN3.Foreground = Brushes.Black;
            txtNUMTHREADS_WN4.Foreground = Brushes.Black;
            txtNUMTHREADS_WN5.Foreground = Brushes.Black;
            txtNUMTHREADS_WN6.Foreground = Brushes.Black;
            txtTOTALWEIGHTN1.Foreground = Brushes.Black;
            txtTOTALWEIGHTN2.Foreground = Brushes.Black;
            txtTOTALWEIGHTN3.Foreground = Brushes.Black;
            txtTOTALWEIGHTN4.Foreground = Brushes.Black;
            txtTOTALWEIGHTN5.Foreground = Brushes.Black;
            txtTOTALWEIGHTN6.Foreground = Brushes.Black;
            txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;
            txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;
            txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;
            txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;
            txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;
            txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
            txtCOATINGWEIGHTN1.Foreground = Brushes.Black;
            txtCOATINGWEIGHTN2.Foreground = Brushes.Black;
            txtCOATINGWEIGHTN3.Foreground = Brushes.Black;
            txtCOATINGWEIGHTN4.Foreground = Brushes.Black;
            txtCOATINGWEIGHTN5.Foreground = Brushes.Black;
            txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
            txtTHICKNESSN1.Foreground = Brushes.Black;
            txtTHICKNESSN2.Foreground = Brushes.Black;
            txtTHICKNESSN3.Foreground = Brushes.Black;
            txtTHICKNESSN4.Foreground = Brushes.Black;
            txtTHICKNESSN5.Foreground = Brushes.Black;
            txtTHICKNESSN6.Foreground = Brushes.Black;
            txtFLAMMABILITY_FN1.Foreground = Brushes.Black;
            txtFLAMMABILITY_FN2.Foreground = Brushes.Black;
            txtFLAMMABILITY_FN3.Foreground = Brushes.Black;
            txtFLAMMABILITY_FN4.Foreground = Brushes.Black;
            txtFLAMMABILITY_FN5.Foreground = Brushes.Black;
            txtFLAMMABILITY_FN6.Foreground = Brushes.Black;
            txtFLAMMABILITY_WN1.Foreground = Brushes.Black;
            txtFLAMMABILITY_WN2.Foreground = Brushes.Black;
            txtFLAMMABILITY_WN3.Foreground = Brushes.Black;
            txtFLAMMABILITY_WN4.Foreground = Brushes.Black;
            txtFLAMMABILITY_WN5.Foreground = Brushes.Black;
            txtFLAMMABILITY_WN6.Foreground = Brushes.Black;
            txtSTIFFNES_FN1.Foreground = Brushes.Black;
            txtSTIFFNES_FN2.Foreground = Brushes.Black;
            txtSTIFFNES_FN3.Foreground = Brushes.Black;
            txtSTIFFNES_FN4.Foreground = Brushes.Black;
            txtSTIFFNES_FN5.Foreground = Brushes.Black;
            txtSTIFFNES_FN6.Foreground = Brushes.Black;
            txtSTIFFNES_WN1.Foreground = Brushes.Black;
            txtSTIFFNES_WN2.Foreground = Brushes.Black;
            txtSTIFFNES_WN3.Foreground = Brushes.Black;
            txtSTIFFNES_WN4.Foreground = Brushes.Black;
            txtSTIFFNES_WN5.Foreground = Brushes.Black;
            txtSTIFFNES_WN6.Foreground = Brushes.Black;
            txtSTATIC_AIRN1.Foreground = Brushes.Black;
            txtSTATIC_AIRN2.Foreground = Brushes.Black;
            txtSTATIC_AIRN3.Foreground = Brushes.Black;
            txtSTATIC_AIRN4.Foreground = Brushes.Black;
            txtSTATIC_AIRN5.Foreground = Brushes.Black;
            txtSTATIC_AIRN6.Foreground = Brushes.Black;
            txtDYNAMIC_AIRN1.Foreground = Brushes.Black;
            txtDYNAMIC_AIRN2.Foreground = Brushes.Black;
            txtDYNAMIC_AIRN3.Foreground = Brushes.Black;
            txtDYNAMIC_AIRN4.Foreground = Brushes.Black;
            txtDYNAMIC_AIRN5.Foreground = Brushes.Black;
            txtDYNAMIC_AIRN6.Foreground = Brushes.Black;
            txtEXPONENTN1.Foreground = Brushes.Black;
            txtEXPONENTN2.Foreground = Brushes.Black;
            txtEXPONENTN3.Foreground = Brushes.Black;
            txtEXPONENTN4.Foreground = Brushes.Black;
            txtEXPONENTN5.Foreground = Brushes.Black;
            txtEXPONENTN6.Foreground = Brushes.Black;
            txtDIMENSCHANGE_FN1.Foreground = Brushes.Black;
            txtDIMENSCHANGE_FN2.Foreground = Brushes.Black;
            txtDIMENSCHANGE_FN3.Foreground = Brushes.Black;
            txtDIMENSCHANGE_FN4.Foreground = Brushes.Black;
            txtDIMENSCHANGE_FN5.Foreground = Brushes.Black;
            txtDIMENSCHANGE_FN6.Foreground = Brushes.Black;
            txtDIMENSCHANGE_WN1.Foreground = Brushes.Black;
            txtDIMENSCHANGE_WN2.Foreground = Brushes.Black;
            txtDIMENSCHANGE_WN3.Foreground = Brushes.Black;
            txtDIMENSCHANGE_WN4.Foreground = Brushes.Black;
            txtDIMENSCHANGE_WN5.Foreground = Brushes.Black;
            txtDIMENSCHANGE_WN6.Foreground = Brushes.Black;
            txtFLEXABRASION_FN1.Foreground = Brushes.Black;
            txtFLEXABRASION_FN2.Foreground = Brushes.Black;
            txtFLEXABRASION_FN3.Foreground = Brushes.Black;
            txtFLEXABRASION_FN4.Foreground = Brushes.Black;
            txtFLEXABRASION_FN5.Foreground = Brushes.Black;
            txtFLEXABRASION_FN6.Foreground = Brushes.Black;
            txtFLEXABRASION_WN1.Foreground = Brushes.Black;
            txtFLEXABRASION_WN2.Foreground = Brushes.Black;
            txtFLEXABRASION_WN3.Foreground = Brushes.Black;
            txtFLEXABRASION_WN4.Foreground = Brushes.Black;
            txtFLEXABRASION_WN5.Foreground = Brushes.Black;
            txtFLEXABRASION_WN6.Foreground = Brushes.Black;

            txtMAXFORCE_FN1.Foreground = Brushes.Black;
            txtMAXFORCE_FN2.Foreground = Brushes.Black;
            txtMAXFORCE_FN3.Foreground = Brushes.Black;
            txtMAXFORCE_FN4.Foreground = Brushes.Black;
            txtMAXFORCE_FN5.Foreground = Brushes.Black;
            txtMAXFORCE_FN6.Foreground = Brushes.Black;
            txtMAXFORCE_WN1.Foreground = Brushes.Black;
            txtMAXFORCE_WN2.Foreground = Brushes.Black;
            txtMAXFORCE_WN3.Foreground = Brushes.Black;
            txtMAXFORCE_WN4.Foreground = Brushes.Black;
            txtMAXFORCE_WN5.Foreground = Brushes.Black;
            txtMAXFORCE_WN6.Foreground = Brushes.Black;
            txtELONGATIONFORCE_FN1.Foreground = Brushes.Black;
            txtELONGATIONFORCE_FN2.Foreground = Brushes.Black;
            txtELONGATIONFORCE_FN3.Foreground = Brushes.Black;
            txtELONGATIONFORCE_FN4.Foreground = Brushes.Black;
            txtELONGATIONFORCE_FN5.Foreground = Brushes.Black;
            txtELONGATIONFORCE_FN6.Foreground = Brushes.Black;
            txtELONGATIONFORCE_WN1.Foreground = Brushes.Black;
            txtELONGATIONFORCE_WN2.Foreground = Brushes.Black;
            txtELONGATIONFORCE_WN3.Foreground = Brushes.Black;
            txtELONGATIONFORCE_WN4.Foreground = Brushes.Black;
            txtELONGATIONFORCE_WN5.Foreground = Brushes.Black;
            txtELONGATIONFORCE_WN6.Foreground = Brushes.Black;
            txtEDGECOMB_FN1.Foreground = Brushes.Black;
            txtEDGECOMB_FN2.Foreground = Brushes.Black;
            txtEDGECOMB_FN3.Foreground = Brushes.Black;
            txtEDGECOMB_FN4.Foreground = Brushes.Black;
            txtEDGECOMB_FN5.Foreground = Brushes.Black;
            txtEDGECOMB_FN6.Foreground = Brushes.Black;
            txtEDGECOMB_WN1.Foreground = Brushes.Black;
            txtEDGECOMB_WN2.Foreground = Brushes.Black;
            txtEDGECOMB_WN3.Foreground = Brushes.Black;
            txtEDGECOMB_WN4.Foreground = Brushes.Black;
            txtEDGECOMB_WN5.Foreground = Brushes.Black;
            txtEDGECOMB_WN6.Foreground = Brushes.Black;

            txtTEAR_FN1.Foreground = Brushes.Black;
            txtTEAR_FN2.Foreground = Brushes.Black;
            txtTEAR_FN3.Foreground = Brushes.Black;
            txtTEAR_FN4.Foreground = Brushes.Black;
            txtTEAR_FN5.Foreground = Brushes.Black;
            txtTEAR_FN6.Foreground = Brushes.Black;
            txtTEAR_WN1.Foreground = Brushes.Black;
            txtTEAR_WN2.Foreground = Brushes.Black;
            txtTEAR_WN3.Foreground = Brushes.Black;
            txtTEAR_WN4.Foreground = Brushes.Black;
            txtTEAR_WN5.Foreground = Brushes.Black;
            txtTEAR_WN6.Foreground = Brushes.Black;

            //Update 07/07/18
            txtBOWN1.Foreground = Brushes.Black;
            txtBOWN2.Foreground = Brushes.Black;
            txtBOWN3.Foreground = Brushes.Black;
            txtBOWN4.Foreground = Brushes.Black;
            txtBOWN5.Foreground = Brushes.Black;
            txtBOWN6.Foreground = Brushes.Black;
            txtSKEWN1.Foreground = Brushes.Black;
            txtSKEWN2.Foreground = Brushes.Black;
            txtSKEWN3.Foreground = Brushes.Black;
            txtSKEWN4.Foreground = Brushes.Black;
            txtSKEWN5.Foreground = Brushes.Black;
            txtSKEWN6.Foreground = Brushes.Black;
            txtBENDING_FN1.Foreground = Brushes.Black;
            txtBENDING_FN2.Foreground = Brushes.Black;
            txtBENDING_FN3.Foreground = Brushes.Black;
            txtBENDING_FN4.Foreground = Brushes.Black;
            txtBENDING_FN5.Foreground = Brushes.Black;
            txtBENDING_FN6.Foreground = Brushes.Black;
            txtBENDING_WN1.Foreground = Brushes.Black;
            txtBENDING_WN2.Foreground = Brushes.Black;
            txtBENDING_WN3.Foreground = Brushes.Black;
            txtBENDING_WN4.Foreground = Brushes.Black;
            txtBENDING_WN5.Foreground = Brushes.Black;
            txtBENDING_WN6.Foreground = Brushes.Black;
            txtFLEX_SCOTT_FN1.Foreground = Brushes.Black;
            txtFLEX_SCOTT_FN2.Foreground = Brushes.Black;
            txtFLEX_SCOTT_FN3.Foreground = Brushes.Black;
            txtFLEX_SCOTT_FN4.Foreground = Brushes.Black;
            txtFLEX_SCOTT_FN5.Foreground = Brushes.Black;
            txtFLEX_SCOTT_FN6.Foreground = Brushes.Black;
            txtFLEX_SCOTT_WN1.Foreground = Brushes.Black;
            txtFLEX_SCOTT_WN2.Foreground = Brushes.Black;
            txtFLEX_SCOTT_WN3.Foreground = Brushes.Black;
            txtFLEX_SCOTT_WN4.Foreground = Brushes.Black;
            txtFLEX_SCOTT_WN5.Foreground = Brushes.Black;
            txtFLEX_SCOTT_WN6.Foreground = Brushes.Black;
        }
        #endregion

        #region LoadLabData
        private bool LoadLabData(string P_ITMCODE, string P_WEAVINGLOG, string P_FINISHINGLOT)
        {
            bool chkLoad = true;

            try
            {
                List<LAB_GETPDFDATA> results = LabDataPDFDataService.Instance.LAB_GETPDFDATA(P_ITMCODE, P_WEAVINGLOG, P_FINISHINGLOT);

                if (results != null)
                {
                    if (results.Count > 0)
                    {
                        #region string.Empty

                        txtMAXFORCE_WN1.Text = string.Empty;
                        txtMAXFORCE_WN2.Text = string.Empty;
                        txtMAXFORCE_WN3.Text = string.Empty;
                        txtMAXFORCE_WN4.Text = string.Empty;
                        txtMAXFORCE_WN5.Text = string.Empty;
                        txtMAXFORCE_WN6.Text = string.Empty;
                        txtMAXFORCE_WAve.Text = string.Empty;
                        txtMAXFORCE_FN1.Text = string.Empty;
                        txtMAXFORCE_FN2.Text = string.Empty;
                        txtMAXFORCE_FN3.Text = string.Empty;
                        txtMAXFORCE_FN4.Text = string.Empty;
                        txtMAXFORCE_FN5.Text = string.Empty;
                        txtMAXFORCE_FN6.Text = string.Empty;
                        txtMAXFORCE_FAve.Text = string.Empty;

                        txtELONGATIONFORCE_WN1.Text = string.Empty;
                        txtELONGATIONFORCE_WN2.Text = string.Empty;
                        txtELONGATIONFORCE_WN3.Text = string.Empty;
                        txtELONGATIONFORCE_WN4.Text = string.Empty;
                        txtELONGATIONFORCE_WN5.Text = string.Empty;
                        txtELONGATIONFORCE_WN6.Text = string.Empty;
                        txtELONGATIONFORCE_WAve.Text = string.Empty;
                        txtELONGATIONFORCE_FN1.Text = string.Empty;
                        txtELONGATIONFORCE_FN2.Text = string.Empty;
                        txtELONGATIONFORCE_FN3.Text = string.Empty;
                        txtELONGATIONFORCE_FN4.Text = string.Empty;
                        txtELONGATIONFORCE_FN5.Text = string.Empty;
                        txtELONGATIONFORCE_FN6.Text = string.Empty;
                        txtELONGATIONFORCE_FAve.Text = string.Empty;

                        txtEDGECOMB_WN1.Text = string.Empty;
                        txtEDGECOMB_WN2.Text = string.Empty;
                        txtEDGECOMB_WN3.Text = string.Empty;
                        txtEDGECOMB_WN4.Text = string.Empty;
                        txtEDGECOMB_WN5.Text = string.Empty;
                        txtEDGECOMB_WN6.Text = string.Empty;
                        txtEDGECOMB_WAve.Text = string.Empty;
                        txtEDGECOMB_FN1.Text = string.Empty;
                        txtEDGECOMB_FN2.Text = string.Empty;
                        txtEDGECOMB_FN3.Text = string.Empty;
                        txtEDGECOMB_FN4.Text = string.Empty;
                        txtEDGECOMB_FN5.Text = string.Empty;
                        txtEDGECOMB_FN6.Text = string.Empty;
                        txtEDGECOMB_FAve.Text = string.Empty;

                        txtTEAR_WN1.Text = string.Empty;
                        txtTEAR_WN2.Text = string.Empty;
                        txtTEAR_WN3.Text = string.Empty;
                        txtTEAR_WN4.Text = string.Empty;
                        txtTEAR_WN5.Text = string.Empty;
                        txtTEAR_WN6.Text = string.Empty;
                        txtTEAR_WAve.Text = string.Empty;
                        txtTEAR_FN1.Text = string.Empty;
                        txtTEAR_FN2.Text = string.Empty;
                        txtTEAR_FN3.Text = string.Empty;
                        txtTEAR_FN4.Text = string.Empty;
                        txtTEAR_FN5.Text = string.Empty;
                        txtTEAR_FN6.Text = string.Empty;
                        txtTEAR_FAve.Text = string.Empty;

                        #endregion

                        #region Get Data

                        for (int page = 0; page <= results.Count-1; page++)
                        {
                            if (!string.IsNullOrEmpty(results[page].PROPERTY))
                            { 
                                if(results[page].PROPERTY.Contains("Tensile"))
                                {
                                    if (results[page].YARNTYPE.Contains("Warp"))
                                    {
                                        if (results[page].N1 != null)
                                            txtMAXFORCE_WN1.Text = results[page].N1.Value.ToString("#,##0.##");
                                        if (results[page].N2 != null)
                                            txtMAXFORCE_WN2.Text = results[page].N2.Value.ToString("#,##0.##");
                                        if (results[page].N3 != null)
                                            txtMAXFORCE_WN3.Text = results[page].N3.Value.ToString("#,##0.##");

                                        if (results[page].N4 != null)
                                            txtMAXFORCE_WN4.Text = results[page].N4.Value.ToString("#,##0.##");
                                        if (results[page].N5 != null)
                                            txtMAXFORCE_WN5.Text = results[page].N5.Value.ToString("#,##0.##");
                                        if (results[page].N6 != null)
                                            txtMAXFORCE_WN6.Text = results[page].N6.Value.ToString("#,##0.##");
                                    }
                                    else if (results[page].YARNTYPE.Contains("Weft"))
                                    {
                                        if (results[page].N1 != null)
                                            txtMAXFORCE_FN1.Text = results[page].N1.Value.ToString("#,##0.##");
                                        if (results[page].N2 != null)
                                            txtMAXFORCE_FN2.Text = results[page].N2.Value.ToString("#,##0.##");
                                        if (results[page].N3 != null)
                                            txtMAXFORCE_FN3.Text = results[page].N3.Value.ToString("#,##0.##");

                                        if (results[page].N4 != null)
                                            txtMAXFORCE_FN4.Text = results[page].N4.Value.ToString("#,##0.##");
                                        if (results[page].N5 != null)
                                            txtMAXFORCE_FN5.Text = results[page].N5.Value.ToString("#,##0.##");
                                        if (results[page].N6 != null)
                                            txtMAXFORCE_FN6.Text = results[page].N6.Value.ToString("#,##0.##");
                                    }
                                }
                                else if(results[page].PROPERTY.Contains("Elongation"))
                                {
                                    if (results[page].YARNTYPE.Contains("Warp"))
                                    {
                                        if (results[page].N1 != null)
                                            txtELONGATIONFORCE_WN1.Text = results[page].N1.Value.ToString("#,##0.##");
                                        if (results[page].N2 != null)
                                            txtELONGATIONFORCE_WN2.Text = results[page].N2.Value.ToString("#,##0.##");
                                        if (results[page].N3 != null)
                                            txtELONGATIONFORCE_WN3.Text = results[page].N3.Value.ToString("#,##0.##");

                                        if (results[page].N4 != null)
                                            txtELONGATIONFORCE_WN4.Text = results[page].N4.Value.ToString("#,##0.##");
                                        if (results[page].N5 != null)
                                            txtELONGATIONFORCE_WN5.Text = results[page].N5.Value.ToString("#,##0.##");
                                        if (results[page].N6 != null)
                                            txtELONGATIONFORCE_WN6.Text = results[page].N6.Value.ToString("#,##0.##");
                                    }
                                    else if (results[page].YARNTYPE.Contains("Weft"))
                                    {
                                         if (results[page].N1 != null)
                                             txtELONGATIONFORCE_FN1.Text = results[page].N1.Value.ToString("#,##0.##");
                                         if (results[page].N2 != null)
                                             txtELONGATIONFORCE_FN2.Text = results[page].N2.Value.ToString("#,##0.##");
                                         if (results[page].N3 != null)
                                             txtELONGATIONFORCE_FN3.Text = results[page].N3.Value.ToString("#,##0.##");

                                         if (results[page].N4 != null)
                                             txtELONGATIONFORCE_FN4.Text = results[page].N4.Value.ToString("#,##0.##");
                                         if (results[page].N5 != null)
                                             txtELONGATIONFORCE_FN5.Text = results[page].N5.Value.ToString("#,##0.##");
                                         if (results[page].N6 != null)
                                             txtELONGATIONFORCE_FN6.Text = results[page].N6.Value.ToString("#,##0.##");
                                    }
                                }
                                else if(results[page].PROPERTY.Contains("Tear"))
                                {
                                    if (results[page].YARNTYPE.Contains("Warp"))
                                    {
                                        if (results[page].N1 != null)
                                            txtTEAR_WN1.Text = results[page].N1.Value.ToString("#,##0.##");
                                        if (results[page].N2 != null)
                                            txtTEAR_WN2.Text = results[page].N2.Value.ToString("#,##0.##");
                                        if (results[page].N3 != null)
                                            txtTEAR_WN3.Text = results[page].N3.Value.ToString("#,##0.##");
                                    }
                                    else if (results[page].YARNTYPE.Contains("Weft"))
                                    {
                                        if (results[page].N1 != null)
                                            txtTEAR_FN1.Text = results[page].N1.Value.ToString("#,##0.##");
                                        if (results[page].N2 != null)
                                            txtTEAR_FN2.Text = results[page].N2.Value.ToString("#,##0.##");
                                        if (results[page].N3 != null)
                                            txtTEAR_FN3.Text = results[page].N3.Value.ToString("#,##0.##");
                                    }
                                }
                                else if(results[page].PROPERTY.Contains("Edgecomb"))
                                {
                                    if (results[page].YARNTYPE.Contains("Warp"))
                                    {
                                        if (results[page].N1 != null)
                                            txtEDGECOMB_WN1.Text = results[page].N1.Value.ToString("#,##0.##");
                                        if (results[page].N2 != null)
                                            txtEDGECOMB_WN2.Text = results[page].N2.Value.ToString("#,##0.##");
                                        if (results[page].N3 != null)
                                            txtEDGECOMB_WN3.Text = results[page].N3.Value.ToString("#,##0.##");
                                    }
                                    else if (results[page].YARNTYPE.Contains("Weft"))
                                    {
                                        if (results[page].N1 != null)
                                            txtEDGECOMB_FN1.Text = results[page].N1.Value.ToString("#,##0.##");
                                        if (results[page].N2 != null)
                                            txtEDGECOMB_FN2.Text = results[page].N2.Value.ToString("#,##0.##");
                                        if (results[page].N3 != null)
                                            txtEDGECOMB_FN3.Text = results[page].N3.Value.ToString("#,##0.##");
                                    }
                                }
                            }
                        }

                        #endregion

                        MAXFORCE_F();
                        MAXFORCE_W();
                        ELONGATIONFORCE_F();
                        ELONGATIONFORCE_W();
                        EDGECOMB_F();
                        EDGECOMB_W();
                        TEAR_F();
                        TEAR_W();
                    }
                    else
                    {
                        chkLoad = false;
                    }
                }
                else
                {
                    chkLoad = false;
                }

                return chkLoad;
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
                return false;
            }
        }
        #endregion

        #region LoadItemTestProperty
        private bool LoadItemTestProperty(string P_ITMCODE)
        { 
         bool chkLoad = true;

            try
            {
                List<LAB_GETITEMTESTPROPERTY> results = LabDataPDFDataService.Instance.LAB_GETITEMTESTPROPERTY(P_ITMCODE);

                if (results != null)
                {
                    if (results.Count > 0)
                    {
                        N_WIDTH(results[0].WIDTH);
                        N_USABLE_WIDTH(results[0].USABLE_WIDTH);
                        N_WIDTH_SILICONE(results[0].WIDTH_SILICONE);
                        N_NUMTHREADS_F(results[0].NUMTHREADS_F);

                        N_NUMTHREADS_W(results[0].NUMTHREADS_W);
                        N_NUMTHREADS_R0_W(results[0].NUMTHREADS_W);
                        N_NUMTHREADS_R1_W(results[0].NUMTHREADS_W);
                        N_NUMTHREADS_R2_W(results[0].NUMTHREADS_W);

                        N_TOTALWEIGHT(results[0].TOTALWEIGHT);
                        N_UNCOATEDWEIGHT(results[0].UNCOATEDWEIGHT);
                        N_COATINGWEIGHT(results[0].COATINGWEIGHT);
                        N_THICKNESS(results[0].THICKNESS);
                        N_FLAMMABILITY_F(results[0].FLAMMABILITY_F);
                        N_FLAMMABILITY_W(results[0].FLAMMABILITY_W);
                        N_STIFFNES_F(results[0].STIFFNESS_F);
                        N_STIFFNES_W(results[0].STIFFNESS_W);
                        N_STATIC_AIR(results[0].STATIC_AIR);
                        N_DYNAMIC_AIR(results[0].DYNAMIC_AIR);
                        N_EXPONENT(results[0].EXPONENT);
                        N_DIMENSCHANGE_F(results[0].DIMENSCHANGE_F);
                        N_DIMENSCHANGE_W(results[0].DIMENSCHANGE_W);
                        N_FLEXABRASION_F(results[0].FLEXABRASION_F);
                        N_FLEXABRASION_W(results[0].FLEXABRASION_W);


                        // ปรับ 10/06/18
                        N_MAXFORCE_W(results[0].MAXFORCE_W);
                        N_MAXFORCE_F(results[0].MAXFORCE_F);
                        N_ELONGATIONFORCE_W(results[0].ELONGATIONFORCE_W);
                        N_ELONGATIONFORCE_F(results[0].ELONGATIONFORCE_F);
                        N_EDGECOMB_W(results[0].EDGECOMB_W);
                        N_EDGECOMB_F(results[0].EDGECOMB_F);
                        N_TEAR_W(results[0].TEAR_W);
                        N_TEAR_F(results[0].TEAR_F);

                        //Update 07/07/18
                        N_BOW(results[0].BOW);
                        N_SKEW(results[0].SKEW);
                        N_BENDING_F(results[0].BENDING_F);
                        N_BENDING_W(results[0].BENDING_W);
                        N_FLEX_SCOTT_F(results[0].FLEX_SCOTT_F);
                        N_FLEX_SCOTT_W(results[0].FLEX_SCOTT_W);
                    }
                }
                else
                {
                    chkLoad = false;
                }

                return chkLoad;
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
                return false;
            }
        }
        #endregion

        #region LoadItemTestSpecification
        private bool LoadItemTestSpecification(string P_ITMCODE)
        {
            bool chkLoad = true;

            try
            {
                txtWidthSpecification.Text = string.Empty;
                txtUSABLE_WIDTHSpecification.Text = string.Empty;
                txtWIDTH_SILICONESpecification.Text = string.Empty;
                txtNUMTHREADS_FSpecification.Text = string.Empty;
                txtNUMTHREADS_WSpecification.Text = string.Empty;
                txtTOTALWEIGHTSpecification.Text = string.Empty;
                txtUNCOATEDWEIGHTSpecification.Text = string.Empty;
                txtCOATINGWEIGHTSpecification.Text = string.Empty;
                txtTHICKNESSSpecification.Text = string.Empty;
                txtFLAMMABILITY_FSpecification.Text = string.Empty;
                txtFLAMMABILITY_WSpecification.Text = string.Empty;
                txtSTIFFNES_FSpecification.Text = string.Empty;
                txtSTIFFNES_WSpecification.Text = string.Empty;
                txtSTATIC_AIRSpecification.Text = string.Empty;
                txtDYNAMIC_AIRSpecification.Text = string.Empty;
                txtEXPONENTSpecification.Text = string.Empty;
                txtDIMENSCHANGE_FSpecification.Text = string.Empty;
                txtDIMENSCHANGE_WSpecification.Text = string.Empty;
                txtFLEXABRASION_FSpecification.Text = string.Empty;
                txtFLEXABRASION_WSpecification.Text = string.Empty;

                //Update 07/07/18
                txtBOWSpecification.Text = string.Empty;
                txtSKEWSpecification.Text = string.Empty;
                txtBENDING_FSpecification.Text = string.Empty;
                txtBENDING_WSpecification.Text = string.Empty;
                txtFLEX_SCOTT_FSpecification.Text = string.Empty;
                txtFLEX_SCOTT_WSpecification.Text = string.Empty;

                _item_LCL_UCL = new LAB_GETITEM_LCL_UCL();

                List<LAB_GETITEMTESTSPECIFICATION> results = LabDataPDFDataService.Instance.LAB_GETITEMTESTSPECIFICATION(P_ITMCODE);

                if (results != null)
                {
                    if (results.Count > 0)
                    {

                        txtWidthSpecification.Text = results[0].WIDTH_Spe;
                        txtUSABLE_WIDTHSpecification.Text = results[0].USABLE_Spe;
                        txtWIDTH_SILICONESpecification.Text = results[0].WIDTH_SILICONE_Spe;
                        txtNUMTHREADS_FSpecification.Text = results[0].NUMTHREADS_F_Spe;
                        txtNUMTHREADS_WSpecification.Text = results[0].NUMTHREADS_W_Spe;
                        txtTOTALWEIGHTSpecification.Text = results[0].TOTALWEIGHT_Spe;
                        txtUNCOATEDWEIGHTSpecification.Text = results[0].UNCOATEDWEIGHT_Spe;
                        txtCOATINGWEIGHTSpecification.Text = results[0].COATINGWEIGHT_Spe;
                        txtTHICKNESSSpecification.Text = results[0].THICKNESS_Spe;
                        txtFLAMMABILITY_FSpecification.Text = results[0].FLAMMABILITY_F_Spe;
                        txtFLAMMABILITY_WSpecification.Text = results[0].FLAMMABILITY_W_Spe;
                        txtSTIFFNES_FSpecification.Text = results[0].STIFFNESS_F_Spe;
                        txtSTIFFNES_WSpecification.Text = results[0].STIFFNESS_W_Spe;
                        txtSTATIC_AIRSpecification.Text = results[0].STATIC_AIR_Spe;
                        txtDYNAMIC_AIRSpecification.Text = results[0].DYNAMIC_AIR_Spe;
                        txtEXPONENTSpecification.Text = results[0].EXPONENT_Spe;
                        txtDIMENSCHANGE_FSpecification.Text = results[0].DIMENSCHANGE_F_Spe;
                        txtDIMENSCHANGE_WSpecification.Text = results[0].DIMENSCHANGE_W_Spe;
                        txtFLEXABRASION_FSpecification.Text = results[0].FLEXABRASION_F_Spe;
                        txtFLEXABRASION_WSpecification.Text = results[0].FLEXABRASION_W_Spe;


                        // ปรับ 10/06/18
                        txtMAXFORCE_FSpecification.Text = results[0].MAXFORCE_F_Spe;
                        txtMAXFORCE_WSpecification.Text = results[0].MAXFORCE_W_Spe;
                        txtELONGATIONFORCE_FSpecification.Text = results[0].ELONGATIONFORCE_F_Spe;
                        txtELONGATIONFORCE_WSpecification.Text = results[0].ELONGATIONFORCE_W_Spe;
                        txtEDGECOMB_FSpecification.Text = results[0].EDGECOMB_F_Spe;
                        txtEDGECOMB_WSpecification.Text = results[0].EDGECOMB_W_Spe;
                        txtTEAR_FSpecification.Text = results[0].TEAR_F_Spe;
                        txtTEAR_WSpecification.Text = results[0].TEAR_W_Spe;

                        //Update 07/07/18
                        txtBOWSpecification.Text = results[0].BOW_Spe;
                        txtSKEWSpecification.Text = results[0].SKEW_Spe;
                        txtBENDING_FSpecification.Text = results[0].BENDING_F_Spe;
                        txtBENDING_WSpecification.Text = results[0].BENDING_W_Spe;
                        txtFLEX_SCOTT_FSpecification.Text = results[0].FLEX_SCOTT_F_Spe;
                        txtFLEX_SCOTT_WSpecification.Text = results[0].FLEX_SCOTT_W_Spe;

                        _item_LCL_UCL.USABLE_WIDTH_LCL = results[0].USABLE_WIDTH_LCL;
                        _item_LCL_UCL.USABLE_WIDTH_UCL = results[0].USABLE_WIDTH_UCL;
                        _item_LCL_UCL.TOTALWEIGHT_LCL = results[0].TOTALWEIGHT_LCL;
                        _item_LCL_UCL.TOTALWEIGHT_UCL = results[0].TOTALWEIGHT_UCL;
                        _item_LCL_UCL.NUMTHREADS_W_LCL = results[0].NUMTHREADS_W_LCL;
                        _item_LCL_UCL.NUMTHREADS_W_UCL = results[0].NUMTHREADS_W_UCL;
                        _item_LCL_UCL.NUMTHREADS_F_LCL = results[0].NUMTHREADS_F_LCL;
                        _item_LCL_UCL.NUMTHREADS_F_UCL = results[0].NUMTHREADS_F_UCL;
                        _item_LCL_UCL.MAXFORCE_W_LCL = results[0].MAXFORCE_W_LCL;
                        _item_LCL_UCL.MAXFORCE_W_UCL = results[0].MAXFORCE_W_UCL;
                        _item_LCL_UCL.MAXFORCE_F_LCL = results[0].MAXFORCE_F_LCL;
                        _item_LCL_UCL.MAXFORCE_F_UCL = results[0].MAXFORCE_F_UCL;
                        _item_LCL_UCL.ELONGATIONFORCE_W_LCL = results[0].ELONGATIONFORCE_W_LCL;
                        _item_LCL_UCL.ELONGATIONFORCE_W_UCL = results[0].ELONGATIONFORCE_W_UCL;
                        _item_LCL_UCL.ELONGATIONFORCE_F_LCL = results[0].ELONGATIONFORCE_F_LCL;
                        _item_LCL_UCL.ELONGATIONFORCE_F_UCL = results[0].ELONGATIONFORCE_F_UCL;
                        _item_LCL_UCL.EDGECOMB_W_LCL = results[0].EDGECOMB_W_LCL;
                        _item_LCL_UCL.EDGECOMB_W_UCL = results[0].EDGECOMB_W_UCL;
                        _item_LCL_UCL.EDGECOMB_F_LCL = results[0].EDGECOMB_F_LCL;
                        _item_LCL_UCL.EDGECOMB_F_UCL = results[0].EDGECOMB_F_UCL;
                        _item_LCL_UCL.TEAR_W_LCL = results[0].TEAR_W_LCL;
                        _item_LCL_UCL.TEAR_W_UCL = results[0].TEAR_W_UCL;
                        _item_LCL_UCL.TEAR_F_LCL = results[0].TEAR_F_LCL;
                        _item_LCL_UCL.TEAR_F_UCL = results[0].TEAR_F_UCL;
                        _item_LCL_UCL.STATIC_AIR_LCL = results[0].STATIC_AIR_LCL;
                        _item_LCL_UCL.STATIC_AIR_UCL = results[0].STATIC_AIR_UCL;
                        _item_LCL_UCL.DYNAMIC_AIR_LCL = results[0].DYNAMIC_AIR_LCL;
                        _item_LCL_UCL.DYNAMIC_AIR_UCL = results[0].DYNAMIC_AIR_UCL;
                        _item_LCL_UCL.EXPONENT_LCL = results[0].EXPONENT_LCL;
                        _item_LCL_UCL.EXPONENT_UCL = results[0].EXPONENT_UCL;
                    }
                }
                else
                {
                    chkLoad = false;
                }

                return chkLoad;
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
                return false;
            }
        }
        #endregion

        // New 21/09/18
        #region Lab_getPLCData

        #region Lab_getPLCData
        private bool Lab_getPLCData(string P_ITMCODE, string P_WEAVINGLOG)
        {
            bool chkLoad = true;

            try
            {
                ClearPLCData();

                List<LAB_GETPLCDATA> results = LabDataPDFDataService.Instance.LAB_GETPLCDATA(P_ITMCODE, P_WEAVINGLOG);

                if (results != null)
                {
                    if (results.Count > 0)
                    {
                        #region TOTALWEIGHTN

                        decimal? totalWeight1 = null;
                        decimal? totalWeight2 = null;
                        decimal? totalWeight3 = null;
                        decimal? totalWeight4 = null;
                        decimal? totalWeight5 = null;
                        decimal? totalWeight6 = null;


                        if (results[0].TOTALWEIGHT1 != null)
                            totalWeight1 = results[0].TOTALWEIGHT1;

                        if (results[0].TOTALWEIGHT2 != null)
                            totalWeight2 = results[0].TOTALWEIGHT2;

                        if (results[0].TOTALWEIGHT3 != null)
                            totalWeight3 = results[0].TOTALWEIGHT3;

                        if (results[0].TOTALWEIGHT4 != null)
                            totalWeight4 = results[0].TOTALWEIGHT4;

                        if (results[0].TOTALWEIGHT5 != null)
                            totalWeight5 = results[0].TOTALWEIGHT5;

                        if (results[0].TOTALWEIGHT6 != null)
                            totalWeight6 = results[0].TOTALWEIGHT6;

                        TotalWeight(totalWeight1, totalWeight2, totalWeight3, totalWeight4, totalWeight5, totalWeight6);

                        #endregion

                        #region COATINGWEIGHT

                        decimal? coatingWeight1 = null;
                        decimal? coatingWeight2 = null;
                        decimal? coatingWeight3 = null;
                        decimal? coatingWeight4 = null;
                        decimal? coatingWeight5 = null;
                        decimal? coatingWeight6 = null;

                        if (results[0].COATINGWEIGHT1 != null)
                            coatingWeight1 = results[0].COATINGWEIGHT1;

                        if (results[0].COATINGWEIGHT2 != null)
                            coatingWeight2 = results[0].COATINGWEIGHT2;

                        if (results[0].COATINGWEIGHT3 != null)
                            coatingWeight3 = results[0].COATINGWEIGHT3;

                        if (results[0].COATINGWEIGHT4 != null)
                            coatingWeight4 = results[0].COATINGWEIGHT4;

                        if (results[0].COATINGWEIGHT5 != null)
                            coatingWeight5 = results[0].COATINGWEIGHT5;

                        if (results[0].COATINGWEIGHT6 != null)
                            coatingWeight6 = results[0].COATINGWEIGHT6;

                        CoatingWeight(coatingWeight1, coatingWeight2, coatingWeight3, coatingWeight4, coatingWeight5, coatingWeight6);

                        #endregion

                        #region uncoatedWeight

                        decimal? uncoatedWeight1 = null;
                        decimal? uncoatedWeight2 = null;
                        decimal? uncoatedWeight3 = null;
                        decimal? uncoatedWeight4 = null;
                        decimal? uncoatedWeight5 = null;
                        decimal? uncoatedWeight6 = null;

                        if (results[0].UNCOATEDWEIGHT1 != null)
                            uncoatedWeight1 = results[0].UNCOATEDWEIGHT1;

                        if (results[0].UNCOATEDWEIGHT2 != null)
                            uncoatedWeight2 = results[0].UNCOATEDWEIGHT2;

                        if (results[0].UNCOATEDWEIGHT3 != null)
                            uncoatedWeight3 = results[0].UNCOATEDWEIGHT3;

                        if (results[0].UNCOATEDWEIGHT4 != null)
                            uncoatedWeight4 = results[0].UNCOATEDWEIGHT4;

                        if (results[0].UNCOATEDWEIGHT5 != null)
                            uncoatedWeight5 = results[0].UNCOATEDWEIGHT5;

                        if (results[0].UNCOATEDWEIGHT6 != null)
                            uncoatedWeight6 = results[0].UNCOATEDWEIGHT6;

                        UncoatedWeight(uncoatedWeight1, uncoatedWeight2, uncoatedWeight3, uncoatedWeight4, uncoatedWeight5, uncoatedWeight6);

                        #endregion

                        #region STIFFNESS_F

                        decimal? stiffness_f1 = null;
                        decimal? stiffness_f2 = null;
                        decimal? stiffness_f3 = null;

                        if (results[0].STIFFNESS_F1 != null)
                            stiffness_f1 = results[0].STIFFNESS_F1;

                        if (results[0].STIFFNESS_F2 != null)
                            stiffness_f2 = results[0].STIFFNESS_F2;

                        if (results[0].STIFFNESS_F3 != null)
                            stiffness_f3 = results[0].STIFFNESS_F3;

                        Stiffness_f(stiffness_f1, stiffness_f2, stiffness_f3, null, null, null);

                        #endregion

                        #region STIFFNESS_W

                        decimal? stiffness_w1 = null;
                        decimal? stiffness_w2 = null;
                        decimal? stiffness_w3 = null;

                        if (results[0].STIFFNESS_W1 != null)
                            stiffness_w1 = results[0].STIFFNESS_W1;

                        if (results[0].STIFFNESS_W2 != null)
                            stiffness_w2 = results[0].STIFFNESS_W2;

                        if (results[0].STIFFNESS_W3 != null)
                            stiffness_w3 = results[0].STIFFNESS_W3;

                        Stiffness_w(stiffness_w1, stiffness_w2, stiffness_w3, null, null, null);

                        #endregion

                        #region STATIC_AIRN

                        decimal? static_Air1 = null;
                        decimal? static_Air2 = null;
                        decimal? static_Air3 = null;
                        decimal? static_Air4 = null;
                        decimal? static_Air5 = null;
                        decimal? static_Air6 = null;

                        if (results[0].STATIC_AIR1 != null)
                            static_Air1 = results[0].STATIC_AIR1;

                        if (results[0].STATIC_AIR2 != null)
                            static_Air2 = results[0].STATIC_AIR2;

                        if (results[0].STATIC_AIR3 != null)
                            static_Air3 = results[0].STATIC_AIR3;

                        if (results[0].STATIC_AIR4 != null)
                            static_Air4 = results[0].STATIC_AIR4;

                        if (results[0].STATIC_AIR5 != null)
                            static_Air5 = results[0].STATIC_AIR5;

                        if (results[0].STATIC_AIR6 != null)
                            static_Air6 = results[0].STATIC_AIR6;

                        Static_Air(static_Air1, static_Air2, static_Air3, static_Air4, static_Air5, static_Air6);

                        #endregion

                        // เพิ่ม 26/11/18
                        #region Dynamic_Air

                        decimal? dynamic_air1 = null;
                        decimal? dynamic_air2 = null;
                        decimal? dynamic_air3 = null;

                        if (results[0].DYNAMIC_AIR1 != null)
                            dynamic_air1 = results[0].DYNAMIC_AIR1;

                        if (results[0].DYNAMIC_AIR2 != null)
                            dynamic_air2 = results[0].DYNAMIC_AIR2;

                        if (results[0].DYNAMIC_AIR3 != null)
                            dynamic_air3 = results[0].DYNAMIC_AIR3;

                        Dynamic_Air(dynamic_air1, dynamic_air2, dynamic_air3, null, null, null);

                        #endregion

                        #region Exponent

                        decimal? exponent1 = null;
                        decimal? exponent2 = null;
                        decimal? exponent3 = null;

                        if (results[0].EXPONENT1 != null)
                            exponent1 = results[0].EXPONENT1;

                        if (results[0].EXPONENT2 != null)
                            exponent2 = results[0].EXPONENT2;

                        if (results[0].EXPONENT3 != null)
                            exponent3 = results[0].EXPONENT3;

                        Exponent(exponent1, exponent2, exponent3, null, null, null);

                        #endregion
                    }
                }

               return chkLoad;
            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
                return false;
            }
        }
        #endregion

        #region TotalWeight
        private void TotalWeight( decimal? ave1,decimal? ave2,decimal? ave3,decimal? ave4, decimal? ave5,decimal? ave6)
        {
            try
            {
                int? i = 0;
                decimal value;

                if (ave1 != null)
                {
                    txtTOTALWEIGHTN1.Text = ave1.Value.ToString("#,##0.##");
                    _session.P_TOTALWEIGHT1 = ave1;
                }
                else
                {
                    txtTOTALWEIGHTN1.Text = string.Empty;
                    _session.P_TOTALWEIGHT1 = null;
                }

                if (ave2 != null)
                {
                    txtTOTALWEIGHTN2.Text = ave2.Value.ToString("#,##0.##");
                    _session.P_TOTALWEIGHT2 = ave2;
                }
                else
                {
                    txtTOTALWEIGHTN2.Text = string.Empty;
                    _session.P_TOTALWEIGHT2 = null;
                }

                if (ave3 != null)
                {
                    txtTOTALWEIGHTN3.Text = ave3.Value.ToString("#,##0.##");
                    _session.P_TOTALWEIGHT3 = ave3;
                }
                else
                {
                    txtTOTALWEIGHTN3.Text = string.Empty;
                    _session.P_TOTALWEIGHT3 = null;
                }

                if (ave4 != null)
                {
                    txtTOTALWEIGHTN4.Text = ave4.Value.ToString("#,##0.##");
                    _session.P_TOTALWEIGHT4 = ave4;
                }
                else
                {
                    txtTOTALWEIGHTN4.Text = string.Empty;
                    _session.P_TOTALWEIGHT4 = null;
                }

                if (ave5 != null)
                {
                    txtTOTALWEIGHTN5.Text = ave5.Value.ToString("#,##0.##");
                    _session.P_TOTALWEIGHT5 = ave5;
                }
                else
                {
                    txtTOTALWEIGHTN5.Text = string.Empty;
                    _session.P_TOTALWEIGHT5 = null;
                }

                if (ave6 != null)
                {
                    txtTOTALWEIGHTN6.Text = ave6.Value.ToString("#,##0.##");
                    _session.P_TOTALWEIGHT6 = ave6;
                }
                else
                {
                    txtTOTALWEIGHTN6.Text = string.Empty;
                    _session.P_TOTALWEIGHT6 = null;
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtTOTALWEIGHTAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtTOTALWEIGHTAve.Text = "0";
                    else
                        txtTOTALWEIGHTAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtTOTALWEIGHTSpecification.Text))
                {
                    string temp = txtTOTALWEIGHTSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtTOTALWEIGHTN1.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtTOTALWEIGHTN2.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtTOTALWEIGHTN3.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtTOTALWEIGHTN4.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtTOTALWEIGHTN5.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtTOTALWEIGHTN6.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtTOTALWEIGHTN1.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtTOTALWEIGHTN2.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtTOTALWEIGHTN3.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtTOTALWEIGHTN4.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtTOTALWEIGHTN5.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtTOTALWEIGHTN6.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtTOTALWEIGHTN1.Foreground = Brushes.Black;
                                    else
                                        txtTOTALWEIGHTN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtTOTALWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtTOTALWEIGHTN2.Foreground = Brushes.Black;
                                    else
                                        txtTOTALWEIGHTN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtTOTALWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtTOTALWEIGHTN3.Foreground = Brushes.Black;
                                    else
                                        txtTOTALWEIGHTN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtTOTALWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtTOTALWEIGHTN4.Foreground = Brushes.Black;
                                    else
                                        txtTOTALWEIGHTN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtTOTALWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtTOTALWEIGHTN5.Foreground = Brushes.Black;
                                    else
                                        txtTOTALWEIGHTN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtTOTALWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtTOTALWEIGHTN6.Foreground = Brushes.Black;
                                    else
                                        txtTOTALWEIGHTN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtTOTALWEIGHTN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtTOTALWEIGHTN1.Foreground = Brushes.Black;
                            else
                                txtTOTALWEIGHTN1.Foreground = Brushes.Red;
                        }
                        else
                            txtTOTALWEIGHTN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtTOTALWEIGHTN2.Foreground = Brushes.Black;
                            else
                                txtTOTALWEIGHTN2.Foreground = Brushes.Red;
                        }
                        else
                            txtTOTALWEIGHTN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtTOTALWEIGHTN3.Foreground = Brushes.Black;
                            else
                                txtTOTALWEIGHTN3.Foreground = Brushes.Red;
                        }
                        else
                            txtTOTALWEIGHTN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtTOTALWEIGHTN4.Foreground = Brushes.Black;
                            else
                                txtTOTALWEIGHTN4.Foreground = Brushes.Red;
                        }
                        else
                            txtTOTALWEIGHTN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtTOTALWEIGHTN5.Foreground = Brushes.Black;
                            else
                                txtTOTALWEIGHTN5.Foreground = Brushes.Red;
                        }
                        else
                            txtTOTALWEIGHTN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtTOTALWEIGHTN6.Foreground = Brushes.Black;
                            else
                                txtTOTALWEIGHTN6.Foreground = Brushes.Red;
                        }
                        else
                            txtTOTALWEIGHTN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtTOTALWEIGHTN1.Foreground = Brushes.Black;
                    txtTOTALWEIGHTN2.Foreground = Brushes.Black;
                    txtTOTALWEIGHTN3.Foreground = Brushes.Black;
                    txtTOTALWEIGHTN4.Foreground = Brushes.Black;
                    txtTOTALWEIGHTN5.Foreground = Brushes.Black;
                    txtTOTALWEIGHTN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region CoatingWeight
        private void CoatingWeight(decimal? ave1, decimal? ave2, decimal? ave3, decimal? ave4, decimal? ave5, decimal? ave6)
        {
            try
            {
                int? i = 0;
                decimal value;

                if (ave1 != null)
                {
                    txtCOATINGWEIGHTN1.Text = ave1.Value.ToString("#,##0.##");
                    _session.P_COATWEIGHT1 = ave1;
                }
                else
                {
                    txtCOATINGWEIGHTN1.Text = string.Empty;
                    _session.P_COATWEIGHT1 = null;
                }

                if (ave2 != null)
                {
                    txtCOATINGWEIGHTN2.Text = ave2.Value.ToString("#,##0.##");
                    _session.P_COATWEIGHT2 = ave2;
                }
                else
                {
                    txtCOATINGWEIGHTN2.Text = string.Empty;
                    _session.P_COATWEIGHT2 = null;
                }

                if (ave3 != null)
                {
                    txtCOATINGWEIGHTN3.Text = ave3.Value.ToString("#,##0.##");
                    _session.P_COATWEIGHT3 = ave3;
                }
                else
                {
                    txtCOATINGWEIGHTN3.Text = string.Empty;
                    _session.P_COATWEIGHT3 = null;
                }

                if (ave4 != null)
                {
                    txtCOATINGWEIGHTN4.Text = ave4.Value.ToString("#,##0.##");
                    _session.P_COATWEIGHT4 = ave4;
                }
                else
                {
                    txtCOATINGWEIGHTN4.Text = string.Empty;
                    _session.P_COATWEIGHT4 = null;
                }

                if (ave5 != null)
                {
                    txtCOATINGWEIGHTN5.Text = ave5.Value.ToString("#,##0.##");
                    _session.P_COATWEIGHT5 = ave5;
                }
                else
                {
                    txtCOATINGWEIGHTN5.Text = string.Empty;
                    _session.P_COATWEIGHT5 = null;
                }

                if (ave6 != null)
                {
                    txtCOATINGWEIGHTN6.Text = ave6.Value.ToString("#,##0.##");
                    _session.P_COATWEIGHT6 = ave6;
                }
                else
                {
                    txtCOATINGWEIGHTN6.Text = string.Empty;
                    _session.P_COATWEIGHT6 = null;
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;
                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtCOATINGWEIGHTAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtCOATINGWEIGHTAve.Text = "0";
                    else
                        txtCOATINGWEIGHTAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtCOATINGWEIGHTSpecification.Text))
                {
                    string temp = txtCOATINGWEIGHTSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtCOATINGWEIGHTN1.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtCOATINGWEIGHTN2.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtCOATINGWEIGHTN3.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtCOATINGWEIGHTN4.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtCOATINGWEIGHTN5.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtCOATINGWEIGHTN6.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtCOATINGWEIGHTN1.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtCOATINGWEIGHTN2.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtCOATINGWEIGHTN3.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtCOATINGWEIGHTN4.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtCOATINGWEIGHTN5.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtCOATINGWEIGHTN6.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtCOATINGWEIGHTN1.Foreground = Brushes.Black;
                                    else
                                        txtCOATINGWEIGHTN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtCOATINGWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtCOATINGWEIGHTN2.Foreground = Brushes.Black;
                                    else
                                        txtCOATINGWEIGHTN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtCOATINGWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtCOATINGWEIGHTN3.Foreground = Brushes.Black;
                                    else
                                        txtCOATINGWEIGHTN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtCOATINGWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtCOATINGWEIGHTN4.Foreground = Brushes.Black;
                                    else
                                        txtCOATINGWEIGHTN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtCOATINGWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtCOATINGWEIGHTN5.Foreground = Brushes.Black;
                                    else
                                        txtCOATINGWEIGHTN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtCOATINGWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                                    else
                                        txtCOATINGWEIGHTN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtCOATINGWEIGHTN1.Foreground = Brushes.Black;
                            else
                                txtCOATINGWEIGHTN1.Foreground = Brushes.Red;
                        }
                        else
                            txtCOATINGWEIGHTN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtCOATINGWEIGHTN2.Foreground = Brushes.Black;
                            else
                                txtCOATINGWEIGHTN2.Foreground = Brushes.Red;
                        }
                        else
                            txtCOATINGWEIGHTN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtCOATINGWEIGHTN3.Foreground = Brushes.Black;
                            else
                                txtCOATINGWEIGHTN3.Foreground = Brushes.Red;
                        }
                        else
                            txtCOATINGWEIGHTN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtCOATINGWEIGHTN4.Foreground = Brushes.Black;
                            else
                                txtCOATINGWEIGHTN4.Foreground = Brushes.Red;
                        }
                        else
                            txtCOATINGWEIGHTN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtCOATINGWEIGHTN5.Foreground = Brushes.Black;
                            else
                                txtCOATINGWEIGHTN5.Foreground = Brushes.Red;
                        }
                        else
                            txtCOATINGWEIGHTN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                            else
                                txtCOATINGWEIGHTN6.Foreground = Brushes.Red;
                        }
                        else
                            txtCOATINGWEIGHTN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtCOATINGWEIGHTN1.Foreground = Brushes.Black;
                    txtCOATINGWEIGHTN2.Foreground = Brushes.Black;
                    txtCOATINGWEIGHTN3.Foreground = Brushes.Black;
                    txtCOATINGWEIGHTN4.Foreground = Brushes.Black;
                    txtCOATINGWEIGHTN5.Foreground = Brushes.Black;
                    txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region UncoatedWeight
        private void UncoatedWeight(decimal? ave1, decimal? ave2, decimal? ave3, decimal? ave4, decimal? ave5, decimal? ave6)
        {
            try
            {
                int? i = 0;
                decimal value;

                if (ave1 != null)
                {
                    txtUNCOATEDWEIGHTN1.Text = ave1.Value.ToString("#,##0.##");
                    _session.P_UNCOATEDWEIGHT1 = ave1;
                }
                else
                {
                    txtUNCOATEDWEIGHTN1.Text = string.Empty;
                    _session.P_UNCOATEDWEIGHT1 = null;
                }

                if (ave2 != null)
                {
                    txtUNCOATEDWEIGHTN2.Text = ave2.Value.ToString("#,##0.##");
                    _session.P_UNCOATEDWEIGHT2 = ave2;
                }
                else
                {
                    txtUNCOATEDWEIGHTN2.Text = string.Empty;
                    _session.P_UNCOATEDWEIGHT2 = null;
                }

                if (ave3 != null)
                {
                    txtUNCOATEDWEIGHTN3.Text = ave3.Value.ToString("#,##0.##");
                    _session.P_UNCOATEDWEIGHT3 = ave3;
                }
                else
                {
                    txtUNCOATEDWEIGHTN3.Text = string.Empty;
                    _session.P_UNCOATEDWEIGHT3 = null;
                }

                if (ave4 != null)
                {
                    txtUNCOATEDWEIGHTN4.Text = ave4.Value.ToString("#,##0.##");
                    _session.P_UNCOATEDWEIGHT4 = ave4;
                }
                else
                {
                    txtUNCOATEDWEIGHTN4.Text = string.Empty;
                    _session.P_UNCOATEDWEIGHT4 = null;
                }

                if (ave5 != null)
                {
                    txtUNCOATEDWEIGHTN5.Text = ave5.Value.ToString("#,##0.##");
                    _session.P_UNCOATEDWEIGHT5 = ave5;
                }
                else
                {
                    txtUNCOATEDWEIGHTN5.Text = string.Empty;
                    _session.P_UNCOATEDWEIGHT5 = null;
                }

                if (ave6 != null)
                {
                    txtUNCOATEDWEIGHTN6.Text = ave6.Value.ToString("#,##0.##");
                    _session.P_UNCOATEDWEIGHT6 = ave6;
                }
                else
                {
                    txtUNCOATEDWEIGHTN6.Text = string.Empty;
                    _session.P_UNCOATEDWEIGHT6 = null;
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtUNCOATEDWEIGHTAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtUNCOATEDWEIGHTAve.Text = "0";
                    else
                        txtUNCOATEDWEIGHTAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTSpecification.Text))
                {
                    string temp = txtUNCOATEDWEIGHTSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtUNCOATEDWEIGHTN1.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtUNCOATEDWEIGHTN2.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtUNCOATEDWEIGHTN3.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtUNCOATEDWEIGHTN4.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtUNCOATEDWEIGHTN5.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtUNCOATEDWEIGHTN6.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtUNCOATEDWEIGHTN1.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtUNCOATEDWEIGHTN2.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtUNCOATEDWEIGHTN3.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtUNCOATEDWEIGHTN4.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtUNCOATEDWEIGHTN5.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtUNCOATEDWEIGHTN6.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;
                                    else
                                        txtUNCOATEDWEIGHTN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;
                                    else
                                        txtUNCOATEDWEIGHTN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;
                                    else
                                        txtUNCOATEDWEIGHTN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;
                                    else
                                        txtUNCOATEDWEIGHTN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;
                                    else
                                        txtUNCOATEDWEIGHTN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
                                    else
                                        txtUNCOATEDWEIGHTN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;
                            else
                                txtUNCOATEDWEIGHTN1.Foreground = Brushes.Red;
                        }
                        else
                            txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;
                            else
                                txtUNCOATEDWEIGHTN2.Foreground = Brushes.Red;
                        }
                        else
                            txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;
                            else
                                txtUNCOATEDWEIGHTN3.Foreground = Brushes.Red;
                        }
                        else
                            txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;
                            else
                                txtUNCOATEDWEIGHTN4.Foreground = Brushes.Red;
                        }
                        else
                            txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;
                            else
                                txtUNCOATEDWEIGHTN5.Foreground = Brushes.Red;
                        }
                        else
                            txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
                            else
                                txtUNCOATEDWEIGHTN6.Foreground = Brushes.Red;
                        }
                        else
                            txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;
                    txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;
                    txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;
                    txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;
                    txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;
                    txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region Stiffness_f
        private void Stiffness_f(decimal? ave1, decimal? ave2, decimal? ave3, decimal? ave4, decimal? ave5, decimal? ave6)
        {
            try
            {
                int? i = 0;
                decimal value;

                if (ave1 != null)
                {
                    txtSTIFFNES_FN1.Text = ave1.Value.ToString("#,##0.##");
                    _session.P_STIFFNESS_F1 = ave1;
                }
                else
                {
                    txtSTIFFNES_FN1.Text = string.Empty;
                    _session.P_STIFFNESS_F1 = null;
                }

                if (ave2 != null)
                {
                    txtSTIFFNES_FN2.Text = ave2.Value.ToString("#,##0.##");
                    _session.P_STIFFNESS_F2 = ave2;
                }
                else
                {
                    txtSTIFFNES_FN2.Text = string.Empty;
                    _session.P_STIFFNESS_F2 = null;
                }

                if (ave3 != null)
                {
                    txtSTIFFNES_FN3.Text = ave3.Value.ToString("#,##0.##");
                    _session.P_STIFFNESS_F3 = ave3;
                }
                else
                {
                    txtSTIFFNES_FN3.Text = string.Empty;
                    _session.P_STIFFNESS_F3 = null;
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;
                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtSTIFFNES_FAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtSTIFFNES_FAve.Text = "0";
                    else
                        txtSTIFFNES_FAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtSTIFFNES_FSpecification.Text))
                {
                    string temp = txtSTIFFNES_FSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtSTIFFNES_FN1.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtSTIFFNES_FN2.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtSTIFFNES_FN3.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtSTIFFNES_FN4.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtSTIFFNES_FN5.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtSTIFFNES_FN6.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtSTIFFNES_FN1.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtSTIFFNES_FN2.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtSTIFFNES_FN3.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtSTIFFNES_FN4.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtSTIFFNES_FN5.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtSTIFFNES_FN6.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtSTIFFNES_FN1.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_FN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtSTIFFNES_FN2.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_FN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtSTIFFNES_FN3.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_FN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtSTIFFNES_FN4.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_FN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtSTIFFNES_FN5.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_FN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtSTIFFNES_FN6.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_FN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_FN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtSTIFFNES_FN1.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_FN1.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_FN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtSTIFFNES_FN2.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_FN2.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_FN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtSTIFFNES_FN3.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_FN3.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_FN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtSTIFFNES_FN4.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_FN4.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_FN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtSTIFFNES_FN5.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_FN5.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_FN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtSTIFFNES_FN6.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_FN6.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_FN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtSTIFFNES_FN1.Foreground = Brushes.Black;
                    txtSTIFFNES_FN2.Foreground = Brushes.Black;
                    txtSTIFFNES_FN3.Foreground = Brushes.Black;
                    txtSTIFFNES_FN4.Foreground = Brushes.Black;
                    txtSTIFFNES_FN5.Foreground = Brushes.Black;
                    txtSTIFFNES_FN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region Stiffness_w
        private void Stiffness_w(decimal? ave1, decimal? ave2, decimal? ave3, decimal? ave4, decimal? ave5, decimal? ave6)
        {
            try
            {
                int? i = 0;
                decimal value;

                if (ave1 != null)
                {
                    txtSTIFFNES_WN1.Text = ave1.Value.ToString("#,##0.##");
                    _session.P_STIFFNESS_W1 = ave1;
                }
                else
                {
                    txtSTIFFNES_WN1.Text = string.Empty;
                    _session.P_STIFFNESS_W1 = null;
                }

                if (ave2 != null)
                {
                    txtSTIFFNES_WN2.Text = ave2.Value.ToString("#,##0.##");
                    _session.P_STIFFNESS_W2 = ave2;
                }
                else
                {
                    txtSTIFFNES_WN2.Text = string.Empty;
                    _session.P_STIFFNESS_W2 = null;
                }

                if (ave3 != null)
                {
                    txtSTIFFNES_WN3.Text = ave3.Value.ToString("#,##0.##");
                    _session.P_STIFFNESS_W3 = ave3;
                }
                else
                {
                    txtSTIFFNES_WN3.Text = string.Empty;
                    _session.P_STIFFNESS_W3 = null;
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtSTIFFNES_WAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtSTIFFNES_WAve.Text = "0";
                    else
                        txtSTIFFNES_WAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtSTIFFNES_WSpecification.Text))
                {
                    string temp = txtSTIFFNES_WSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtSTIFFNES_WN1.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtSTIFFNES_WN2.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtSTIFFNES_WN3.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtSTIFFNES_WN4.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtSTIFFNES_WN5.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtSTIFFNES_WN6.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtSTIFFNES_WN1.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtSTIFFNES_WN2.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtSTIFFNES_WN3.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtSTIFFNES_WN4.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtSTIFFNES_WN5.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtSTIFFNES_WN6.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtSTIFFNES_WN1.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_WN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtSTIFFNES_WN2.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_WN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtSTIFFNES_WN3.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_WN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtSTIFFNES_WN4.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_WN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtSTIFFNES_WN5.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_WN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtSTIFFNES_WN6.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_WN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_WN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtSTIFFNES_WN1.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_WN1.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_WN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtSTIFFNES_WN2.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_WN2.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_WN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtSTIFFNES_WN3.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_WN3.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_WN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtSTIFFNES_WN4.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_WN4.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_WN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtSTIFFNES_WN5.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_WN5.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_WN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtSTIFFNES_WN6.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_WN6.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_WN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtSTIFFNES_WN1.Foreground = Brushes.Black;
                    txtSTIFFNES_WN2.Foreground = Brushes.Black;
                    txtSTIFFNES_WN3.Foreground = Brushes.Black;
                    txtSTIFFNES_WN4.Foreground = Brushes.Black;
                    txtSTIFFNES_WN5.Foreground = Brushes.Black;
                    txtSTIFFNES_WN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region Static_Air
        private void Static_Air(decimal? ave1, decimal? ave2, decimal? ave3, decimal? ave4, decimal? ave5, decimal? ave6)
        {
            try
            {
                int? i = 0;
                decimal value;

                if (ave1 != null)
                {
                    txtSTATIC_AIRN1.Text = ave1.Value.ToString("#,##0.###");
                    _session.P_STATIC_AIR1 = ave1;
                }
                else
                {
                    txtSTATIC_AIRN1.Text = string.Empty;
                    _session.P_STATIC_AIR1 = null;
                }

                if (ave2 != null)
                {
                    txtSTATIC_AIRN2.Text = ave2.Value.ToString("#,##0.###");
                    _session.P_STATIC_AIR2 = ave2;
                }
                else
                {
                    txtSTATIC_AIRN2.Text = string.Empty;
                    _session.P_STATIC_AIR2 = null;
                }

                if (ave3 != null)
                {
                    txtSTATIC_AIRN3.Text = ave3.Value.ToString("#,##0.###");
                    _session.P_STATIC_AIR3 = ave3;
                }
                else
                {
                    txtSTATIC_AIRN3.Text = string.Empty;
                    _session.P_STATIC_AIR3 = null;
                }

                if (ave4 != null)
                {
                    txtSTATIC_AIRN4.Text = ave4.Value.ToString("#,##0.###");
                    _session.P_STATIC_AIR4 = ave4;
                }
                else
                {
                    txtSTATIC_AIRN4.Text = string.Empty;
                    _session.P_STATIC_AIR4 = null;
                }

                if (ave5 != null)
                {
                    txtSTATIC_AIRN5.Text = ave5.Value.ToString("#,##0.###");
                    _session.P_STATIC_AIR5 = ave5;
                }
                else
                {
                    txtSTATIC_AIRN5.Text = string.Empty;
                    _session.P_STATIC_AIR5 = null;
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 3);

                    txtSTATIC_AIRAve.Text = Avg.Value.ToString("#,##0.###");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtSTATIC_AIRAve.Text = "0";
                    else
                        txtSTATIC_AIRAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtSTATIC_AIRSpecification.Text))
                {
                    string temp = txtSTATIC_AIRSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtSTATIC_AIRN1.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtSTATIC_AIRN2.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtSTATIC_AIRN3.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtSTATIC_AIRN4.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtSTATIC_AIRN5.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtSTATIC_AIRN6.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtSTATIC_AIRN1.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtSTATIC_AIRN2.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtSTATIC_AIRN3.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtSTATIC_AIRN4.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtSTATIC_AIRN5.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtSTATIC_AIRN6.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtSTATIC_AIRN1.Foreground = Brushes.Black;
                                    else
                                        txtSTATIC_AIRN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTATIC_AIRN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtSTATIC_AIRN2.Foreground = Brushes.Black;
                                    else
                                        txtSTATIC_AIRN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTATIC_AIRN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtSTATIC_AIRN3.Foreground = Brushes.Black;
                                    else
                                        txtSTATIC_AIRN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTATIC_AIRN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtSTATIC_AIRN4.Foreground = Brushes.Black;
                                    else
                                        txtSTATIC_AIRN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTATIC_AIRN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtSTATIC_AIRN5.Foreground = Brushes.Black;
                                    else
                                        txtSTATIC_AIRN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTATIC_AIRN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtSTATIC_AIRN6.Foreground = Brushes.Black;
                                    else
                                        txtSTATIC_AIRN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTATIC_AIRN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtSTATIC_AIRN1.Foreground = Brushes.Black;
                            else
                                txtSTATIC_AIRN1.Foreground = Brushes.Red;
                        }
                        else
                            txtSTATIC_AIRN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtSTATIC_AIRN2.Foreground = Brushes.Black;
                            else
                                txtSTATIC_AIRN2.Foreground = Brushes.Red;
                        }
                        else
                            txtSTATIC_AIRN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtSTATIC_AIRN3.Foreground = Brushes.Black;
                            else
                                txtSTATIC_AIRN3.Foreground = Brushes.Red;
                        }
                        else
                            txtSTATIC_AIRN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtSTATIC_AIRN4.Foreground = Brushes.Black;
                            else
                                txtSTATIC_AIRN4.Foreground = Brushes.Red;
                        }
                        else
                            txtSTATIC_AIRN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtSTATIC_AIRN5.Foreground = Brushes.Black;
                            else
                                txtSTATIC_AIRN5.Foreground = Brushes.Red;
                        }
                        else
                            txtSTATIC_AIRN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtSTATIC_AIRN6.Foreground = Brushes.Black;
                            else
                                txtSTATIC_AIRN6.Foreground = Brushes.Red;
                        }
                        else
                            txtSTATIC_AIRN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtSTATIC_AIRN1.Foreground = Brushes.Black;
                    txtSTATIC_AIRN2.Foreground = Brushes.Black;
                    txtSTATIC_AIRN3.Foreground = Brushes.Black;
                    txtSTATIC_AIRN4.Foreground = Brushes.Black;
                    txtSTATIC_AIRN5.Foreground = Brushes.Black;
                    txtSTATIC_AIRN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        // เพิ่ม 26/11/18
        #region Dynamic_Air
        private void Dynamic_Air(decimal? ave1, decimal? ave2, decimal? ave3, decimal? ave4, decimal? ave5, decimal? ave6)
        {
            try
            {
                int? i = 0;
                decimal value;

                if (ave1 != null)
                {
                    txtDYNAMIC_AIRN1.Text = ave1.Value.ToString("#,##0.##");
                    _session.P_DYNAMIC_AIR1 = ave1;
                }
                else
                {
                    txtDYNAMIC_AIRN1.Text = string.Empty;
                    _session.P_DYNAMIC_AIR1 = null;
                }

                if (ave2 != null)
                {
                    txtDYNAMIC_AIRN2.Text = ave2.Value.ToString("#,##0.##");
                    _session.P_DYNAMIC_AIR2 = ave2;
                }
                else
                {
                    txtDYNAMIC_AIRN2.Text = string.Empty;
                    _session.P_DYNAMIC_AIR2 = null;
                }

                if (ave3 != null)
                {
                    txtDYNAMIC_AIRN3.Text = ave3.Value.ToString("#,##0.##");
                    _session.P_DYNAMIC_AIR3 = ave3;
                }
                else
                {
                    txtDYNAMIC_AIRN3.Text = string.Empty;
                    _session.P_DYNAMIC_AIR3 = null;
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtDYNAMIC_AIRAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtDYNAMIC_AIRAve.Text = "0";
                    else
                        txtDYNAMIC_AIRAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtDYNAMIC_AIRSpecification.Text))
                {
                    string temp = txtDYNAMIC_AIRSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtDYNAMIC_AIRN1.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtDYNAMIC_AIRN2.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtDYNAMIC_AIRN3.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtDYNAMIC_AIRN4.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtDYNAMIC_AIRN5.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtDYNAMIC_AIRN6.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtDYNAMIC_AIRN1.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtDYNAMIC_AIRN2.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtDYNAMIC_AIRN3.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtDYNAMIC_AIRN4.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtDYNAMIC_AIRN5.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtDYNAMIC_AIRN6.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtDYNAMIC_AIRN1.Foreground = Brushes.Black;
                                    else
                                        txtDYNAMIC_AIRN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtDYNAMIC_AIRN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtDYNAMIC_AIRN2.Foreground = Brushes.Black;
                                    else
                                        txtDYNAMIC_AIRN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtDYNAMIC_AIRN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtDYNAMIC_AIRN3.Foreground = Brushes.Black;
                                    else
                                        txtDYNAMIC_AIRN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtDYNAMIC_AIRN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtDYNAMIC_AIRN4.Foreground = Brushes.Black;
                                    else
                                        txtDYNAMIC_AIRN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtDYNAMIC_AIRN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtDYNAMIC_AIRN5.Foreground = Brushes.Black;
                                    else
                                        txtDYNAMIC_AIRN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtDYNAMIC_AIRN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtDYNAMIC_AIRN6.Foreground = Brushes.Black;
                                    else
                                        txtDYNAMIC_AIRN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtDYNAMIC_AIRN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtDYNAMIC_AIRN1.Foreground = Brushes.Black;
                            else
                                txtDYNAMIC_AIRN1.Foreground = Brushes.Red;
                        }
                        else
                            txtDYNAMIC_AIRN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtDYNAMIC_AIRN2.Foreground = Brushes.Black;
                            else
                                txtDYNAMIC_AIRN2.Foreground = Brushes.Red;
                        }
                        else
                            txtDYNAMIC_AIRN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtDYNAMIC_AIRN3.Foreground = Brushes.Black;
                            else
                                txtDYNAMIC_AIRN3.Foreground = Brushes.Red;
                        }
                        else
                            txtDYNAMIC_AIRN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtDYNAMIC_AIRN4.Foreground = Brushes.Black;
                            else
                                txtDYNAMIC_AIRN4.Foreground = Brushes.Red;
                        }
                        else
                            txtDYNAMIC_AIRN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtDYNAMIC_AIRN5.Foreground = Brushes.Black;
                            else
                                txtDYNAMIC_AIRN5.Foreground = Brushes.Red;
                        }
                        else
                            txtDYNAMIC_AIRN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtDYNAMIC_AIRN6.Foreground = Brushes.Black;
                            else
                                txtDYNAMIC_AIRN6.Foreground = Brushes.Red;
                        }
                        else
                            txtDYNAMIC_AIRN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtDYNAMIC_AIRN1.Foreground = Brushes.Black;
                    txtDYNAMIC_AIRN2.Foreground = Brushes.Black;
                    txtDYNAMIC_AIRN3.Foreground = Brushes.Black;
                    txtDYNAMIC_AIRN4.Foreground = Brushes.Black;
                    txtDYNAMIC_AIRN5.Foreground = Brushes.Black;
                    txtDYNAMIC_AIRN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region Exponent
        private void Exponent(decimal? ave1, decimal? ave2, decimal? ave3, decimal? ave4, decimal? ave5, decimal? ave6)
        {
            try
            {
                int? i = 0;
                decimal value;

                if (ave1 != null)
                {
                    txtEXPONENTN1.Text = ave1.Value.ToString("#,##0.##");
                    _session.P_EXPONENT1 = ave1;
                }
                else
                {
                    txtEXPONENTN1.Text = string.Empty;
                    _session.P_EXPONENT1 = null;
                }

                if (ave2 != null)
                {
                    txtEXPONENTN2.Text = ave2.Value.ToString("#,##0.##");
                    _session.P_EXPONENT2 = ave2;
                }
                else
                {
                    txtEXPONENTN2.Text = string.Empty;
                    _session.P_EXPONENT2 = null;
                }

                if (ave3 != null)
                {
                    txtEXPONENTN3.Text = ave3.Value.ToString("#,##0.##");
                    _session.P_EXPONENT3 = ave3;
                }
                else
                {
                    txtEXPONENTN3.Text = string.Empty;
                    _session.P_EXPONENT3 = null;
                }

                decimal? Avg = 0;

                #region Old

                //if (ave1 != null && ave1 != 0)
                //    i++;
                //else
                //    ave1 = 0;

                //if (ave2 != null && ave2 != 0)
                //    i++;
                //else
                //    ave2 = 0;

                //if (ave3 != null && ave3 != 0)
                //    i++;
                //else
                //    ave3 = 0;

                //if (ave4 != null && ave4 != 0)
                //    i++;
                //else
                //    ave4 = 0;

                //if (ave5 != null && ave5 != 0)
                //    i++;
                //else
                //    ave5 = 0;

                //if (ave6 != null && ave6 != 0)
                //    i++;
                //else
                //    ave6 = 0;

                #endregion

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtEXPONENTAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtEXPONENTAve.Text = "0";
                    else
                        txtEXPONENTAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtEXPONENTSpecification.Text))
                {
                    string temp = txtEXPONENTSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtEXPONENTN1.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtEXPONENTN2.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtEXPONENTN3.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtEXPONENTN4.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtEXPONENTN5.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtEXPONENTN6.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtEXPONENTN1.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtEXPONENTN2.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtEXPONENTN3.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtEXPONENTN4.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtEXPONENTN5.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtEXPONENTN6.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtEXPONENTN1.Foreground = Brushes.Black;
                                    else
                                        txtEXPONENTN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtEXPONENTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtEXPONENTN2.Foreground = Brushes.Black;
                                    else
                                        txtEXPONENTN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtEXPONENTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtEXPONENTN3.Foreground = Brushes.Black;
                                    else
                                        txtEXPONENTN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtEXPONENTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtEXPONENTN4.Foreground = Brushes.Black;
                                    else
                                        txtEXPONENTN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtEXPONENTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtEXPONENTN5.Foreground = Brushes.Black;
                                    else
                                        txtEXPONENTN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtEXPONENTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtEXPONENTN6.Foreground = Brushes.Black;
                                    else
                                        txtEXPONENTN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtEXPONENTN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtEXPONENTN1.Foreground = Brushes.Black;
                            else
                                txtEXPONENTN1.Foreground = Brushes.Red;
                        }
                        else
                            txtEXPONENTN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtEXPONENTN2.Foreground = Brushes.Black;
                            else
                                txtEXPONENTN2.Foreground = Brushes.Red;
                        }
                        else
                            txtEXPONENTN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtEXPONENTN3.Foreground = Brushes.Black;
                            else
                                txtEXPONENTN3.Foreground = Brushes.Red;
                        }
                        else
                            txtEXPONENTN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtEXPONENTN4.Foreground = Brushes.Black;
                            else
                                txtEXPONENTN4.Foreground = Brushes.Red;
                        }
                        else
                            txtEXPONENTN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtEXPONENTN5.Foreground = Brushes.Black;
                            else
                                txtEXPONENTN5.Foreground = Brushes.Red;
                        }
                        else
                            txtEXPONENTN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtEXPONENTN6.Foreground = Brushes.Black;
                            else
                                txtEXPONENTN6.Foreground = Brushes.Red;
                        }
                        else
                            txtEXPONENTN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtEXPONENTN1.Foreground = Brushes.Black;
                    txtEXPONENTN2.Foreground = Brushes.Black;
                    txtEXPONENTN3.Foreground = Brushes.Black;
                    txtEXPONENTN4.Foreground = Brushes.Black;
                    txtEXPONENTN5.Foreground = Brushes.Black;
                    txtEXPONENTN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region ClearPLCData
        private void ClearPLCData()
        {
            txtTOTALWEIGHTN1.Text = string.Empty;
            txtTOTALWEIGHTN2.Text = string.Empty;
            txtTOTALWEIGHTN3.Text = string.Empty;
            txtTOTALWEIGHTN4.Text = string.Empty;
            txtTOTALWEIGHTN5.Text = string.Empty;
            txtTOTALWEIGHTN6.Text = string.Empty;
            txtTOTALWEIGHTAve.Text = string.Empty;

            _session.P_TOTALWEIGHT1 = null;
            _session.P_TOTALWEIGHT2 = null;
            _session.P_TOTALWEIGHT3 = null;
            _session.P_TOTALWEIGHT4 = null;
            _session.P_TOTALWEIGHT5 = null;
            _session.P_TOTALWEIGHT6 = null;

            txtCOATINGWEIGHTN1.Text = string.Empty;
            txtCOATINGWEIGHTN2.Text = string.Empty;
            txtCOATINGWEIGHTN3.Text = string.Empty;
            txtCOATINGWEIGHTN4.Text = string.Empty;
            txtCOATINGWEIGHTN5.Text = string.Empty;
            txtCOATINGWEIGHTN6.Text = string.Empty;
            txtCOATINGWEIGHTAve.Text = string.Empty;

            _session.P_COATWEIGHT1 = null;
            _session.P_COATWEIGHT2 = null;
            _session.P_COATWEIGHT3 = null;
            _session.P_COATWEIGHT4 = null;
            _session.P_COATWEIGHT5 = null;
            _session.P_COATWEIGHT6 = null;

            txtUNCOATEDWEIGHTN1.Text = string.Empty;
            txtUNCOATEDWEIGHTN2.Text = string.Empty;
            txtUNCOATEDWEIGHTN3.Text = string.Empty;
            txtUNCOATEDWEIGHTN4.Text = string.Empty;
            txtUNCOATEDWEIGHTN5.Text = string.Empty;
            txtUNCOATEDWEIGHTN6.Text = string.Empty;
            txtUNCOATEDWEIGHTAve.Text = string.Empty;

            _session.P_UNCOATEDWEIGHT1 = null;
            _session.P_UNCOATEDWEIGHT2 = null;
            _session.P_UNCOATEDWEIGHT3 = null;
            _session.P_UNCOATEDWEIGHT4 = null;
            _session.P_UNCOATEDWEIGHT5 = null;
            _session.P_UNCOATEDWEIGHT6 = null;

            txtSTIFFNES_FN1.Text = string.Empty;
            txtSTIFFNES_FN2.Text = string.Empty;
            txtSTIFFNES_FN3.Text = string.Empty;
            txtSTIFFNES_FN4.Text = string.Empty;
            txtSTIFFNES_FN5.Text = string.Empty;
            txtSTIFFNES_FN6.Text = string.Empty;
            txtSTIFFNES_FAve.Text = string.Empty;

            _session.P_STIFFNESS_F1 = null;
            _session.P_STIFFNESS_F2 = null;
            _session.P_STIFFNESS_F3 = null;

            txtSTIFFNES_WN1.Text = string.Empty;
            txtSTIFFNES_WN2.Text = string.Empty;
            txtSTIFFNES_WN3.Text = string.Empty;
            txtSTIFFNES_WN4.Text = string.Empty;
            txtSTIFFNES_WN5.Text = string.Empty;
            txtSTIFFNES_WN6.Text = string.Empty;
            txtSTIFFNES_WAve.Text = string.Empty;

            _session.P_STIFFNESS_W1 = null;
            _session.P_STIFFNESS_W2 = null;
            _session.P_STIFFNESS_W3 = null;

            txtSTATIC_AIRN1.Text = string.Empty;
            txtSTATIC_AIRN2.Text = string.Empty;
            txtSTATIC_AIRN3.Text = string.Empty;
            txtSTATIC_AIRN4.Text = string.Empty;
            txtSTATIC_AIRN5.Text = string.Empty;
            txtSTATIC_AIRN6.Text = string.Empty;
            txtSTATIC_AIRAve.Text = string.Empty;

            _session.P_STATIC_AIR1 = null;
            _session.P_STATIC_AIR2 = null;
            _session.P_STATIC_AIR3 = null;
            _session.P_STATIC_AIR4 = null;
            _session.P_STATIC_AIR5 = null;
            _session.P_STATIC_AIR6 = null;
        }
        #endregion

        #endregion

        #region Save

        private bool Save()
        {
            try
            {
                bool chkSave = true;

                #region ตัวแปร

                string P_ITMCODE = string.Empty;
                string P_WEAVINGLOG = string.Empty;
                string P_FINISHINGLOT = string.Empty;
                DateTime? P_ENTRYDATE = null;
                string P_ENTRYBY = string.Empty;
                decimal? P_WIDTH = null;
                decimal? P_USEWIDTH1 = null;
                decimal? P_USEWIDTH2 = null;
                decimal? P_USEWIDTH3 = null;
                decimal? P_WIDTHSILICONE1 = null;
                decimal? P_WIDTHSILICONE2 = null;
                decimal? P_WIDTHSILICONE3 = null;
                decimal? P_NUMTHREADS_W1 = null;
                decimal? P_NUMTHREADS_W2 = null;
                decimal? P_NUMTHREADS_W3 = null;
                decimal? P_NUMTHREADS_F1 = null;
                decimal? P_NUMTHREADS_F2 = null;
                decimal? P_NUMTHREADS_F3 = null;
                decimal? P_TOTALWEIGHT1 = null;
                decimal? P_TOTALWEIGHT2 = null;
                decimal? P_TOTALWEIGHT3 = null;
                decimal? P_TOTALWEIGHT4 = null;
                decimal? P_TOTALWEIGHT5 = null;
                decimal? P_TOTALWEIGHT6 = null;
                decimal? P_UNCOATEDWEIGHT1 = null;
                decimal? P_UNCOATEDWEIGHT2 = null;
                decimal? P_UNCOATEDWEIGHT3 = null;
                decimal? P_UNCOATEDWEIGHT4 = null;
                decimal? P_UNCOATEDWEIGHT5 = null;
                decimal? P_UNCOATEDWEIGHT6 = null;
                decimal? P_COATWEIGHT1 = null;
                decimal? P_COATWEIGHT2 = null;
                decimal? P_COATWEIGHT3 = null;
                decimal? P_COATWEIGHT4 = null;
                decimal? P_COATWEIGHT5 = null;
                decimal? P_COATWEIGHT6 = null;
                decimal? P_THICKNESS1 = null;
                decimal? P_THICKNESS2 = null;
                decimal? P_THICKNESS3 = null;
                decimal? P_MAXFORCE_W1 = null;
                decimal? P_MAXFORCE_W2 = null;
                decimal? P_MAXFORCE_W3 = null;

                decimal? P_MAXFORCE_W4 = null;
                decimal? P_MAXFORCE_W5 = null;
                decimal? P_MAXFORCE_W6 = null;

                decimal? P_MAXFORCE_F1 = null;
                decimal? P_MAXFORCE_F2 = null;
                decimal? P_MAXFORCE_F3 = null;

                decimal? P_MAXFORCE_F4 = null;
                decimal? P_MAXFORCE_F5 = null;
                decimal? P_MAXFORCE_F6 = null;

                decimal? P_ELOGATION_W1 = null;
                decimal? P_ELOGATION_W2 = null;
                decimal? P_ELOGATION_W3 = null;

                decimal? P_ELOGATION_W4 = null;
                decimal? P_ELOGATION_W5 = null;
                decimal? P_ELOGATION_W6 = null;

                decimal? P_ELOGATION_F1 = null;
                decimal? P_ELOGATION_F2 = null;
                decimal? P_ELOGATION_F3 = null;

                decimal? P_ELOGATION_F4 = null;
                decimal? P_ELOGATION_F5 = null;
                decimal? P_ELOGATION_F6 = null;

                decimal? P_FLAMMABILITY_W = null;
                decimal? P_FLAMMABILITY_W2 = null;
                decimal? P_FLAMMABILITY_W3 = null;
                decimal? P_FLAMMABILITY_W4 = null;
                decimal? P_FLAMMABILITY_W5 = null;

                decimal? P_FLAMMABILITY_F = null;
                decimal? P_FLAMMABILITY_F2 = null;
                decimal? P_FLAMMABILITY_F3 = null;
                decimal? P_FLAMMABILITY_F4 = null;
                decimal? P_FLAMMABILITY_F5 = null;

                decimal? P_EDGECOMB_W1 = null;
                decimal? P_EDGECOMB_W2 = null;
                decimal? P_EDGECOMB_W3 = null;
                decimal? P_EDGECOMB_F1 = null;
                decimal? P_EDGECOMB_F2 = null;
                decimal? P_EDGECOMB_F3 = null;
                decimal? P_STIFFNESS_W1 = null;
                decimal? P_STIFFNESS_W2 = null;
                decimal? P_STIFFNESS_W3 = null;
                decimal? P_STIFFNESS_F1 = null;
                decimal? P_STIFFNESS_F2 = null;
                decimal? P_STIFFNESS_F3 = null;
                decimal? P_TEAR_W1 = null;
                decimal? P_TEAR_W2 = null;
                decimal? P_TEAR_W3 = null;
                decimal? P_TEAR_F1 = null;
                decimal? P_TEAR_F2 = null;
                decimal? P_TEAR_F3 = null;
                decimal? P_STATIC_AIR1 = null;
                decimal? P_STATIC_AIR2 = null;
                decimal? P_STATIC_AIR3 = null;

                decimal? P_STATIC_AIR4 = null;
                decimal? P_STATIC_AIR5 = null;
                decimal? P_STATIC_AIR6 = null;

                decimal? P_DYNAMIC_AIR1 = null;
                decimal? P_DYNAMIC_AIR2 = null;
                decimal? P_DYNAMIC_AIR3 = null;
                decimal? P_EXPONENT1 = null;
                decimal? P_EXPONENT2 = null;
                decimal? P_EXPONENT3 = null;
                decimal? P_DIMENSCHANGE_W1 = null;
                decimal? P_DIMENSCHANGE_W2 = null;
                decimal? P_DIMENSCHANGE_W3 = null;
                decimal? P_DIMENSCHANGE_F1 = null;
                decimal? P_DIMENSCHANGE_F2 = null;
                decimal? P_DIMENSCHANGE_F3 = null;
                decimal? P_FLEXABRASION_W1 = null;
                decimal? P_FLEXABRASION_W2 = null;
                decimal? P_FLEXABRASION_W3 = null;
                decimal? P_FLEXABRASION_F1 = null;
                decimal? P_FLEXABRASION_F2 = null;
                decimal? P_FLEXABRASION_F3 = null;
                
                string P_STATUS = string.Empty;
                string P_REMARK = string.Empty;
                string P_APPROVEBY = string.Empty;
                DateTime? P_APPROVEDATE = null;

                decimal? P_BOW1 = null;
                decimal? P_BOW2 = null;
                decimal? P_BOW3 = null;
                decimal? P_SKEW1 = null;
                decimal? P_SKEW2 = null; 
                decimal? P_SKEW3 = null;
                decimal? P_BENDING_W1 = null;
                decimal? P_BENDING_W2 = null;
                decimal? P_BENDING_W3 = null;
                decimal? P_BENDING_F1 = null;
                decimal? P_BENDING_F2 = null;
                decimal? P_BENDING_F3 = null;
                decimal? P_FLEX_SCOTT_W1 = null;
                decimal? P_FLEX_SCOTT_W2 = null;
                decimal? P_FLEX_SCOTT_W3 = null;
                decimal? P_FLEX_SCOTT_F1 = null; 
                decimal? P_FLEX_SCOTT_F2 = null;
                decimal? P_FLEX_SCOTT_F3 = null;

                #endregion

                if (!string.IsNullOrEmpty(txtOperator.Text))
                    _session.P_ENTRYBY = txtOperator.Text;

                if (dteEntryDate.SelectedDate != null)
                    _session.P_ENTRYDATE = dteEntryDate.SelectedDate;

                _session.P_STATUS = "Wait for Approve";

                if (chkDataOnForm() == false)
                {
                    "Please Fill In All Test Result Data".ShowMessageBox();
                    chkSave = false;
                }
                else
                {
                    P_ITMCODE = _session.P_ITMCODE;
                    P_WEAVINGLOG = _session.P_WEAVINGLOG;
                    P_FINISHINGLOT =_session.P_FINISHINGLOT;

                    #region MAXFORCE
                    P_MAXFORCE_W1 = _session.P_MAXFORCE_W1;
                    P_MAXFORCE_W2 = _session.P_MAXFORCE_W2;
                    P_MAXFORCE_W3 = _session.P_MAXFORCE_W3;

                    P_MAXFORCE_W4 = _session.P_MAXFORCE_W4;
                    P_MAXFORCE_W5 = _session.P_MAXFORCE_W5;
                    P_MAXFORCE_W6 = _session.P_MAXFORCE_W6;

                    P_MAXFORCE_F1 = _session.P_MAXFORCE_F1;
                    P_MAXFORCE_F2 = _session.P_MAXFORCE_F2;
                    P_MAXFORCE_F3 = _session.P_MAXFORCE_F3;

                    P_MAXFORCE_F4 = _session.P_MAXFORCE_F4;
                    P_MAXFORCE_F5 = _session.P_MAXFORCE_F5;
                    P_MAXFORCE_F6 = _session.P_MAXFORCE_F6;

                    #endregion

                    #region ELOGATION
                    P_ELOGATION_W1 = _session.P_ELOGATION_W1;
                    P_ELOGATION_W2 = _session.P_ELOGATION_W2;
                    P_ELOGATION_W3 = _session.P_ELOGATION_W3;

                    P_ELOGATION_W4 = _session.P_ELOGATION_W4;
                    P_ELOGATION_W5 = _session.P_ELOGATION_W5;
                    P_ELOGATION_W6 = _session.P_ELOGATION_W6;

                    P_ELOGATION_F1 = _session.P_ELOGATION_F1;
                    P_ELOGATION_F2 = _session.P_ELOGATION_F2;
                    P_ELOGATION_F3 = _session.P_ELOGATION_F3;

                    P_ELOGATION_F4 = _session.P_ELOGATION_F4;
                    P_ELOGATION_F5 = _session.P_ELOGATION_F5;
                    P_ELOGATION_F6 = _session.P_ELOGATION_F6;
                    #endregion

                    #region EDGECOMB
                    P_EDGECOMB_W1 = _session.P_EDGECOMB_W1;
                    P_EDGECOMB_W2 = _session.P_EDGECOMB_W2;
                    P_EDGECOMB_W3 = _session.P_EDGECOMB_W3;
                    P_EDGECOMB_F1 = _session.P_EDGECOMB_F1;
                    P_EDGECOMB_F2 = _session.P_EDGECOMB_F2;
                    P_EDGECOMB_F3 = _session.P_EDGECOMB_F3;
                    #endregion

                    #region TEAR
                    P_TEAR_W1 = _session.P_TEAR_W1;
                    P_TEAR_W2 = _session.P_TEAR_W2;
                    P_TEAR_W3 = _session.P_TEAR_W3;
                    P_TEAR_F1 = _session.P_TEAR_F1;
                    P_TEAR_F2 = _session.P_TEAR_F2;
                    P_TEAR_F3 = _session.P_TEAR_F3;
                    #endregion

                    P_WIDTH = _session.P_WIDTH;

                    #region USEWIDTH
                    P_USEWIDTH1 = _session.P_USEWIDTH1;
                    P_USEWIDTH2 = _session.P_USEWIDTH2;
                    P_USEWIDTH3 = _session.P_USEWIDTH3;
                    #endregion

                    #region WIDTHSILICONE
                    P_WIDTHSILICONE1 = _session.P_WIDTHSILICONE1;
                    P_WIDTHSILICONE2 = _session.P_WIDTHSILICONE2;
                    P_WIDTHSILICONE3 = _session.P_WIDTHSILICONE3;
                    #endregion

                    #region NUMTHREADS
                    P_NUMTHREADS_W1 = _session.P_NUMTHREADS_W1;
                    P_NUMTHREADS_W2 = _session.P_NUMTHREADS_W2;
                    P_NUMTHREADS_W3 = _session.P_NUMTHREADS_W3;
                    P_NUMTHREADS_F1 = _session.P_NUMTHREADS_F1;
                    P_NUMTHREADS_F2 = _session.P_NUMTHREADS_F2;
                    P_NUMTHREADS_F3 = _session.P_NUMTHREADS_F3;
                    #endregion

                    #region TOTALWEIGHT
                    P_TOTALWEIGHT1 = _session.P_TOTALWEIGHT1;
                    P_TOTALWEIGHT2 = _session.P_TOTALWEIGHT2;
                    P_TOTALWEIGHT3 = _session.P_TOTALWEIGHT3;
                    P_TOTALWEIGHT4 = _session.P_TOTALWEIGHT4;
                    P_TOTALWEIGHT5 = _session.P_TOTALWEIGHT5;
                    P_TOTALWEIGHT6 = _session.P_TOTALWEIGHT6;
                    #endregion

                    #region UNCOATEDWEIGHT
                    P_UNCOATEDWEIGHT1 = _session.P_UNCOATEDWEIGHT1;
                    P_UNCOATEDWEIGHT2 = _session.P_UNCOATEDWEIGHT2;
                    P_UNCOATEDWEIGHT3 = _session.P_UNCOATEDWEIGHT3;
                    P_UNCOATEDWEIGHT4 = _session.P_UNCOATEDWEIGHT4;
                    P_UNCOATEDWEIGHT5 = _session.P_UNCOATEDWEIGHT5;
                    P_UNCOATEDWEIGHT6 = _session.P_UNCOATEDWEIGHT6;
                    #endregion

                    #region COATWEIGHT
                    P_COATWEIGHT1 = _session.P_COATWEIGHT1;
                    P_COATWEIGHT2 = _session.P_COATWEIGHT2;
                    P_COATWEIGHT3 = _session.P_COATWEIGHT3;
                    P_COATWEIGHT4 = _session.P_COATWEIGHT4;
                    P_COATWEIGHT5 = _session.P_COATWEIGHT5;
                    P_COATWEIGHT6 = _session.P_COATWEIGHT6;
                    #endregion

                    #region THICKNESS
                    P_THICKNESS1 = _session.P_THICKNESS1;
                    P_THICKNESS2 = _session.P_THICKNESS2;
                    P_THICKNESS3 = _session.P_THICKNESS3;
                    #endregion

                    P_FLAMMABILITY_W = _session.P_FLAMMABILITY_W;
                    P_FLAMMABILITY_W2 = _session.P_FLAMMABILITY_W2;
                    P_FLAMMABILITY_W3 = _session.P_FLAMMABILITY_W3;
                    P_FLAMMABILITY_W4 = _session.P_FLAMMABILITY_W4;
                    P_FLAMMABILITY_W5 = _session.P_FLAMMABILITY_W5;

                    P_FLAMMABILITY_F = _session.P_FLAMMABILITY_F;
                    P_FLAMMABILITY_F2 = _session.P_FLAMMABILITY_F2;
                    P_FLAMMABILITY_F3 = _session.P_FLAMMABILITY_F3;
                    P_FLAMMABILITY_F4 = _session.P_FLAMMABILITY_F4;
                    P_FLAMMABILITY_F5 = _session.P_FLAMMABILITY_F5;

                    #region STIFFNESS
                    P_STIFFNESS_W1 = _session.P_STIFFNESS_W1;
                    P_STIFFNESS_W2 = _session.P_STIFFNESS_W2;
                    P_STIFFNESS_W3 = _session.P_STIFFNESS_W3;
                    P_STIFFNESS_F1 = _session.P_STIFFNESS_F1;
                    P_STIFFNESS_F2 = _session.P_STIFFNESS_F2;
                    P_STIFFNESS_F3 = _session.P_STIFFNESS_F3;
                    #endregion

                    #region STATIC_AIR
                    P_STATIC_AIR1 = _session.P_STATIC_AIR1;
                    P_STATIC_AIR2 = _session.P_STATIC_AIR2;
                    P_STATIC_AIR3 = _session.P_STATIC_AIR3;

                    P_STATIC_AIR4 = _session.P_STATIC_AIR4;
                    P_STATIC_AIR5 = _session.P_STATIC_AIR5;
                    P_STATIC_AIR6 = _session.P_STATIC_AIR6;

                    #endregion

                    #region DYNAMIC_AIR
                    P_DYNAMIC_AIR1 = _session.P_DYNAMIC_AIR1;
                    P_DYNAMIC_AIR2 = _session.P_DYNAMIC_AIR2;
                    P_DYNAMIC_AIR3 = _session.P_DYNAMIC_AIR3;
                    #endregion

                    #region EXPONENT
                    P_EXPONENT1 = _session.P_EXPONENT1;
                    P_EXPONENT2 = _session.P_EXPONENT2;
                    P_EXPONENT3 = _session.P_EXPONENT3;
                    #endregion

                    #region DIMENSCHANGE
                    P_DIMENSCHANGE_W1 = _session.P_DIMENSCHANGE_W1;
                    P_DIMENSCHANGE_W2 = _session.P_DIMENSCHANGE_W2;
                    P_DIMENSCHANGE_W3 = _session.P_DIMENSCHANGE_W3;
                    P_DIMENSCHANGE_F1 = _session.P_DIMENSCHANGE_F1;
                    P_DIMENSCHANGE_F2 = _session.P_DIMENSCHANGE_F2;
                    P_DIMENSCHANGE_F3 = _session.P_DIMENSCHANGE_F3;
                    #endregion

                    #region FLEXABRASION
                    P_FLEXABRASION_W1 = _session.P_FLEXABRASION_W1;
                    P_FLEXABRASION_W2 = _session.P_FLEXABRASION_W2;
                    P_FLEXABRASION_W3 = _session.P_FLEXABRASION_W3;
                    P_FLEXABRASION_F1 = _session.P_FLEXABRASION_F1;
                    P_FLEXABRASION_F2 = _session.P_FLEXABRASION_F2;
                    P_FLEXABRASION_F3 = _session.P_FLEXABRASION_F3;
                    #endregion

                    //Update 07/07/18
                    #region BOW
                    P_BOW1 = _session.P_BOW1;
                    P_BOW2 = _session.P_BOW2;
                    P_BOW3 = _session.P_BOW3;
                    #endregion

                    #region SKEW
                    P_SKEW1 = _session.P_SKEW1;
                    P_SKEW2 = _session.P_SKEW2;
                    P_SKEW3 = _session.P_SKEW3;
                    #endregion

                    #region BENDING
                    P_BENDING_W1 = _session.P_BENDING_W1;
                    P_BENDING_W2 = _session.P_BENDING_W2;
                    P_BENDING_W3 = _session.P_BENDING_W3;
                    P_BENDING_F1 = _session.P_BENDING_F1;
                    P_BENDING_F2 = _session.P_BENDING_F2;
                    P_BENDING_F3 = _session.P_BENDING_F3;
                    #endregion

                    #region FLEX_SCOTT
                    P_FLEX_SCOTT_W1 = _session.P_FLEX_SCOTT_W1;
                    P_FLEX_SCOTT_W2 = _session.P_FLEX_SCOTT_W2;
                    P_FLEX_SCOTT_W3 = _session.P_FLEX_SCOTT_W3;
                    P_FLEX_SCOTT_F1 = _session.P_FLEX_SCOTT_F1;
                    P_FLEX_SCOTT_F2 = _session.P_FLEX_SCOTT_F2;
                    P_FLEX_SCOTT_F3 = _session.P_FLEX_SCOTT_F3;
                    #endregion

                    P_ENTRYDATE = _session.P_ENTRYDATE;
                    P_ENTRYBY = _session.P_ENTRYBY;
                    P_STATUS = _session.P_STATUS;

                    string insert = LabDataPDFDataService.Instance.LAB_INSERTPRODUCTIONP(P_ITMCODE, P_WEAVINGLOG, P_FINISHINGLOT, P_ENTRYDATE, P_ENTRYBY,
                           P_WIDTH, P_USEWIDTH1, P_USEWIDTH2, P_USEWIDTH3, P_WIDTHSILICONE1, P_WIDTHSILICONE2, P_WIDTHSILICONE3,
                           P_NUMTHREADS_W1, P_NUMTHREADS_W2, P_NUMTHREADS_W3, P_NUMTHREADS_F1, P_NUMTHREADS_F2, P_NUMTHREADS_F3,
                           P_TOTALWEIGHT1, P_TOTALWEIGHT2, P_TOTALWEIGHT3, P_TOTALWEIGHT4, P_TOTALWEIGHT5, P_TOTALWEIGHT6,
                           P_UNCOATEDWEIGHT1, P_UNCOATEDWEIGHT2, P_UNCOATEDWEIGHT3, P_UNCOATEDWEIGHT4, P_UNCOATEDWEIGHT5, P_UNCOATEDWEIGHT6,
                           P_COATWEIGHT1, P_COATWEIGHT2, P_COATWEIGHT3, P_COATWEIGHT4, P_COATWEIGHT5, P_COATWEIGHT6,
                           P_THICKNESS1, P_THICKNESS2, P_THICKNESS3, 
                           P_MAXFORCE_W1, P_MAXFORCE_W2, P_MAXFORCE_W3,
                           P_MAXFORCE_W4, P_MAXFORCE_W5, P_MAXFORCE_W6,
                           P_MAXFORCE_F1, P_MAXFORCE_F2, P_MAXFORCE_F3,
                           P_MAXFORCE_F4, P_MAXFORCE_F5, P_MAXFORCE_F6, 
                           P_ELOGATION_W1, P_ELOGATION_W2, P_ELOGATION_W3,
                           P_ELOGATION_W4, P_ELOGATION_W5, P_ELOGATION_W6,
                           P_ELOGATION_F1, P_ELOGATION_F2, P_ELOGATION_F3,
                           P_ELOGATION_F4, P_ELOGATION_F5, P_ELOGATION_F6,
                           P_FLAMMABILITY_W, P_FLAMMABILITY_W2, P_FLAMMABILITY_W3, P_FLAMMABILITY_W4, P_FLAMMABILITY_W5,
                           P_FLAMMABILITY_F, P_FLAMMABILITY_F2, P_FLAMMABILITY_F3, P_FLAMMABILITY_F4, P_FLAMMABILITY_F5,
                           P_EDGECOMB_W1, P_EDGECOMB_W2, P_EDGECOMB_W3, P_EDGECOMB_F1, P_EDGECOMB_F2, P_EDGECOMB_F3,
                           P_STIFFNESS_W1, P_STIFFNESS_W2, P_STIFFNESS_W3, P_STIFFNESS_F1, P_STIFFNESS_F2, P_STIFFNESS_F3,
                           P_TEAR_W1, P_TEAR_W2, P_TEAR_W3, P_TEAR_F1, P_TEAR_F2, P_TEAR_F3,
                           P_STATIC_AIR1, P_STATIC_AIR2, P_STATIC_AIR3, P_STATIC_AIR4, P_STATIC_AIR5, P_STATIC_AIR6, 
                           P_DYNAMIC_AIR1, P_DYNAMIC_AIR2, P_DYNAMIC_AIR3,
                           P_EXPONENT1, P_EXPONENT2, P_EXPONENT3, P_DIMENSCHANGE_W1, P_DIMENSCHANGE_W2, P_DIMENSCHANGE_W3,
                           P_DIMENSCHANGE_F1, P_DIMENSCHANGE_F2, P_DIMENSCHANGE_F3, P_FLEXABRASION_W1, P_FLEXABRASION_W2, P_FLEXABRASION_W3,
                           P_FLEXABRASION_F1, P_FLEXABRASION_F2, P_FLEXABRASION_F3, P_STATUS, P_REMARK, P_APPROVEBY, P_APPROVEDATE,
                           P_BOW1, P_BOW2, P_BOW3, P_SKEW1, P_SKEW2, P_SKEW3,
                           P_BENDING_W1, P_BENDING_W2, P_BENDING_W3, P_BENDING_F1, P_BENDING_F2, P_BENDING_F3,
                           P_FLEX_SCOTT_W1, P_FLEX_SCOTT_W2, P_FLEX_SCOTT_W3, P_FLEX_SCOTT_F1, P_FLEX_SCOTT_F2, P_FLEX_SCOTT_F3);

                    if (insert == "1")
                    {
                        "Save Data Complete".ShowMessageBox();
                        chkSave = true;
                    }
                    else
                    {
                        insert.ShowMessageBox();
                        chkSave = false;
                    }
                }

                return chkSave;
            }
            catch
            {
                return false;
            }
        }

        #endregion

        #region Approve

        private bool Approve()
        {
            try
            {
                bool chkApprove = true;

                #region ตัวแปร

                string P_ITMCODE = string.Empty;
                string P_WEAVINGLOG = string.Empty;
                string P_FINISHINGLOT = string.Empty;
                DateTime? P_ENTRYDATE = null;
                string P_ENTRYBY = string.Empty;
                decimal? P_WIDTH = null;
                decimal? P_USEWIDTH1 = null;
                decimal? P_USEWIDTH2 = null;
                decimal? P_USEWIDTH3 = null;
                decimal? P_WIDTHSILICONE1 = null;
                decimal? P_WIDTHSILICONE2 = null;
                decimal? P_WIDTHSILICONE3 = null;
                decimal? P_NUMTHREADS_W1 = null;
                decimal? P_NUMTHREADS_W2 = null;
                decimal? P_NUMTHREADS_W3 = null;
                decimal? P_NUMTHREADS_F1 = null;
                decimal? P_NUMTHREADS_F2 = null;
                decimal? P_NUMTHREADS_F3 = null;
                decimal? P_TOTALWEIGHT1 = null;
                decimal? P_TOTALWEIGHT2 = null;
                decimal? P_TOTALWEIGHT3 = null;
                decimal? P_TOTALWEIGHT4 = null;
                decimal? P_TOTALWEIGHT5 = null;
                decimal? P_TOTALWEIGHT6 = null;
                decimal? P_UNCOATEDWEIGHT1 = null;
                decimal? P_UNCOATEDWEIGHT2 = null;
                decimal? P_UNCOATEDWEIGHT3 = null;
                decimal? P_UNCOATEDWEIGHT4 = null;
                decimal? P_UNCOATEDWEIGHT5 = null;
                decimal? P_UNCOATEDWEIGHT6 = null;
                decimal? P_COATWEIGHT1 = null;
                decimal? P_COATWEIGHT2 = null;
                decimal? P_COATWEIGHT3 = null;
                decimal? P_COATWEIGHT4 = null;
                decimal? P_COATWEIGHT5 = null;
                decimal? P_COATWEIGHT6 = null;
                decimal? P_THICKNESS1 = null;
                decimal? P_THICKNESS2 = null;
                decimal? P_THICKNESS3 = null;

                decimal? P_MAXFORCE_W1 = null;
                decimal? P_MAXFORCE_W2 = null;
                decimal? P_MAXFORCE_W3 = null;

                decimal? P_MAXFORCE_W4 = null;
                decimal? P_MAXFORCE_W5 = null;
                decimal? P_MAXFORCE_W6 = null;

                decimal? P_MAXFORCE_F1 = null;
                decimal? P_MAXFORCE_F2 = null;
                decimal? P_MAXFORCE_F3 = null;

                decimal? P_MAXFORCE_F4 = null;
                decimal? P_MAXFORCE_F5 = null;
                decimal? P_MAXFORCE_F6 = null;

                decimal? P_ELOGATION_W1 = null;
                decimal? P_ELOGATION_W2 = null;
                decimal? P_ELOGATION_W3 = null;

                decimal? P_ELOGATION_W4 = null;
                decimal? P_ELOGATION_W5 = null;
                decimal? P_ELOGATION_W6 = null;

                decimal? P_ELOGATION_F1 = null;
                decimal? P_ELOGATION_F2 = null;
                decimal? P_ELOGATION_F3 = null;

                decimal? P_ELOGATION_F4 = null;
                decimal? P_ELOGATION_F5 = null;
                decimal? P_ELOGATION_F6 = null;

                decimal? P_FLAMMABILITY_W = null;
                decimal? P_FLAMMABILITY_W2 = null;
                decimal? P_FLAMMABILITY_W3 = null;
                decimal? P_FLAMMABILITY_W4 = null;
                decimal? P_FLAMMABILITY_W5 = null;

                decimal? P_FLAMMABILITY_F = null;
                decimal? P_FLAMMABILITY_F2 = null;
                decimal? P_FLAMMABILITY_F3 = null;
                decimal? P_FLAMMABILITY_F4 = null;
                decimal? P_FLAMMABILITY_F5 = null;

                decimal? P_EDGECOMB_W1 = null;
                decimal? P_EDGECOMB_W2 = null;
                decimal? P_EDGECOMB_W3 = null;
                decimal? P_EDGECOMB_F1 = null;
                decimal? P_EDGECOMB_F2 = null;
                decimal? P_EDGECOMB_F3 = null;
                decimal? P_STIFFNESS_W1 = null;
                decimal? P_STIFFNESS_W2 = null;
                decimal? P_STIFFNESS_W3 = null;
                decimal? P_STIFFNESS_F1 = null;
                decimal? P_STIFFNESS_F2 = null;
                decimal? P_STIFFNESS_F3 = null;
                decimal? P_TEAR_W1 = null;
                decimal? P_TEAR_W2 = null;
                decimal? P_TEAR_W3 = null;
                decimal? P_TEAR_F1 = null;
                decimal? P_TEAR_F2 = null;
                decimal? P_TEAR_F3 = null;
                decimal? P_STATIC_AIR1 = null;
                decimal? P_STATIC_AIR2 = null;
                decimal? P_STATIC_AIR3 = null;

                decimal? P_STATIC_AIR4 = null;
                decimal? P_STATIC_AIR5 = null;
                decimal? P_STATIC_AIR6 = null;

                decimal? P_DYNAMIC_AIR1 = null;
                decimal? P_DYNAMIC_AIR2 = null;
                decimal? P_DYNAMIC_AIR3 = null;
                decimal? P_EXPONENT1 = null;
                decimal? P_EXPONENT2 = null;
                decimal? P_EXPONENT3 = null;
                decimal? P_DIMENSCHANGE_W1 = null;
                decimal? P_DIMENSCHANGE_W2 = null;
                decimal? P_DIMENSCHANGE_W3 = null;
                decimal? P_DIMENSCHANGE_F1 = null;
                decimal? P_DIMENSCHANGE_F2 = null;
                decimal? P_DIMENSCHANGE_F3 = null;
                decimal? P_FLEXABRASION_W1 = null;
                decimal? P_FLEXABRASION_W2 = null;
                decimal? P_FLEXABRASION_W3 = null;
                decimal? P_FLEXABRASION_F1 = null;
                decimal? P_FLEXABRASION_F2 = null;
                decimal? P_FLEXABRASION_F3 = null;
                
                string P_STATUS = string.Empty;
                string P_REMARK = string.Empty;
                string P_APPROVEBY = string.Empty;
                DateTime? P_APPROVEDATE = null;

                decimal? P_BOW1 = null;
                decimal? P_BOW2 = null;
                decimal? P_BOW3 = null;
                decimal? P_SKEW1 = null;
                decimal? P_SKEW2 = null;
                decimal? P_SKEW3 = null;
                decimal? P_BENDING_W1 = null;
                decimal? P_BENDING_W2 = null;
                decimal? P_BENDING_W3 = null;
                decimal? P_BENDING_F1 = null;
                decimal? P_BENDING_F2 = null;
                decimal? P_BENDING_F3 = null;
                decimal? P_FLEX_SCOTT_W1 = null;
                decimal? P_FLEX_SCOTT_W2 = null;
                decimal? P_FLEX_SCOTT_W3 = null;
                decimal? P_FLEX_SCOTT_F1 = null;
                decimal? P_FLEX_SCOTT_F2 = null;
                decimal? P_FLEX_SCOTT_F3 = null;

                #endregion

                if (!string.IsNullOrEmpty(txtOperator.Text))
                {
                    _session.P_ENTRYBY = txtOperator.Text;
                    _session.P_APPROVEBY = txtOperator.Text;
                }

                if (dteEntryDate.SelectedDate != null)
                    _session.P_ENTRYDATE = dteEntryDate.SelectedDate;

                _session.P_STATUS = "Approve";

                _session.P_APPROVEDATE = DateTime.Now;
               
                if (chkDataOnForm() == false)
                {
                    "Please Fill In All Test Result Data".ShowMessageBox();
                    chkApprove = false;
                }
                else
                {
                    P_ITMCODE = _session.P_ITMCODE;
                    P_WEAVINGLOG = _session.P_WEAVINGLOG;
                    P_FINISHINGLOT = _session.P_FINISHINGLOT;

                    #region MAXFORCE
                    P_MAXFORCE_W1 = _session.P_MAXFORCE_W1;
                    P_MAXFORCE_W2 = _session.P_MAXFORCE_W2;
                    P_MAXFORCE_W3 = _session.P_MAXFORCE_W3;

                    P_MAXFORCE_W4 = _session.P_MAXFORCE_W4;
                    P_MAXFORCE_W5 = _session.P_MAXFORCE_W5;
                    P_MAXFORCE_W6 = _session.P_MAXFORCE_W6;

                    P_MAXFORCE_F1 = _session.P_MAXFORCE_F1;
                    P_MAXFORCE_F2 = _session.P_MAXFORCE_F2;
                    P_MAXFORCE_F3 = _session.P_MAXFORCE_F3;

                    P_MAXFORCE_F4 = _session.P_MAXFORCE_F4;
                    P_MAXFORCE_F5 = _session.P_MAXFORCE_F5;
                    P_MAXFORCE_F6 = _session.P_MAXFORCE_F6;

                    #endregion

                    #region ELOGATION
                    P_ELOGATION_W1 = _session.P_ELOGATION_W1;
                    P_ELOGATION_W2 = _session.P_ELOGATION_W2;
                    P_ELOGATION_W3 = _session.P_ELOGATION_W3;

                    P_ELOGATION_W4 = _session.P_ELOGATION_W4;
                    P_ELOGATION_W5 = _session.P_ELOGATION_W5;
                    P_ELOGATION_W6 = _session.P_ELOGATION_W6;

                    P_ELOGATION_F1 = _session.P_ELOGATION_F1;
                    P_ELOGATION_F2 = _session.P_ELOGATION_F2;
                    P_ELOGATION_F3 = _session.P_ELOGATION_F3;

                    P_ELOGATION_F4 = _session.P_ELOGATION_F4;
                    P_ELOGATION_F5 = _session.P_ELOGATION_F5;
                    P_ELOGATION_F6 = _session.P_ELOGATION_F6;

                    #endregion

                    #region EDGECOMB
                    P_EDGECOMB_W1 = _session.P_EDGECOMB_W1;
                    P_EDGECOMB_W2 = _session.P_EDGECOMB_W2;
                    P_EDGECOMB_W3 = _session.P_EDGECOMB_W3;
                    P_EDGECOMB_F1 = _session.P_EDGECOMB_F1;
                    P_EDGECOMB_F2 = _session.P_EDGECOMB_F2;
                    P_EDGECOMB_F3 = _session.P_EDGECOMB_F3;
                    #endregion

                    #region TEAR
                    P_TEAR_W1 = _session.P_TEAR_W1;
                    P_TEAR_W2 = _session.P_TEAR_W2;
                    P_TEAR_W3 = _session.P_TEAR_W3;
                    P_TEAR_F1 = _session.P_TEAR_F1;
                    P_TEAR_F2 = _session.P_TEAR_F2;
                    P_TEAR_F3 = _session.P_TEAR_F3;
                    #endregion

                    P_WIDTH = _session.P_WIDTH;

                    #region USEWIDTH
                    P_USEWIDTH1 = _session.P_USEWIDTH1;
                    P_USEWIDTH2 = _session.P_USEWIDTH2;
                    P_USEWIDTH3 = _session.P_USEWIDTH3;
                    #endregion

                    #region WIDTHSILICONE
                    P_WIDTHSILICONE1 = _session.P_WIDTHSILICONE1;
                    P_WIDTHSILICONE2 = _session.P_WIDTHSILICONE2;
                    P_WIDTHSILICONE3 = _session.P_WIDTHSILICONE3;
                    #endregion

                    #region NUMTHREADS
                    P_NUMTHREADS_W1 = _session.P_NUMTHREADS_W1;
                    P_NUMTHREADS_W2 = _session.P_NUMTHREADS_W2;
                    P_NUMTHREADS_W3 = _session.P_NUMTHREADS_W3;
                    P_NUMTHREADS_F1 = _session.P_NUMTHREADS_F1;
                    P_NUMTHREADS_F2 = _session.P_NUMTHREADS_F2;
                    P_NUMTHREADS_F3 = _session.P_NUMTHREADS_F3;
                    #endregion

                    #region TOTALWEIGHT
                    P_TOTALWEIGHT1 = _session.P_TOTALWEIGHT1;
                    P_TOTALWEIGHT2 = _session.P_TOTALWEIGHT2;
                    P_TOTALWEIGHT3 = _session.P_TOTALWEIGHT3;
                    P_TOTALWEIGHT4 = _session.P_TOTALWEIGHT4;
                    P_TOTALWEIGHT5 = _session.P_TOTALWEIGHT5;
                    P_TOTALWEIGHT6 = _session.P_TOTALWEIGHT6;
                    #endregion

                    #region UNCOATEDWEIGHT
                    P_UNCOATEDWEIGHT1 = _session.P_UNCOATEDWEIGHT1;
                    P_UNCOATEDWEIGHT2 = _session.P_UNCOATEDWEIGHT2;
                    P_UNCOATEDWEIGHT3 = _session.P_UNCOATEDWEIGHT3;
                    P_UNCOATEDWEIGHT4 = _session.P_UNCOATEDWEIGHT4;
                    P_UNCOATEDWEIGHT5 = _session.P_UNCOATEDWEIGHT5;
                    P_UNCOATEDWEIGHT6 = _session.P_UNCOATEDWEIGHT6;
                    #endregion

                    #region COATWEIGHT
                    P_COATWEIGHT1 = _session.P_COATWEIGHT1;
                    P_COATWEIGHT2 = _session.P_COATWEIGHT2;
                    P_COATWEIGHT3 = _session.P_COATWEIGHT3;
                    P_COATWEIGHT4 = _session.P_COATWEIGHT4;
                    P_COATWEIGHT5 = _session.P_COATWEIGHT5;
                    P_COATWEIGHT6 = _session.P_COATWEIGHT6;
                    #endregion

                    #region THICKNESS
                    P_THICKNESS1 = _session.P_THICKNESS1;
                    P_THICKNESS2 = _session.P_THICKNESS2;
                    P_THICKNESS3 = _session.P_THICKNESS3;
                    #endregion

                    P_FLAMMABILITY_W = _session.P_FLAMMABILITY_W;
                    P_FLAMMABILITY_W2 = _session.P_FLAMMABILITY_W2;
                    P_FLAMMABILITY_W3 = _session.P_FLAMMABILITY_W3;
                    P_FLAMMABILITY_W4 = _session.P_FLAMMABILITY_W4;
                    P_FLAMMABILITY_W5 = _session.P_FLAMMABILITY_W5;

                    P_FLAMMABILITY_F = _session.P_FLAMMABILITY_F;
                    P_FLAMMABILITY_F2 = _session.P_FLAMMABILITY_F2;
                    P_FLAMMABILITY_F3 = _session.P_FLAMMABILITY_F3;
                    P_FLAMMABILITY_F4 = _session.P_FLAMMABILITY_F4;
                    P_FLAMMABILITY_F5 = _session.P_FLAMMABILITY_F5;

                    #region STIFFNESS
                    P_STIFFNESS_W1 = _session.P_STIFFNESS_W1;
                    P_STIFFNESS_W2 = _session.P_STIFFNESS_W2;
                    P_STIFFNESS_W3 = _session.P_STIFFNESS_W3;
                    P_STIFFNESS_F1 = _session.P_STIFFNESS_F1;
                    P_STIFFNESS_F2 = _session.P_STIFFNESS_F2;
                    P_STIFFNESS_F3 = _session.P_STIFFNESS_F3;
                    #endregion

                    #region STATIC_AIR
                    P_STATIC_AIR1 = _session.P_STATIC_AIR1;
                    P_STATIC_AIR2 = _session.P_STATIC_AIR2;
                    P_STATIC_AIR3 = _session.P_STATIC_AIR3;

                    P_STATIC_AIR4 = _session.P_STATIC_AIR4;
                    P_STATIC_AIR5 = _session.P_STATIC_AIR5;
                    P_STATIC_AIR6 = _session.P_STATIC_AIR6;

                    #endregion

                    #region DYNAMIC_AIR
                    P_DYNAMIC_AIR1 = _session.P_DYNAMIC_AIR1;
                    P_DYNAMIC_AIR2 = _session.P_DYNAMIC_AIR2;
                    P_DYNAMIC_AIR3 = _session.P_DYNAMIC_AIR3;
                    #endregion

                    #region EXPONENT
                    P_EXPONENT1 = _session.P_EXPONENT1;
                    P_EXPONENT2 = _session.P_EXPONENT2;
                    P_EXPONENT3 = _session.P_EXPONENT3;
                    #endregion

                    #region DIMENSCHANGE
                    P_DIMENSCHANGE_W1 = _session.P_DIMENSCHANGE_W1;
                    P_DIMENSCHANGE_W2 = _session.P_DIMENSCHANGE_W2;
                    P_DIMENSCHANGE_W3 = _session.P_DIMENSCHANGE_W3;
                    P_DIMENSCHANGE_F1 = _session.P_DIMENSCHANGE_F1;
                    P_DIMENSCHANGE_F2 = _session.P_DIMENSCHANGE_F2;
                    P_DIMENSCHANGE_F3 = _session.P_DIMENSCHANGE_F3;
                    #endregion

                    #region FLEXABRASION
                    P_FLEXABRASION_W1 = _session.P_FLEXABRASION_W1;
                    P_FLEXABRASION_W2 = _session.P_FLEXABRASION_W2;
                    P_FLEXABRASION_W3 = _session.P_FLEXABRASION_W3;
                    P_FLEXABRASION_F1 = _session.P_FLEXABRASION_F1;
                    P_FLEXABRASION_F2 = _session.P_FLEXABRASION_F2;
                    P_FLEXABRASION_F3 = _session.P_FLEXABRASION_F3;
                    #endregion

                    //Update 07/07/18
                    #region BOW
                    P_BOW1 = _session.P_BOW1;
                    P_BOW2 = _session.P_BOW2;
                    P_BOW3 = _session.P_BOW3;
                    #endregion

                    #region SKEW
                    P_SKEW1 = _session.P_SKEW1;
                    P_SKEW2 = _session.P_SKEW2;
                    P_SKEW3 = _session.P_SKEW3;
                    #endregion

                    #region BENDING
                    P_BENDING_W1 = _session.P_BENDING_W1;
                    P_BENDING_W2 = _session.P_BENDING_W2;
                    P_BENDING_W3 = _session.P_BENDING_W3;
                    P_BENDING_F1 = _session.P_BENDING_F1;
                    P_BENDING_F2 = _session.P_BENDING_F2;
                    P_BENDING_F3 = _session.P_BENDING_F3;
                    #endregion

                    #region FLEX_SCOTT
                    P_FLEX_SCOTT_W1 = _session.P_FLEX_SCOTT_W1;
                    P_FLEX_SCOTT_W2 = _session.P_FLEX_SCOTT_W2;
                    P_FLEX_SCOTT_W3 = _session.P_FLEX_SCOTT_W3;
                    P_FLEX_SCOTT_F1 = _session.P_FLEX_SCOTT_F1;
                    P_FLEX_SCOTT_F2 = _session.P_FLEX_SCOTT_F2;
                    P_FLEX_SCOTT_F3 = _session.P_FLEX_SCOTT_F3;
                    #endregion

                    P_ENTRYDATE = _session.P_ENTRYDATE;
                    P_ENTRYBY = _session.P_ENTRYBY;
                    P_STATUS = _session.P_STATUS;
                    P_APPROVEBY = _session.P_APPROVEBY;
                    P_APPROVEDATE = _session.P_APPROVEDATE;

                    string insert = LabDataPDFDataService.Instance.LAB_INSERTPRODUCTIONP(P_ITMCODE, P_WEAVINGLOG, P_FINISHINGLOT, P_ENTRYDATE, P_ENTRYBY,
                           P_WIDTH, P_USEWIDTH1, P_USEWIDTH2, P_USEWIDTH3, P_WIDTHSILICONE1, P_WIDTHSILICONE2, P_WIDTHSILICONE3,
                           P_NUMTHREADS_W1, P_NUMTHREADS_W2, P_NUMTHREADS_W3, P_NUMTHREADS_F1, P_NUMTHREADS_F2, P_NUMTHREADS_F3,
                           P_TOTALWEIGHT1, P_TOTALWEIGHT2, P_TOTALWEIGHT3, P_TOTALWEIGHT4, P_TOTALWEIGHT5, P_TOTALWEIGHT6,
                           P_UNCOATEDWEIGHT1, P_UNCOATEDWEIGHT2, P_UNCOATEDWEIGHT3, P_UNCOATEDWEIGHT4, P_UNCOATEDWEIGHT5, P_UNCOATEDWEIGHT6,
                           P_COATWEIGHT1, P_COATWEIGHT2, P_COATWEIGHT3, P_COATWEIGHT4, P_COATWEIGHT5, P_COATWEIGHT6,
                           P_THICKNESS1, P_THICKNESS2, P_THICKNESS3, 
                           P_MAXFORCE_W1, P_MAXFORCE_W2, P_MAXFORCE_W3,
                           P_MAXFORCE_W4, P_MAXFORCE_W5, P_MAXFORCE_W6,
                           P_MAXFORCE_F1, P_MAXFORCE_F2, P_MAXFORCE_F3,
                           P_MAXFORCE_F4, P_MAXFORCE_F5, P_MAXFORCE_F6, 
                           P_ELOGATION_W1, P_ELOGATION_W2, P_ELOGATION_W3,
                           P_ELOGATION_W4, P_ELOGATION_W5, P_ELOGATION_W6,
                           P_ELOGATION_F1, P_ELOGATION_F2, P_ELOGATION_F3,
                           P_ELOGATION_F4, P_ELOGATION_F5, P_ELOGATION_F6,
                           P_FLAMMABILITY_W, P_FLAMMABILITY_W2, P_FLAMMABILITY_W3, P_FLAMMABILITY_W4, P_FLAMMABILITY_W5,
                           P_FLAMMABILITY_F, P_FLAMMABILITY_F2, P_FLAMMABILITY_F3, P_FLAMMABILITY_F4, P_FLAMMABILITY_F5,
                           P_EDGECOMB_W1, P_EDGECOMB_W2, P_EDGECOMB_W3, P_EDGECOMB_F1, P_EDGECOMB_F2, P_EDGECOMB_F3,
                           P_STIFFNESS_W1, P_STIFFNESS_W2, P_STIFFNESS_W3, P_STIFFNESS_F1, P_STIFFNESS_F2, P_STIFFNESS_F3,
                           P_TEAR_W1, P_TEAR_W2, P_TEAR_W3, P_TEAR_F1, P_TEAR_F2, P_TEAR_F3,
                           P_STATIC_AIR1, P_STATIC_AIR2, P_STATIC_AIR3, P_STATIC_AIR4, P_STATIC_AIR5, P_STATIC_AIR6, 
                           P_DYNAMIC_AIR1, P_DYNAMIC_AIR2, P_DYNAMIC_AIR3,
                           P_EXPONENT1, P_EXPONENT2, P_EXPONENT3, P_DIMENSCHANGE_W1, P_DIMENSCHANGE_W2, P_DIMENSCHANGE_W3,
                           P_DIMENSCHANGE_F1, P_DIMENSCHANGE_F2, P_DIMENSCHANGE_F3, P_FLEXABRASION_W1, P_FLEXABRASION_W2, P_FLEXABRASION_W3,
                           P_FLEXABRASION_F1, P_FLEXABRASION_F2, P_FLEXABRASION_F3, P_STATUS, P_REMARK, P_APPROVEBY, P_APPROVEDATE ,
                           P_BOW1, P_BOW2, P_BOW3, P_SKEW1, P_SKEW2, P_SKEW3,
                           P_BENDING_W1, P_BENDING_W2, P_BENDING_W3, P_BENDING_F1, P_BENDING_F2, P_BENDING_F3,
                           P_FLEX_SCOTT_W1, P_FLEX_SCOTT_W2, P_FLEX_SCOTT_W3, P_FLEX_SCOTT_F1, P_FLEX_SCOTT_F2, P_FLEX_SCOTT_F3);

                    if (insert == "1")
                    {
                        "Save Data Complete".ShowMessageBox();
                        chkApprove = true;
                    }
                    else
                    {
                        insert.ShowMessageBox();
                        chkApprove = false;
                    }
                }

                return chkApprove;
            }
            catch
            {
                return false;
            }
        }

        #endregion

        #region NotApprove

        private bool NotApprove()
        {
            try
            {
                bool chkNotApprove = true;

                #region ตัวแปร

                string P_ITMCODE = string.Empty;
                string P_WEAVINGLOG = string.Empty;
                string P_FINISHINGLOT = string.Empty;
                DateTime? P_ENTRYDATE = null;
                string P_ENTRYBY = string.Empty;
                decimal? P_WIDTH = null;
                decimal? P_USEWIDTH1 = null;
                decimal? P_USEWIDTH2 = null;
                decimal? P_USEWIDTH3 = null;
                decimal? P_WIDTHSILICONE1 = null;
                decimal? P_WIDTHSILICONE2 = null;
                decimal? P_WIDTHSILICONE3 = null;
                decimal? P_NUMTHREADS_W1 = null;
                decimal? P_NUMTHREADS_W2 = null;
                decimal? P_NUMTHREADS_W3 = null;
                decimal? P_NUMTHREADS_F1 = null;
                decimal? P_NUMTHREADS_F2 = null;
                decimal? P_NUMTHREADS_F3 = null;
                decimal? P_TOTALWEIGHT1 = null;
                decimal? P_TOTALWEIGHT2 = null;
                decimal? P_TOTALWEIGHT3 = null;
                decimal? P_TOTALWEIGHT4 = null;
                decimal? P_TOTALWEIGHT5 = null;
                decimal? P_TOTALWEIGHT6 = null;
                decimal? P_UNCOATEDWEIGHT1 = null;
                decimal? P_UNCOATEDWEIGHT2 = null;
                decimal? P_UNCOATEDWEIGHT3 = null;
                decimal? P_UNCOATEDWEIGHT4 = null;
                decimal? P_UNCOATEDWEIGHT5 = null;
                decimal? P_UNCOATEDWEIGHT6 = null;
                decimal? P_COATWEIGHT1 = null;
                decimal? P_COATWEIGHT2 = null;
                decimal? P_COATWEIGHT3 = null;
                decimal? P_COATWEIGHT4 = null;
                decimal? P_COATWEIGHT5 = null;
                decimal? P_COATWEIGHT6 = null;
                decimal? P_THICKNESS1 = null;
                decimal? P_THICKNESS2 = null;
                decimal? P_THICKNESS3 = null;
                decimal? P_MAXFORCE_W1 = null;
                decimal? P_MAXFORCE_W2 = null;
                decimal? P_MAXFORCE_W3 = null;

                decimal? P_MAXFORCE_W4 = null;
                decimal? P_MAXFORCE_W5 = null;
                decimal? P_MAXFORCE_W6 = null;

                decimal? P_MAXFORCE_F1 = null;
                decimal? P_MAXFORCE_F2 = null;
                decimal? P_MAXFORCE_F3 = null;

                decimal? P_MAXFORCE_F4 = null;
                decimal? P_MAXFORCE_F5 = null;
                decimal? P_MAXFORCE_F6 = null;

                decimal? P_ELOGATION_W1 = null;
                decimal? P_ELOGATION_W2 = null;
                decimal? P_ELOGATION_W3 = null;

                decimal? P_ELOGATION_W4 = null;
                decimal? P_ELOGATION_W5 = null;
                decimal? P_ELOGATION_W6 = null;

                decimal? P_ELOGATION_F1 = null;
                decimal? P_ELOGATION_F2 = null;
                decimal? P_ELOGATION_F3 = null;

                decimal? P_ELOGATION_F4 = null;
                decimal? P_ELOGATION_F5 = null;
                decimal? P_ELOGATION_F6 = null;

                decimal? P_FLAMMABILITY_W = null;
                decimal? P_FLAMMABILITY_W2 = null;
                decimal? P_FLAMMABILITY_W3 = null;
                decimal? P_FLAMMABILITY_W4 = null;
                decimal? P_FLAMMABILITY_W5 = null;

                decimal? P_FLAMMABILITY_F = null;
                decimal? P_FLAMMABILITY_F2 = null;
                decimal? P_FLAMMABILITY_F3 = null;
                decimal? P_FLAMMABILITY_F4 = null;
                decimal? P_FLAMMABILITY_F5 = null;

                decimal? P_EDGECOMB_W1 = null;
                decimal? P_EDGECOMB_W2 = null;
                decimal? P_EDGECOMB_W3 = null;
                decimal? P_EDGECOMB_F1 = null;
                decimal? P_EDGECOMB_F2 = null;
                decimal? P_EDGECOMB_F3 = null;
                decimal? P_STIFFNESS_W1 = null;
                decimal? P_STIFFNESS_W2 = null;
                decimal? P_STIFFNESS_W3 = null;
                decimal? P_STIFFNESS_F1 = null;
                decimal? P_STIFFNESS_F2 = null;
                decimal? P_STIFFNESS_F3 = null;
                decimal? P_TEAR_W1 = null;
                decimal? P_TEAR_W2 = null;
                decimal? P_TEAR_W3 = null;
                decimal? P_TEAR_F1 = null;
                decimal? P_TEAR_F2 = null;
                decimal? P_TEAR_F3 = null;
                decimal? P_STATIC_AIR1 = null;
                decimal? P_STATIC_AIR2 = null;
                decimal? P_STATIC_AIR3 = null;

                decimal? P_STATIC_AIR4 = null;
                decimal? P_STATIC_AIR5 = null;
                decimal? P_STATIC_AIR6 = null;

                decimal? P_DYNAMIC_AIR1 = null;
                decimal? P_DYNAMIC_AIR2 = null;
                decimal? P_DYNAMIC_AIR3 = null;
                decimal? P_EXPONENT1 = null;
                decimal? P_EXPONENT2 = null;
                decimal? P_EXPONENT3 = null;
                decimal? P_DIMENSCHANGE_W1 = null;
                decimal? P_DIMENSCHANGE_W2 = null;
                decimal? P_DIMENSCHANGE_W3 = null;
                decimal? P_DIMENSCHANGE_F1 = null;
                decimal? P_DIMENSCHANGE_F2 = null;
                decimal? P_DIMENSCHANGE_F3 = null;
                decimal? P_FLEXABRASION_W1 = null;
                decimal? P_FLEXABRASION_W2 = null;
                decimal? P_FLEXABRASION_W3 = null;
                decimal? P_FLEXABRASION_F1 = null;
                decimal? P_FLEXABRASION_F2 = null;
                decimal? P_FLEXABRASION_F3 = null;
                
                string P_STATUS = string.Empty;
                string P_REMARK = string.Empty;
                string P_APPROVEBY = string.Empty;
                DateTime? P_APPROVEDATE = null;

                decimal? P_BOW1 = null;
                decimal? P_BOW2 = null;
                decimal? P_BOW3 = null;
                decimal? P_SKEW1 = null;
                decimal? P_SKEW2 = null;
                decimal? P_SKEW3 = null;
                decimal? P_BENDING_W1 = null;
                decimal? P_BENDING_W2 = null;
                decimal? P_BENDING_W3 = null;
                decimal? P_BENDING_F1 = null;
                decimal? P_BENDING_F2 = null;
                decimal? P_BENDING_F3 = null;
                decimal? P_FLEX_SCOTT_W1 = null;
                decimal? P_FLEX_SCOTT_W2 = null;
                decimal? P_FLEX_SCOTT_W3 = null;
                decimal? P_FLEX_SCOTT_F1 = null;
                decimal? P_FLEX_SCOTT_F2 = null;
                decimal? P_FLEX_SCOTT_F3 = null;

                #endregion

                if (!string.IsNullOrEmpty(txtOperator.Text))
                {
                    _session.P_ENTRYBY = txtOperator.Text;
                    _session.P_APPROVEBY = txtOperator.Text;
                }

                if (dteEntryDate.SelectedDate != null)
                    _session.P_ENTRYDATE = dteEntryDate.SelectedDate;

                _session.P_STATUS = "Not Approve";

                _session.P_APPROVEDATE = DateTime.Now;


                if (chkDataOnForm() == false)
                {
                    "Please Fill In All Test Result Data".ShowMessageBox();
                    chkNotApprove = false;
                }
                else
                {
                    RemarkInfo remarkInfo = this.ShowRemarkBox("");
                    if (null != remarkInfo)
                    {
                        _session.P_REMARK = remarkInfo.Remark;

                        P_ITMCODE = _session.P_ITMCODE;
                        P_WEAVINGLOG = _session.P_WEAVINGLOG;
                        P_FINISHINGLOT = _session.P_FINISHINGLOT;

                        #region MAXFORCE
                        P_MAXFORCE_W1 = _session.P_MAXFORCE_W1;
                        P_MAXFORCE_W2 = _session.P_MAXFORCE_W2;
                        P_MAXFORCE_W3 = _session.P_MAXFORCE_W3;

                        P_MAXFORCE_W4 = _session.P_MAXFORCE_W4;
                        P_MAXFORCE_W5 = _session.P_MAXFORCE_W5;
                        P_MAXFORCE_W6 = _session.P_MAXFORCE_W6;

                        P_MAXFORCE_F1 = _session.P_MAXFORCE_F1;
                        P_MAXFORCE_F2 = _session.P_MAXFORCE_F2;
                        P_MAXFORCE_F3 = _session.P_MAXFORCE_F3;

                        P_MAXFORCE_F4 = _session.P_MAXFORCE_F4;
                        P_MAXFORCE_F5 = _session.P_MAXFORCE_F5;
                        P_MAXFORCE_F6 = _session.P_MAXFORCE_F6;
                        #endregion

                        #region ELOGATION
                        P_ELOGATION_W1 = _session.P_ELOGATION_W1;
                        P_ELOGATION_W2 = _session.P_ELOGATION_W2;
                        P_ELOGATION_W3 = _session.P_ELOGATION_W3;

                        P_ELOGATION_W4 = _session.P_ELOGATION_W4;
                        P_ELOGATION_W5 = _session.P_ELOGATION_W5;
                        P_ELOGATION_W6 = _session.P_ELOGATION_W6;

                        P_ELOGATION_F1 = _session.P_ELOGATION_F1;
                        P_ELOGATION_F2 = _session.P_ELOGATION_F2;
                        P_ELOGATION_F3 = _session.P_ELOGATION_F3;

                        P_ELOGATION_F4 = _session.P_ELOGATION_F4;
                        P_ELOGATION_F5 = _session.P_ELOGATION_F5;
                        P_ELOGATION_F6 = _session.P_ELOGATION_F6;

                        #endregion

                        #region EDGECOMB
                        P_EDGECOMB_W1 = _session.P_EDGECOMB_W1;
                        P_EDGECOMB_W2 = _session.P_EDGECOMB_W2;
                        P_EDGECOMB_W3 = _session.P_EDGECOMB_W3;
                        P_EDGECOMB_F1 = _session.P_EDGECOMB_F1;
                        P_EDGECOMB_F2 = _session.P_EDGECOMB_F2;
                        P_EDGECOMB_F3 = _session.P_EDGECOMB_F3;
                        #endregion

                        #region TEAR
                        P_TEAR_W1 = _session.P_TEAR_W1;
                        P_TEAR_W2 = _session.P_TEAR_W2;
                        P_TEAR_W3 = _session.P_TEAR_W3;
                        P_TEAR_F1 = _session.P_TEAR_F1;
                        P_TEAR_F2 = _session.P_TEAR_F2;
                        P_TEAR_F3 = _session.P_TEAR_F3;
                        #endregion

                        P_WIDTH = _session.P_WIDTH;

                        #region USEWIDTH
                        P_USEWIDTH1 = _session.P_USEWIDTH1;
                        P_USEWIDTH2 = _session.P_USEWIDTH2;
                        P_USEWIDTH3 = _session.P_USEWIDTH3;
                        #endregion

                        #region WIDTHSILICONE
                        P_WIDTHSILICONE1 = _session.P_WIDTHSILICONE1;
                        P_WIDTHSILICONE2 = _session.P_WIDTHSILICONE2;
                        P_WIDTHSILICONE3 = _session.P_WIDTHSILICONE3;
                        #endregion

                        #region NUMTHREADS
                        P_NUMTHREADS_W1 = _session.P_NUMTHREADS_W1;
                        P_NUMTHREADS_W2 = _session.P_NUMTHREADS_W2;
                        P_NUMTHREADS_W3 = _session.P_NUMTHREADS_W3;
                        P_NUMTHREADS_F1 = _session.P_NUMTHREADS_F1;
                        P_NUMTHREADS_F2 = _session.P_NUMTHREADS_F2;
                        P_NUMTHREADS_F3 = _session.P_NUMTHREADS_F3;
                        #endregion

                        #region TOTALWEIGHT
                        P_TOTALWEIGHT1 = _session.P_TOTALWEIGHT1;
                        P_TOTALWEIGHT2 = _session.P_TOTALWEIGHT2;
                        P_TOTALWEIGHT3 = _session.P_TOTALWEIGHT3;
                        P_TOTALWEIGHT4 = _session.P_TOTALWEIGHT4;
                        P_TOTALWEIGHT5 = _session.P_TOTALWEIGHT5;
                        P_TOTALWEIGHT6 = _session.P_TOTALWEIGHT6;
                        #endregion

                        #region UNCOATEDWEIGHT
                        P_UNCOATEDWEIGHT1 = _session.P_UNCOATEDWEIGHT1;
                        P_UNCOATEDWEIGHT2 = _session.P_UNCOATEDWEIGHT2;
                        P_UNCOATEDWEIGHT3 = _session.P_UNCOATEDWEIGHT3;
                        P_UNCOATEDWEIGHT4 = _session.P_UNCOATEDWEIGHT4;
                        P_UNCOATEDWEIGHT5 = _session.P_UNCOATEDWEIGHT5;
                        P_UNCOATEDWEIGHT6 = _session.P_UNCOATEDWEIGHT6;
                        #endregion

                        #region COATWEIGHT
                        P_COATWEIGHT1 = _session.P_COATWEIGHT1;
                        P_COATWEIGHT2 = _session.P_COATWEIGHT2;
                        P_COATWEIGHT3 = _session.P_COATWEIGHT3;
                        P_COATWEIGHT4 = _session.P_COATWEIGHT4;
                        P_COATWEIGHT5 = _session.P_COATWEIGHT5;
                        P_COATWEIGHT6 = _session.P_COATWEIGHT6;
                        #endregion

                        #region THICKNESS
                        P_THICKNESS1 = _session.P_THICKNESS1;
                        P_THICKNESS2 = _session.P_THICKNESS2;
                        P_THICKNESS3 = _session.P_THICKNESS3;
                        #endregion

                        P_FLAMMABILITY_W = _session.P_FLAMMABILITY_W;
                        P_FLAMMABILITY_W2 = _session.P_FLAMMABILITY_W2;
                        P_FLAMMABILITY_W3 = _session.P_FLAMMABILITY_W3;
                        P_FLAMMABILITY_W4 = _session.P_FLAMMABILITY_W4;
                        P_FLAMMABILITY_W5 = _session.P_FLAMMABILITY_W5;

                        P_FLAMMABILITY_F = _session.P_FLAMMABILITY_F;
                        P_FLAMMABILITY_F2 = _session.P_FLAMMABILITY_F2;
                        P_FLAMMABILITY_F3 = _session.P_FLAMMABILITY_F3;
                        P_FLAMMABILITY_F4 = _session.P_FLAMMABILITY_F4;
                        P_FLAMMABILITY_F5 = _session.P_FLAMMABILITY_F5;

                        #region STIFFNESS
                        P_STIFFNESS_W1 = _session.P_STIFFNESS_W1;
                        P_STIFFNESS_W2 = _session.P_STIFFNESS_W2;
                        P_STIFFNESS_W3 = _session.P_STIFFNESS_W3;
                        P_STIFFNESS_F1 = _session.P_STIFFNESS_F1;
                        P_STIFFNESS_F2 = _session.P_STIFFNESS_F2;
                        P_STIFFNESS_F3 = _session.P_STIFFNESS_F3;
                        #endregion

                        #region STATIC_AIR

                        P_STATIC_AIR1 = _session.P_STATIC_AIR1;
                        P_STATIC_AIR2 = _session.P_STATIC_AIR2;
                        P_STATIC_AIR3 = _session.P_STATIC_AIR3;

                        P_STATIC_AIR4 = _session.P_STATIC_AIR4;
                        P_STATIC_AIR5 = _session.P_STATIC_AIR5;
                        P_STATIC_AIR6 = _session.P_STATIC_AIR6;

                        #endregion

                        #region DYNAMIC_AIR
                        P_DYNAMIC_AIR1 = _session.P_DYNAMIC_AIR1;
                        P_DYNAMIC_AIR2 = _session.P_DYNAMIC_AIR2;
                        P_DYNAMIC_AIR3 = _session.P_DYNAMIC_AIR3;
                        #endregion

                        #region EXPONENT
                        P_EXPONENT1 = _session.P_EXPONENT1;
                        P_EXPONENT2 = _session.P_EXPONENT2;
                        P_EXPONENT3 = _session.P_EXPONENT3;
                        #endregion

                        #region DIMENSCHANGE
                        P_DIMENSCHANGE_W1 = _session.P_DIMENSCHANGE_W1;
                        P_DIMENSCHANGE_W2 = _session.P_DIMENSCHANGE_W2;
                        P_DIMENSCHANGE_W3 = _session.P_DIMENSCHANGE_W3;
                        P_DIMENSCHANGE_F1 = _session.P_DIMENSCHANGE_F1;
                        P_DIMENSCHANGE_F2 = _session.P_DIMENSCHANGE_F2;
                        P_DIMENSCHANGE_F3 = _session.P_DIMENSCHANGE_F3;
                        #endregion

                        #region FLEXABRASION
                        P_FLEXABRASION_W1 = _session.P_FLEXABRASION_W1;
                        P_FLEXABRASION_W2 = _session.P_FLEXABRASION_W2;
                        P_FLEXABRASION_W3 = _session.P_FLEXABRASION_W3;
                        P_FLEXABRASION_F1 = _session.P_FLEXABRASION_F1;
                        P_FLEXABRASION_F2 = _session.P_FLEXABRASION_F2;
                        P_FLEXABRASION_F3 = _session.P_FLEXABRASION_F3;
                        #endregion

                        //Update 07/07/18
                        #region BOW
                        P_BOW1 = _session.P_BOW1;
                        P_BOW2 = _session.P_BOW2;
                        P_BOW3 = _session.P_BOW3;
                        #endregion

                        #region SKEW
                        P_SKEW1 = _session.P_SKEW1;
                        P_SKEW2 = _session.P_SKEW2;
                        P_SKEW3 = _session.P_SKEW3;
                        #endregion

                        #region BENDING
                        P_BENDING_W1 = _session.P_BENDING_W1;
                        P_BENDING_W2 = _session.P_BENDING_W2;
                        P_BENDING_W3 = _session.P_BENDING_W3;
                        P_BENDING_F1 = _session.P_BENDING_F1;
                        P_BENDING_F2 = _session.P_BENDING_F2;
                        P_BENDING_F3 = _session.P_BENDING_F3;
                        #endregion

                        #region FLEX_SCOTT
                        P_FLEX_SCOTT_W1 = _session.P_FLEX_SCOTT_W1;
                        P_FLEX_SCOTT_W2 = _session.P_FLEX_SCOTT_W2;
                        P_FLEX_SCOTT_W3 = _session.P_FLEX_SCOTT_W3;
                        P_FLEX_SCOTT_F1 = _session.P_FLEX_SCOTT_F1;
                        P_FLEX_SCOTT_F2 = _session.P_FLEX_SCOTT_F2;
                        P_FLEX_SCOTT_F3 = _session.P_FLEX_SCOTT_F3;
                        #endregion

                        P_ENTRYDATE = _session.P_ENTRYDATE;
                        P_ENTRYBY = _session.P_ENTRYBY;
                        P_STATUS = _session.P_STATUS;
                        P_APPROVEBY = _session.P_APPROVEBY;
                        P_APPROVEDATE = _session.P_APPROVEDATE;
                        P_REMARK = _session.P_REMARK;

                        string insert = LabDataPDFDataService.Instance.LAB_INSERTPRODUCTIONP(P_ITMCODE, P_WEAVINGLOG, P_FINISHINGLOT, P_ENTRYDATE, P_ENTRYBY,
                                P_WIDTH, P_USEWIDTH1, P_USEWIDTH2, P_USEWIDTH3, P_WIDTHSILICONE1, P_WIDTHSILICONE2, P_WIDTHSILICONE3,
                                P_NUMTHREADS_W1, P_NUMTHREADS_W2, P_NUMTHREADS_W3, P_NUMTHREADS_F1, P_NUMTHREADS_F2, P_NUMTHREADS_F3,
                                P_TOTALWEIGHT1, P_TOTALWEIGHT2, P_TOTALWEIGHT3, P_TOTALWEIGHT4, P_TOTALWEIGHT5, P_TOTALWEIGHT6,
                                P_UNCOATEDWEIGHT1, P_UNCOATEDWEIGHT2, P_UNCOATEDWEIGHT3, P_UNCOATEDWEIGHT4, P_UNCOATEDWEIGHT5, P_UNCOATEDWEIGHT6,
                                P_COATWEIGHT1, P_COATWEIGHT2, P_COATWEIGHT3, P_COATWEIGHT4, P_COATWEIGHT5, P_COATWEIGHT6,
                                P_THICKNESS1, P_THICKNESS2, P_THICKNESS3, 
                                P_MAXFORCE_W1, P_MAXFORCE_W2, P_MAXFORCE_W3,
                                P_MAXFORCE_W4, P_MAXFORCE_W5, P_MAXFORCE_W6,
                                P_MAXFORCE_F1, P_MAXFORCE_F2, P_MAXFORCE_F3,
                                P_MAXFORCE_F4, P_MAXFORCE_F5, P_MAXFORCE_F6,
                                P_ELOGATION_W1, P_ELOGATION_W2, P_ELOGATION_W3,
                                P_ELOGATION_W4, P_ELOGATION_W5, P_ELOGATION_W6,
                                P_ELOGATION_F1, P_ELOGATION_F2, P_ELOGATION_F3,
                                P_ELOGATION_F4, P_ELOGATION_F5, P_ELOGATION_F6,
                                P_FLAMMABILITY_W, P_FLAMMABILITY_W2, P_FLAMMABILITY_W3, P_FLAMMABILITY_W4, P_FLAMMABILITY_W5,
                                P_FLAMMABILITY_F, P_FLAMMABILITY_F2, P_FLAMMABILITY_F3, P_FLAMMABILITY_F4, P_FLAMMABILITY_F5,
                                P_EDGECOMB_W1, P_EDGECOMB_W2, P_EDGECOMB_W3, P_EDGECOMB_F1, P_EDGECOMB_F2, P_EDGECOMB_F3,
                                P_STIFFNESS_W1, P_STIFFNESS_W2, P_STIFFNESS_W3, P_STIFFNESS_F1, P_STIFFNESS_F2, P_STIFFNESS_F3,
                                P_TEAR_W1, P_TEAR_W2, P_TEAR_W3, P_TEAR_F1, P_TEAR_F2, P_TEAR_F3,
                                P_STATIC_AIR1, P_STATIC_AIR2, P_STATIC_AIR3, P_STATIC_AIR4, P_STATIC_AIR5, P_STATIC_AIR6,
                                P_DYNAMIC_AIR1, P_DYNAMIC_AIR2, P_DYNAMIC_AIR3,
                                P_EXPONENT1, P_EXPONENT2, P_EXPONENT3, P_DIMENSCHANGE_W1, P_DIMENSCHANGE_W2, P_DIMENSCHANGE_W3,
                                P_DIMENSCHANGE_F1, P_DIMENSCHANGE_F2, P_DIMENSCHANGE_F3, P_FLEXABRASION_W1, P_FLEXABRASION_W2, P_FLEXABRASION_W3,
                                P_FLEXABRASION_F1, P_FLEXABRASION_F2, P_FLEXABRASION_F3, P_STATUS, P_REMARK, P_APPROVEBY, P_APPROVEDATE,
                                P_BOW1, P_BOW2, P_BOW3, P_SKEW1, P_SKEW2, P_SKEW3,
                                P_BENDING_W1, P_BENDING_W2, P_BENDING_W3, P_BENDING_F1, P_BENDING_F2, P_BENDING_F3,
                                P_FLEX_SCOTT_W1, P_FLEX_SCOTT_W2, P_FLEX_SCOTT_W3, P_FLEX_SCOTT_F1, P_FLEX_SCOTT_F2, P_FLEX_SCOTT_F3);

                        if (insert == "1")
                        {
                            "Save Data Complete".ShowMessageBox();
                            chkNotApprove = true;
                        }
                        else
                        {
                            insert.ShowMessageBox();
                            chkNotApprove = false;
                        }
                    }
                }
                return chkNotApprove;
            }
            catch
            {
                return false;
            }
        }

        #endregion

        #region chkDataOnForm
        private bool chkDataOnForm()
        {
            try
            {
                bool chkSave = true;

                #region check data

                for (int i = 1; i == 1; i++)
                {
                    if (string.IsNullOrEmpty(txtITMCODE.Text))
                    {
                        chkSave = false;
                        break;
                    }
                    if (string.IsNullOrEmpty(txtWEAVINGLOG.Text))
                    {
                        chkSave = false;
                        break;
                    }
                    if (string.IsNullOrEmpty(txtFINISHINGLOT.Text))
                    {
                        chkSave = false;
                        break;
                    }

                    if (dteEntryDate.SelectedDate == null)
                    {
                        chkSave = false;
                        break;
                    }

                    if (string.IsNullOrEmpty(txtOperator.Text))
                    {
                        chkSave = false;
                        break;
                    }

                    if (txtMAXFORCE_WN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_MAXFORCE_W1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }

                    if (txtMAXFORCE_WN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_MAXFORCE_W2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }

                    if (txtMAXFORCE_WN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_MAXFORCE_W3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }

                    if (txtMAXFORCE_WN4.Visibility == Visibility.Visible)
                    {
                        if (_session.P_MAXFORCE_W4 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }

                    if (txtMAXFORCE_WN5.Visibility == Visibility.Visible)
                    {
                        if (_session.P_MAXFORCE_W5 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }

                    if (txtMAXFORCE_WN6.Visibility == Visibility.Visible)
                    {
                        if (_session.P_MAXFORCE_W6 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }

                    if (txtMAXFORCE_FN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_MAXFORCE_F1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtMAXFORCE_FN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_MAXFORCE_F2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtMAXFORCE_FN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_MAXFORCE_F3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }

                    if (txtMAXFORCE_FN4.Visibility == Visibility.Visible)
                    {
                        if (_session.P_MAXFORCE_F4 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtMAXFORCE_FN5.Visibility == Visibility.Visible)
                    {
                        if (_session.P_MAXFORCE_F5 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtMAXFORCE_FN6.Visibility == Visibility.Visible)
                    {
                        if (_session.P_MAXFORCE_F6 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }

                    if (txtELONGATIONFORCE_WN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_ELOGATION_W1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtELONGATIONFORCE_WN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_ELOGATION_W2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtELONGATIONFORCE_WN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_ELOGATION_W3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }

                    if (txtELONGATIONFORCE_WN4.Visibility == Visibility.Visible)
                    {
                        if (_session.P_ELOGATION_W4 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtELONGATIONFORCE_WN5.Visibility == Visibility.Visible)
                    {
                        if (_session.P_ELOGATION_W5 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtELONGATIONFORCE_WN6.Visibility == Visibility.Visible)
                    {
                        if (_session.P_ELOGATION_W6 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }

                    if (txtELONGATIONFORCE_FN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_ELOGATION_F1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtELONGATIONFORCE_FN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_ELOGATION_F2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtELONGATIONFORCE_FN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_ELOGATION_F3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }

                    if (txtELONGATIONFORCE_FN4.Visibility == Visibility.Visible)
                    {
                        if (_session.P_ELOGATION_F4 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtELONGATIONFORCE_FN5.Visibility == Visibility.Visible)
                    {
                        if (_session.P_ELOGATION_F5 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtELONGATIONFORCE_FN6.Visibility == Visibility.Visible)
                    {
                        if (_session.P_ELOGATION_F6 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }

                    if (txtEDGECOMB_WN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_EDGECOMB_W1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtEDGECOMB_WN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_EDGECOMB_W2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtEDGECOMB_WN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_EDGECOMB_W3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtEDGECOMB_FN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_EDGECOMB_F1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtEDGECOMB_FN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_EDGECOMB_F2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtEDGECOMB_FN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_EDGECOMB_F3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtTEAR_WN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_TEAR_W1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtTEAR_WN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_TEAR_W2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtTEAR_WN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_TEAR_W3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtTEAR_FN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_TEAR_F1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtTEAR_FN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_TEAR_F2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtTEAR_FN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_TEAR_F3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtWidthN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_WIDTH == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtUSABLE_WIDTHN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_USEWIDTH1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtUSABLE_WIDTHN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_USEWIDTH2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtUSABLE_WIDTHN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_USEWIDTH3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtWIDTH_SILICONEN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_WIDTHSILICONE1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtWIDTH_SILICONEN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_WIDTHSILICONE2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtWIDTH_SILICONEN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_WIDTHSILICONE3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtNUMTHREADS_WN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_NUMTHREADS_W1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtNUMTHREADS_WN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_NUMTHREADS_W2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtNUMTHREADS_WN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_NUMTHREADS_W3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtNUMTHREADS_FN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_NUMTHREADS_F1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtNUMTHREADS_FN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_NUMTHREADS_F2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtNUMTHREADS_FN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_NUMTHREADS_F3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtTOTALWEIGHTN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_TOTALWEIGHT1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtTOTALWEIGHTN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_TOTALWEIGHT2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtTOTALWEIGHTN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_TOTALWEIGHT3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtTOTALWEIGHTN4.Visibility == Visibility.Visible)
                    {
                        if (_session.P_TOTALWEIGHT4 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtTOTALWEIGHTN5.Visibility == Visibility.Visible)
                    {
                        if (_session.P_TOTALWEIGHT5 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtTOTALWEIGHTN6.Visibility == Visibility.Visible)
                    {
                        if (_session.P_TOTALWEIGHT6 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_UNCOATEDWEIGHT1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtUNCOATEDWEIGHTN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_UNCOATEDWEIGHT2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtUNCOATEDWEIGHTN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_UNCOATEDWEIGHT3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtUNCOATEDWEIGHTN4.Visibility == Visibility.Visible)
                    {
                        if (_session.P_UNCOATEDWEIGHT4 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtUNCOATEDWEIGHTN5.Visibility == Visibility.Visible)
                    {
                        if (_session.P_UNCOATEDWEIGHT5 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtUNCOATEDWEIGHTN6.Visibility == Visibility.Visible)
                    {
                        if (_session.P_UNCOATEDWEIGHT6 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_COATWEIGHT1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtCOATINGWEIGHTN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_COATWEIGHT2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtCOATINGWEIGHTN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_COATWEIGHT3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtCOATINGWEIGHTN4.Visibility == Visibility.Visible)
                    {
                        if (_session.P_COATWEIGHT4 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtCOATINGWEIGHTN5.Visibility == Visibility.Visible)
                    {
                        if (_session.P_COATWEIGHT5 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtCOATINGWEIGHTN6.Visibility == Visibility.Visible)
                    {
                        if (_session.P_COATWEIGHT6 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_THICKNESS1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtTHICKNESSN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_THICKNESS2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtTHICKNESSN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_THICKNESS3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_FLAMMABILITY_W == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtFLAMMABILITY_WN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_FLAMMABILITY_W2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtFLAMMABILITY_WN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_FLAMMABILITY_W3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtFLAMMABILITY_WN4.Visibility == Visibility.Visible)
                    {
                        if (_session.P_FLAMMABILITY_W4 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtFLAMMABILITY_WN5.Visibility == Visibility.Visible)
                    {
                        if (_session.P_FLAMMABILITY_W5 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtFLAMMABILITY_FN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_FLAMMABILITY_F == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtFLAMMABILITY_FN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_FLAMMABILITY_F2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtFLAMMABILITY_FN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_FLAMMABILITY_F3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtFLAMMABILITY_FN4.Visibility == Visibility.Visible)
                    {
                        if (_session.P_FLAMMABILITY_F4 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtFLAMMABILITY_FN5.Visibility == Visibility.Visible)
                    {
                        if (_session.P_FLAMMABILITY_F5 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtSTIFFNES_WN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_STIFFNESS_W1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtSTIFFNES_WN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_STIFFNESS_W2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtSTIFFNES_WN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_STIFFNESS_W3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtSTIFFNES_FN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_STIFFNESS_F1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtSTIFFNES_FN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_STIFFNESS_F2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtSTIFFNES_FN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_STIFFNESS_F3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtSTATIC_AIRN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_STATIC_AIR1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtSTATIC_AIRN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_STATIC_AIR2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtSTATIC_AIRN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_STATIC_AIR3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtSTATIC_AIRN4.Visibility == Visibility.Visible)
                    {
                        if (_session.P_STATIC_AIR4 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtSTATIC_AIRN5.Visibility == Visibility.Visible)
                    {
                        if (_session.P_STATIC_AIR5 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtSTATIC_AIRN6.Visibility == Visibility.Visible)
                    {
                        if (_session.P_STATIC_AIR6 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_DYNAMIC_AIR1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtDYNAMIC_AIRN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_DYNAMIC_AIR2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtDYNAMIC_AIRN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_DYNAMIC_AIR3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtEXPONENTN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_EXPONENT1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtEXPONENTN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_EXPONENT2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtEXPONENTN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_EXPONENT3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_DIMENSCHANGE_W1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtDIMENSCHANGE_WN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_DIMENSCHANGE_W2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtDIMENSCHANGE_WN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_DIMENSCHANGE_W3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_DIMENSCHANGE_F1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtDIMENSCHANGE_FN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_DIMENSCHANGE_F2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtDIMENSCHANGE_FN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_DIMENSCHANGE_F3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtFLEXABRASION_WN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_FLEXABRASION_W1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtFLEXABRASION_WN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_FLEXABRASION_W2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtFLEXABRASION_WN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_FLEXABRASION_W3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtFLEXABRASION_FN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_FLEXABRASION_F1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtFLEXABRASION_FN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_FLEXABRASION_F2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtFLEXABRASION_FN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_FLEXABRASION_F3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtBOWN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_BOW1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtBOWN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_BOW2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtBOWN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_BOW3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtSKEWN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_SKEW1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtSKEWN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_SKEW2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtSKEWN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_SKEW3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtBENDING_WN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_BENDING_W1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtBENDING_WN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_BENDING_W2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtBENDING_WN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_BENDING_W3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtBENDING_FN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_BENDING_F1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtBENDING_FN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_BENDING_F2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtBENDING_FN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_BENDING_F3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtFLEX_SCOTT_WN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_FLEX_SCOTT_W1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtFLEX_SCOTT_WN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_FLEX_SCOTT_W2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtFLEX_SCOTT_WN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_FLEX_SCOTT_W3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtFLEX_SCOTT_FN1.Visibility == Visibility.Visible)
                    {
                        if (_session.P_FLEX_SCOTT_F1 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtFLEX_SCOTT_FN2.Visibility == Visibility.Visible)
                    {
                        if (_session.P_FLEX_SCOTT_F2 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                    if (txtFLEX_SCOTT_FN3.Visibility == Visibility.Visible)
                    {
                        if (_session.P_FLEX_SCOTT_F3 == null)
                        {
                            chkSave = false;
                            break;
                        }
                    }
                }
                #endregion

                return chkSave;
            }
            catch
            {
                return false;
            }
        }
        #endregion

        #region Visibility

        #region N_WIDTH
        private void N_WIDTH(decimal? n)
        {
            decimal? WIDTH = n;

            txtWidthSpecification.Text = string.Empty;
            txtWidthN1.Text = string.Empty;
            txtWidthN2.Text = string.Empty;
            txtWidthN3.Text = string.Empty;
            txtWidthN4.Text = string.Empty;
            txtWidthN5.Text = string.Empty;
            txtWidthN6.Text = string.Empty;
            txtWidthAve.Text = string.Empty;

            if (WIDTH != null && WIDTH > 0)
            {
                
                if (WIDTH == 6)
                {
                    txtWidthN1.Visibility = Visibility.Visible;
                    txtWidthN2.Visibility = Visibility.Visible;
                    txtWidthN3.Visibility = Visibility.Visible;
                    txtWidthN4.Visibility = Visibility.Visible;
                    txtWidthN5.Visibility = Visibility.Visible;
                    txtWidthN6.Visibility = Visibility.Visible;
                }
                else if (WIDTH == 5)
                {
                    txtWidthN1.Visibility = Visibility.Visible;
                    txtWidthN2.Visibility = Visibility.Visible;
                    txtWidthN3.Visibility = Visibility.Visible;
                    txtWidthN4.Visibility = Visibility.Visible;
                    txtWidthN5.Visibility = Visibility.Visible;
                    txtWidthN6.Visibility = Visibility.Collapsed;
                }
                else if (WIDTH == 4)
                {
                    txtWidthN1.Visibility = Visibility.Visible;
                    txtWidthN2.Visibility = Visibility.Visible;
                    txtWidthN3.Visibility = Visibility.Visible;
                    txtWidthN4.Visibility = Visibility.Visible;
                    txtWidthN5.Visibility = Visibility.Collapsed;
                    txtWidthN6.Visibility = Visibility.Collapsed;
                }
                else if (WIDTH == 3)
                {
                    txtWidthN1.Visibility = Visibility.Visible;
                    txtWidthN2.Visibility = Visibility.Visible;
                    txtWidthN3.Visibility = Visibility.Visible;
                    txtWidthN4.Visibility = Visibility.Collapsed;
                    txtWidthN5.Visibility = Visibility.Collapsed;
                    txtWidthN6.Visibility = Visibility.Collapsed;
                }
                else if (WIDTH == 2)
                {
                    txtWidthN1.Visibility = Visibility.Visible;
                    txtWidthN2.Visibility = Visibility.Visible;
                    txtWidthN3.Visibility = Visibility.Collapsed;
                    txtWidthN4.Visibility = Visibility.Collapsed;
                    txtWidthN5.Visibility = Visibility.Collapsed;
                    txtWidthN6.Visibility = Visibility.Collapsed;
                }
                else if (WIDTH == 1)
                {
                    txtWidthN1.Visibility = Visibility.Visible;
                    txtWidthN2.Visibility = Visibility.Collapsed;
                    txtWidthN3.Visibility = Visibility.Collapsed;
                    txtWidthN4.Visibility = Visibility.Collapsed;
                    txtWidthN5.Visibility = Visibility.Collapsed;
                    txtWidthN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtWidthN1.Visibility = Visibility.Collapsed;
                txtWidthN2.Visibility = Visibility.Collapsed;
                txtWidthN3.Visibility = Visibility.Collapsed;
                txtWidthN4.Visibility = Visibility.Collapsed;
                txtWidthN5.Visibility = Visibility.Collapsed;
                txtWidthN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_USABLE_WIDTH
        private void N_USABLE_WIDTH(decimal? n)
        {
            decimal? USABLE_WIDTH = n;

            txtUSABLE_WIDTHSpecification.Text = string.Empty;
            txtUSABLE_WIDTHN1.Text = string.Empty;
            txtUSABLE_WIDTHN2.Text = string.Empty;
            txtUSABLE_WIDTHN3.Text = string.Empty;
            txtUSABLE_WIDTHN4.Text = string.Empty;
            txtUSABLE_WIDTHN5.Text = string.Empty;
            txtUSABLE_WIDTHN6.Text = string.Empty;
            txtUSABLE_WIDTHAve.Text = string.Empty;

            if (USABLE_WIDTH != null && USABLE_WIDTH > 0)
            {

                if (USABLE_WIDTH == 6)
                {
                    txtUSABLE_WIDTHN1.Visibility = Visibility.Visible;
                    txtUSABLE_WIDTHN2.Visibility = Visibility.Visible;
                    txtUSABLE_WIDTHN3.Visibility = Visibility.Visible;
                    txtUSABLE_WIDTHN4.Visibility = Visibility.Visible;
                    txtUSABLE_WIDTHN5.Visibility = Visibility.Visible;
                    txtUSABLE_WIDTHN6.Visibility = Visibility.Visible;
                }
                else if (USABLE_WIDTH == 5)
                {
                    txtUSABLE_WIDTHN1.Visibility = Visibility.Visible;
                    txtUSABLE_WIDTHN2.Visibility = Visibility.Visible;
                    txtUSABLE_WIDTHN3.Visibility = Visibility.Visible;
                    txtUSABLE_WIDTHN4.Visibility = Visibility.Visible;
                    txtUSABLE_WIDTHN5.Visibility = Visibility.Visible;
                    txtUSABLE_WIDTHN6.Visibility = Visibility.Collapsed;
                }
                else if (USABLE_WIDTH == 4)
                {
                    txtUSABLE_WIDTHN1.Visibility = Visibility.Visible;
                    txtUSABLE_WIDTHN2.Visibility = Visibility.Visible;
                    txtUSABLE_WIDTHN3.Visibility = Visibility.Visible;
                    txtUSABLE_WIDTHN4.Visibility = Visibility.Visible;
                    txtUSABLE_WIDTHN5.Visibility = Visibility.Collapsed;
                    txtUSABLE_WIDTHN6.Visibility = Visibility.Collapsed;
                }
                else if (USABLE_WIDTH == 3)
                {
                    txtUSABLE_WIDTHN1.Visibility = Visibility.Visible;
                    txtUSABLE_WIDTHN2.Visibility = Visibility.Visible;
                    txtUSABLE_WIDTHN3.Visibility = Visibility.Visible;
                    txtUSABLE_WIDTHN4.Visibility = Visibility.Collapsed;
                    txtUSABLE_WIDTHN5.Visibility = Visibility.Collapsed;
                    txtUSABLE_WIDTHN6.Visibility = Visibility.Collapsed;
                }
                else if (USABLE_WIDTH == 2)
                {
                    txtUSABLE_WIDTHN1.Visibility = Visibility.Visible;
                    txtUSABLE_WIDTHN2.Visibility = Visibility.Visible;
                    txtUSABLE_WIDTHN3.Visibility = Visibility.Collapsed;
                    txtUSABLE_WIDTHN4.Visibility = Visibility.Collapsed;
                    txtUSABLE_WIDTHN5.Visibility = Visibility.Collapsed;
                    txtUSABLE_WIDTHN6.Visibility = Visibility.Collapsed;
                }
                else if (USABLE_WIDTH == 1)
                {
                    txtUSABLE_WIDTHN1.Visibility = Visibility.Visible;
                    txtUSABLE_WIDTHN2.Visibility = Visibility.Collapsed;
                    txtUSABLE_WIDTHN3.Visibility = Visibility.Collapsed;
                    txtUSABLE_WIDTHN4.Visibility = Visibility.Collapsed;
                    txtUSABLE_WIDTHN5.Visibility = Visibility.Collapsed;
                    txtUSABLE_WIDTHN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtUSABLE_WIDTHN1.Visibility = Visibility.Collapsed;
                txtUSABLE_WIDTHN2.Visibility = Visibility.Collapsed;
                txtUSABLE_WIDTHN3.Visibility = Visibility.Collapsed;
                txtUSABLE_WIDTHN4.Visibility = Visibility.Collapsed;
                txtUSABLE_WIDTHN5.Visibility = Visibility.Collapsed;
                txtUSABLE_WIDTHN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_WIDTH_SILICONE
        private void N_WIDTH_SILICONE(decimal? n)
        {
            decimal? WIDTH_SILICONE = n;

            txtWIDTH_SILICONESpecification.Text = string.Empty;
            txtWIDTH_SILICONEN1.Text = string.Empty;
            txtWIDTH_SILICONEN2.Text = string.Empty;
            txtWIDTH_SILICONEN3.Text = string.Empty;
            txtWIDTH_SILICONEN4.Text = string.Empty;
            txtWIDTH_SILICONEN5.Text = string.Empty;
            txtWIDTH_SILICONEN6.Text = string.Empty;
            txtWIDTH_SILICONEAve.Text = string.Empty;

            if (WIDTH_SILICONE != null && WIDTH_SILICONE > 0)
            {

                if (WIDTH_SILICONE == 6)
                {
                    txtWIDTH_SILICONEN1.Visibility = Visibility.Visible;
                    txtWIDTH_SILICONEN2.Visibility = Visibility.Visible;
                    txtWIDTH_SILICONEN3.Visibility = Visibility.Visible;
                    txtWIDTH_SILICONEN4.Visibility = Visibility.Visible;
                    txtWIDTH_SILICONEN5.Visibility = Visibility.Visible;
                    txtWIDTH_SILICONEN6.Visibility = Visibility.Visible;
                }
                else if (WIDTH_SILICONE == 5)
                {
                    txtWIDTH_SILICONEN1.Visibility = Visibility.Visible;
                    txtWIDTH_SILICONEN2.Visibility = Visibility.Visible;
                    txtWIDTH_SILICONEN3.Visibility = Visibility.Visible;
                    txtWIDTH_SILICONEN4.Visibility = Visibility.Visible;
                    txtWIDTH_SILICONEN5.Visibility = Visibility.Visible;
                    txtWIDTH_SILICONEN6.Visibility = Visibility.Collapsed;
                }
                else if (WIDTH_SILICONE == 4)
                {
                    txtWIDTH_SILICONEN1.Visibility = Visibility.Visible;
                    txtWIDTH_SILICONEN2.Visibility = Visibility.Visible;
                    txtWIDTH_SILICONEN3.Visibility = Visibility.Visible;
                    txtWIDTH_SILICONEN4.Visibility = Visibility.Visible;
                    txtWIDTH_SILICONEN5.Visibility = Visibility.Collapsed;
                    txtWIDTH_SILICONEN6.Visibility = Visibility.Collapsed;
                }
                else if (WIDTH_SILICONE == 3)
                {
                    txtWIDTH_SILICONEN1.Visibility = Visibility.Visible;
                    txtWIDTH_SILICONEN2.Visibility = Visibility.Visible;
                    txtWIDTH_SILICONEN3.Visibility = Visibility.Visible;
                    txtWIDTH_SILICONEN4.Visibility = Visibility.Collapsed;
                    txtWIDTH_SILICONEN5.Visibility = Visibility.Collapsed;
                    txtWIDTH_SILICONEN6.Visibility = Visibility.Collapsed;
                }
                else if (WIDTH_SILICONE == 2)
                {
                    txtWIDTH_SILICONEN1.Visibility = Visibility.Visible;
                    txtWIDTH_SILICONEN2.Visibility = Visibility.Visible;
                    txtWIDTH_SILICONEN3.Visibility = Visibility.Collapsed;
                    txtWIDTH_SILICONEN4.Visibility = Visibility.Collapsed;
                    txtWIDTH_SILICONEN5.Visibility = Visibility.Collapsed;
                    txtWIDTH_SILICONEN6.Visibility = Visibility.Collapsed;
                }
                else if (WIDTH_SILICONE == 1)
                {
                    txtWIDTH_SILICONEN1.Visibility = Visibility.Visible;
                    txtWIDTH_SILICONEN2.Visibility = Visibility.Collapsed;
                    txtWIDTH_SILICONEN3.Visibility = Visibility.Collapsed;
                    txtWIDTH_SILICONEN4.Visibility = Visibility.Collapsed;
                    txtWIDTH_SILICONEN5.Visibility = Visibility.Collapsed;
                    txtWIDTH_SILICONEN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtWIDTH_SILICONEN1.Visibility = Visibility.Collapsed;
                txtWIDTH_SILICONEN2.Visibility = Visibility.Collapsed;
                txtWIDTH_SILICONEN3.Visibility = Visibility.Collapsed;
                txtWIDTH_SILICONEN4.Visibility = Visibility.Collapsed;
                txtWIDTH_SILICONEN5.Visibility = Visibility.Collapsed;
                txtWIDTH_SILICONEN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_NUMTHREADS_W
        private void N_NUMTHREADS_W(decimal? n)
        {
            decimal? NUMTHREADS_W = n;

            txtNUMTHREADS_WSpecification.Text = string.Empty;
            txtNUMTHREADS_WN1.Text = string.Empty;
            txtNUMTHREADS_WN2.Text = string.Empty;
            txtNUMTHREADS_WN3.Text = string.Empty;
            txtNUMTHREADS_WN4.Text = string.Empty;
            txtNUMTHREADS_WN5.Text = string.Empty;
            txtNUMTHREADS_WN6.Text = string.Empty;
            txtNUMTHREADS_WAve.Text = string.Empty;

            if (NUMTHREADS_W != null && NUMTHREADS_W > 0)
            {

                if (NUMTHREADS_W == 6)
                {
                    txtNUMTHREADS_WN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_WN2.Visibility = Visibility.Visible;
                    txtNUMTHREADS_WN3.Visibility = Visibility.Visible;
                    txtNUMTHREADS_WN4.Visibility = Visibility.Visible;
                    txtNUMTHREADS_WN5.Visibility = Visibility.Visible;
                    txtNUMTHREADS_WN6.Visibility = Visibility.Visible;
                }
                else if (NUMTHREADS_W == 5)
                {
                    txtNUMTHREADS_WN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_WN2.Visibility = Visibility.Visible;
                    txtNUMTHREADS_WN3.Visibility = Visibility.Visible;
                    txtNUMTHREADS_WN4.Visibility = Visibility.Visible;
                    txtNUMTHREADS_WN5.Visibility = Visibility.Visible;
                    txtNUMTHREADS_WN6.Visibility = Visibility.Collapsed;
                }
                else if (NUMTHREADS_W == 4)
                {
                    txtNUMTHREADS_WN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_WN2.Visibility = Visibility.Visible;
                    txtNUMTHREADS_WN3.Visibility = Visibility.Visible;
                    txtNUMTHREADS_WN4.Visibility = Visibility.Visible;
                    txtNUMTHREADS_WN5.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_WN6.Visibility = Visibility.Collapsed;
                }
                else if (NUMTHREADS_W == 3)
                {
                    txtNUMTHREADS_WN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_WN2.Visibility = Visibility.Visible;
                    txtNUMTHREADS_WN3.Visibility = Visibility.Visible;
                    txtNUMTHREADS_WN4.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_WN5.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_WN6.Visibility = Visibility.Collapsed;
                }
                else if (NUMTHREADS_W == 2)
                {
                    txtNUMTHREADS_WN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_WN2.Visibility = Visibility.Visible;
                    txtNUMTHREADS_WN3.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_WN4.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_WN5.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_WN6.Visibility = Visibility.Collapsed;
                }
                else if (NUMTHREADS_W == 1)
                {
                    txtNUMTHREADS_WN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_WN2.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_WN3.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_WN4.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_WN5.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_WN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtNUMTHREADS_WN1.Visibility = Visibility.Collapsed;
                txtNUMTHREADS_WN2.Visibility = Visibility.Collapsed;
                txtNUMTHREADS_WN3.Visibility = Visibility.Collapsed;
                txtNUMTHREADS_WN4.Visibility = Visibility.Collapsed;
                txtNUMTHREADS_WN5.Visibility = Visibility.Collapsed;
                txtNUMTHREADS_WN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_NUMTHREADS_R0_W
        private void N_NUMTHREADS_R0_W(decimal? n)
        {
            decimal? NUMTHREADS_R0_W = n;

            txtNUMTHREADS_R0_WN1.Text = string.Empty;
            txtNUMTHREADS_R0_WN2.Text = string.Empty;
            txtNUMTHREADS_R0_WN3.Text = string.Empty;
            txtNUMTHREADS_R0_WN4.Text = string.Empty;
            txtNUMTHREADS_R0_WN5.Text = string.Empty;
            txtNUMTHREADS_R0_WN6.Text = string.Empty;

            if (NUMTHREADS_R0_W != null && NUMTHREADS_R0_W > 0)
            {

                if (NUMTHREADS_R0_W == 6)
                {
                    txtNUMTHREADS_R0_WN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R0_WN2.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R0_WN3.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R0_WN4.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R0_WN5.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R0_WN6.Visibility = Visibility.Visible;
                }
                else if (NUMTHREADS_R0_W == 5)
                {
                    txtNUMTHREADS_R0_WN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R0_WN2.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R0_WN3.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R0_WN4.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R0_WN5.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R0_WN6.Visibility = Visibility.Collapsed;
                }
                else if (NUMTHREADS_R0_W == 4)
                {
                    txtNUMTHREADS_R0_WN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R0_WN2.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R0_WN3.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R0_WN4.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R0_WN5.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R0_WN6.Visibility = Visibility.Collapsed;
                }
                else if (NUMTHREADS_R0_W == 3)
                {
                    txtNUMTHREADS_R0_WN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R0_WN2.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R0_WN3.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R0_WN4.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R0_WN5.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R0_WN6.Visibility = Visibility.Collapsed;
                }
                else if (NUMTHREADS_R0_W == 2)
                {
                    txtNUMTHREADS_R0_WN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R0_WN2.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R0_WN3.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R0_WN4.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R0_WN5.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R0_WN6.Visibility = Visibility.Collapsed;
                }
                else if (NUMTHREADS_R0_W == 1)
                {
                    txtNUMTHREADS_R0_WN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R0_WN2.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R0_WN3.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R0_WN4.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R0_WN5.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R0_WN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtNUMTHREADS_R0_WN1.Visibility = Visibility.Collapsed;
                txtNUMTHREADS_R0_WN2.Visibility = Visibility.Collapsed;
                txtNUMTHREADS_R0_WN3.Visibility = Visibility.Collapsed;
                txtNUMTHREADS_R0_WN4.Visibility = Visibility.Collapsed;
                txtNUMTHREADS_R0_WN5.Visibility = Visibility.Collapsed;
                txtNUMTHREADS_R0_WN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_NUMTHREADS_R1_W
        private void N_NUMTHREADS_R1_W(decimal? n)
        {
            decimal? NUMTHREADS_R1_W = n;

            txtNUMTHREADS_R1_WN1.Text = string.Empty;
            txtNUMTHREADS_R1_WN2.Text = string.Empty;
            txtNUMTHREADS_R1_WN3.Text = string.Empty;
            txtNUMTHREADS_R1_WN4.Text = string.Empty;
            txtNUMTHREADS_R1_WN5.Text = string.Empty;
            txtNUMTHREADS_R1_WN6.Text = string.Empty;

            if (NUMTHREADS_R1_W != null && NUMTHREADS_R1_W > 0)
            {

                if (NUMTHREADS_R1_W == 6)
                {
                    txtNUMTHREADS_R1_WN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R1_WN2.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R1_WN3.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R1_WN4.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R1_WN5.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R1_WN6.Visibility = Visibility.Visible;
                }
                else if (NUMTHREADS_R1_W == 5)
                {
                    txtNUMTHREADS_R1_WN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R1_WN2.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R1_WN3.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R1_WN4.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R1_WN5.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R1_WN6.Visibility = Visibility.Collapsed;
                }
                else if (NUMTHREADS_R1_W == 4)
                {
                    txtNUMTHREADS_R1_WN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R1_WN2.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R1_WN3.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R1_WN4.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R1_WN5.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R1_WN6.Visibility = Visibility.Collapsed;
                }
                else if (NUMTHREADS_R1_W == 3)
                {
                    txtNUMTHREADS_R1_WN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R1_WN2.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R1_WN3.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R1_WN4.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R1_WN5.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R1_WN6.Visibility = Visibility.Collapsed;
                }
                else if (NUMTHREADS_R1_W == 2)
                {
                    txtNUMTHREADS_R1_WN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R1_WN2.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R1_WN3.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R1_WN4.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R1_WN5.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R1_WN6.Visibility = Visibility.Collapsed;
                }
                else if (NUMTHREADS_R1_W == 1)
                {
                    txtNUMTHREADS_R1_WN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R1_WN2.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R1_WN3.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R1_WN4.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R1_WN5.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R1_WN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtNUMTHREADS_R1_WN1.Visibility = Visibility.Collapsed;
                txtNUMTHREADS_R1_WN2.Visibility = Visibility.Collapsed;
                txtNUMTHREADS_R1_WN3.Visibility = Visibility.Collapsed;
                txtNUMTHREADS_R1_WN4.Visibility = Visibility.Collapsed;
                txtNUMTHREADS_R1_WN5.Visibility = Visibility.Collapsed;
                txtNUMTHREADS_R1_WN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_NUMTHREADS_R2_W
        private void N_NUMTHREADS_R2_W(decimal? n)
        {
            decimal? NUMTHREADS_R2_W = n;

            txtNUMTHREADS_R2_WN1.Text = string.Empty;
            txtNUMTHREADS_R2_WN2.Text = string.Empty;
            txtNUMTHREADS_R2_WN3.Text = string.Empty;
            txtNUMTHREADS_R2_WN4.Text = string.Empty;
            txtNUMTHREADS_R2_WN5.Text = string.Empty;
            txtNUMTHREADS_R2_WN6.Text = string.Empty;

            if (NUMTHREADS_R2_W != null && NUMTHREADS_R2_W > 0)
            {

                if (NUMTHREADS_R2_W == 6)
                {
                    txtNUMTHREADS_R2_WN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R2_WN2.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R2_WN3.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R2_WN4.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R2_WN5.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R2_WN6.Visibility = Visibility.Visible;
                }
                else if (NUMTHREADS_R2_W == 5)
                {
                    txtNUMTHREADS_R2_WN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R2_WN2.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R2_WN3.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R2_WN4.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R2_WN5.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R2_WN6.Visibility = Visibility.Collapsed;
                }
                else if (NUMTHREADS_R2_W == 4)
                {
                    txtNUMTHREADS_R2_WN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R2_WN2.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R2_WN3.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R2_WN4.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R2_WN5.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R2_WN6.Visibility = Visibility.Collapsed;
                }
                else if (NUMTHREADS_R2_W == 3)
                {
                    txtNUMTHREADS_R2_WN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R2_WN2.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R2_WN3.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R2_WN4.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R2_WN5.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R2_WN6.Visibility = Visibility.Collapsed;
                }
                else if (NUMTHREADS_R2_W == 2)
                {
                    txtNUMTHREADS_R2_WN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R2_WN2.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R2_WN3.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R2_WN4.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R2_WN5.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R2_WN6.Visibility = Visibility.Collapsed;
                }
                else if (NUMTHREADS_R2_W == 1)
                {
                    txtNUMTHREADS_R2_WN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_R2_WN2.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R2_WN3.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R2_WN4.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R2_WN5.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_R2_WN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtNUMTHREADS_R2_WN1.Visibility = Visibility.Collapsed;
                txtNUMTHREADS_R2_WN2.Visibility = Visibility.Collapsed;
                txtNUMTHREADS_R2_WN3.Visibility = Visibility.Collapsed;
                txtNUMTHREADS_R2_WN4.Visibility = Visibility.Collapsed;
                txtNUMTHREADS_R2_WN5.Visibility = Visibility.Collapsed;
                txtNUMTHREADS_R2_WN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_NUMTHREADS_F
        private void N_NUMTHREADS_F(decimal? n)
        {
            decimal? NUMTHREADS_F = n;

            txtNUMTHREADS_FSpecification.Text = string.Empty;
            txtNUMTHREADS_FN1.Text = string.Empty;
            txtNUMTHREADS_FN2.Text = string.Empty;
            txtNUMTHREADS_FN3.Text = string.Empty;
            txtNUMTHREADS_FN4.Text = string.Empty;
            txtNUMTHREADS_FN5.Text = string.Empty;
            txtNUMTHREADS_FN6.Text = string.Empty;
            txtNUMTHREADS_FAve.Text = string.Empty;

            if (NUMTHREADS_F != null && NUMTHREADS_F > 0)
            {

                if (NUMTHREADS_F == 6)
                {
                    txtNUMTHREADS_FN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_FN2.Visibility = Visibility.Visible;
                    txtNUMTHREADS_FN3.Visibility = Visibility.Visible;
                    txtNUMTHREADS_FN4.Visibility = Visibility.Visible;
                    txtNUMTHREADS_FN5.Visibility = Visibility.Visible;
                    txtNUMTHREADS_FN6.Visibility = Visibility.Visible;
                }
                else if (NUMTHREADS_F == 5)
                {
                    txtNUMTHREADS_FN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_FN2.Visibility = Visibility.Visible;
                    txtNUMTHREADS_FN3.Visibility = Visibility.Visible;
                    txtNUMTHREADS_FN4.Visibility = Visibility.Visible;
                    txtNUMTHREADS_FN5.Visibility = Visibility.Visible;
                    txtNUMTHREADS_FN6.Visibility = Visibility.Collapsed;
                }
                else if (NUMTHREADS_F == 4)
                {
                    txtNUMTHREADS_FN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_FN2.Visibility = Visibility.Visible;
                    txtNUMTHREADS_FN3.Visibility = Visibility.Visible;
                    txtNUMTHREADS_FN4.Visibility = Visibility.Visible;
                    txtNUMTHREADS_FN5.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_FN6.Visibility = Visibility.Collapsed;
                }
                else if (NUMTHREADS_F == 3)
                {
                    txtNUMTHREADS_FN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_FN2.Visibility = Visibility.Visible;
                    txtNUMTHREADS_FN3.Visibility = Visibility.Visible;
                    txtNUMTHREADS_FN4.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_FN5.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_FN6.Visibility = Visibility.Collapsed;
                }
                else if (NUMTHREADS_F == 2)
                {
                    txtNUMTHREADS_FN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_FN2.Visibility = Visibility.Visible;
                    txtNUMTHREADS_FN3.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_FN4.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_FN5.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_FN6.Visibility = Visibility.Collapsed;
                }
                else if (NUMTHREADS_F == 1)
                {
                    txtNUMTHREADS_FN1.Visibility = Visibility.Visible;
                    txtNUMTHREADS_FN2.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_FN3.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_FN4.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_FN5.Visibility = Visibility.Collapsed;
                    txtNUMTHREADS_FN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtNUMTHREADS_FN1.Visibility = Visibility.Collapsed;
                txtNUMTHREADS_FN2.Visibility = Visibility.Collapsed;
                txtNUMTHREADS_FN3.Visibility = Visibility.Collapsed;
                txtNUMTHREADS_FN4.Visibility = Visibility.Collapsed;
                txtNUMTHREADS_FN5.Visibility = Visibility.Collapsed;
                txtNUMTHREADS_FN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_TOTALWEIGHT
        private void N_TOTALWEIGHT(decimal? n)
        {
            decimal? TOTALWEIGHT = n;

            txtTOTALWEIGHTSpecification.Text = string.Empty;
            txtTOTALWEIGHTN1.Text = string.Empty;
            txtTOTALWEIGHTN2.Text = string.Empty;
            txtTOTALWEIGHTN3.Text = string.Empty;
            txtTOTALWEIGHTN4.Text = string.Empty;
            txtTOTALWEIGHTN5.Text = string.Empty;
            txtTOTALWEIGHTN6.Text = string.Empty;
            txtTOTALWEIGHTAve.Text = string.Empty;

            if (TOTALWEIGHT != null && TOTALWEIGHT > 0)
            {

                if (TOTALWEIGHT == 6)
                {
                    txtTOTALWEIGHTN1.Visibility = Visibility.Visible;
                    txtTOTALWEIGHTN2.Visibility = Visibility.Visible;
                    txtTOTALWEIGHTN3.Visibility = Visibility.Visible;
                    txtTOTALWEIGHTN4.Visibility = Visibility.Visible;
                    txtTOTALWEIGHTN5.Visibility = Visibility.Visible;
                    txtTOTALWEIGHTN6.Visibility = Visibility.Visible;
                }
                else if (TOTALWEIGHT == 5)
                {
                    txtTOTALWEIGHTN1.Visibility = Visibility.Visible;
                    txtTOTALWEIGHTN2.Visibility = Visibility.Visible;
                    txtTOTALWEIGHTN3.Visibility = Visibility.Visible;
                    txtTOTALWEIGHTN4.Visibility = Visibility.Visible;
                    txtTOTALWEIGHTN5.Visibility = Visibility.Visible;
                    txtTOTALWEIGHTN6.Visibility = Visibility.Collapsed;
                }
                else if (TOTALWEIGHT == 4)
                {
                    txtTOTALWEIGHTN1.Visibility = Visibility.Visible;
                    txtTOTALWEIGHTN2.Visibility = Visibility.Visible;
                    txtTOTALWEIGHTN3.Visibility = Visibility.Visible;
                    txtTOTALWEIGHTN4.Visibility = Visibility.Visible;
                    txtTOTALWEIGHTN5.Visibility = Visibility.Collapsed;
                    txtTOTALWEIGHTN6.Visibility = Visibility.Collapsed;
                }
                else if (TOTALWEIGHT == 3)
                {
                    txtTOTALWEIGHTN1.Visibility = Visibility.Visible;
                    txtTOTALWEIGHTN2.Visibility = Visibility.Visible;
                    txtTOTALWEIGHTN3.Visibility = Visibility.Visible;
                    txtTOTALWEIGHTN4.Visibility = Visibility.Collapsed;
                    txtTOTALWEIGHTN5.Visibility = Visibility.Collapsed;
                    txtTOTALWEIGHTN6.Visibility = Visibility.Collapsed;
                }
                else if (TOTALWEIGHT == 2)
                {
                    txtTOTALWEIGHTN1.Visibility = Visibility.Visible;
                    txtTOTALWEIGHTN2.Visibility = Visibility.Visible;
                    txtTOTALWEIGHTN3.Visibility = Visibility.Collapsed;
                    txtTOTALWEIGHTN4.Visibility = Visibility.Collapsed;
                    txtTOTALWEIGHTN5.Visibility = Visibility.Collapsed;
                    txtTOTALWEIGHTN6.Visibility = Visibility.Collapsed;
                }
                else if (TOTALWEIGHT == 1)
                {
                    txtTOTALWEIGHTN1.Visibility = Visibility.Visible;
                    txtTOTALWEIGHTN2.Visibility = Visibility.Collapsed;
                    txtTOTALWEIGHTN3.Visibility = Visibility.Collapsed;
                    txtTOTALWEIGHTN4.Visibility = Visibility.Collapsed;
                    txtTOTALWEIGHTN5.Visibility = Visibility.Collapsed;
                    txtTOTALWEIGHTN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtTOTALWEIGHTN1.Visibility = Visibility.Collapsed;
                txtTOTALWEIGHTN2.Visibility = Visibility.Collapsed;
                txtTOTALWEIGHTN3.Visibility = Visibility.Collapsed;
                txtTOTALWEIGHTN4.Visibility = Visibility.Collapsed;
                txtTOTALWEIGHTN5.Visibility = Visibility.Collapsed;
                txtTOTALWEIGHTN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_UNCOATEDWEIGHT
        private void N_UNCOATEDWEIGHT(decimal? n)
        {
            decimal? UNCOATEDWEIGHT = n;

            txtUNCOATEDWEIGHTSpecification.Text = string.Empty;
            txtUNCOATEDWEIGHTN1.Text = string.Empty;
            txtUNCOATEDWEIGHTN2.Text = string.Empty;
            txtUNCOATEDWEIGHTN3.Text = string.Empty;
            txtUNCOATEDWEIGHTN4.Text = string.Empty;
            txtUNCOATEDWEIGHTN5.Text = string.Empty;
            txtUNCOATEDWEIGHTN6.Text = string.Empty;
            txtUNCOATEDWEIGHTAve.Text = string.Empty;

            if (UNCOATEDWEIGHT != null && UNCOATEDWEIGHT > 0)
            {

                if (UNCOATEDWEIGHT == 6)
                {
                    txtUNCOATEDWEIGHTN1.Visibility = Visibility.Visible;
                    txtUNCOATEDWEIGHTN2.Visibility = Visibility.Visible;
                    txtUNCOATEDWEIGHTN3.Visibility = Visibility.Visible;
                    txtUNCOATEDWEIGHTN4.Visibility = Visibility.Visible;
                    txtUNCOATEDWEIGHTN5.Visibility = Visibility.Visible;
                    txtUNCOATEDWEIGHTN6.Visibility = Visibility.Visible;
                }
                else if (UNCOATEDWEIGHT == 5)
                {
                    txtUNCOATEDWEIGHTN1.Visibility = Visibility.Visible;
                    txtUNCOATEDWEIGHTN2.Visibility = Visibility.Visible;
                    txtUNCOATEDWEIGHTN3.Visibility = Visibility.Visible;
                    txtUNCOATEDWEIGHTN4.Visibility = Visibility.Visible;
                    txtUNCOATEDWEIGHTN5.Visibility = Visibility.Visible;
                    txtUNCOATEDWEIGHTN6.Visibility = Visibility.Collapsed;
                }
                else if (UNCOATEDWEIGHT == 4)
                {
                    txtUNCOATEDWEIGHTN1.Visibility = Visibility.Visible;
                    txtUNCOATEDWEIGHTN2.Visibility = Visibility.Visible;
                    txtUNCOATEDWEIGHTN3.Visibility = Visibility.Visible;
                    txtUNCOATEDWEIGHTN4.Visibility = Visibility.Visible;
                    txtUNCOATEDWEIGHTN5.Visibility = Visibility.Collapsed;
                    txtUNCOATEDWEIGHTN6.Visibility = Visibility.Collapsed;
                }
                else if (UNCOATEDWEIGHT == 3)
                {
                    txtUNCOATEDWEIGHTN1.Visibility = Visibility.Visible;
                    txtUNCOATEDWEIGHTN2.Visibility = Visibility.Visible;
                    txtUNCOATEDWEIGHTN3.Visibility = Visibility.Visible;
                    txtUNCOATEDWEIGHTN4.Visibility = Visibility.Collapsed;
                    txtUNCOATEDWEIGHTN5.Visibility = Visibility.Collapsed;
                    txtUNCOATEDWEIGHTN6.Visibility = Visibility.Collapsed;
                }
                else if (UNCOATEDWEIGHT == 2)
                {
                    txtUNCOATEDWEIGHTN1.Visibility = Visibility.Visible;
                    txtUNCOATEDWEIGHTN2.Visibility = Visibility.Visible;
                    txtUNCOATEDWEIGHTN3.Visibility = Visibility.Collapsed;
                    txtUNCOATEDWEIGHTN4.Visibility = Visibility.Collapsed;
                    txtUNCOATEDWEIGHTN5.Visibility = Visibility.Collapsed;
                    txtUNCOATEDWEIGHTN6.Visibility = Visibility.Collapsed;
                }
                else if (UNCOATEDWEIGHT == 1)
                {
                    txtUNCOATEDWEIGHTN1.Visibility = Visibility.Visible;
                    txtUNCOATEDWEIGHTN2.Visibility = Visibility.Collapsed;
                    txtUNCOATEDWEIGHTN3.Visibility = Visibility.Collapsed;
                    txtUNCOATEDWEIGHTN4.Visibility = Visibility.Collapsed;
                    txtUNCOATEDWEIGHTN5.Visibility = Visibility.Collapsed;
                    txtUNCOATEDWEIGHTN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtUNCOATEDWEIGHTN1.Visibility = Visibility.Collapsed;
                txtUNCOATEDWEIGHTN2.Visibility = Visibility.Collapsed;
                txtUNCOATEDWEIGHTN3.Visibility = Visibility.Collapsed;
                txtUNCOATEDWEIGHTN4.Visibility = Visibility.Collapsed;
                txtUNCOATEDWEIGHTN5.Visibility = Visibility.Collapsed;
                txtUNCOATEDWEIGHTN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_COATINGWEIGHT
        private void N_COATINGWEIGHT(decimal? n)
        {
            decimal? COATINGWEIGHT = n;

            txtCOATINGWEIGHTSpecification.Text = string.Empty;
            txtCOATINGWEIGHTN1.Text = string.Empty;
            txtCOATINGWEIGHTN2.Text = string.Empty;
            txtCOATINGWEIGHTN3.Text = string.Empty;
            txtCOATINGWEIGHTN4.Text = string.Empty;
            txtCOATINGWEIGHTN5.Text = string.Empty;
            txtCOATINGWEIGHTN6.Text = string.Empty;
            txtCOATINGWEIGHTAve.Text = string.Empty;

            if (COATINGWEIGHT != null && COATINGWEIGHT > 0)
            {

                if (COATINGWEIGHT == 6)
                {
                    txtCOATINGWEIGHTN1.Visibility = Visibility.Visible;
                    txtCOATINGWEIGHTN2.Visibility = Visibility.Visible;
                    txtCOATINGWEIGHTN3.Visibility = Visibility.Visible;
                    txtCOATINGWEIGHTN4.Visibility = Visibility.Visible;
                    txtCOATINGWEIGHTN5.Visibility = Visibility.Visible;
                    txtCOATINGWEIGHTN6.Visibility = Visibility.Visible;
                }
                else if (COATINGWEIGHT == 5)
                {
                    txtCOATINGWEIGHTN1.Visibility = Visibility.Visible;
                    txtCOATINGWEIGHTN2.Visibility = Visibility.Visible;
                    txtCOATINGWEIGHTN3.Visibility = Visibility.Visible;
                    txtCOATINGWEIGHTN4.Visibility = Visibility.Visible;
                    txtCOATINGWEIGHTN5.Visibility = Visibility.Visible;
                    txtCOATINGWEIGHTN6.Visibility = Visibility.Collapsed;
                }
                else if (COATINGWEIGHT == 4)
                {
                    txtCOATINGWEIGHTN1.Visibility = Visibility.Visible;
                    txtCOATINGWEIGHTN2.Visibility = Visibility.Visible;
                    txtCOATINGWEIGHTN3.Visibility = Visibility.Visible;
                    txtCOATINGWEIGHTN4.Visibility = Visibility.Visible;
                    txtCOATINGWEIGHTN5.Visibility = Visibility.Collapsed;
                    txtCOATINGWEIGHTN6.Visibility = Visibility.Collapsed;
                }
                else if (COATINGWEIGHT == 3)
                {
                    txtCOATINGWEIGHTN1.Visibility = Visibility.Visible;
                    txtCOATINGWEIGHTN2.Visibility = Visibility.Visible;
                    txtCOATINGWEIGHTN3.Visibility = Visibility.Visible;
                    txtCOATINGWEIGHTN4.Visibility = Visibility.Collapsed;
                    txtCOATINGWEIGHTN5.Visibility = Visibility.Collapsed;
                    txtCOATINGWEIGHTN6.Visibility = Visibility.Collapsed;
                }
                else if (COATINGWEIGHT == 2)
                {
                    txtCOATINGWEIGHTN1.Visibility = Visibility.Visible;
                    txtCOATINGWEIGHTN2.Visibility = Visibility.Visible;
                    txtCOATINGWEIGHTN3.Visibility = Visibility.Collapsed;
                    txtCOATINGWEIGHTN4.Visibility = Visibility.Collapsed;
                    txtCOATINGWEIGHTN5.Visibility = Visibility.Collapsed;
                    txtCOATINGWEIGHTN6.Visibility = Visibility.Collapsed;
                }
                else if (COATINGWEIGHT == 1)
                {
                    txtCOATINGWEIGHTN1.Visibility = Visibility.Visible;
                    txtCOATINGWEIGHTN2.Visibility = Visibility.Collapsed;
                    txtCOATINGWEIGHTN3.Visibility = Visibility.Collapsed;
                    txtCOATINGWEIGHTN4.Visibility = Visibility.Collapsed;
                    txtCOATINGWEIGHTN5.Visibility = Visibility.Collapsed;
                    txtCOATINGWEIGHTN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtCOATINGWEIGHTN1.Visibility = Visibility.Collapsed;
                txtCOATINGWEIGHTN2.Visibility = Visibility.Collapsed;
                txtCOATINGWEIGHTN3.Visibility = Visibility.Collapsed;
                txtCOATINGWEIGHTN4.Visibility = Visibility.Collapsed;
                txtCOATINGWEIGHTN5.Visibility = Visibility.Collapsed;
                txtCOATINGWEIGHTN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_THICKNESS
        private void N_THICKNESS(decimal? n)
        {
            decimal? THICKNESS = n;

            txtTHICKNESSSpecification.Text = string.Empty;
            txtTHICKNESSN1.Text = string.Empty;
            txtTHICKNESSN2.Text = string.Empty;
            txtTHICKNESSN3.Text = string.Empty;
            txtTHICKNESSN4.Text = string.Empty;
            txtTHICKNESSN5.Text = string.Empty;
            txtTHICKNESSN6.Text = string.Empty;
            txtTHICKNESSAve.Text = string.Empty;

            if (THICKNESS != null && THICKNESS > 0)
            {

                if (THICKNESS == 6)
                {
                    txtTHICKNESSN1.Visibility = Visibility.Visible;
                    txtTHICKNESSN2.Visibility = Visibility.Visible;
                    txtTHICKNESSN3.Visibility = Visibility.Visible;
                    txtTHICKNESSN4.Visibility = Visibility.Visible;
                    txtTHICKNESSN5.Visibility = Visibility.Visible;
                    txtTHICKNESSN6.Visibility = Visibility.Visible;
                }
                else if (THICKNESS == 5)
                {
                    txtTHICKNESSN1.Visibility = Visibility.Visible;
                    txtTHICKNESSN2.Visibility = Visibility.Visible;
                    txtTHICKNESSN3.Visibility = Visibility.Visible;
                    txtTHICKNESSN4.Visibility = Visibility.Visible;
                    txtTHICKNESSN5.Visibility = Visibility.Visible;
                    txtTHICKNESSN6.Visibility = Visibility.Collapsed;
                }
                else if (THICKNESS == 4)
                {
                    txtTHICKNESSN1.Visibility = Visibility.Visible;
                    txtTHICKNESSN2.Visibility = Visibility.Visible;
                    txtTHICKNESSN3.Visibility = Visibility.Visible;
                    txtTHICKNESSN4.Visibility = Visibility.Visible;
                    txtTHICKNESSN5.Visibility = Visibility.Collapsed;
                    txtTHICKNESSN6.Visibility = Visibility.Collapsed;
                }
                else if (THICKNESS == 3)
                {
                    txtTHICKNESSN1.Visibility = Visibility.Visible;
                    txtTHICKNESSN2.Visibility = Visibility.Visible;
                    txtTHICKNESSN3.Visibility = Visibility.Visible;
                    txtTHICKNESSN4.Visibility = Visibility.Collapsed;
                    txtTHICKNESSN5.Visibility = Visibility.Collapsed;
                    txtTHICKNESSN6.Visibility = Visibility.Collapsed;
                }
                else if (THICKNESS == 2)
                {
                    txtTHICKNESSN1.Visibility = Visibility.Visible;
                    txtTHICKNESSN2.Visibility = Visibility.Visible;
                    txtTHICKNESSN3.Visibility = Visibility.Collapsed;
                    txtTHICKNESSN4.Visibility = Visibility.Collapsed;
                    txtTHICKNESSN5.Visibility = Visibility.Collapsed;
                    txtTHICKNESSN6.Visibility = Visibility.Collapsed;
                }
                else if (THICKNESS == 1)
                {
                    txtTHICKNESSN1.Visibility = Visibility.Visible;
                    txtTHICKNESSN2.Visibility = Visibility.Collapsed;
                    txtTHICKNESSN3.Visibility = Visibility.Collapsed;
                    txtTHICKNESSN4.Visibility = Visibility.Collapsed;
                    txtTHICKNESSN5.Visibility = Visibility.Collapsed;
                    txtTHICKNESSN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtTHICKNESSN1.Visibility = Visibility.Collapsed;
                txtTHICKNESSN2.Visibility = Visibility.Collapsed;
                txtTHICKNESSN3.Visibility = Visibility.Collapsed;
                txtTHICKNESSN4.Visibility = Visibility.Collapsed;
                txtTHICKNESSN5.Visibility = Visibility.Collapsed;
                txtTHICKNESSN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_FLAMMABILITY_W
        private void N_FLAMMABILITY_W(decimal? n)
        {
            decimal? FLAMMABILITY_W = n;

            txtFLAMMABILITY_WSpecification.Text = string.Empty;
            txtFLAMMABILITY_WN1.Text = string.Empty;
            txtFLAMMABILITY_WN2.Text = string.Empty;
            txtFLAMMABILITY_WN3.Text = string.Empty;
            txtFLAMMABILITY_WN4.Text = string.Empty;
            txtFLAMMABILITY_WN5.Text = string.Empty;
            txtFLAMMABILITY_WN6.Text = string.Empty;
            txtFLAMMABILITY_WAve.Text = string.Empty;

            if (FLAMMABILITY_W != null && FLAMMABILITY_W > 0)
            {

                if (FLAMMABILITY_W == 6)
                {
                    txtFLAMMABILITY_WN1.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_WN2.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_WN3.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_WN4.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_WN5.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_WN6.Visibility = Visibility.Visible;
                }
                else if (FLAMMABILITY_W == 5)
                {
                    txtFLAMMABILITY_WN1.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_WN2.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_WN3.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_WN4.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_WN5.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_WN6.Visibility = Visibility.Collapsed;
                }
                else if (FLAMMABILITY_W == 4)
                {
                    txtFLAMMABILITY_WN1.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_WN2.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_WN3.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_WN4.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_WN5.Visibility = Visibility.Collapsed;
                    txtFLAMMABILITY_WN6.Visibility = Visibility.Collapsed;
                }
                else if (FLAMMABILITY_W == 3)
                {
                    txtFLAMMABILITY_WN1.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_WN2.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_WN3.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_WN4.Visibility = Visibility.Collapsed;
                    txtFLAMMABILITY_WN5.Visibility = Visibility.Collapsed;
                    txtFLAMMABILITY_WN6.Visibility = Visibility.Collapsed;
                }
                else if (FLAMMABILITY_W == 2)
                {
                    txtFLAMMABILITY_WN1.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_WN2.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_WN3.Visibility = Visibility.Collapsed;
                    txtFLAMMABILITY_WN4.Visibility = Visibility.Collapsed;
                    txtFLAMMABILITY_WN5.Visibility = Visibility.Collapsed;
                    txtFLAMMABILITY_WN6.Visibility = Visibility.Collapsed;
                }
                else if (FLAMMABILITY_W == 1)
                {
                    txtFLAMMABILITY_WN1.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_WN2.Visibility = Visibility.Collapsed;
                    txtFLAMMABILITY_WN3.Visibility = Visibility.Collapsed;
                    txtFLAMMABILITY_WN4.Visibility = Visibility.Collapsed;
                    txtFLAMMABILITY_WN5.Visibility = Visibility.Collapsed;
                    txtFLAMMABILITY_WN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtFLAMMABILITY_WN1.Visibility = Visibility.Collapsed;
                txtFLAMMABILITY_WN2.Visibility = Visibility.Collapsed;
                txtFLAMMABILITY_WN3.Visibility = Visibility.Collapsed;
                txtFLAMMABILITY_WN4.Visibility = Visibility.Collapsed;
                txtFLAMMABILITY_WN5.Visibility = Visibility.Collapsed;
                txtFLAMMABILITY_WN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_FLAMMABILITY_F
        private void N_FLAMMABILITY_F(decimal? n)
        {
            decimal? FLAMMABILITY_F = n;

            txtFLAMMABILITY_FSpecification.Text = string.Empty;
            txtFLAMMABILITY_FN1.Text = string.Empty;
            txtFLAMMABILITY_FN2.Text = string.Empty;
            txtFLAMMABILITY_FN3.Text = string.Empty;
            txtFLAMMABILITY_FN4.Text = string.Empty;
            txtFLAMMABILITY_FN5.Text = string.Empty;
            txtFLAMMABILITY_FN6.Text = string.Empty;
            txtFLAMMABILITY_FAve.Text = string.Empty;

            if (FLAMMABILITY_F != null && FLAMMABILITY_F > 0)
            {

                if (FLAMMABILITY_F == 6)
                {
                    txtFLAMMABILITY_FN1.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_FN2.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_FN3.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_FN4.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_FN5.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_FN6.Visibility = Visibility.Visible;
                }
                else if (FLAMMABILITY_F == 5)
                {
                    txtFLAMMABILITY_FN1.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_FN2.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_FN3.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_FN4.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_FN5.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_FN6.Visibility = Visibility.Collapsed;
                }
                else if (FLAMMABILITY_F == 4)
                {
                    txtFLAMMABILITY_FN1.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_FN2.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_FN3.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_FN4.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_FN5.Visibility = Visibility.Collapsed;
                    txtFLAMMABILITY_FN6.Visibility = Visibility.Collapsed;
                }
                else if (FLAMMABILITY_F == 3)
                {
                    txtFLAMMABILITY_FN1.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_FN2.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_FN3.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_FN4.Visibility = Visibility.Collapsed;
                    txtFLAMMABILITY_FN5.Visibility = Visibility.Collapsed;
                    txtFLAMMABILITY_FN6.Visibility = Visibility.Collapsed;
                }
                else if (FLAMMABILITY_F == 2)
                {
                    txtFLAMMABILITY_FN1.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_FN2.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_FN3.Visibility = Visibility.Collapsed;
                    txtFLAMMABILITY_FN4.Visibility = Visibility.Collapsed;
                    txtFLAMMABILITY_FN5.Visibility = Visibility.Collapsed;
                    txtFLAMMABILITY_FN6.Visibility = Visibility.Collapsed;
                }
                else if (FLAMMABILITY_F == 1)
                {
                    txtFLAMMABILITY_FN1.Visibility = Visibility.Visible;
                    txtFLAMMABILITY_FN2.Visibility = Visibility.Collapsed;
                    txtFLAMMABILITY_FN3.Visibility = Visibility.Collapsed;
                    txtFLAMMABILITY_FN4.Visibility = Visibility.Collapsed;
                    txtFLAMMABILITY_FN5.Visibility = Visibility.Collapsed;
                    txtFLAMMABILITY_FN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtFLAMMABILITY_FN1.Visibility = Visibility.Collapsed;
                txtFLAMMABILITY_FN2.Visibility = Visibility.Collapsed;
                txtFLAMMABILITY_FN3.Visibility = Visibility.Collapsed;
                txtFLAMMABILITY_FN4.Visibility = Visibility.Collapsed;
                txtFLAMMABILITY_FN5.Visibility = Visibility.Collapsed;
                txtFLAMMABILITY_FN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_STIFFNES_W
        private void N_STIFFNES_W(decimal? n)
        {
            decimal? STIFFNES_W = n;

            txtSTIFFNES_WSpecification.Text = string.Empty;
            txtSTIFFNES_WN1.Text = string.Empty;
            txtSTIFFNES_WN2.Text = string.Empty;
            txtSTIFFNES_WN3.Text = string.Empty;
            txtSTIFFNES_WN4.Text = string.Empty;
            txtSTIFFNES_WN5.Text = string.Empty;
            txtSTIFFNES_WN6.Text = string.Empty;
            txtSTIFFNES_WAve.Text = string.Empty;

            if (STIFFNES_W != null && STIFFNES_W > 0)
            {

                if (STIFFNES_W == 6)
                {
                    txtSTIFFNES_WN1.Visibility = Visibility.Visible;
                    txtSTIFFNES_WN2.Visibility = Visibility.Visible;
                    txtSTIFFNES_WN3.Visibility = Visibility.Visible;
                    txtSTIFFNES_WN4.Visibility = Visibility.Visible;
                    txtSTIFFNES_WN5.Visibility = Visibility.Visible;
                    txtSTIFFNES_WN6.Visibility = Visibility.Visible;
                }
                else if (STIFFNES_W == 5)
                {
                    txtSTIFFNES_WN1.Visibility = Visibility.Visible;
                    txtSTIFFNES_WN2.Visibility = Visibility.Visible;
                    txtSTIFFNES_WN3.Visibility = Visibility.Visible;
                    txtSTIFFNES_WN4.Visibility = Visibility.Visible;
                    txtSTIFFNES_WN5.Visibility = Visibility.Visible;
                    txtSTIFFNES_WN6.Visibility = Visibility.Collapsed;
                }
                else if (STIFFNES_W == 4)
                {
                    txtSTIFFNES_WN1.Visibility = Visibility.Visible;
                    txtSTIFFNES_WN2.Visibility = Visibility.Visible;
                    txtSTIFFNES_WN3.Visibility = Visibility.Visible;
                    txtSTIFFNES_WN4.Visibility = Visibility.Visible;
                    txtSTIFFNES_WN5.Visibility = Visibility.Collapsed;
                    txtSTIFFNES_WN6.Visibility = Visibility.Collapsed;
                }
                else if (STIFFNES_W == 3)
                {
                    txtSTIFFNES_WN1.Visibility = Visibility.Visible;
                    txtSTIFFNES_WN2.Visibility = Visibility.Visible;
                    txtSTIFFNES_WN3.Visibility = Visibility.Visible;
                    txtSTIFFNES_WN4.Visibility = Visibility.Collapsed;
                    txtSTIFFNES_WN5.Visibility = Visibility.Collapsed;
                    txtSTIFFNES_WN6.Visibility = Visibility.Collapsed;
                }
                else if (STIFFNES_W == 2)
                {
                    txtSTIFFNES_WN1.Visibility = Visibility.Visible;
                    txtSTIFFNES_WN2.Visibility = Visibility.Visible;
                    txtSTIFFNES_WN3.Visibility = Visibility.Collapsed;
                    txtSTIFFNES_WN4.Visibility = Visibility.Collapsed;
                    txtSTIFFNES_WN5.Visibility = Visibility.Collapsed;
                    txtSTIFFNES_WN6.Visibility = Visibility.Collapsed;
                }
                else if (STIFFNES_W == 1)
                {
                    txtSTIFFNES_WN1.Visibility = Visibility.Visible;
                    txtSTIFFNES_WN2.Visibility = Visibility.Collapsed;
                    txtSTIFFNES_WN3.Visibility = Visibility.Collapsed;
                    txtSTIFFNES_WN4.Visibility = Visibility.Collapsed;
                    txtSTIFFNES_WN5.Visibility = Visibility.Collapsed;
                    txtSTIFFNES_WN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtSTIFFNES_WN1.Visibility = Visibility.Collapsed;
                txtSTIFFNES_WN2.Visibility = Visibility.Collapsed;
                txtSTIFFNES_WN3.Visibility = Visibility.Collapsed;
                txtSTIFFNES_WN4.Visibility = Visibility.Collapsed;
                txtSTIFFNES_WN5.Visibility = Visibility.Collapsed;
                txtSTIFFNES_WN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_STIFFNES_F
        private void N_STIFFNES_F(decimal? n)
        {
            decimal? STIFFNES_F = n;

            txtSTIFFNES_FSpecification.Text = string.Empty;
            txtSTIFFNES_FN1.Text = string.Empty;
            txtSTIFFNES_FN2.Text = string.Empty;
            txtSTIFFNES_FN3.Text = string.Empty;
            txtSTIFFNES_FN4.Text = string.Empty;
            txtSTIFFNES_FN5.Text = string.Empty;
            txtSTIFFNES_FN6.Text = string.Empty;
            txtSTIFFNES_FAve.Text = string.Empty;

            if (STIFFNES_F != null && STIFFNES_F > 0)
            {

                if (STIFFNES_F == 6)
                {
                    txtSTIFFNES_FN1.Visibility = Visibility.Visible;
                    txtSTIFFNES_FN2.Visibility = Visibility.Visible;
                    txtSTIFFNES_FN3.Visibility = Visibility.Visible;
                    txtSTIFFNES_FN4.Visibility = Visibility.Visible;
                    txtSTIFFNES_FN5.Visibility = Visibility.Visible;
                    txtSTIFFNES_FN6.Visibility = Visibility.Visible;
                }
                else if (STIFFNES_F == 5)
                {
                    txtSTIFFNES_FN1.Visibility = Visibility.Visible;
                    txtSTIFFNES_FN2.Visibility = Visibility.Visible;
                    txtSTIFFNES_FN3.Visibility = Visibility.Visible;
                    txtSTIFFNES_FN4.Visibility = Visibility.Visible;
                    txtSTIFFNES_FN5.Visibility = Visibility.Visible;
                    txtSTIFFNES_FN6.Visibility = Visibility.Collapsed;
                }
                else if (STIFFNES_F == 4)
                {
                    txtSTIFFNES_FN1.Visibility = Visibility.Visible;
                    txtSTIFFNES_FN2.Visibility = Visibility.Visible;
                    txtSTIFFNES_FN3.Visibility = Visibility.Visible;
                    txtSTIFFNES_FN4.Visibility = Visibility.Visible;
                    txtSTIFFNES_FN5.Visibility = Visibility.Collapsed;
                    txtSTIFFNES_FN6.Visibility = Visibility.Collapsed;
                }
                else if (STIFFNES_F == 3)
                {
                    txtSTIFFNES_FN1.Visibility = Visibility.Visible;
                    txtSTIFFNES_FN2.Visibility = Visibility.Visible;
                    txtSTIFFNES_FN3.Visibility = Visibility.Visible;
                    txtSTIFFNES_FN4.Visibility = Visibility.Collapsed;
                    txtSTIFFNES_FN5.Visibility = Visibility.Collapsed;
                    txtSTIFFNES_FN6.Visibility = Visibility.Collapsed;
                }
                else if (STIFFNES_F == 2)
                {
                    txtSTIFFNES_FN1.Visibility = Visibility.Visible;
                    txtSTIFFNES_FN2.Visibility = Visibility.Visible;
                    txtSTIFFNES_FN3.Visibility = Visibility.Collapsed;
                    txtSTIFFNES_FN4.Visibility = Visibility.Collapsed;
                    txtSTIFFNES_FN5.Visibility = Visibility.Collapsed;
                    txtSTIFFNES_FN6.Visibility = Visibility.Collapsed;
                }
                else if (STIFFNES_F == 1)
                {
                    txtSTIFFNES_FN1.Visibility = Visibility.Visible;
                    txtSTIFFNES_FN2.Visibility = Visibility.Collapsed;
                    txtSTIFFNES_FN3.Visibility = Visibility.Collapsed;
                    txtSTIFFNES_FN4.Visibility = Visibility.Collapsed;
                    txtSTIFFNES_FN5.Visibility = Visibility.Collapsed;
                    txtSTIFFNES_FN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtSTIFFNES_FN1.Visibility = Visibility.Collapsed;
                txtSTIFFNES_FN2.Visibility = Visibility.Collapsed;
                txtSTIFFNES_FN3.Visibility = Visibility.Collapsed;
                txtSTIFFNES_FN4.Visibility = Visibility.Collapsed;
                txtSTIFFNES_FN5.Visibility = Visibility.Collapsed;
                txtSTIFFNES_FN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_STATIC_AIR
        private void N_STATIC_AIR(decimal? n)
        {
            decimal? STATIC_AIR = n;

            txtSTATIC_AIRSpecification.Text = string.Empty;
            txtSTATIC_AIRN1.Text = string.Empty;
            txtSTATIC_AIRN2.Text = string.Empty;
            txtSTATIC_AIRN3.Text = string.Empty;
            txtSTATIC_AIRN4.Text = string.Empty;
            txtSTATIC_AIRN5.Text = string.Empty;
            txtSTATIC_AIRN6.Text = string.Empty;
            txtSTATIC_AIRAve.Text = string.Empty;

            if (STATIC_AIR != null && STATIC_AIR > 0)
            {

                if (STATIC_AIR == 6)
                {
                    txtSTATIC_AIRN1.Visibility = Visibility.Visible;
                    txtSTATIC_AIRN2.Visibility = Visibility.Visible;
                    txtSTATIC_AIRN3.Visibility = Visibility.Visible;
                    txtSTATIC_AIRN4.Visibility = Visibility.Visible;
                    txtSTATIC_AIRN5.Visibility = Visibility.Visible;
                    txtSTATIC_AIRN6.Visibility = Visibility.Visible;
                }
                else if (STATIC_AIR == 5)
                {
                    txtSTATIC_AIRN1.Visibility = Visibility.Visible;
                    txtSTATIC_AIRN2.Visibility = Visibility.Visible;
                    txtSTATIC_AIRN3.Visibility = Visibility.Visible;
                    txtSTATIC_AIRN4.Visibility = Visibility.Visible;
                    txtSTATIC_AIRN5.Visibility = Visibility.Visible;
                    txtSTATIC_AIRN6.Visibility = Visibility.Collapsed;
                }
                else if (STATIC_AIR == 4)
                {
                    txtSTATIC_AIRN1.Visibility = Visibility.Visible;
                    txtSTATIC_AIRN2.Visibility = Visibility.Visible;
                    txtSTATIC_AIRN3.Visibility = Visibility.Visible;
                    txtSTATIC_AIRN4.Visibility = Visibility.Visible;
                    txtSTATIC_AIRN5.Visibility = Visibility.Collapsed;
                    txtSTATIC_AIRN6.Visibility = Visibility.Collapsed;
                }
                else if (STATIC_AIR == 3)
                {
                    txtSTATIC_AIRN1.Visibility = Visibility.Visible;
                    txtSTATIC_AIRN2.Visibility = Visibility.Visible;
                    txtSTATIC_AIRN3.Visibility = Visibility.Visible;
                    txtSTATIC_AIRN4.Visibility = Visibility.Collapsed;
                    txtSTATIC_AIRN5.Visibility = Visibility.Collapsed;
                    txtSTATIC_AIRN6.Visibility = Visibility.Collapsed;
                }
                else if (STATIC_AIR == 2)
                {
                    txtSTATIC_AIRN1.Visibility = Visibility.Visible;
                    txtSTATIC_AIRN2.Visibility = Visibility.Visible;
                    txtSTATIC_AIRN3.Visibility = Visibility.Collapsed;
                    txtSTATIC_AIRN4.Visibility = Visibility.Collapsed;
                    txtSTATIC_AIRN5.Visibility = Visibility.Collapsed;
                    txtSTATIC_AIRN6.Visibility = Visibility.Collapsed;
                }
                else if (STATIC_AIR == 1)
                {
                    txtSTATIC_AIRN1.Visibility = Visibility.Visible;
                    txtSTATIC_AIRN2.Visibility = Visibility.Collapsed;
                    txtSTATIC_AIRN3.Visibility = Visibility.Collapsed;
                    txtSTATIC_AIRN4.Visibility = Visibility.Collapsed;
                    txtSTATIC_AIRN5.Visibility = Visibility.Collapsed;
                    txtSTATIC_AIRN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtSTATIC_AIRN1.Visibility = Visibility.Collapsed;
                txtSTATIC_AIRN2.Visibility = Visibility.Collapsed;
                txtSTATIC_AIRN3.Visibility = Visibility.Collapsed;
                txtSTATIC_AIRN4.Visibility = Visibility.Collapsed;
                txtSTATIC_AIRN5.Visibility = Visibility.Collapsed;
                txtSTATIC_AIRN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_DYNAMIC_AIR
        private void N_DYNAMIC_AIR(decimal? n)
        {
            decimal? DYNAMIC_AIR = n;

            txtDYNAMIC_AIRSpecification.Text = string.Empty;
            txtDYNAMIC_AIRN1.Text = string.Empty;
            txtDYNAMIC_AIRN2.Text = string.Empty;
            txtDYNAMIC_AIRN3.Text = string.Empty;
            txtDYNAMIC_AIRN4.Text = string.Empty;
            txtDYNAMIC_AIRN5.Text = string.Empty;
            txtDYNAMIC_AIRN6.Text = string.Empty;
            txtDYNAMIC_AIRAve.Text = string.Empty;

            if (DYNAMIC_AIR != null && DYNAMIC_AIR > 0)
            {

                if (DYNAMIC_AIR == 6)
                {
                    txtDYNAMIC_AIRN1.Visibility = Visibility.Visible;
                    txtDYNAMIC_AIRN2.Visibility = Visibility.Visible;
                    txtDYNAMIC_AIRN3.Visibility = Visibility.Visible;
                    txtDYNAMIC_AIRN4.Visibility = Visibility.Visible;
                    txtDYNAMIC_AIRN5.Visibility = Visibility.Visible;
                    txtDYNAMIC_AIRN6.Visibility = Visibility.Visible;
                }
                else if (DYNAMIC_AIR == 5)
                {
                    txtDYNAMIC_AIRN1.Visibility = Visibility.Visible;
                    txtDYNAMIC_AIRN2.Visibility = Visibility.Visible;
                    txtDYNAMIC_AIRN3.Visibility = Visibility.Visible;
                    txtDYNAMIC_AIRN4.Visibility = Visibility.Visible;
                    txtDYNAMIC_AIRN5.Visibility = Visibility.Visible;
                    txtDYNAMIC_AIRN6.Visibility = Visibility.Collapsed;
                }
                else if (DYNAMIC_AIR == 4)
                {
                    txtDYNAMIC_AIRN1.Visibility = Visibility.Visible;
                    txtDYNAMIC_AIRN2.Visibility = Visibility.Visible;
                    txtDYNAMIC_AIRN3.Visibility = Visibility.Visible;
                    txtDYNAMIC_AIRN4.Visibility = Visibility.Visible;
                    txtDYNAMIC_AIRN5.Visibility = Visibility.Collapsed;
                    txtDYNAMIC_AIRN6.Visibility = Visibility.Collapsed;
                }
                else if (DYNAMIC_AIR == 3)
                {
                    txtDYNAMIC_AIRN1.Visibility = Visibility.Visible;
                    txtDYNAMIC_AIRN2.Visibility = Visibility.Visible;
                    txtDYNAMIC_AIRN3.Visibility = Visibility.Visible;
                    txtDYNAMIC_AIRN4.Visibility = Visibility.Collapsed;
                    txtDYNAMIC_AIRN5.Visibility = Visibility.Collapsed;
                    txtDYNAMIC_AIRN6.Visibility = Visibility.Collapsed;
                }
                else if (DYNAMIC_AIR == 2)
                {
                    txtDYNAMIC_AIRN1.Visibility = Visibility.Visible;
                    txtDYNAMIC_AIRN2.Visibility = Visibility.Visible;
                    txtDYNAMIC_AIRN3.Visibility = Visibility.Collapsed;
                    txtDYNAMIC_AIRN4.Visibility = Visibility.Collapsed;
                    txtDYNAMIC_AIRN5.Visibility = Visibility.Collapsed;
                    txtDYNAMIC_AIRN6.Visibility = Visibility.Collapsed;
                }
                else if (DYNAMIC_AIR == 1)
                {
                    txtDYNAMIC_AIRN1.Visibility = Visibility.Visible;
                    txtDYNAMIC_AIRN2.Visibility = Visibility.Collapsed;
                    txtDYNAMIC_AIRN3.Visibility = Visibility.Collapsed;
                    txtDYNAMIC_AIRN4.Visibility = Visibility.Collapsed;
                    txtDYNAMIC_AIRN5.Visibility = Visibility.Collapsed;
                    txtDYNAMIC_AIRN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtDYNAMIC_AIRN1.Visibility = Visibility.Collapsed;
                txtDYNAMIC_AIRN2.Visibility = Visibility.Collapsed;
                txtDYNAMIC_AIRN3.Visibility = Visibility.Collapsed;
                txtDYNAMIC_AIRN4.Visibility = Visibility.Collapsed;
                txtDYNAMIC_AIRN5.Visibility = Visibility.Collapsed;
                txtDYNAMIC_AIRN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_EXPONENT
        private void N_EXPONENT(decimal? n)
        {
            decimal? EXPONENT = n;

            txtEXPONENTSpecification.Text = string.Empty;
            txtEXPONENTN1.Text = string.Empty;
            txtEXPONENTN2.Text = string.Empty;
            txtEXPONENTN3.Text = string.Empty;
            txtEXPONENTN4.Text = string.Empty;
            txtEXPONENTN5.Text = string.Empty;
            txtEXPONENTN6.Text = string.Empty;
            txtEXPONENTAve.Text = string.Empty;

            if (EXPONENT != null && EXPONENT > 0)
            {

                if (EXPONENT == 6)
                {
                    txtEXPONENTN1.Visibility = Visibility.Visible;
                    txtEXPONENTN2.Visibility = Visibility.Visible;
                    txtEXPONENTN3.Visibility = Visibility.Visible;
                    txtEXPONENTN4.Visibility = Visibility.Visible;
                    txtEXPONENTN5.Visibility = Visibility.Visible;
                    txtEXPONENTN6.Visibility = Visibility.Visible;
                }
                else if (EXPONENT == 5)
                {
                    txtEXPONENTN1.Visibility = Visibility.Visible;
                    txtEXPONENTN2.Visibility = Visibility.Visible;
                    txtEXPONENTN3.Visibility = Visibility.Visible;
                    txtEXPONENTN4.Visibility = Visibility.Visible;
                    txtEXPONENTN5.Visibility = Visibility.Visible;
                    txtEXPONENTN6.Visibility = Visibility.Collapsed;
                }
                else if (EXPONENT == 4)
                {
                    txtEXPONENTN1.Visibility = Visibility.Visible;
                    txtEXPONENTN2.Visibility = Visibility.Visible;
                    txtEXPONENTN3.Visibility = Visibility.Visible;
                    txtEXPONENTN4.Visibility = Visibility.Visible;
                    txtEXPONENTN5.Visibility = Visibility.Collapsed;
                    txtEXPONENTN6.Visibility = Visibility.Collapsed;
                }
                else if (EXPONENT == 3)
                {
                    txtEXPONENTN1.Visibility = Visibility.Visible;
                    txtEXPONENTN2.Visibility = Visibility.Visible;
                    txtEXPONENTN3.Visibility = Visibility.Visible;
                    txtEXPONENTN4.Visibility = Visibility.Collapsed;
                    txtEXPONENTN5.Visibility = Visibility.Collapsed;
                    txtEXPONENTN6.Visibility = Visibility.Collapsed;
                }
                else if (EXPONENT == 2)
                {
                    txtEXPONENTN1.Visibility = Visibility.Visible;
                    txtEXPONENTN2.Visibility = Visibility.Visible;
                    txtEXPONENTN3.Visibility = Visibility.Collapsed;
                    txtEXPONENTN4.Visibility = Visibility.Collapsed;
                    txtEXPONENTN5.Visibility = Visibility.Collapsed;
                    txtEXPONENTN6.Visibility = Visibility.Collapsed;
                }
                else if (EXPONENT == 1)
                {
                    txtEXPONENTN1.Visibility = Visibility.Visible;
                    txtEXPONENTN2.Visibility = Visibility.Collapsed;
                    txtEXPONENTN3.Visibility = Visibility.Collapsed;
                    txtEXPONENTN4.Visibility = Visibility.Collapsed;
                    txtEXPONENTN5.Visibility = Visibility.Collapsed;
                    txtEXPONENTN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtEXPONENTN1.Visibility = Visibility.Collapsed;
                txtEXPONENTN2.Visibility = Visibility.Collapsed;
                txtEXPONENTN3.Visibility = Visibility.Collapsed;
                txtEXPONENTN4.Visibility = Visibility.Collapsed;
                txtEXPONENTN5.Visibility = Visibility.Collapsed;
                txtEXPONENTN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_DIMENSCHANGE_W
        private void N_DIMENSCHANGE_W(decimal? n)
        {
            decimal? DIMENSCHANGE_W = n;

            txtDIMENSCHANGE_WSpecification.Text = string.Empty;
            txtDIMENSCHANGE_WN1.Text = string.Empty;
            txtDIMENSCHANGE_WN2.Text = string.Empty;
            txtDIMENSCHANGE_WN3.Text = string.Empty;
            txtDIMENSCHANGE_WN4.Text = string.Empty;
            txtDIMENSCHANGE_WN5.Text = string.Empty;
            txtDIMENSCHANGE_WN6.Text = string.Empty;
            txtDIMENSCHANGE_WAve.Text = string.Empty;

            if (DIMENSCHANGE_W != null && DIMENSCHANGE_W > 0)
            {

                if (DIMENSCHANGE_W == 6)
                {
                    txtDIMENSCHANGE_WN1.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_WN2.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_WN3.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_WN4.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_WN5.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_WN6.Visibility = Visibility.Visible;
                }
                else if (DIMENSCHANGE_W == 5)
                {
                    txtDIMENSCHANGE_WN1.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_WN2.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_WN3.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_WN4.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_WN5.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_WN6.Visibility = Visibility.Collapsed;
                }
                else if (DIMENSCHANGE_W == 4)
                {
                    txtDIMENSCHANGE_WN1.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_WN2.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_WN3.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_WN4.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_WN5.Visibility = Visibility.Collapsed;
                    txtDIMENSCHANGE_WN6.Visibility = Visibility.Collapsed;
                }
                else if (DIMENSCHANGE_W == 3)
                {
                    txtDIMENSCHANGE_WN1.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_WN2.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_WN3.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_WN4.Visibility = Visibility.Collapsed;
                    txtDIMENSCHANGE_WN5.Visibility = Visibility.Collapsed;
                    txtDIMENSCHANGE_WN6.Visibility = Visibility.Collapsed;
                }
                else if (DIMENSCHANGE_W == 2)
                {
                    txtDIMENSCHANGE_WN1.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_WN2.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_WN3.Visibility = Visibility.Collapsed;
                    txtDIMENSCHANGE_WN4.Visibility = Visibility.Collapsed;
                    txtDIMENSCHANGE_WN5.Visibility = Visibility.Collapsed;
                    txtDIMENSCHANGE_WN6.Visibility = Visibility.Collapsed;
                }
                else if (DIMENSCHANGE_W == 1)
                {
                    txtDIMENSCHANGE_WN1.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_WN2.Visibility = Visibility.Collapsed;
                    txtDIMENSCHANGE_WN3.Visibility = Visibility.Collapsed;
                    txtDIMENSCHANGE_WN4.Visibility = Visibility.Collapsed;
                    txtDIMENSCHANGE_WN5.Visibility = Visibility.Collapsed;
                    txtDIMENSCHANGE_WN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtDIMENSCHANGE_WN1.Visibility = Visibility.Collapsed;
                txtDIMENSCHANGE_WN2.Visibility = Visibility.Collapsed;
                txtDIMENSCHANGE_WN3.Visibility = Visibility.Collapsed;
                txtDIMENSCHANGE_WN4.Visibility = Visibility.Collapsed;
                txtDIMENSCHANGE_WN5.Visibility = Visibility.Collapsed;
                txtDIMENSCHANGE_WN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_DIMENSCHANGE_F
        private void N_DIMENSCHANGE_F(decimal? n)
        {
            decimal? DIMENSCHANGE_F = n;

            txtDIMENSCHANGE_FSpecification.Text = string.Empty;
            txtDIMENSCHANGE_FN1.Text = string.Empty;
            txtDIMENSCHANGE_FN2.Text = string.Empty;
            txtDIMENSCHANGE_FN3.Text = string.Empty;
            txtDIMENSCHANGE_FN4.Text = string.Empty;
            txtDIMENSCHANGE_FN5.Text = string.Empty;
            txtDIMENSCHANGE_FN6.Text = string.Empty;
            txtDIMENSCHANGE_FAve.Text = string.Empty;

            if (DIMENSCHANGE_F != null && DIMENSCHANGE_F > 0)
            {

                if (DIMENSCHANGE_F == 6)
                {
                    txtDIMENSCHANGE_FN1.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_FN2.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_FN3.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_FN4.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_FN5.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_FN6.Visibility = Visibility.Visible;
                }
                else if (DIMENSCHANGE_F == 5)
                {
                    txtDIMENSCHANGE_FN1.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_FN2.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_FN3.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_FN4.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_FN5.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_FN6.Visibility = Visibility.Collapsed;
                }
                else if (DIMENSCHANGE_F == 4)
                {
                    txtDIMENSCHANGE_FN1.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_FN2.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_FN3.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_FN4.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_FN5.Visibility = Visibility.Collapsed;
                    txtDIMENSCHANGE_FN6.Visibility = Visibility.Collapsed;
                }
                else if (DIMENSCHANGE_F == 3)
                {
                    txtDIMENSCHANGE_FN1.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_FN2.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_FN3.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_FN4.Visibility = Visibility.Collapsed;
                    txtDIMENSCHANGE_FN5.Visibility = Visibility.Collapsed;
                    txtDIMENSCHANGE_FN6.Visibility = Visibility.Collapsed;
                }
                else if (DIMENSCHANGE_F == 2)
                {
                    txtDIMENSCHANGE_FN1.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_FN2.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_FN3.Visibility = Visibility.Collapsed;
                    txtDIMENSCHANGE_FN4.Visibility = Visibility.Collapsed;
                    txtDIMENSCHANGE_FN5.Visibility = Visibility.Collapsed;
                    txtDIMENSCHANGE_FN6.Visibility = Visibility.Collapsed;
                }
                else if (DIMENSCHANGE_F == 1)
                {
                    txtDIMENSCHANGE_FN1.Visibility = Visibility.Visible;
                    txtDIMENSCHANGE_FN2.Visibility = Visibility.Collapsed;
                    txtDIMENSCHANGE_FN3.Visibility = Visibility.Collapsed;
                    txtDIMENSCHANGE_FN4.Visibility = Visibility.Collapsed;
                    txtDIMENSCHANGE_FN5.Visibility = Visibility.Collapsed;
                    txtDIMENSCHANGE_FN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtDIMENSCHANGE_FN1.Visibility = Visibility.Collapsed;
                txtDIMENSCHANGE_FN2.Visibility = Visibility.Collapsed;
                txtDIMENSCHANGE_FN3.Visibility = Visibility.Collapsed;
                txtDIMENSCHANGE_FN4.Visibility = Visibility.Collapsed;
                txtDIMENSCHANGE_FN5.Visibility = Visibility.Collapsed;
                txtDIMENSCHANGE_FN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_FLEXABRASION_W
        private void N_FLEXABRASION_W(decimal? n)
        {
            decimal? FLEXABRASION_W = n;

            txtFLEXABRASION_WSpecification.Text = string.Empty;
            txtFLEXABRASION_WN1.Text = string.Empty;
            txtFLEXABRASION_WN2.Text = string.Empty;
            txtFLEXABRASION_WN3.Text = string.Empty;
            txtFLEXABRASION_WN4.Text = string.Empty;
            txtFLEXABRASION_WN5.Text = string.Empty;
            txtFLEXABRASION_WN6.Text = string.Empty;
            txtFLEXABRASION_WAve.Text = string.Empty;

            if (FLEXABRASION_W != null && FLEXABRASION_W > 0)
            {

                if (FLEXABRASION_W == 6)
                {
                    txtFLEXABRASION_WN1.Visibility = Visibility.Visible;
                    txtFLEXABRASION_WN2.Visibility = Visibility.Visible;
                    txtFLEXABRASION_WN3.Visibility = Visibility.Visible;
                    txtFLEXABRASION_WN4.Visibility = Visibility.Visible;
                    txtFLEXABRASION_WN5.Visibility = Visibility.Visible;
                    txtFLEXABRASION_WN6.Visibility = Visibility.Visible;
                }
                else if (FLEXABRASION_W == 5)
                {
                    txtFLEXABRASION_WN1.Visibility = Visibility.Visible;
                    txtFLEXABRASION_WN2.Visibility = Visibility.Visible;
                    txtFLEXABRASION_WN3.Visibility = Visibility.Visible;
                    txtFLEXABRASION_WN4.Visibility = Visibility.Visible;
                    txtFLEXABRASION_WN5.Visibility = Visibility.Visible;
                    txtFLEXABRASION_WN6.Visibility = Visibility.Collapsed;
                }
                else if (FLEXABRASION_W == 4)
                {
                    txtFLEXABRASION_WN1.Visibility = Visibility.Visible;
                    txtFLEXABRASION_WN2.Visibility = Visibility.Visible;
                    txtFLEXABRASION_WN3.Visibility = Visibility.Visible;
                    txtFLEXABRASION_WN4.Visibility = Visibility.Visible;
                    txtFLEXABRASION_WN5.Visibility = Visibility.Collapsed;
                    txtFLEXABRASION_WN6.Visibility = Visibility.Collapsed;
                }
                else if (FLEXABRASION_W == 3)
                {
                    txtFLEXABRASION_WN1.Visibility = Visibility.Visible;
                    txtFLEXABRASION_WN2.Visibility = Visibility.Visible;
                    txtFLEXABRASION_WN3.Visibility = Visibility.Visible;
                    txtFLEXABRASION_WN4.Visibility = Visibility.Collapsed;
                    txtFLEXABRASION_WN5.Visibility = Visibility.Collapsed;
                    txtFLEXABRASION_WN6.Visibility = Visibility.Collapsed;
                }
                else if (FLEXABRASION_W == 2)
                {
                    txtFLEXABRASION_WN1.Visibility = Visibility.Visible;
                    txtFLEXABRASION_WN2.Visibility = Visibility.Visible;
                    txtFLEXABRASION_WN3.Visibility = Visibility.Collapsed;
                    txtFLEXABRASION_WN4.Visibility = Visibility.Collapsed;
                    txtFLEXABRASION_WN5.Visibility = Visibility.Collapsed;
                    txtFLEXABRASION_WN6.Visibility = Visibility.Collapsed;
                }
                else if (FLEXABRASION_W == 1)
                {
                    txtFLEXABRASION_WN1.Visibility = Visibility.Visible;
                    txtFLEXABRASION_WN2.Visibility = Visibility.Collapsed;
                    txtFLEXABRASION_WN3.Visibility = Visibility.Collapsed;
                    txtFLEXABRASION_WN4.Visibility = Visibility.Collapsed;
                    txtFLEXABRASION_WN5.Visibility = Visibility.Collapsed;
                    txtFLEXABRASION_WN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtFLEXABRASION_WN1.Visibility = Visibility.Collapsed;
                txtFLEXABRASION_WN2.Visibility = Visibility.Collapsed;
                txtFLEXABRASION_WN3.Visibility = Visibility.Collapsed;
                txtFLEXABRASION_WN4.Visibility = Visibility.Collapsed;
                txtFLEXABRASION_WN5.Visibility = Visibility.Collapsed;
                txtFLEXABRASION_WN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_FLEXABRASION_F
        private void N_FLEXABRASION_F(decimal? n)
        {
            decimal? FLEXABRASION_F = n;

            txtFLEXABRASION_FSpecification.Text = string.Empty;
            txtFLEXABRASION_FN1.Text = string.Empty;
            txtFLEXABRASION_FN2.Text = string.Empty;
            txtFLEXABRASION_FN3.Text = string.Empty;
            txtFLEXABRASION_FN4.Text = string.Empty;
            txtFLEXABRASION_FN5.Text = string.Empty;
            txtFLEXABRASION_FN6.Text = string.Empty;
            txtFLEXABRASION_FAve.Text = string.Empty;

            if (FLEXABRASION_F != null && FLEXABRASION_F > 0)
            {

                if (FLEXABRASION_F == 6)
                {
                    txtFLEXABRASION_FN1.Visibility = Visibility.Visible;
                    txtFLEXABRASION_FN2.Visibility = Visibility.Visible;
                    txtFLEXABRASION_FN3.Visibility = Visibility.Visible;
                    txtFLEXABRASION_FN4.Visibility = Visibility.Visible;
                    txtFLEXABRASION_FN5.Visibility = Visibility.Visible;
                    txtFLEXABRASION_FN6.Visibility = Visibility.Visible;
                }
                else if (FLEXABRASION_F == 5)
                {
                    txtFLEXABRASION_FN1.Visibility = Visibility.Visible;
                    txtFLEXABRASION_FN2.Visibility = Visibility.Visible;
                    txtFLEXABRASION_FN3.Visibility = Visibility.Visible;
                    txtFLEXABRASION_FN4.Visibility = Visibility.Visible;
                    txtFLEXABRASION_FN5.Visibility = Visibility.Visible;
                    txtFLEXABRASION_FN6.Visibility = Visibility.Collapsed;
                }
                else if (FLEXABRASION_F == 4)
                {
                    txtFLEXABRASION_FN1.Visibility = Visibility.Visible;
                    txtFLEXABRASION_FN2.Visibility = Visibility.Visible;
                    txtFLEXABRASION_FN3.Visibility = Visibility.Visible;
                    txtFLEXABRASION_FN4.Visibility = Visibility.Visible;
                    txtFLEXABRASION_FN5.Visibility = Visibility.Collapsed;
                    txtFLEXABRASION_FN6.Visibility = Visibility.Collapsed;
                }
                else if (FLEXABRASION_F == 3)
                {
                    txtFLEXABRASION_FN1.Visibility = Visibility.Visible;
                    txtFLEXABRASION_FN2.Visibility = Visibility.Visible;
                    txtFLEXABRASION_FN3.Visibility = Visibility.Visible;
                    txtFLEXABRASION_FN4.Visibility = Visibility.Collapsed;
                    txtFLEXABRASION_FN5.Visibility = Visibility.Collapsed;
                    txtFLEXABRASION_FN6.Visibility = Visibility.Collapsed;
                }
                else if (FLEXABRASION_F == 2)
                {
                    txtFLEXABRASION_FN1.Visibility = Visibility.Visible;
                    txtFLEXABRASION_FN2.Visibility = Visibility.Visible;
                    txtFLEXABRASION_FN3.Visibility = Visibility.Collapsed;
                    txtFLEXABRASION_FN4.Visibility = Visibility.Collapsed;
                    txtFLEXABRASION_FN5.Visibility = Visibility.Collapsed;
                    txtFLEXABRASION_FN6.Visibility = Visibility.Collapsed;
                }
                else if (FLEXABRASION_F == 1)
                {
                    txtFLEXABRASION_FN1.Visibility = Visibility.Visible;
                    txtFLEXABRASION_FN2.Visibility = Visibility.Collapsed;
                    txtFLEXABRASION_FN3.Visibility = Visibility.Collapsed;
                    txtFLEXABRASION_FN4.Visibility = Visibility.Collapsed;
                    txtFLEXABRASION_FN5.Visibility = Visibility.Collapsed;
                    txtFLEXABRASION_FN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtFLEXABRASION_FN1.Visibility = Visibility.Collapsed;
                txtFLEXABRASION_FN2.Visibility = Visibility.Collapsed;
                txtFLEXABRASION_FN3.Visibility = Visibility.Collapsed;
                txtFLEXABRASION_FN4.Visibility = Visibility.Collapsed;
                txtFLEXABRASION_FN5.Visibility = Visibility.Collapsed;
                txtFLEXABRASION_FN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        // ปรับ 10/06/18
        #region N_MAXFORCE_W
        private void N_MAXFORCE_W(decimal? n)
        {
            decimal? MAXFORCE_W = n;

            txtMAXFORCE_WSpecification.Text = string.Empty;
            txtMAXFORCE_WN1.Text = string.Empty;
            txtMAXFORCE_WN2.Text = string.Empty;
            txtMAXFORCE_WN3.Text = string.Empty;
            txtMAXFORCE_WN4.Text = string.Empty;
            txtMAXFORCE_WN5.Text = string.Empty;
            txtMAXFORCE_WN6.Text = string.Empty;
            txtMAXFORCE_WAve.Text = string.Empty;

            if (MAXFORCE_W != null && MAXFORCE_W > 0)
            {

                if (MAXFORCE_W == 6)
                {
                    txtMAXFORCE_WN1.Visibility = Visibility.Visible;
                    txtMAXFORCE_WN2.Visibility = Visibility.Visible;
                    txtMAXFORCE_WN3.Visibility = Visibility.Visible;
                    txtMAXFORCE_WN4.Visibility = Visibility.Visible;
                    txtMAXFORCE_WN5.Visibility = Visibility.Visible;
                    txtMAXFORCE_WN6.Visibility = Visibility.Visible;
                }
                else if (MAXFORCE_W == 5)
                {
                    txtMAXFORCE_WN1.Visibility = Visibility.Visible;
                    txtMAXFORCE_WN2.Visibility = Visibility.Visible;
                    txtMAXFORCE_WN3.Visibility = Visibility.Visible;
                    txtMAXFORCE_WN4.Visibility = Visibility.Visible;
                    txtMAXFORCE_WN5.Visibility = Visibility.Visible;
                    txtMAXFORCE_WN6.Visibility = Visibility.Collapsed;
                }
                else if (MAXFORCE_W == 4)
                {
                    txtMAXFORCE_WN1.Visibility = Visibility.Visible;
                    txtMAXFORCE_WN2.Visibility = Visibility.Visible;
                    txtMAXFORCE_WN3.Visibility = Visibility.Visible;
                    txtMAXFORCE_WN4.Visibility = Visibility.Visible;
                    txtMAXFORCE_WN5.Visibility = Visibility.Collapsed;
                    txtMAXFORCE_WN6.Visibility = Visibility.Collapsed;
                }
                else if (MAXFORCE_W == 3)
                {
                    txtMAXFORCE_WN1.Visibility = Visibility.Visible;
                    txtMAXFORCE_WN2.Visibility = Visibility.Visible;
                    txtMAXFORCE_WN3.Visibility = Visibility.Visible;
                    txtMAXFORCE_WN4.Visibility = Visibility.Collapsed;
                    txtMAXFORCE_WN5.Visibility = Visibility.Collapsed;
                    txtMAXFORCE_WN6.Visibility = Visibility.Collapsed;
                }
                else if (MAXFORCE_W == 2)
                {
                    txtMAXFORCE_WN1.Visibility = Visibility.Visible;
                    txtMAXFORCE_WN2.Visibility = Visibility.Visible;
                    txtMAXFORCE_WN3.Visibility = Visibility.Collapsed;
                    txtMAXFORCE_WN4.Visibility = Visibility.Collapsed;
                    txtMAXFORCE_WN5.Visibility = Visibility.Collapsed;
                    txtMAXFORCE_WN6.Visibility = Visibility.Collapsed;
                }
                else if (MAXFORCE_W == 1)
                {
                    txtMAXFORCE_WN1.Visibility = Visibility.Visible;
                    txtMAXFORCE_WN2.Visibility = Visibility.Collapsed;
                    txtMAXFORCE_WN3.Visibility = Visibility.Collapsed;
                    txtMAXFORCE_WN4.Visibility = Visibility.Collapsed;
                    txtMAXFORCE_WN5.Visibility = Visibility.Collapsed;
                    txtMAXFORCE_WN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtMAXFORCE_WN1.Visibility = Visibility.Collapsed;
                txtMAXFORCE_WN2.Visibility = Visibility.Collapsed;
                txtMAXFORCE_WN3.Visibility = Visibility.Collapsed;
                txtMAXFORCE_WN4.Visibility = Visibility.Collapsed;
                txtMAXFORCE_WN5.Visibility = Visibility.Collapsed;
                txtMAXFORCE_WN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_MAXFORCE_F
        private void N_MAXFORCE_F(decimal? n)
        {
            decimal? MAXFORCE_F = n;

            txtMAXFORCE_FSpecification.Text = string.Empty;
            txtMAXFORCE_FN1.Text = string.Empty;
            txtMAXFORCE_FN2.Text = string.Empty;
            txtMAXFORCE_FN3.Text = string.Empty;
            txtMAXFORCE_FN4.Text = string.Empty;
            txtMAXFORCE_FN5.Text = string.Empty;
            txtMAXFORCE_FN6.Text = string.Empty;
            txtMAXFORCE_FAve.Text = string.Empty;

            if (MAXFORCE_F != null && MAXFORCE_F > 0)
            {

                if (MAXFORCE_F == 6)
                {
                    txtMAXFORCE_FN1.Visibility = Visibility.Visible;
                    txtMAXFORCE_FN2.Visibility = Visibility.Visible;
                    txtMAXFORCE_FN3.Visibility = Visibility.Visible;
                    txtMAXFORCE_FN4.Visibility = Visibility.Visible;
                    txtMAXFORCE_FN5.Visibility = Visibility.Visible;
                    txtMAXFORCE_FN6.Visibility = Visibility.Visible;
                }
                else if (MAXFORCE_F == 5)
                {
                    txtMAXFORCE_FN1.Visibility = Visibility.Visible;
                    txtMAXFORCE_FN2.Visibility = Visibility.Visible;
                    txtMAXFORCE_FN3.Visibility = Visibility.Visible;
                    txtMAXFORCE_FN4.Visibility = Visibility.Visible;
                    txtMAXFORCE_FN5.Visibility = Visibility.Visible;
                    txtMAXFORCE_FN6.Visibility = Visibility.Collapsed;
                }
                else if (MAXFORCE_F == 4)
                {
                    txtMAXFORCE_FN1.Visibility = Visibility.Visible;
                    txtMAXFORCE_FN2.Visibility = Visibility.Visible;
                    txtMAXFORCE_FN3.Visibility = Visibility.Visible;
                    txtMAXFORCE_FN4.Visibility = Visibility.Visible;
                    txtMAXFORCE_FN5.Visibility = Visibility.Collapsed;
                    txtMAXFORCE_FN6.Visibility = Visibility.Collapsed;
                }
                else if (MAXFORCE_F == 3)
                {
                    txtMAXFORCE_FN1.Visibility = Visibility.Visible;
                    txtMAXFORCE_FN2.Visibility = Visibility.Visible;
                    txtMAXFORCE_FN3.Visibility = Visibility.Visible;
                    txtMAXFORCE_FN4.Visibility = Visibility.Collapsed;
                    txtMAXFORCE_FN5.Visibility = Visibility.Collapsed;
                    txtMAXFORCE_FN6.Visibility = Visibility.Collapsed;
                }
                else if (MAXFORCE_F == 2)
                {
                    txtMAXFORCE_FN1.Visibility = Visibility.Visible;
                    txtMAXFORCE_FN2.Visibility = Visibility.Visible;
                    txtMAXFORCE_FN3.Visibility = Visibility.Collapsed;
                    txtMAXFORCE_FN4.Visibility = Visibility.Collapsed;
                    txtMAXFORCE_FN5.Visibility = Visibility.Collapsed;
                    txtMAXFORCE_FN6.Visibility = Visibility.Collapsed;
                }
                else if (MAXFORCE_F == 1)
                {
                    txtMAXFORCE_FN1.Visibility = Visibility.Visible;
                    txtMAXFORCE_FN2.Visibility = Visibility.Collapsed;
                    txtMAXFORCE_FN3.Visibility = Visibility.Collapsed;
                    txtMAXFORCE_FN4.Visibility = Visibility.Collapsed;
                    txtMAXFORCE_FN5.Visibility = Visibility.Collapsed;
                    txtMAXFORCE_FN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtMAXFORCE_FN1.Visibility = Visibility.Collapsed;
                txtMAXFORCE_FN2.Visibility = Visibility.Collapsed;
                txtMAXFORCE_FN3.Visibility = Visibility.Collapsed;
                txtMAXFORCE_FN4.Visibility = Visibility.Collapsed;
                txtMAXFORCE_FN5.Visibility = Visibility.Collapsed;
                txtMAXFORCE_FN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_ELONGATIONFORCE_W
        private void N_ELONGATIONFORCE_W(decimal? n)
        {
            decimal? ELONGATIONFORCE_W = n;

            txtELONGATIONFORCE_WSpecification.Text = string.Empty;
            txtELONGATIONFORCE_WN1.Text = string.Empty;
            txtELONGATIONFORCE_WN2.Text = string.Empty;
            txtELONGATIONFORCE_WN3.Text = string.Empty;
            txtELONGATIONFORCE_WN4.Text = string.Empty;
            txtELONGATIONFORCE_WN5.Text = string.Empty;
            txtELONGATIONFORCE_WN6.Text = string.Empty;
            txtELONGATIONFORCE_WAve.Text = string.Empty;

            if (ELONGATIONFORCE_W != null && ELONGATIONFORCE_W > 0)
            {

                if (ELONGATIONFORCE_W == 6)
                {
                    txtELONGATIONFORCE_WN1.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_WN2.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_WN3.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_WN4.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_WN5.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_WN6.Visibility = Visibility.Visible;
                }
                else if (ELONGATIONFORCE_W == 5)
                {
                    txtELONGATIONFORCE_WN1.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_WN2.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_WN3.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_WN4.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_WN5.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_WN6.Visibility = Visibility.Collapsed;
                }
                else if (ELONGATIONFORCE_W == 4)
                {
                    txtELONGATIONFORCE_WN1.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_WN2.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_WN3.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_WN4.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_WN5.Visibility = Visibility.Collapsed;
                    txtELONGATIONFORCE_WN6.Visibility = Visibility.Collapsed;
                }
                else if (ELONGATIONFORCE_W == 3)
                {
                    txtELONGATIONFORCE_WN1.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_WN2.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_WN3.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_WN4.Visibility = Visibility.Collapsed;
                    txtELONGATIONFORCE_WN5.Visibility = Visibility.Collapsed;
                    txtELONGATIONFORCE_WN6.Visibility = Visibility.Collapsed;
                }
                else if (ELONGATIONFORCE_W == 2)
                {
                    txtELONGATIONFORCE_WN1.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_WN2.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_WN3.Visibility = Visibility.Collapsed;
                    txtELONGATIONFORCE_WN4.Visibility = Visibility.Collapsed;
                    txtELONGATIONFORCE_WN5.Visibility = Visibility.Collapsed;
                    txtELONGATIONFORCE_WN6.Visibility = Visibility.Collapsed;
                }
                else if (ELONGATIONFORCE_W == 1)
                {
                    txtELONGATIONFORCE_WN1.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_WN2.Visibility = Visibility.Collapsed;
                    txtELONGATIONFORCE_WN3.Visibility = Visibility.Collapsed;
                    txtELONGATIONFORCE_WN4.Visibility = Visibility.Collapsed;
                    txtELONGATIONFORCE_WN5.Visibility = Visibility.Collapsed;
                    txtELONGATIONFORCE_WN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtELONGATIONFORCE_WN1.Visibility = Visibility.Collapsed;
                txtELONGATIONFORCE_WN2.Visibility = Visibility.Collapsed;
                txtELONGATIONFORCE_WN3.Visibility = Visibility.Collapsed;
                txtELONGATIONFORCE_WN4.Visibility = Visibility.Collapsed;
                txtELONGATIONFORCE_WN5.Visibility = Visibility.Collapsed;
                txtELONGATIONFORCE_WN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_ELONGATIONFORCE_F
        private void N_ELONGATIONFORCE_F(decimal? n)
        {
            decimal? ELONGATIONFORCE_F = n;

            txtELONGATIONFORCE_FSpecification.Text = string.Empty;
            txtELONGATIONFORCE_FN1.Text = string.Empty;
            txtELONGATIONFORCE_FN2.Text = string.Empty;
            txtELONGATIONFORCE_FN3.Text = string.Empty;
            txtELONGATIONFORCE_FN4.Text = string.Empty;
            txtELONGATIONFORCE_FN5.Text = string.Empty;
            txtELONGATIONFORCE_FN6.Text = string.Empty;
            txtELONGATIONFORCE_FAve.Text = string.Empty;

            if (ELONGATIONFORCE_F != null && ELONGATIONFORCE_F > 0)
            {

                if (ELONGATIONFORCE_F == 6)
                {
                    txtELONGATIONFORCE_FN1.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_FN2.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_FN3.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_FN4.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_FN5.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_FN6.Visibility = Visibility.Visible;
                }
                else if (ELONGATIONFORCE_F == 5)
                {
                    txtELONGATIONFORCE_FN1.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_FN2.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_FN3.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_FN4.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_FN5.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_FN6.Visibility = Visibility.Collapsed;
                }
                else if (ELONGATIONFORCE_F == 4)
                {
                    txtELONGATIONFORCE_FN1.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_FN2.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_FN3.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_FN4.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_FN5.Visibility = Visibility.Collapsed;
                    txtELONGATIONFORCE_FN6.Visibility = Visibility.Collapsed;
                }
                else if (ELONGATIONFORCE_F == 3)
                {
                    txtELONGATIONFORCE_FN1.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_FN2.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_FN3.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_FN4.Visibility = Visibility.Collapsed;
                    txtELONGATIONFORCE_FN5.Visibility = Visibility.Collapsed;
                    txtELONGATIONFORCE_FN6.Visibility = Visibility.Collapsed;
                }
                else if (ELONGATIONFORCE_F == 2)
                {
                    txtELONGATIONFORCE_FN1.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_FN2.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_FN3.Visibility = Visibility.Collapsed;
                    txtELONGATIONFORCE_FN4.Visibility = Visibility.Collapsed;
                    txtELONGATIONFORCE_FN5.Visibility = Visibility.Collapsed;
                    txtELONGATIONFORCE_FN6.Visibility = Visibility.Collapsed;
                }
                else if (ELONGATIONFORCE_F == 1)
                {
                    txtELONGATIONFORCE_FN1.Visibility = Visibility.Visible;
                    txtELONGATIONFORCE_FN2.Visibility = Visibility.Collapsed;
                    txtELONGATIONFORCE_FN3.Visibility = Visibility.Collapsed;
                    txtELONGATIONFORCE_FN4.Visibility = Visibility.Collapsed;
                    txtELONGATIONFORCE_FN5.Visibility = Visibility.Collapsed;
                    txtELONGATIONFORCE_FN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtELONGATIONFORCE_FN1.Visibility = Visibility.Collapsed;
                txtELONGATIONFORCE_FN2.Visibility = Visibility.Collapsed;
                txtELONGATIONFORCE_FN3.Visibility = Visibility.Collapsed;
                txtELONGATIONFORCE_FN4.Visibility = Visibility.Collapsed;
                txtELONGATIONFORCE_FN5.Visibility = Visibility.Collapsed;
                txtELONGATIONFORCE_FN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_EDGECOMB_W
        private void N_EDGECOMB_W(decimal? n)
        {
            decimal? EDGECOMB_W = n;

            txtEDGECOMB_WSpecification.Text = string.Empty;
            txtEDGECOMB_WN1.Text = string.Empty;
            txtEDGECOMB_WN2.Text = string.Empty;
            txtEDGECOMB_WN3.Text = string.Empty;
            txtEDGECOMB_WN4.Text = string.Empty;
            txtEDGECOMB_WN5.Text = string.Empty;
            txtEDGECOMB_WN6.Text = string.Empty;
            txtEDGECOMB_WAve.Text = string.Empty;

            if (EDGECOMB_W != null && EDGECOMB_W > 0)
            {

                if (EDGECOMB_W == 6)
                {
                    txtEDGECOMB_WN1.Visibility = Visibility.Visible;
                    txtEDGECOMB_WN2.Visibility = Visibility.Visible;
                    txtEDGECOMB_WN3.Visibility = Visibility.Visible;
                    txtEDGECOMB_WN4.Visibility = Visibility.Visible;
                    txtEDGECOMB_WN5.Visibility = Visibility.Visible;
                    txtEDGECOMB_WN6.Visibility = Visibility.Visible;
                }
                else if (EDGECOMB_W == 5)
                {
                    txtEDGECOMB_WN1.Visibility = Visibility.Visible;
                    txtEDGECOMB_WN2.Visibility = Visibility.Visible;
                    txtEDGECOMB_WN3.Visibility = Visibility.Visible;
                    txtEDGECOMB_WN4.Visibility = Visibility.Visible;
                    txtEDGECOMB_WN5.Visibility = Visibility.Visible;
                    txtEDGECOMB_WN6.Visibility = Visibility.Collapsed;
                }
                else if (EDGECOMB_W == 4)
                {
                    txtEDGECOMB_WN1.Visibility = Visibility.Visible;
                    txtEDGECOMB_WN2.Visibility = Visibility.Visible;
                    txtEDGECOMB_WN3.Visibility = Visibility.Visible;
                    txtEDGECOMB_WN4.Visibility = Visibility.Visible;
                    txtEDGECOMB_WN5.Visibility = Visibility.Collapsed;
                    txtEDGECOMB_WN6.Visibility = Visibility.Collapsed;
                }
                else if (EDGECOMB_W == 3)
                {
                    txtEDGECOMB_WN1.Visibility = Visibility.Visible;
                    txtEDGECOMB_WN2.Visibility = Visibility.Visible;
                    txtEDGECOMB_WN3.Visibility = Visibility.Visible;
                    txtEDGECOMB_WN4.Visibility = Visibility.Collapsed;
                    txtEDGECOMB_WN5.Visibility = Visibility.Collapsed;
                    txtEDGECOMB_WN6.Visibility = Visibility.Collapsed;
                }
                else if (EDGECOMB_W == 2)
                {
                    txtEDGECOMB_WN1.Visibility = Visibility.Visible;
                    txtEDGECOMB_WN2.Visibility = Visibility.Visible;
                    txtEDGECOMB_WN3.Visibility = Visibility.Collapsed;
                    txtEDGECOMB_WN4.Visibility = Visibility.Collapsed;
                    txtEDGECOMB_WN5.Visibility = Visibility.Collapsed;
                    txtEDGECOMB_WN6.Visibility = Visibility.Collapsed;
                }
                else if (EDGECOMB_W == 1)
                {
                    txtEDGECOMB_WN1.Visibility = Visibility.Visible;
                    txtEDGECOMB_WN2.Visibility = Visibility.Collapsed;
                    txtEDGECOMB_WN3.Visibility = Visibility.Collapsed;
                    txtEDGECOMB_WN4.Visibility = Visibility.Collapsed;
                    txtEDGECOMB_WN5.Visibility = Visibility.Collapsed;
                    txtEDGECOMB_WN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtEDGECOMB_WN1.Visibility = Visibility.Collapsed;
                txtEDGECOMB_WN2.Visibility = Visibility.Collapsed;
                txtEDGECOMB_WN3.Visibility = Visibility.Collapsed;
                txtEDGECOMB_WN4.Visibility = Visibility.Collapsed;
                txtEDGECOMB_WN5.Visibility = Visibility.Collapsed;
                txtEDGECOMB_WN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_EDGECOMB_F
        private void N_EDGECOMB_F(decimal? n)
        {
            decimal? EDGECOMB_F = n;

            txtEDGECOMB_FSpecification.Text = string.Empty;
            txtEDGECOMB_FN1.Text = string.Empty;
            txtEDGECOMB_FN2.Text = string.Empty;
            txtEDGECOMB_FN3.Text = string.Empty;
            txtEDGECOMB_FN4.Text = string.Empty;
            txtEDGECOMB_FN5.Text = string.Empty;
            txtEDGECOMB_FN6.Text = string.Empty;
            txtEDGECOMB_FAve.Text = string.Empty;

            if (EDGECOMB_F != null && EDGECOMB_F > 0)
            {

                if (EDGECOMB_F == 6)
                {
                    txtEDGECOMB_FN1.Visibility = Visibility.Visible;
                    txtEDGECOMB_FN2.Visibility = Visibility.Visible;
                    txtEDGECOMB_FN3.Visibility = Visibility.Visible;
                    txtEDGECOMB_FN4.Visibility = Visibility.Visible;
                    txtEDGECOMB_FN5.Visibility = Visibility.Visible;
                    txtEDGECOMB_FN6.Visibility = Visibility.Visible;
                }
                else if (EDGECOMB_F == 5)
                {
                    txtEDGECOMB_FN1.Visibility = Visibility.Visible;
                    txtEDGECOMB_FN2.Visibility = Visibility.Visible;
                    txtEDGECOMB_FN3.Visibility = Visibility.Visible;
                    txtEDGECOMB_FN4.Visibility = Visibility.Visible;
                    txtEDGECOMB_FN5.Visibility = Visibility.Visible;
                    txtEDGECOMB_FN6.Visibility = Visibility.Collapsed;
                }
                else if (EDGECOMB_F == 4)
                {
                    txtEDGECOMB_FN1.Visibility = Visibility.Visible;
                    txtEDGECOMB_FN2.Visibility = Visibility.Visible;
                    txtEDGECOMB_FN3.Visibility = Visibility.Visible;
                    txtEDGECOMB_FN4.Visibility = Visibility.Visible;
                    txtEDGECOMB_FN5.Visibility = Visibility.Collapsed;
                    txtEDGECOMB_FN6.Visibility = Visibility.Collapsed;
                }
                else if (EDGECOMB_F == 3)
                {
                    txtEDGECOMB_FN1.Visibility = Visibility.Visible;
                    txtEDGECOMB_FN2.Visibility = Visibility.Visible;
                    txtEDGECOMB_FN3.Visibility = Visibility.Visible;
                    txtEDGECOMB_FN4.Visibility = Visibility.Collapsed;
                    txtEDGECOMB_FN5.Visibility = Visibility.Collapsed;
                    txtEDGECOMB_FN6.Visibility = Visibility.Collapsed;
                }
                else if (EDGECOMB_F == 2)
                {
                    txtEDGECOMB_FN1.Visibility = Visibility.Visible;
                    txtEDGECOMB_FN2.Visibility = Visibility.Visible;
                    txtEDGECOMB_FN3.Visibility = Visibility.Collapsed;
                    txtEDGECOMB_FN4.Visibility = Visibility.Collapsed;
                    txtEDGECOMB_FN5.Visibility = Visibility.Collapsed;
                    txtEDGECOMB_FN6.Visibility = Visibility.Collapsed;
                }
                else if (EDGECOMB_F == 1)
                {
                    txtEDGECOMB_FN1.Visibility = Visibility.Visible;
                    txtEDGECOMB_FN2.Visibility = Visibility.Collapsed;
                    txtEDGECOMB_FN3.Visibility = Visibility.Collapsed;
                    txtEDGECOMB_FN4.Visibility = Visibility.Collapsed;
                    txtEDGECOMB_FN5.Visibility = Visibility.Collapsed;
                    txtEDGECOMB_FN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtEDGECOMB_FN1.Visibility = Visibility.Collapsed;
                txtEDGECOMB_FN2.Visibility = Visibility.Collapsed;
                txtEDGECOMB_FN3.Visibility = Visibility.Collapsed;
                txtEDGECOMB_FN4.Visibility = Visibility.Collapsed;
                txtEDGECOMB_FN5.Visibility = Visibility.Collapsed;
                txtEDGECOMB_FN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_TEAR_W
        private void N_TEAR_W(decimal? n)
        {
            decimal? TEAR_W = n;

            txtTEAR_WSpecification.Text = string.Empty;
            txtTEAR_WN1.Text = string.Empty;
            txtTEAR_WN2.Text = string.Empty;
            txtTEAR_WN3.Text = string.Empty;
            txtTEAR_WN4.Text = string.Empty;
            txtTEAR_WN5.Text = string.Empty;
            txtTEAR_WN6.Text = string.Empty;
            txtTEAR_WAve.Text = string.Empty;

            if (TEAR_W != null && TEAR_W > 0)
            {

                if (TEAR_W == 6)
                {
                    txtTEAR_WN1.Visibility = Visibility.Visible;
                    txtTEAR_WN2.Visibility = Visibility.Visible;
                    txtTEAR_WN3.Visibility = Visibility.Visible;
                    txtTEAR_WN4.Visibility = Visibility.Visible;
                    txtTEAR_WN5.Visibility = Visibility.Visible;
                    txtTEAR_WN6.Visibility = Visibility.Visible;
                }
                else if (TEAR_W == 5)
                {
                    txtTEAR_WN1.Visibility = Visibility.Visible;
                    txtTEAR_WN2.Visibility = Visibility.Visible;
                    txtTEAR_WN3.Visibility = Visibility.Visible;
                    txtTEAR_WN4.Visibility = Visibility.Visible;
                    txtTEAR_WN5.Visibility = Visibility.Visible;
                    txtTEAR_WN6.Visibility = Visibility.Collapsed;
                }
                else if (TEAR_W == 4)
                {
                    txtTEAR_WN1.Visibility = Visibility.Visible;
                    txtTEAR_WN2.Visibility = Visibility.Visible;
                    txtTEAR_WN3.Visibility = Visibility.Visible;
                    txtTEAR_WN4.Visibility = Visibility.Visible;
                    txtTEAR_WN5.Visibility = Visibility.Collapsed;
                    txtTEAR_WN6.Visibility = Visibility.Collapsed;
                }
                else if (TEAR_W == 3)
                {
                    txtTEAR_WN1.Visibility = Visibility.Visible;
                    txtTEAR_WN2.Visibility = Visibility.Visible;
                    txtTEAR_WN3.Visibility = Visibility.Visible;
                    txtTEAR_WN4.Visibility = Visibility.Collapsed;
                    txtTEAR_WN5.Visibility = Visibility.Collapsed;
                    txtTEAR_WN6.Visibility = Visibility.Collapsed;
                }
                else if (TEAR_W == 2)
                {
                    txtTEAR_WN1.Visibility = Visibility.Visible;
                    txtTEAR_WN2.Visibility = Visibility.Visible;
                    txtTEAR_WN3.Visibility = Visibility.Collapsed;
                    txtTEAR_WN4.Visibility = Visibility.Collapsed;
                    txtTEAR_WN5.Visibility = Visibility.Collapsed;
                    txtTEAR_WN6.Visibility = Visibility.Collapsed;
                }
                else if (TEAR_W == 1)
                {
                    txtTEAR_WN1.Visibility = Visibility.Visible;
                    txtTEAR_WN2.Visibility = Visibility.Collapsed;
                    txtTEAR_WN3.Visibility = Visibility.Collapsed;
                    txtTEAR_WN4.Visibility = Visibility.Collapsed;
                    txtTEAR_WN5.Visibility = Visibility.Collapsed;
                    txtTEAR_WN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtTEAR_WN1.Visibility = Visibility.Collapsed;
                txtTEAR_WN2.Visibility = Visibility.Collapsed;
                txtTEAR_WN3.Visibility = Visibility.Collapsed;
                txtTEAR_WN4.Visibility = Visibility.Collapsed;
                txtTEAR_WN5.Visibility = Visibility.Collapsed;
                txtTEAR_WN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_TEAR_F
        private void N_TEAR_F(decimal? n)
        {
            decimal? TEAR_F = n;

            txtTEAR_FSpecification.Text = string.Empty;
            txtTEAR_FN1.Text = string.Empty;
            txtTEAR_FN2.Text = string.Empty;
            txtTEAR_FN3.Text = string.Empty;
            txtTEAR_FN4.Text = string.Empty;
            txtTEAR_FN5.Text = string.Empty;
            txtTEAR_FN6.Text = string.Empty;
            txtTEAR_FAve.Text = string.Empty;

            if (TEAR_F != null && TEAR_F > 0)
            {

                if (TEAR_F == 6)
                {
                    txtTEAR_FN1.Visibility = Visibility.Visible;
                    txtTEAR_FN2.Visibility = Visibility.Visible;
                    txtTEAR_FN3.Visibility = Visibility.Visible;
                    txtTEAR_FN4.Visibility = Visibility.Visible;
                    txtTEAR_FN5.Visibility = Visibility.Visible;
                    txtTEAR_FN6.Visibility = Visibility.Visible;
                }
                else if (TEAR_F == 5)
                {
                    txtTEAR_FN1.Visibility = Visibility.Visible;
                    txtTEAR_FN2.Visibility = Visibility.Visible;
                    txtTEAR_FN3.Visibility = Visibility.Visible;
                    txtTEAR_FN4.Visibility = Visibility.Visible;
                    txtTEAR_FN5.Visibility = Visibility.Visible;
                    txtTEAR_FN6.Visibility = Visibility.Collapsed;
                }
                else if (TEAR_F == 4)
                {
                    txtTEAR_FN1.Visibility = Visibility.Visible;
                    txtTEAR_FN2.Visibility = Visibility.Visible;
                    txtTEAR_FN3.Visibility = Visibility.Visible;
                    txtTEAR_FN4.Visibility = Visibility.Visible;
                    txtTEAR_FN5.Visibility = Visibility.Collapsed;
                    txtTEAR_FN6.Visibility = Visibility.Collapsed;
                }
                else if (TEAR_F == 3)
                {
                    txtTEAR_FN1.Visibility = Visibility.Visible;
                    txtTEAR_FN2.Visibility = Visibility.Visible;
                    txtTEAR_FN3.Visibility = Visibility.Visible;
                    txtTEAR_FN4.Visibility = Visibility.Collapsed;
                    txtTEAR_FN5.Visibility = Visibility.Collapsed;
                    txtTEAR_FN6.Visibility = Visibility.Collapsed;
                }
                else if (TEAR_F == 2)
                {
                    txtTEAR_FN1.Visibility = Visibility.Visible;
                    txtTEAR_FN2.Visibility = Visibility.Visible;
                    txtTEAR_FN3.Visibility = Visibility.Collapsed;
                    txtTEAR_FN4.Visibility = Visibility.Collapsed;
                    txtTEAR_FN5.Visibility = Visibility.Collapsed;
                    txtTEAR_FN6.Visibility = Visibility.Collapsed;
                }
                else if (TEAR_F == 1)
                {
                    txtTEAR_FN1.Visibility = Visibility.Visible;
                    txtTEAR_FN2.Visibility = Visibility.Collapsed;
                    txtTEAR_FN3.Visibility = Visibility.Collapsed;
                    txtTEAR_FN4.Visibility = Visibility.Collapsed;
                    txtTEAR_FN5.Visibility = Visibility.Collapsed;
                    txtTEAR_FN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtTEAR_FN1.Visibility = Visibility.Collapsed;
                txtTEAR_FN2.Visibility = Visibility.Collapsed;
                txtTEAR_FN3.Visibility = Visibility.Collapsed;
                txtTEAR_FN4.Visibility = Visibility.Collapsed;
                txtTEAR_FN5.Visibility = Visibility.Collapsed;
                txtTEAR_FN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        // Update 07/07/18
        #region N_BOW
        private void N_BOW(decimal? n)
        {
            decimal? BOW = n;

            txtBOWSpecification.Text = string.Empty;
            txtBOWN1.Text = string.Empty;
            txtBOWN2.Text = string.Empty;
            txtBOWN3.Text = string.Empty;
            txtBOWN4.Text = string.Empty;
            txtBOWN5.Text = string.Empty;
            txtBOWN6.Text = string.Empty;
            txtBOWAve.Text = string.Empty;

            if (BOW != null && BOW > 0)
            {

                if (BOW == 6)
                {
                    txtBOWN1.Visibility = Visibility.Visible;
                    txtBOWN2.Visibility = Visibility.Visible;
                    txtBOWN3.Visibility = Visibility.Visible;
                    txtBOWN4.Visibility = Visibility.Visible;
                    txtBOWN5.Visibility = Visibility.Visible;
                    txtBOWN6.Visibility = Visibility.Visible;
                }
                else if (BOW == 5)
                {
                    txtBOWN1.Visibility = Visibility.Visible;
                    txtBOWN2.Visibility = Visibility.Visible;
                    txtBOWN3.Visibility = Visibility.Visible;
                    txtBOWN4.Visibility = Visibility.Visible;
                    txtBOWN5.Visibility = Visibility.Visible;
                    txtBOWN6.Visibility = Visibility.Collapsed;
                }
                else if (BOW == 4)
                {
                    txtBOWN1.Visibility = Visibility.Visible;
                    txtBOWN2.Visibility = Visibility.Visible;
                    txtBOWN3.Visibility = Visibility.Visible;
                    txtBOWN4.Visibility = Visibility.Visible;
                    txtBOWN5.Visibility = Visibility.Collapsed;
                    txtBOWN6.Visibility = Visibility.Collapsed;
                }
                else if (BOW == 3)
                {
                    txtBOWN1.Visibility = Visibility.Visible;
                    txtBOWN2.Visibility = Visibility.Visible;
                    txtBOWN3.Visibility = Visibility.Visible;
                    txtBOWN4.Visibility = Visibility.Collapsed;
                    txtBOWN5.Visibility = Visibility.Collapsed;
                    txtBOWN6.Visibility = Visibility.Collapsed;
                }
                else if (BOW == 2)
                {
                    txtBOWN1.Visibility = Visibility.Visible;
                    txtBOWN2.Visibility = Visibility.Visible;
                    txtBOWN3.Visibility = Visibility.Collapsed;
                    txtBOWN4.Visibility = Visibility.Collapsed;
                    txtBOWN5.Visibility = Visibility.Collapsed;
                    txtBOWN6.Visibility = Visibility.Collapsed;
                }
                else if (BOW == 1)
                {
                    txtBOWN1.Visibility = Visibility.Visible;
                    txtBOWN2.Visibility = Visibility.Collapsed;
                    txtBOWN3.Visibility = Visibility.Collapsed;
                    txtBOWN4.Visibility = Visibility.Collapsed;
                    txtBOWN5.Visibility = Visibility.Collapsed;
                    txtBOWN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtBOWN1.Visibility = Visibility.Collapsed;
                txtBOWN2.Visibility = Visibility.Collapsed;
                txtBOWN3.Visibility = Visibility.Collapsed;
                txtBOWN4.Visibility = Visibility.Collapsed;
                txtBOWN5.Visibility = Visibility.Collapsed;
                txtBOWN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_SKEW
        private void N_SKEW(decimal? n)
        {
            decimal? SKEW = n;

            txtSKEWSpecification.Text = string.Empty;
            txtSKEWN1.Text = string.Empty;
            txtSKEWN2.Text = string.Empty;
            txtSKEWN3.Text = string.Empty;
            txtSKEWN4.Text = string.Empty;
            txtSKEWN5.Text = string.Empty;
            txtSKEWN6.Text = string.Empty;
            txtSKEWAve.Text = string.Empty;

            if (SKEW != null && SKEW > 0)
            {

                if (SKEW == 6)
                {
                    txtSKEWN1.Visibility = Visibility.Visible;
                    txtSKEWN2.Visibility = Visibility.Visible;
                    txtSKEWN3.Visibility = Visibility.Visible;
                    txtSKEWN4.Visibility = Visibility.Visible;
                    txtSKEWN5.Visibility = Visibility.Visible;
                    txtSKEWN6.Visibility = Visibility.Visible;
                }
                else if (SKEW == 5)
                {
                    txtSKEWN1.Visibility = Visibility.Visible;
                    txtSKEWN2.Visibility = Visibility.Visible;
                    txtSKEWN3.Visibility = Visibility.Visible;
                    txtSKEWN4.Visibility = Visibility.Visible;
                    txtSKEWN5.Visibility = Visibility.Visible;
                    txtSKEWN6.Visibility = Visibility.Collapsed;
                }
                else if (SKEW == 4)
                {
                    txtSKEWN1.Visibility = Visibility.Visible;
                    txtSKEWN2.Visibility = Visibility.Visible;
                    txtSKEWN3.Visibility = Visibility.Visible;
                    txtSKEWN4.Visibility = Visibility.Visible;
                    txtSKEWN5.Visibility = Visibility.Collapsed;
                    txtSKEWN6.Visibility = Visibility.Collapsed;
                }
                else if (SKEW == 3)
                {
                    txtSKEWN1.Visibility = Visibility.Visible;
                    txtSKEWN2.Visibility = Visibility.Visible;
                    txtSKEWN3.Visibility = Visibility.Visible;
                    txtSKEWN4.Visibility = Visibility.Collapsed;
                    txtSKEWN5.Visibility = Visibility.Collapsed;
                    txtSKEWN6.Visibility = Visibility.Collapsed;
                }
                else if (SKEW == 2)
                {
                    txtSKEWN1.Visibility = Visibility.Visible;
                    txtSKEWN2.Visibility = Visibility.Visible;
                    txtSKEWN3.Visibility = Visibility.Collapsed;
                    txtSKEWN4.Visibility = Visibility.Collapsed;
                    txtSKEWN5.Visibility = Visibility.Collapsed;
                    txtSKEWN6.Visibility = Visibility.Collapsed;
                }
                else if (SKEW == 1)
                {
                    txtSKEWN1.Visibility = Visibility.Visible;
                    txtSKEWN2.Visibility = Visibility.Collapsed;
                    txtSKEWN3.Visibility = Visibility.Collapsed;
                    txtSKEWN4.Visibility = Visibility.Collapsed;
                    txtSKEWN5.Visibility = Visibility.Collapsed;
                    txtSKEWN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtSKEWN1.Visibility = Visibility.Collapsed;
                txtSKEWN2.Visibility = Visibility.Collapsed;
                txtSKEWN3.Visibility = Visibility.Collapsed;
                txtSKEWN4.Visibility = Visibility.Collapsed;
                txtSKEWN5.Visibility = Visibility.Collapsed;
                txtSKEWN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_BENDING_W
        private void N_BENDING_W(decimal? n)
        {
            decimal? BENDING_W = n;

            txtBENDING_WSpecification.Text = string.Empty;
            txtBENDING_WN1.Text = string.Empty;
            txtBENDING_WN2.Text = string.Empty;
            txtBENDING_WN3.Text = string.Empty;
            txtBENDING_WN4.Text = string.Empty;
            txtBENDING_WN5.Text = string.Empty;
            txtBENDING_WN6.Text = string.Empty;
            txtBENDING_WAve.Text = string.Empty;

            if (BENDING_W != null && BENDING_W > 0)
            {

                if (BENDING_W == 6)
                {
                    txtBENDING_WN1.Visibility = Visibility.Visible;
                    txtBENDING_WN2.Visibility = Visibility.Visible;
                    txtBENDING_WN3.Visibility = Visibility.Visible;
                    txtBENDING_WN4.Visibility = Visibility.Visible;
                    txtBENDING_WN5.Visibility = Visibility.Visible;
                    txtBENDING_WN6.Visibility = Visibility.Visible;
                }
                else if (BENDING_W == 5)
                {
                    txtBENDING_WN1.Visibility = Visibility.Visible;
                    txtBENDING_WN2.Visibility = Visibility.Visible;
                    txtBENDING_WN3.Visibility = Visibility.Visible;
                    txtBENDING_WN4.Visibility = Visibility.Visible;
                    txtBENDING_WN5.Visibility = Visibility.Visible;
                    txtBENDING_WN6.Visibility = Visibility.Collapsed;
                }
                else if (BENDING_W == 4)
                {
                    txtBENDING_WN1.Visibility = Visibility.Visible;
                    txtBENDING_WN2.Visibility = Visibility.Visible;
                    txtBENDING_WN3.Visibility = Visibility.Visible;
                    txtBENDING_WN4.Visibility = Visibility.Visible;
                    txtBENDING_WN5.Visibility = Visibility.Collapsed;
                    txtBENDING_WN6.Visibility = Visibility.Collapsed;
                }
                else if (BENDING_W == 3)
                {
                    txtBENDING_WN1.Visibility = Visibility.Visible;
                    txtBENDING_WN2.Visibility = Visibility.Visible;
                    txtBENDING_WN3.Visibility = Visibility.Visible;
                    txtBENDING_WN4.Visibility = Visibility.Collapsed;
                    txtBENDING_WN5.Visibility = Visibility.Collapsed;
                    txtBENDING_WN6.Visibility = Visibility.Collapsed;
                }
                else if (BENDING_W == 2)
                {
                    txtBENDING_WN1.Visibility = Visibility.Visible;
                    txtBENDING_WN2.Visibility = Visibility.Visible;
                    txtBENDING_WN3.Visibility = Visibility.Collapsed;
                    txtBENDING_WN4.Visibility = Visibility.Collapsed;
                    txtBENDING_WN5.Visibility = Visibility.Collapsed;
                    txtBENDING_WN6.Visibility = Visibility.Collapsed;
                }
                else if (BENDING_W == 1)
                {
                    txtBENDING_WN1.Visibility = Visibility.Visible;
                    txtBENDING_WN2.Visibility = Visibility.Collapsed;
                    txtBENDING_WN3.Visibility = Visibility.Collapsed;
                    txtBENDING_WN4.Visibility = Visibility.Collapsed;
                    txtBENDING_WN5.Visibility = Visibility.Collapsed;
                    txtBENDING_WN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtBENDING_WN1.Visibility = Visibility.Collapsed;
                txtBENDING_WN2.Visibility = Visibility.Collapsed;
                txtBENDING_WN3.Visibility = Visibility.Collapsed;
                txtBENDING_WN4.Visibility = Visibility.Collapsed;
                txtBENDING_WN5.Visibility = Visibility.Collapsed;
                txtBENDING_WN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_BENDING_F
        private void N_BENDING_F(decimal? n)
        {
            decimal? BENDING_F = n;

            txtBENDING_FSpecification.Text = string.Empty;
            txtBENDING_FN1.Text = string.Empty;
            txtBENDING_FN2.Text = string.Empty;
            txtBENDING_FN3.Text = string.Empty;
            txtBENDING_FN4.Text = string.Empty;
            txtBENDING_FN5.Text = string.Empty;
            txtBENDING_FN6.Text = string.Empty;
            txtBENDING_FAve.Text = string.Empty;

            if (BENDING_F != null && BENDING_F > 0)
            {

                if (BENDING_F == 6)
                {
                    txtBENDING_FN1.Visibility = Visibility.Visible;
                    txtBENDING_FN2.Visibility = Visibility.Visible;
                    txtBENDING_FN3.Visibility = Visibility.Visible;
                    txtBENDING_FN4.Visibility = Visibility.Visible;
                    txtBENDING_FN5.Visibility = Visibility.Visible;
                    txtBENDING_FN6.Visibility = Visibility.Visible;
                }
                else if (BENDING_F == 5)
                {
                    txtBENDING_FN1.Visibility = Visibility.Visible;
                    txtBENDING_FN2.Visibility = Visibility.Visible;
                    txtBENDING_FN3.Visibility = Visibility.Visible;
                    txtBENDING_FN4.Visibility = Visibility.Visible;
                    txtBENDING_FN5.Visibility = Visibility.Visible;
                    txtBENDING_FN6.Visibility = Visibility.Collapsed;
                }
                else if (BENDING_F == 4)
                {
                    txtBENDING_FN1.Visibility = Visibility.Visible;
                    txtBENDING_FN2.Visibility = Visibility.Visible;
                    txtBENDING_FN3.Visibility = Visibility.Visible;
                    txtBENDING_FN4.Visibility = Visibility.Visible;
                    txtBENDING_FN5.Visibility = Visibility.Collapsed;
                    txtBENDING_FN6.Visibility = Visibility.Collapsed;
                }
                else if (BENDING_F == 3)
                {
                    txtBENDING_FN1.Visibility = Visibility.Visible;
                    txtBENDING_FN2.Visibility = Visibility.Visible;
                    txtBENDING_FN3.Visibility = Visibility.Visible;
                    txtBENDING_FN4.Visibility = Visibility.Collapsed;
                    txtBENDING_FN5.Visibility = Visibility.Collapsed;
                    txtBENDING_FN6.Visibility = Visibility.Collapsed;
                }
                else if (BENDING_F == 2)
                {
                    txtBENDING_FN1.Visibility = Visibility.Visible;
                    txtBENDING_FN2.Visibility = Visibility.Visible;
                    txtBENDING_FN3.Visibility = Visibility.Collapsed;
                    txtBENDING_FN4.Visibility = Visibility.Collapsed;
                    txtBENDING_FN5.Visibility = Visibility.Collapsed;
                    txtBENDING_FN6.Visibility = Visibility.Collapsed;
                }
                else if (BENDING_F == 1)
                {
                    txtBENDING_FN1.Visibility = Visibility.Visible;
                    txtBENDING_FN2.Visibility = Visibility.Collapsed;
                    txtBENDING_FN3.Visibility = Visibility.Collapsed;
                    txtBENDING_FN4.Visibility = Visibility.Collapsed;
                    txtBENDING_FN5.Visibility = Visibility.Collapsed;
                    txtBENDING_FN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtBENDING_FN1.Visibility = Visibility.Collapsed;
                txtBENDING_FN2.Visibility = Visibility.Collapsed;
                txtBENDING_FN3.Visibility = Visibility.Collapsed;
                txtBENDING_FN4.Visibility = Visibility.Collapsed;
                txtBENDING_FN5.Visibility = Visibility.Collapsed;
                txtBENDING_FN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_FLEX_SCOTT_W
        private void N_FLEX_SCOTT_W(decimal? n)
        {
            decimal? FLEX_SCOTT_W = n;

            txtFLEX_SCOTT_WSpecification.Text = string.Empty;
            txtFLEX_SCOTT_WN1.Text = string.Empty;
            txtFLEX_SCOTT_WN2.Text = string.Empty;
            txtFLEX_SCOTT_WN3.Text = string.Empty;
            txtFLEX_SCOTT_WN4.Text = string.Empty;
            txtFLEX_SCOTT_WN5.Text = string.Empty;
            txtFLEX_SCOTT_WN6.Text = string.Empty;
            txtFLEX_SCOTT_WAve.Text = string.Empty;

            if (FLEX_SCOTT_W != null && FLEX_SCOTT_W > 0)
            {

                if (FLEX_SCOTT_W == 6)
                {
                    txtFLEX_SCOTT_WN1.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_WN2.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_WN3.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_WN4.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_WN5.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_WN6.Visibility = Visibility.Visible;
                }
                else if (FLEX_SCOTT_W == 5)
                {
                    txtFLEX_SCOTT_WN1.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_WN2.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_WN3.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_WN4.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_WN5.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_WN6.Visibility = Visibility.Collapsed;
                }
                else if (FLEX_SCOTT_W == 4)
                {
                    txtFLEX_SCOTT_WN1.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_WN2.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_WN3.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_WN4.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_WN5.Visibility = Visibility.Collapsed;
                    txtFLEX_SCOTT_WN6.Visibility = Visibility.Collapsed;
                }
                else if (FLEX_SCOTT_W == 3)
                {
                    txtFLEX_SCOTT_WN1.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_WN2.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_WN3.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_WN4.Visibility = Visibility.Collapsed;
                    txtFLEX_SCOTT_WN5.Visibility = Visibility.Collapsed;
                    txtFLEX_SCOTT_WN6.Visibility = Visibility.Collapsed;
                }
                else if (FLEX_SCOTT_W == 2)
                {
                    txtFLEX_SCOTT_WN1.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_WN2.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_WN3.Visibility = Visibility.Collapsed;
                    txtFLEX_SCOTT_WN4.Visibility = Visibility.Collapsed;
                    txtFLEX_SCOTT_WN5.Visibility = Visibility.Collapsed;
                    txtFLEX_SCOTT_WN6.Visibility = Visibility.Collapsed;
                }
                else if (FLEX_SCOTT_W == 1)
                {
                    txtFLEX_SCOTT_WN1.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_WN2.Visibility = Visibility.Collapsed;
                    txtFLEX_SCOTT_WN3.Visibility = Visibility.Collapsed;
                    txtFLEX_SCOTT_WN4.Visibility = Visibility.Collapsed;
                    txtFLEX_SCOTT_WN5.Visibility = Visibility.Collapsed;
                    txtFLEX_SCOTT_WN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtFLEX_SCOTT_WN1.Visibility = Visibility.Collapsed;
                txtFLEX_SCOTT_WN2.Visibility = Visibility.Collapsed;
                txtFLEX_SCOTT_WN3.Visibility = Visibility.Collapsed;
                txtFLEX_SCOTT_WN4.Visibility = Visibility.Collapsed;
                txtFLEX_SCOTT_WN5.Visibility = Visibility.Collapsed;
                txtFLEX_SCOTT_WN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #region N_FLEX_SCOTT_F
        private void N_FLEX_SCOTT_F(decimal? n)
        {
            decimal? FLEX_SCOTT_F = n;

            txtFLEX_SCOTT_FSpecification.Text = string.Empty;
            txtFLEX_SCOTT_FN1.Text = string.Empty;
            txtFLEX_SCOTT_FN2.Text = string.Empty;
            txtFLEX_SCOTT_FN3.Text = string.Empty;
            txtFLEX_SCOTT_FN4.Text = string.Empty;
            txtFLEX_SCOTT_FN5.Text = string.Empty;
            txtFLEX_SCOTT_FN6.Text = string.Empty;
            txtFLEX_SCOTT_FAve.Text = string.Empty;

            if (FLEX_SCOTT_F != null && FLEX_SCOTT_F > 0)
            {

                if (FLEX_SCOTT_F == 6)
                {
                    txtFLEX_SCOTT_FN1.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_FN2.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_FN3.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_FN4.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_FN5.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_FN6.Visibility = Visibility.Visible;
                }
                else if (FLEX_SCOTT_F == 5)
                {
                    txtFLEX_SCOTT_FN1.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_FN2.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_FN3.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_FN4.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_FN5.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_FN6.Visibility = Visibility.Collapsed;
                }
                else if (FLEX_SCOTT_F == 4)
                {
                    txtFLEX_SCOTT_FN1.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_FN2.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_FN3.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_FN4.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_FN5.Visibility = Visibility.Collapsed;
                    txtFLEX_SCOTT_FN6.Visibility = Visibility.Collapsed;
                }
                else if (FLEX_SCOTT_F == 3)
                {
                    txtFLEX_SCOTT_FN1.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_FN2.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_FN3.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_FN4.Visibility = Visibility.Collapsed;
                    txtFLEX_SCOTT_FN5.Visibility = Visibility.Collapsed;
                    txtFLEX_SCOTT_FN6.Visibility = Visibility.Collapsed;
                }
                else if (FLEX_SCOTT_F == 2)
                {
                    txtFLEX_SCOTT_FN1.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_FN2.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_FN3.Visibility = Visibility.Collapsed;
                    txtFLEX_SCOTT_FN4.Visibility = Visibility.Collapsed;
                    txtFLEX_SCOTT_FN5.Visibility = Visibility.Collapsed;
                    txtFLEX_SCOTT_FN6.Visibility = Visibility.Collapsed;
                }
                else if (FLEX_SCOTT_F == 1)
                {
                    txtFLEX_SCOTT_FN1.Visibility = Visibility.Visible;
                    txtFLEX_SCOTT_FN2.Visibility = Visibility.Collapsed;
                    txtFLEX_SCOTT_FN3.Visibility = Visibility.Collapsed;
                    txtFLEX_SCOTT_FN4.Visibility = Visibility.Collapsed;
                    txtFLEX_SCOTT_FN5.Visibility = Visibility.Collapsed;
                    txtFLEX_SCOTT_FN6.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                txtFLEX_SCOTT_FN1.Visibility = Visibility.Collapsed;
                txtFLEX_SCOTT_FN2.Visibility = Visibility.Collapsed;
                txtFLEX_SCOTT_FN3.Visibility = Visibility.Collapsed;
                txtFLEX_SCOTT_FN4.Visibility = Visibility.Collapsed;
                txtFLEX_SCOTT_FN5.Visibility = Visibility.Collapsed;
                txtFLEX_SCOTT_FN6.Visibility = Visibility.Collapsed;
            }
        }
        #endregion

        #endregion

        //IsEnabled ปรับ 10/06/18

        #region IsEnabled
        #region chk_MAXFORCE_W
        private void chk_MAXFORCE_W(bool chk)
        {
            txtMAXFORCE_WN1.IsEnabled = chk;
            txtMAXFORCE_WN2.IsEnabled = chk;
            txtMAXFORCE_WN3.IsEnabled = chk;
            txtMAXFORCE_WN4.IsEnabled = chk;
            txtMAXFORCE_WN5.IsEnabled = chk;
            txtMAXFORCE_WN6.IsEnabled = chk;
        }
        #endregion

        #region chk_MAXFORCE_F
        private void chk_MAXFORCE_F(bool chk)
        {
            txtMAXFORCE_FN1.IsEnabled = chk;
            txtMAXFORCE_FN2.IsEnabled = chk;
            txtMAXFORCE_FN3.IsEnabled = chk;
            txtMAXFORCE_FN4.IsEnabled = chk;
            txtMAXFORCE_FN5.IsEnabled = chk;
            txtMAXFORCE_FN6.IsEnabled = chk;
        }
        #endregion

        #region chk_ELONGATIONFORCE_W
        private void chk_ELONGATIONFORCE_W(bool chk)
        {
            txtELONGATIONFORCE_WN1.IsEnabled = chk;
            txtELONGATIONFORCE_WN2.IsEnabled = chk;
            txtELONGATIONFORCE_WN3.IsEnabled = chk;
            txtELONGATIONFORCE_WN4.IsEnabled = chk;
            txtELONGATIONFORCE_WN5.IsEnabled = chk;
            txtELONGATIONFORCE_WN6.IsEnabled = chk;
        }
        #endregion

        #region chk_ELONGATIONFORCE_F
        private void chk_ELONGATIONFORCE_F(bool chk)
        {
            txtELONGATIONFORCE_FN1.IsEnabled = chk;
            txtELONGATIONFORCE_FN2.IsEnabled = chk;
            txtELONGATIONFORCE_FN3.IsEnabled = chk;
            txtELONGATIONFORCE_FN4.IsEnabled = chk;
            txtELONGATIONFORCE_FN5.IsEnabled = chk;
            txtELONGATIONFORCE_FN6.IsEnabled = chk;
        }
        #endregion

        #region chk_EDGECOMB_W
        private void chk_EDGECOMB_W(bool chk)
        {
            txtEDGECOMB_WN1.IsEnabled = chk;
            txtEDGECOMB_WN2.IsEnabled = chk;
            txtEDGECOMB_WN3.IsEnabled = chk;
            txtEDGECOMB_WN4.IsEnabled = chk;
            txtEDGECOMB_WN5.IsEnabled = chk;
            txtEDGECOMB_WN6.IsEnabled = chk;
        }
        #endregion

        #region chk_EDGECOMB_F
        private void chk_EDGECOMB_F(bool chk)
        {
            txtEDGECOMB_FN1.IsEnabled = chk;
            txtEDGECOMB_FN2.IsEnabled = chk;
            txtEDGECOMB_FN3.IsEnabled = chk;
            txtEDGECOMB_FN4.IsEnabled = chk;
            txtEDGECOMB_FN5.IsEnabled = chk;
            txtEDGECOMB_FN6.IsEnabled = chk;
        }
        #endregion

        #region chk_TEAR_W
        private void chk_TEAR_W(bool chk)
        {
            txtTEAR_WN1.IsEnabled = chk;
            txtTEAR_WN2.IsEnabled = chk;
            txtTEAR_WN3.IsEnabled = chk;
            txtTEAR_WN4.IsEnabled = chk;
            txtTEAR_WN5.IsEnabled = chk;
            txtTEAR_WN6.IsEnabled = chk;
        }
        #endregion

        #region chk_TEAR_F
        private void chk_TEAR_F(bool chk)
        {
            txtTEAR_FN1.IsEnabled = chk;
            txtTEAR_FN2.IsEnabled = chk;
            txtTEAR_FN3.IsEnabled = chk;
            txtTEAR_FN4.IsEnabled = chk;
            txtTEAR_FN5.IsEnabled = chk;
            txtTEAR_FN6.IsEnabled = chk;
        }
        #endregion
        #endregion

        #region buttonEnabled
        private void buttonEnabled(bool enabled)
        {
            cmdClear.IsEnabled = enabled;
            cmdApprove .IsEnabled = enabled;
            cmdNotApprove.IsEnabled = enabled;
            cmdSave.IsEnabled = enabled;
        }
        #endregion

        //New 1/9/22
        #region Re-test Stiffness

        #region ShowRetestStiffness

        private void ShowRetestStiffness()
        {
            if (null != _session)
            {
                try
                {
                    if (!string.IsNullOrEmpty(txtITMCODE.Text) && !string.IsNullOrEmpty(txtWEAVINGLOG.Text))
                    {
                        string itemCode = txtITMCODE.Text; 
                        string weavingLot = txtWEAVINGLOG.Text;
                        string finishingLot = txtFINISHINGLOT.Text; 

                        Windows.RetestStiffnessWindow window = new Windows.RetestStiffnessWindow();

                        window.Setup(itemCode, weavingLot, finishingLot);

                        if (window.ShowDialog() == true)
                        {
                            if (window.STIFFNES_WN1 != null)
                            {
                                txtSTIFFNES_WN1.Text = window.STIFFNES_WN1.ToString();
                                _session.P_STIFFNESS_W1 = window.STIFFNES_WN1;
                            }

                            if (window.STIFFNES_WN2 != null)
                            {
                                txtSTIFFNES_WN2.Text = window.STIFFNES_WN2.ToString();
                                _session.P_STIFFNESS_W2 = window.STIFFNES_WN2;
                            }

                            if (window.STIFFNES_WN3 != null)
                            {
                                txtSTIFFNES_WN3.Text = window.STIFFNES_WN3.ToString();
                                _session.P_STIFFNESS_W3 = window.STIFFNES_WN3;
                            }

                            if (window.STIFFNES_WN4 != null)
                                txtSTIFFNES_WN4.Text = window.STIFFNES_WN4.ToString();

                            if (window.STIFFNES_WN5 != null)
                                txtSTIFFNES_WN5.Text = window.STIFFNES_WN5.ToString();

                            if (window.STIFFNES_WN6 != null)
                                txtSTIFFNES_WN6.Text = window.STIFFNES_WN6.ToString();

                            if (window.STIFFNES_FN1 != null)
                            {
                                txtSTIFFNES_FN1.Text = window.STIFFNES_FN1.ToString();
                                _session.P_STIFFNESS_F1 = window.STIFFNES_FN1;
                            }

                            if (window.STIFFNES_FN2 != null)
                            {
                                txtSTIFFNES_FN2.Text = window.STIFFNES_FN2.ToString();
                                _session.P_STIFFNESS_F2 = window.STIFFNES_FN2;
                            }

                            if (window.STIFFNES_FN3 != null)
                            {
                                txtSTIFFNES_FN3.Text = window.STIFFNES_FN3.ToString();
                                _session.P_STIFFNESS_F3 = window.STIFFNES_FN3;
                            }

                            if (window.STIFFNES_FN4 != null)
                                txtSTIFFNES_FN4.Text = window.STIFFNES_FN4.ToString();

                            if (window.STIFFNES_FN5 != null)
                                txtSTIFFNES_FN5.Text = window.STIFFNES_FN5.ToString();

                            if (window.STIFFNES_FN6 != null)
                                txtSTIFFNES_FN6.Text = window.STIFFNES_FN6.ToString();

                            AVGSTIFFNES_W(window.STIFFNES_WN1, window.STIFFNES_WN2, window.STIFFNES_WN3, null, null, null);
                            AVGSTIFFNES_F(window.STIFFNES_FN1, window.STIFFNES_FN2, window.STIFFNES_FN3, null, null, null);

                            #region Focus
                            if (txtSTATIC_AIRN1.Visibility == Visibility.Visible)
                            {
                                txtSTATIC_AIRN1.Focus();
                                txtSTATIC_AIRN1.SelectAll();
                            }
                            else if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                            {
                                txtDYNAMIC_AIRN1.Focus();
                                txtDYNAMIC_AIRN1.SelectAll();
                            }
                            else if (txtEXPONENTN1.Visibility == Visibility.Visible)
                            {
                                txtEXPONENTN1.Focus();
                                txtEXPONENTN1.SelectAll();
                            }
                            else if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                            {
                                txtDIMENSCHANGE_WN1.Focus();
                                txtDIMENSCHANGE_WN1.SelectAll();
                            }
                            #endregion
                        }
                    }
                }
                catch (Exception ex)
                {
                    ex.Err();
                    Console.WriteLine(ex);
                }
            }
        }

        #endregion

        #region AVGSTIFFNES_W
        private void AVGSTIFFNES_W(decimal? ave1, decimal? ave2, decimal? ave3, decimal? ave4, decimal? ave5, decimal? ave6)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? Avg = 0;

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtSTIFFNES_WAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtSTIFFNES_WAve.Text = "0";
                    else
                        txtSTIFFNES_WAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtSTIFFNES_WSpecification.Text))
                {
                    string temp = txtSTIFFNES_WSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtSTIFFNES_WN1.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtSTIFFNES_WN2.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtSTIFFNES_WN3.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtSTIFFNES_WN4.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtSTIFFNES_WN5.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtSTIFFNES_WN6.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtSTIFFNES_WN1.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtSTIFFNES_WN2.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtSTIFFNES_WN3.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtSTIFFNES_WN4.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtSTIFFNES_WN5.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtSTIFFNES_WN6.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_WN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_WN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtSTIFFNES_WN1.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_WN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_WN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtSTIFFNES_WN2.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_WN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_WN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtSTIFFNES_WN3.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_WN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_WN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtSTIFFNES_WN4.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_WN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_WN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtSTIFFNES_WN5.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_WN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_WN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtSTIFFNES_WN6.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_WN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_WN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtSTIFFNES_WN1.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_WN1.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_WN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtSTIFFNES_WN2.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_WN2.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_WN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtSTIFFNES_WN3.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_WN3.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_WN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtSTIFFNES_WN4.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_WN4.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_WN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtSTIFFNES_WN5.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_WN5.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_WN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtSTIFFNES_WN6.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_WN6.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_WN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtSTIFFNES_WN1.Foreground = Brushes.Black;
                    txtSTIFFNES_WN2.Foreground = Brushes.Black;
                    txtSTIFFNES_WN3.Foreground = Brushes.Black;
                    txtSTIFFNES_WN4.Foreground = Brushes.Black;
                    txtSTIFFNES_WN5.Foreground = Brushes.Black;
                    txtSTIFFNES_WN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region AVGSTIFFNES_F
        private void AVGSTIFFNES_F(decimal? ave1, decimal? ave2, decimal? ave3, decimal? ave4, decimal? ave5, decimal? ave6)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? Avg = 0;

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtSTIFFNES_FAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtSTIFFNES_FAve.Text = "0";
                    else
                        txtSTIFFNES_FAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtSTIFFNES_FSpecification.Text))
                {
                    string temp = txtSTIFFNES_FSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtSTIFFNES_FN1.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtSTIFFNES_FN2.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtSTIFFNES_FN3.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtSTIFFNES_FN4.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtSTIFFNES_FN5.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtSTIFFNES_FN6.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtSTIFFNES_FN1.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtSTIFFNES_FN2.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtSTIFFNES_FN3.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtSTIFFNES_FN4.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtSTIFFNES_FN5.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtSTIFFNES_FN6.Foreground = Brushes.Red;
                                    else
                                        txtSTIFFNES_FN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTIFFNES_FN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtSTIFFNES_FN1.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_FN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_FN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtSTIFFNES_FN2.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_FN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_FN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtSTIFFNES_FN3.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_FN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_FN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtSTIFFNES_FN4.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_FN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_FN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtSTIFFNES_FN5.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_FN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_FN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtSTIFFNES_FN6.Foreground = Brushes.Black;
                                    else
                                        txtSTIFFNES_FN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTIFFNES_FN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtSTIFFNES_FN1.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_FN1.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_FN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtSTIFFNES_FN2.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_FN2.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_FN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtSTIFFNES_FN3.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_FN3.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_FN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtSTIFFNES_FN4.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_FN4.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_FN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtSTIFFNES_FN5.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_FN5.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_FN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtSTIFFNES_FN6.Foreground = Brushes.Black;
                            else
                                txtSTIFFNES_FN6.Foreground = Brushes.Red;
                        }
                        else
                            txtSTIFFNES_FN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtSTIFFNES_FN1.Foreground = Brushes.Black;
                    txtSTIFFNES_FN2.Foreground = Brushes.Black;
                    txtSTIFFNES_FN3.Foreground = Brushes.Black;
                    txtSTIFFNES_FN4.Foreground = Brushes.Black;
                    txtSTIFFNES_FN5.Foreground = Brushes.Black;
                    txtSTIFFNES_FN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #endregion

        #region Re-test StaticAir

        #region ShowRetestStaticAir

        private void ShowRetestStaticAir()
        {
            if (null != _session)
            {
                try
                {
                    if (!string.IsNullOrEmpty(txtITMCODE.Text) && !string.IsNullOrEmpty(txtWEAVINGLOG.Text))
                    {
                        string itemCode = txtITMCODE.Text;
                        string weavingLot = txtWEAVINGLOG.Text;
                        string finishingLot = txtFINISHINGLOT.Text;

                        Windows.RetestStaticAirWindow window = new Windows.RetestStaticAirWindow();

                        window.Setup(itemCode, weavingLot, finishingLot);

                        if (window.ShowDialog() == true)
                        {
                            if (window.STATIC_AIR1 != null)
                            {
                                txtSTATIC_AIRN1.Text = window.STATIC_AIR1.ToString();
                                _session.P_STATIC_AIR1 = window.STATIC_AIR1;
                            }

                            if (window.STATIC_AIR2 != null)
                            {
                                txtSTATIC_AIRN2.Text = window.STATIC_AIR2.ToString();
                                _session.P_STATIC_AIR2 = window.STATIC_AIR2;
                            }

                            if (window.STATIC_AIR3 != null)
                            {
                                txtSTATIC_AIRN3.Text = window.STATIC_AIR3.ToString();
                                _session.P_STATIC_AIR3 = window.STATIC_AIR3;
                            }

                            if (window.STATIC_AIR4 != null)
                            {
                                txtSTATIC_AIRN4.Text = window.STATIC_AIR4.ToString();
                                _session.P_STATIC_AIR4 = window.STATIC_AIR4;
                            }

                            if (window.STATIC_AIR5 != null)
                            {
                                txtSTATIC_AIRN5.Text = window.STATIC_AIR5.ToString();
                                _session.P_STATIC_AIR5 = window.STATIC_AIR5;
                            }

                            if (window.STATIC_AIR6 != null)
                            {
                                txtSTATIC_AIRN6.Text = window.STATIC_AIR6.ToString();
                                _session.P_STATIC_AIR6 = window.STATIC_AIR6;
                            }

                            AVGStaticAir(window.STATIC_AIR1, window.STATIC_AIR2, window.STATIC_AIR3, window.STATIC_AIR4, window.STATIC_AIR5, window.STATIC_AIR6);

                            #region Focus
                            if (txtDYNAMIC_AIRN1.Visibility == Visibility.Visible)
                            {
                                txtDYNAMIC_AIRN1.Focus();
                                txtDYNAMIC_AIRN1.SelectAll();
                            }
                            else if (txtEXPONENTN1.Visibility == Visibility.Visible)
                            {
                                txtEXPONENTN1.Focus();
                                txtEXPONENTN1.SelectAll();
                            }
                            else if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                            {
                                txtDIMENSCHANGE_WN1.Focus();
                                txtDIMENSCHANGE_WN1.SelectAll();
                            }
                            else if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                            {
                                txtDIMENSCHANGE_FN1.Focus();
                                txtDIMENSCHANGE_FN1.SelectAll();
                            }
                            #endregion
                        }
                    }
                }
                catch (Exception ex)
                {
                    ex.Err();
                    Console.WriteLine(ex);
                }
            }
        }

        #endregion

        #region AVGStaticAir
        private void AVGStaticAir(decimal? ave1, decimal? ave2, decimal? ave3, decimal? ave4, decimal? ave5, decimal? ave6)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? Avg = 0;

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 3);

                    txtSTATIC_AIRAve.Text = Avg.Value.ToString("#,##0.###");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtSTATIC_AIRAve.Text = "0";
                    else
                        txtSTATIC_AIRAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtSTATIC_AIRSpecification.Text))
                {
                    string temp = txtSTATIC_AIRSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtSTATIC_AIRN1.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtSTATIC_AIRN2.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtSTATIC_AIRN3.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtSTATIC_AIRN4.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtSTATIC_AIRN5.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtSTATIC_AIRN6.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtSTATIC_AIRN1.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtSTATIC_AIRN2.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtSTATIC_AIRN3.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtSTATIC_AIRN4.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtSTATIC_AIRN5.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtSTATIC_AIRN6.Foreground = Brushes.Red;
                                    else
                                        txtSTATIC_AIRN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtSTATIC_AIRN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtSTATIC_AIRN1.Foreground = Brushes.Black;
                                    else
                                        txtSTATIC_AIRN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTATIC_AIRN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtSTATIC_AIRN2.Foreground = Brushes.Black;
                                    else
                                        txtSTATIC_AIRN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTATIC_AIRN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtSTATIC_AIRN3.Foreground = Brushes.Black;
                                    else
                                        txtSTATIC_AIRN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTATIC_AIRN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtSTATIC_AIRN4.Foreground = Brushes.Black;
                                    else
                                        txtSTATIC_AIRN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTATIC_AIRN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtSTATIC_AIRN5.Foreground = Brushes.Black;
                                    else
                                        txtSTATIC_AIRN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTATIC_AIRN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtSTATIC_AIRN6.Foreground = Brushes.Black;
                                    else
                                        txtSTATIC_AIRN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtSTATIC_AIRN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtSTATIC_AIRN1.Foreground = Brushes.Black;
                            else
                                txtSTATIC_AIRN1.Foreground = Brushes.Red;
                        }
                        else
                            txtSTATIC_AIRN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtSTATIC_AIRN2.Foreground = Brushes.Black;
                            else
                                txtSTATIC_AIRN2.Foreground = Brushes.Red;
                        }
                        else
                            txtSTATIC_AIRN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtSTATIC_AIRN3.Foreground = Brushes.Black;
                            else
                                txtSTATIC_AIRN3.Foreground = Brushes.Red;
                        }
                        else
                            txtSTATIC_AIRN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtSTATIC_AIRN4.Foreground = Brushes.Black;
                            else
                                txtSTATIC_AIRN4.Foreground = Brushes.Red;
                        }
                        else
                            txtSTATIC_AIRN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtSTATIC_AIRN5.Foreground = Brushes.Black;
                            else
                                txtSTATIC_AIRN5.Foreground = Brushes.Red;
                        }
                        else
                            txtSTATIC_AIRN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtSTATIC_AIRN6.Foreground = Brushes.Black;
                            else
                                txtSTATIC_AIRN6.Foreground = Brushes.Red;
                        }
                        else
                            txtSTATIC_AIRN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtSTATIC_AIRN1.Foreground = Brushes.Black;
                    txtSTATIC_AIRN2.Foreground = Brushes.Black;
                    txtSTATIC_AIRN3.Foreground = Brushes.Black;
                    txtSTATIC_AIRN4.Foreground = Brushes.Black;
                    txtSTATIC_AIRN5.Foreground = Brushes.Black;
                    txtSTATIC_AIRN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #endregion

        #region Re-test DynamicAir

        #region ShowRetestDynamicAir

        private void ShowRetestDynamicAir()
        {
            if (null != _session)
            {
                try
                {
                    if (!string.IsNullOrEmpty(txtITMCODE.Text) && !string.IsNullOrEmpty(txtWEAVINGLOG.Text))
                    {
                        string itemCode = txtITMCODE.Text;
                        string weavingLot = txtWEAVINGLOG.Text;
                        string finishingLot = txtFINISHINGLOT.Text;

                        Windows.RetestDynamicAirWindow window = new Windows.RetestDynamicAirWindow();

                        window.Setup(itemCode, weavingLot, finishingLot);

                        if (window.ShowDialog() == true)
                        {
                            if (window.DYNAMIC_AIR1 != null)
                            {
                                txtDYNAMIC_AIRN1.Text = window.DYNAMIC_AIR1.ToString();
                                _session.P_DYNAMIC_AIR1 = window.DYNAMIC_AIR1;
                            }

                            if (window.DYNAMIC_AIR2 != null)
                            {
                                txtDYNAMIC_AIRN2.Text = window.DYNAMIC_AIR2.ToString();
                                _session.P_DYNAMIC_AIR2 = window.DYNAMIC_AIR2;
                            }

                            if (window.DYNAMIC_AIR3 != null)
                            {
                                txtDYNAMIC_AIRN3.Text = window.DYNAMIC_AIR3.ToString();
                                _session.P_DYNAMIC_AIR3 = window.DYNAMIC_AIR3;
                            }

                            if (window.EXPONENT1 != null)
                            {
                                txtEXPONENTN1.Text = window.EXPONENT1.ToString();
                                _session.P_EXPONENT1 = window.EXPONENT1;
                            }

                            if (window.EXPONENT2 != null)
                            {
                                txtEXPONENTN2.Text = window.EXPONENT2.ToString();
                                _session.P_EXPONENT2 = window.EXPONENT2;
                            }

                            if (window.EXPONENT3 != null)
                            {
                                txtEXPONENTN3.Text = window.EXPONENT3.ToString();
                                _session.P_EXPONENT3 = window.EXPONENT3;
                            }

                            AVGDynamicAir(window.DYNAMIC_AIR1, window.DYNAMIC_AIR2, window.DYNAMIC_AIR3, null, null, null);

                            AVGExponent(window.EXPONENT1, window.EXPONENT2, window.EXPONENT3, null, null, null);

                            #region Focus
                            if (txtDIMENSCHANGE_WN1.Visibility == Visibility.Visible)
                            {
                                txtDIMENSCHANGE_WN1.Focus();
                                txtDIMENSCHANGE_WN1.SelectAll();
                            }
                            else if (txtDIMENSCHANGE_FN1.Visibility == Visibility.Visible)
                            {
                                txtDIMENSCHANGE_FN1.Focus();
                                txtDIMENSCHANGE_FN1.SelectAll();
                            }
                            else if (txtFLEXABRASION_WN1.Visibility == Visibility.Visible)
                            {
                                txtFLEXABRASION_WN1.Focus();
                                txtFLEXABRASION_WN1.SelectAll();
                            }
                            else if (txtFLEXABRASION_FN1.Visibility == Visibility.Visible)
                            {
                                txtFLEXABRASION_FN1.Focus();
                                txtFLEXABRASION_FN1.SelectAll();
                            }
                            #endregion
                        }
                    }
                }
                catch (Exception ex)
                {
                    ex.Err();
                    Console.WriteLine(ex);
                }
            }
        }

        #endregion

        #region AVGDynamicAir
        private void AVGDynamicAir(decimal? ave1, decimal? ave2, decimal? ave3, decimal? ave4, decimal? ave5, decimal? ave6)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? Avg = 0;

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtDYNAMIC_AIRAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtDYNAMIC_AIRAve.Text = "0";
                    else
                        txtDYNAMIC_AIRAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtDYNAMIC_AIRSpecification.Text))
                {
                    string temp = txtDYNAMIC_AIRSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtDYNAMIC_AIRN1.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtDYNAMIC_AIRN2.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtDYNAMIC_AIRN3.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtDYNAMIC_AIRN4.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtDYNAMIC_AIRN5.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtDYNAMIC_AIRN6.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtDYNAMIC_AIRN1.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtDYNAMIC_AIRN2.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtDYNAMIC_AIRN3.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtDYNAMIC_AIRN4.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtDYNAMIC_AIRN5.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtDYNAMIC_AIRN6.Foreground = Brushes.Red;
                                    else
                                        txtDYNAMIC_AIRN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtDYNAMIC_AIRN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtDYNAMIC_AIRN1.Foreground = Brushes.Black;
                                    else
                                        txtDYNAMIC_AIRN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtDYNAMIC_AIRN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtDYNAMIC_AIRN2.Foreground = Brushes.Black;
                                    else
                                        txtDYNAMIC_AIRN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtDYNAMIC_AIRN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtDYNAMIC_AIRN3.Foreground = Brushes.Black;
                                    else
                                        txtDYNAMIC_AIRN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtDYNAMIC_AIRN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtDYNAMIC_AIRN4.Foreground = Brushes.Black;
                                    else
                                        txtDYNAMIC_AIRN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtDYNAMIC_AIRN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtDYNAMIC_AIRN5.Foreground = Brushes.Black;
                                    else
                                        txtDYNAMIC_AIRN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtDYNAMIC_AIRN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtDYNAMIC_AIRN6.Foreground = Brushes.Black;
                                    else
                                        txtDYNAMIC_AIRN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtDYNAMIC_AIRN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtDYNAMIC_AIRN1.Foreground = Brushes.Black;
                            else
                                txtDYNAMIC_AIRN1.Foreground = Brushes.Red;
                        }
                        else
                            txtDYNAMIC_AIRN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtDYNAMIC_AIRN2.Foreground = Brushes.Black;
                            else
                                txtDYNAMIC_AIRN2.Foreground = Brushes.Red;
                        }
                        else
                            txtDYNAMIC_AIRN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtDYNAMIC_AIRN3.Foreground = Brushes.Black;
                            else
                                txtDYNAMIC_AIRN3.Foreground = Brushes.Red;
                        }
                        else
                            txtDYNAMIC_AIRN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtDYNAMIC_AIRN4.Foreground = Brushes.Black;
                            else
                                txtDYNAMIC_AIRN4.Foreground = Brushes.Red;
                        }
                        else
                            txtDYNAMIC_AIRN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtDYNAMIC_AIRN5.Foreground = Brushes.Black;
                            else
                                txtDYNAMIC_AIRN5.Foreground = Brushes.Red;
                        }
                        else
                            txtDYNAMIC_AIRN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtDYNAMIC_AIRN6.Foreground = Brushes.Black;
                            else
                                txtDYNAMIC_AIRN6.Foreground = Brushes.Red;
                        }
                        else
                            txtDYNAMIC_AIRN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtDYNAMIC_AIRN1.Foreground = Brushes.Black;
                    txtDYNAMIC_AIRN2.Foreground = Brushes.Black;
                    txtDYNAMIC_AIRN3.Foreground = Brushes.Black;
                    txtDYNAMIC_AIRN4.Foreground = Brushes.Black;
                    txtDYNAMIC_AIRN5.Foreground = Brushes.Black;
                    txtDYNAMIC_AIRN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #region AVGExponent
        private void AVGExponent(decimal? ave1, decimal? ave2, decimal? ave3, decimal? ave4, decimal? ave5, decimal? ave6)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? Avg = 0;

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtEXPONENTAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtEXPONENTAve.Text = "0";
                    else
                        txtEXPONENTAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtEXPONENTSpecification.Text))
                {
                    string temp = txtEXPONENTSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtEXPONENTN1.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtEXPONENTN2.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtEXPONENTN3.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtEXPONENTN4.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtEXPONENTN5.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtEXPONENTN6.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtEXPONENTN1.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtEXPONENTN2.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtEXPONENTN3.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtEXPONENTN4.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtEXPONENTN5.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtEXPONENTN6.Foreground = Brushes.Red;
                                    else
                                        txtEXPONENTN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtEXPONENTN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtEXPONENTN1.Foreground = Brushes.Black;
                                    else
                                        txtEXPONENTN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtEXPONENTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtEXPONENTN2.Foreground = Brushes.Black;
                                    else
                                        txtEXPONENTN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtEXPONENTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtEXPONENTN3.Foreground = Brushes.Black;
                                    else
                                        txtEXPONENTN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtEXPONENTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtEXPONENTN4.Foreground = Brushes.Black;
                                    else
                                        txtEXPONENTN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtEXPONENTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtEXPONENTN5.Foreground = Brushes.Black;
                                    else
                                        txtEXPONENTN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtEXPONENTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtEXPONENTN6.Foreground = Brushes.Black;
                                    else
                                        txtEXPONENTN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtEXPONENTN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtEXPONENTN1.Foreground = Brushes.Black;
                            else
                                txtEXPONENTN1.Foreground = Brushes.Red;
                        }
                        else
                            txtEXPONENTN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtEXPONENTN2.Foreground = Brushes.Black;
                            else
                                txtEXPONENTN2.Foreground = Brushes.Red;
                        }
                        else
                            txtEXPONENTN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtEXPONENTN3.Foreground = Brushes.Black;
                            else
                                txtEXPONENTN3.Foreground = Brushes.Red;
                        }
                        else
                            txtEXPONENTN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtEXPONENTN4.Foreground = Brushes.Black;
                            else
                                txtEXPONENTN4.Foreground = Brushes.Red;
                        }
                        else
                            txtEXPONENTN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtEXPONENTN5.Foreground = Brushes.Black;
                            else
                                txtEXPONENTN5.Foreground = Brushes.Red;
                        }
                        else
                            txtEXPONENTN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtEXPONENTN6.Foreground = Brushes.Black;
                            else
                                txtEXPONENTN6.Foreground = Brushes.Red;
                        }
                        else
                            txtEXPONENTN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtEXPONENTN1.Foreground = Brushes.Black;
                    txtEXPONENTN2.Foreground = Brushes.Black;
                    txtEXPONENTN3.Foreground = Brushes.Black;
                    txtEXPONENTN4.Foreground = Brushes.Black;
                    txtEXPONENTN5.Foreground = Brushes.Black;
                    txtEXPONENTN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #endregion

        #region Re-test TotalWeight

        #region ShowRetestTotalWeight

        private void ShowRetestTotalWeight()
        {
            if (null != _session)
            {
                try
                {
                    if (!string.IsNullOrEmpty(txtITMCODE.Text) && !string.IsNullOrEmpty(txtWEAVINGLOG.Text))
                    {
                        string itemCode = txtITMCODE.Text;
                        string weavingLot = txtWEAVINGLOG.Text;
                        string finishingLot = txtFINISHINGLOT.Text;

                        Windows.RetestTotalWeightWindow window = new Windows.RetestTotalWeightWindow();

                        window.Setup(itemCode, weavingLot, finishingLot);

                        if (window.ShowDialog() == true)
                        {
                            if (window.TOTALWEIGHT1 != null)
                            {
                                txtTOTALWEIGHTN1.Text = window.TOTALWEIGHT1.ToString();
                                _session.P_TOTALWEIGHT1 = window.TOTALWEIGHT1;
                            }

                            if (window.TOTALWEIGHT2 != null)
                            {
                                txtTOTALWEIGHTN2.Text = window.TOTALWEIGHT2.ToString();
                                _session.P_TOTALWEIGHT2 = window.TOTALWEIGHT2;
                            }

                            if (window.TOTALWEIGHT3 != null)
                            {
                                txtTOTALWEIGHTN3.Text = window.TOTALWEIGHT3.ToString();
                                _session.P_TOTALWEIGHT3 = window.TOTALWEIGHT3;
                            }

                            if (window.TOTALWEIGHT4 != null)
                            {
                                txtTOTALWEIGHTN4.Text = window.TOTALWEIGHT4.ToString();
                                _session.P_TOTALWEIGHT4 = window.TOTALWEIGHT4;
                            }

                            if (window.TOTALWEIGHT5 != null)
                            {
                                txtTOTALWEIGHTN5.Text = window.TOTALWEIGHT5.ToString();
                                _session.P_TOTALWEIGHT5 = window.TOTALWEIGHT5;
                            }

                            if (window.TOTALWEIGHT6 != null)
                            {
                                txtTOTALWEIGHTN6.Text = window.TOTALWEIGHT6.ToString();
                                _session.P_TOTALWEIGHT6 = window.TOTALWEIGHT6;
                            }

                            AVGTotalWeight(window.TOTALWEIGHT1, window.TOTALWEIGHT2, window.TOTALWEIGHT3, window.TOTALWEIGHT4, window.TOTALWEIGHT5, window.TOTALWEIGHT6);

                            #region Focus
                            if (txtUNCOATEDWEIGHTN1.Visibility == Visibility.Visible)
                            {
                                txtUNCOATEDWEIGHTN1.Focus();
                                txtUNCOATEDWEIGHTN1.SelectAll();
                            }
                            else if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                            {
                                txtCOATINGWEIGHTN1.Focus();
                                txtCOATINGWEIGHTN1.SelectAll();
                            }
                            else if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                            {
                                txtTHICKNESSN1.Focus();
                                txtTHICKNESSN1.SelectAll();
                            }

                            #endregion

                            if (!string.IsNullOrEmpty(txtTOTALWEIGHTN1.Text) && !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN1.Text))
                            {
                                cal_Coatweight1();
                            }
                            if (!string.IsNullOrEmpty(txtTOTALWEIGHTN2.Text) && !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN2.Text))
                            {
                                cal_Coatweight2();
                            }
                            if (!string.IsNullOrEmpty(txtTOTALWEIGHTN3.Text) && !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN3.Text))
                            {
                                cal_Coatweight3();
                            }
                            if (!string.IsNullOrEmpty(txtTOTALWEIGHTN4.Text) && !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN4.Text))
                            {
                                cal_Coatweight4();
                            }
                            if (!string.IsNullOrEmpty(txtTOTALWEIGHTN5.Text) && !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN5.Text))
                            {
                                cal_Coatweight5();
                            }
                            if (!string.IsNullOrEmpty(txtTOTALWEIGHTN6.Text) && !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN6.Text))
                            {
                                cal_Coatweight6();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    ex.Err();
                    Console.WriteLine(ex);
                }
            }
        }

        #endregion

        #region AVGTotalWeight
        private void AVGTotalWeight(decimal? ave1, decimal? ave2, decimal? ave3, decimal? ave4, decimal? ave5, decimal? ave6)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? Avg = 0;

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 3);

                    txtTOTALWEIGHTAve.Text = Avg.Value.ToString("#,##0.###");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtTOTALWEIGHTAve.Text = "0";
                    else
                        txtTOTALWEIGHTAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtTOTALWEIGHTSpecification.Text))
                {
                    string temp = txtTOTALWEIGHTSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtTOTALWEIGHTN1.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtTOTALWEIGHTN2.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtTOTALWEIGHTN3.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtTOTALWEIGHTN4.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtTOTALWEIGHTN5.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtTOTALWEIGHTN6.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtTOTALWEIGHTN1.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtTOTALWEIGHTN2.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtTOTALWEIGHTN3.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtTOTALWEIGHTN4.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtTOTALWEIGHTN5.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtTOTALWEIGHTN6.Foreground = Brushes.Red;
                                    else
                                        txtTOTALWEIGHTN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtTOTALWEIGHTN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtTOTALWEIGHTN1.Foreground = Brushes.Black;
                                    else
                                        txtTOTALWEIGHTN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtTOTALWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtTOTALWEIGHTN2.Foreground = Brushes.Black;
                                    else
                                        txtTOTALWEIGHTN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtTOTALWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtTOTALWEIGHTN3.Foreground = Brushes.Black;
                                    else
                                        txtTOTALWEIGHTN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtTOTALWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtTOTALWEIGHTN4.Foreground = Brushes.Black;
                                    else
                                        txtTOTALWEIGHTN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtTOTALWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtTOTALWEIGHTN5.Foreground = Brushes.Black;
                                    else
                                        txtTOTALWEIGHTN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtTOTALWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtTOTALWEIGHTN6.Foreground = Brushes.Black;
                                    else
                                        txtTOTALWEIGHTN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtTOTALWEIGHTN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtTOTALWEIGHTN1.Foreground = Brushes.Black;
                            else
                                txtTOTALWEIGHTN1.Foreground = Brushes.Red;
                        }
                        else
                            txtTOTALWEIGHTN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtTOTALWEIGHTN2.Foreground = Brushes.Black;
                            else
                                txtTOTALWEIGHTN2.Foreground = Brushes.Red;
                        }
                        else
                            txtTOTALWEIGHTN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtTOTALWEIGHTN3.Foreground = Brushes.Black;
                            else
                                txtTOTALWEIGHTN3.Foreground = Brushes.Red;
                        }
                        else
                            txtTOTALWEIGHTN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtTOTALWEIGHTN4.Foreground = Brushes.Black;
                            else
                                txtTOTALWEIGHTN4.Foreground = Brushes.Red;
                        }
                        else
                            txtTOTALWEIGHTN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtTOTALWEIGHTN5.Foreground = Brushes.Black;
                            else
                                txtTOTALWEIGHTN5.Foreground = Brushes.Red;
                        }
                        else
                            txtTOTALWEIGHTN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtTOTALWEIGHTN6.Foreground = Brushes.Black;
                            else
                                txtTOTALWEIGHTN6.Foreground = Brushes.Red;
                        }
                        else
                            txtTOTALWEIGHTN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtTOTALWEIGHTN1.Foreground = Brushes.Black;
                    txtTOTALWEIGHTN2.Foreground = Brushes.Black;
                    txtTOTALWEIGHTN3.Foreground = Brushes.Black;
                    txtTOTALWEIGHTN4.Foreground = Brushes.Black;
                    txtTOTALWEIGHTN5.Foreground = Brushes.Black;
                    txtTOTALWEIGHTN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #endregion

        #region Re-test UncoatedWeight

        #region ShowRetestUncoatedWeight

        private void ShowRetestUncoatedWeight()
        {
            if (null != _session)
            {
                try
                {
                    if (!string.IsNullOrEmpty(txtITMCODE.Text) && !string.IsNullOrEmpty(txtWEAVINGLOG.Text))
                    {
                        string itemCode = txtITMCODE.Text;
                        string weavingLot = txtWEAVINGLOG.Text;
                        string finishingLot = txtFINISHINGLOT.Text;

                        Windows.RetestUncoatedWeightWindow window = new Windows.RetestUncoatedWeightWindow();

                        window.Setup(itemCode, weavingLot, finishingLot);

                        if (window.ShowDialog() == true)
                        {
                            if (window.UNCOATEDWEIGHT1 != null)
                            {
                                txtUNCOATEDWEIGHTN1.Text = window.UNCOATEDWEIGHT1.ToString();
                                _session.P_UNCOATEDWEIGHT1 = window.UNCOATEDWEIGHT1;
                            }

                            if (window.UNCOATEDWEIGHT2 != null)
                            {
                                txtUNCOATEDWEIGHTN2.Text = window.UNCOATEDWEIGHT2.ToString();
                                _session.P_UNCOATEDWEIGHT2 = window.UNCOATEDWEIGHT2;
                            }

                            if (window.UNCOATEDWEIGHT3 != null)
                            {
                                txtUNCOATEDWEIGHTN3.Text = window.UNCOATEDWEIGHT3.ToString();
                                _session.P_UNCOATEDWEIGHT3 = window.UNCOATEDWEIGHT3;
                            }

                            if (window.UNCOATEDWEIGHT4 != null)
                            {
                                txtUNCOATEDWEIGHTN4.Text = window.UNCOATEDWEIGHT4.ToString();
                                _session.P_UNCOATEDWEIGHT4 = window.UNCOATEDWEIGHT4;
                            }

                            if (window.UNCOATEDWEIGHT5 != null)
                            {
                                txtUNCOATEDWEIGHTN5.Text = window.UNCOATEDWEIGHT5.ToString();
                                _session.P_UNCOATEDWEIGHT5 = window.UNCOATEDWEIGHT5;
                            }

                            if (window.UNCOATEDWEIGHT6 != null)
                            {
                                txtUNCOATEDWEIGHTN6.Text = window.UNCOATEDWEIGHT6.ToString();
                                _session.P_UNCOATEDWEIGHT6 = window.UNCOATEDWEIGHT6;
                            }

                            AVGUncoatedWeight(window.UNCOATEDWEIGHT1, window.UNCOATEDWEIGHT2, window.UNCOATEDWEIGHT3, window.UNCOATEDWEIGHT4, window.UNCOATEDWEIGHT5, window.UNCOATEDWEIGHT6);

                            #region Focus
                            if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                            {
                                txtCOATINGWEIGHTN1.Focus();
                                txtCOATINGWEIGHTN1.SelectAll();
                            }
                            else if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                            {
                                txtTHICKNESSN1.Focus();
                                txtTHICKNESSN1.SelectAll();
                            }
                            else if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                            {
                                txtFLAMMABILITY_WN1.Focus();
                                txtFLAMMABILITY_WN1.SelectAll();
                            }

                            #endregion

                            if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN1.Text) && !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN1.Text))
                            {
                                cal_Coatweight1();
                            }
                            if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN2.Text) && !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN2.Text))
                            {
                                cal_Coatweight2();
                            }
                            if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN3.Text) && !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN3.Text))
                            {
                                cal_Coatweight3();
                            }
                            if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN4.Text) && !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN4.Text))
                            {
                                cal_Coatweight4();
                            }
                            if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN5.Text) && !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN5.Text))
                            {
                                cal_Coatweight5();
                            }
                            if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTN6.Text) && !string.IsNullOrEmpty(txtUNCOATEDWEIGHTN6.Text))
                            {
                                cal_Coatweight6();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    ex.Err();
                    Console.WriteLine(ex);
                }
            }
        }

        #endregion

        #region AVGUncoatedWeight
        private void AVGUncoatedWeight(decimal? ave1, decimal? ave2, decimal? ave3, decimal? ave4, decimal? ave5, decimal? ave6)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? Avg = 0;

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 3);

                    txtUNCOATEDWEIGHTAve.Text = Avg.Value.ToString("#,##0.###");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtUNCOATEDWEIGHTAve.Text = "0";
                    else
                        txtUNCOATEDWEIGHTAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtUNCOATEDWEIGHTSpecification.Text))
                {
                    string temp = txtUNCOATEDWEIGHTSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtUNCOATEDWEIGHTN1.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtUNCOATEDWEIGHTN2.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtUNCOATEDWEIGHTN3.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtUNCOATEDWEIGHTN4.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtUNCOATEDWEIGHTN5.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtUNCOATEDWEIGHTN6.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtUNCOATEDWEIGHTN1.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtUNCOATEDWEIGHTN2.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtUNCOATEDWEIGHTN3.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtUNCOATEDWEIGHTN4.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtUNCOATEDWEIGHTN5.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtUNCOATEDWEIGHTN6.Foreground = Brushes.Red;
                                    else
                                        txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;
                                    else
                                        txtUNCOATEDWEIGHTN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;
                                    else
                                        txtUNCOATEDWEIGHTN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;
                                    else
                                        txtUNCOATEDWEIGHTN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;
                                    else
                                        txtUNCOATEDWEIGHTN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;
                                    else
                                        txtUNCOATEDWEIGHTN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
                                    else
                                        txtUNCOATEDWEIGHTN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;
                            else
                                txtUNCOATEDWEIGHTN1.Foreground = Brushes.Red;
                        }
                        else
                            txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;
                            else
                                txtUNCOATEDWEIGHTN2.Foreground = Brushes.Red;
                        }
                        else
                            txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;
                            else
                                txtUNCOATEDWEIGHTN3.Foreground = Brushes.Red;
                        }
                        else
                            txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;
                            else
                                txtUNCOATEDWEIGHTN4.Foreground = Brushes.Red;
                        }
                        else
                            txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;
                            else
                                txtUNCOATEDWEIGHTN5.Foreground = Brushes.Red;
                        }
                        else
                            txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
                            else
                                txtUNCOATEDWEIGHTN6.Foreground = Brushes.Red;
                        }
                        else
                            txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtUNCOATEDWEIGHTN1.Foreground = Brushes.Black;
                    txtUNCOATEDWEIGHTN2.Foreground = Brushes.Black;
                    txtUNCOATEDWEIGHTN3.Foreground = Brushes.Black;
                    txtUNCOATEDWEIGHTN4.Foreground = Brushes.Black;
                    txtUNCOATEDWEIGHTN5.Foreground = Brushes.Black;
                    txtUNCOATEDWEIGHTN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #endregion

        #region Re-test CoatedWeight

        #region ShowRetestCoatedWeight

        private void ShowRetestCoatedWeight()
        {
            if (null != _session)
            {
                try
                {
                    if (!string.IsNullOrEmpty(txtITMCODE.Text) && !string.IsNullOrEmpty(txtWEAVINGLOG.Text))
                    {
                        string itemCode = txtITMCODE.Text;
                        string weavingLot = txtWEAVINGLOG.Text;
                        string finishingLot = txtFINISHINGLOT.Text;

                        Windows.RetestCoatedWeightWindow window = new Windows.RetestCoatedWeightWindow();

                        window.Setup(itemCode, weavingLot, finishingLot);

                        if (window.ShowDialog() == true)
                        {
                            if (window.COATWEIGHT1 != null)
                            {
                                txtCOATINGWEIGHTN1.Text = window.COATWEIGHT1.ToString();
                                _session.P_COATWEIGHT1 = window.COATWEIGHT1;
                            }

                            if (window.COATWEIGHT2 != null)
                            {
                                txtCOATINGWEIGHTN2.Text = window.COATWEIGHT2.ToString();
                                _session.P_COATWEIGHT2 = window.COATWEIGHT2;
                            }

                            if (window.COATWEIGHT3 != null)
                            {
                                txtCOATINGWEIGHTN3.Text = window.COATWEIGHT3.ToString();
                                _session.P_COATWEIGHT3 = window.COATWEIGHT3;
                            }

                            if (window.COATWEIGHT4 != null)
                            {
                                txtCOATINGWEIGHTN4.Text = window.COATWEIGHT4.ToString();
                                _session.P_COATWEIGHT4 = window.COATWEIGHT4;
                            }

                            if (window.COATWEIGHT5 != null)
                            {
                                txtCOATINGWEIGHTN5.Text = window.COATWEIGHT5.ToString();
                                _session.P_COATWEIGHT5 = window.COATWEIGHT5;
                            }

                            if (window.COATWEIGHT6 != null)
                            {
                                txtCOATINGWEIGHTN6.Text = window.COATWEIGHT6.ToString();
                                _session.P_COATWEIGHT6 = window.COATWEIGHT6;
                            }

                            AVGCoatingWeight(window.COATWEIGHT1, window.COATWEIGHT2, window.COATWEIGHT3, window.COATWEIGHT4, window.COATWEIGHT5, window.COATWEIGHT6);

                            #region Focus
                            if (txtCOATINGWEIGHTN1.Visibility == Visibility.Visible)
                            {
                                txtCOATINGWEIGHTN1.Focus();
                                txtCOATINGWEIGHTN1.SelectAll();
                            }
                            else if (txtTHICKNESSN1.Visibility == Visibility.Visible)
                            {
                                txtTHICKNESSN1.Focus();
                                txtTHICKNESSN1.SelectAll();
                            }
                            else if (txtFLAMMABILITY_WN1.Visibility == Visibility.Visible)
                            {
                                txtFLAMMABILITY_WN1.Focus();
                                txtFLAMMABILITY_WN1.SelectAll();
                            }

                            #endregion

                        }
                    }
                }
                catch (Exception ex)
                {
                    ex.Err();
                    Console.WriteLine(ex);
                }
            }
        }

        #endregion

        #region AVGCoatingWeight
        private void AVGCoatingWeight(decimal? ave1, decimal? ave2, decimal? ave3, decimal? ave4, decimal? ave5, decimal? ave6)
        {
            try
            {
                int? i = 0;
                decimal value;

                decimal? Avg = 0;

                #region New

                if (ave1 == null)
                    ave1 = 0;
                else
                    i++;

                if (ave2 == null)
                    ave2 = 0;
                else
                    i++;

                if (ave3 == null)
                    ave3 = 0;
                else
                    i++;

                if (ave4 == null)
                    ave4 = 0;
                else
                    i++;

                if (ave5 == null)
                    ave5 = 0;
                else
                    i++;

                if (ave6 == null)
                    ave6 = 0;
                else
                    i++;

                #endregion

                if (ave1 != 0 || ave2 != 0 || ave3 != 0 || ave4 != 0 || ave5 != 0 || ave6 != 0)
                {
                    Avg = DataControl.ClassData.MathEx.Round(((ave1 + ave2 + ave3 + ave4 + ave5 + ave6) / i).Value, 2);

                    txtCOATINGWEIGHTAve.Text = Avg.Value.ToString("#,##0.##");
                }
                else
                {
                    if (ave1 == 0 && ave2 == 0 && ave3 == 0 && ave4 == 0 && ave5 == 0 && ave6 == 0)
                        txtCOATINGWEIGHTAve.Text = "0";
                    else
                        txtCOATINGWEIGHTAve.Text = "";
                }

                #region Foreground
                if (!string.IsNullOrEmpty(txtCOATINGWEIGHTSpecification.Text))
                {
                    string temp = txtCOATINGWEIGHTSpecification.Text;

                    decimal? num = null;
                    decimal? num2 = null;
                    decimal? num3 = null;

                    decimal? lower = null;
                    decimal? upper = null;

                    String strString = temp.Substring(0, temp.Length).Trim();
                    strString = strString.Replace(" ", "&").TrimEnd();
                    String[] myArr = strString.Split('&');

                    if (myArr.Length > 1)
                    {
                        if (myArr[1] != null)
                        {
                            if (temp.Contains("MAX"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num < ave1)
                                        txtCOATINGWEIGHTN1.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num < ave2)
                                        txtCOATINGWEIGHTN2.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num < ave3)
                                        txtCOATINGWEIGHTN3.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num < ave4)
                                        txtCOATINGWEIGHTN4.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num < ave5)
                                        txtCOATINGWEIGHTN5.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num < ave6)
                                        txtCOATINGWEIGHTN6.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("MIN"))
                            {
                                if (Decimal.TryParse(myArr[1].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[1].ToString().Trim());

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (num > ave1)
                                        txtCOATINGWEIGHTN1.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN1.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (num > ave2)
                                        txtCOATINGWEIGHTN2.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN2.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (num > ave3)
                                        txtCOATINGWEIGHTN3.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN3.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (num > ave4)
                                        txtCOATINGWEIGHTN4.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN4.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (num > ave5)
                                        txtCOATINGWEIGHTN5.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN5.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (num > ave6)
                                        txtCOATINGWEIGHTN6.Foreground = Brushes.Red;
                                    else
                                        txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                                }
                                else
                                    txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                            }
                            else if (temp.Contains("+/-"))
                            {
                                if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                    num = decimal.Parse(myArr[0].ToString().Trim());

                                if (Decimal.TryParse(myArr[2].ToString().Trim(), out value))
                                    num2 = decimal.Parse(myArr[2].ToString().Trim());

                                lower = num - num2;
                                upper = num + num2;

                                if (ave1 != null && ave1 != 0)
                                {
                                    if (lower <= ave1 && ave1 <= upper)
                                        txtCOATINGWEIGHTN1.Foreground = Brushes.Black;
                                    else
                                        txtCOATINGWEIGHTN1.Foreground = Brushes.Red;
                                }
                                else
                                    txtCOATINGWEIGHTN1.Foreground = Brushes.Black;

                                if (ave2 != null && ave2 != 0)
                                {
                                    if (lower <= ave2 && ave2 <= upper)
                                        txtCOATINGWEIGHTN2.Foreground = Brushes.Black;
                                    else
                                        txtCOATINGWEIGHTN2.Foreground = Brushes.Red;
                                }
                                else
                                    txtCOATINGWEIGHTN2.Foreground = Brushes.Black;

                                if (ave3 != null && ave3 != 0)
                                {
                                    if (lower <= ave3 && ave3 <= upper)
                                        txtCOATINGWEIGHTN3.Foreground = Brushes.Black;
                                    else
                                        txtCOATINGWEIGHTN3.Foreground = Brushes.Red;
                                }
                                else
                                    txtCOATINGWEIGHTN3.Foreground = Brushes.Black;

                                if (ave4 != null && ave4 != 0)
                                {
                                    if (lower <= ave4 && ave4 <= upper)
                                        txtCOATINGWEIGHTN4.Foreground = Brushes.Black;
                                    else
                                        txtCOATINGWEIGHTN4.Foreground = Brushes.Red;
                                }
                                else
                                    txtCOATINGWEIGHTN4.Foreground = Brushes.Black;

                                if (ave5 != null && ave5 != 0)
                                {
                                    if (lower <= ave5 && ave5 <= upper)
                                        txtCOATINGWEIGHTN5.Foreground = Brushes.Black;
                                    else
                                        txtCOATINGWEIGHTN5.Foreground = Brushes.Red;
                                }
                                else
                                    txtCOATINGWEIGHTN5.Foreground = Brushes.Black;

                                if (ave6 != null && ave6 != 0)
                                {
                                    if (lower <= ave6 && ave6 <= upper)
                                        txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                                    else
                                        txtCOATINGWEIGHTN6.Foreground = Brushes.Red;
                                }
                                else
                                    txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                            }
                        }
                    }
                    else
                    {
                        if (myArr.Length == 1)
                        {
                            if (Decimal.TryParse(myArr[0].ToString().Trim(), out value))
                                num3 = decimal.Parse(myArr[0].ToString().Trim());
                        }

                        if (ave1 != null && ave1 != 0)
                        {
                            if (ave1 == num3)
                                txtCOATINGWEIGHTN1.Foreground = Brushes.Black;
                            else
                                txtCOATINGWEIGHTN1.Foreground = Brushes.Red;
                        }
                        else
                            txtCOATINGWEIGHTN1.Foreground = Brushes.Black;

                        if (ave2 != null && ave2 != 0)
                        {
                            if (ave2 == num3)
                                txtCOATINGWEIGHTN2.Foreground = Brushes.Black;
                            else
                                txtCOATINGWEIGHTN2.Foreground = Brushes.Red;
                        }
                        else
                            txtCOATINGWEIGHTN2.Foreground = Brushes.Black;

                        if (ave3 != null && ave3 != 0)
                        {
                            if (ave3 == num3)
                                txtCOATINGWEIGHTN3.Foreground = Brushes.Black;
                            else
                                txtCOATINGWEIGHTN3.Foreground = Brushes.Red;
                        }
                        else
                            txtCOATINGWEIGHTN3.Foreground = Brushes.Black;

                        if (ave4 != null && ave4 != 0)
                        {
                            if (ave4 == num3)
                                txtCOATINGWEIGHTN4.Foreground = Brushes.Black;
                            else
                                txtCOATINGWEIGHTN4.Foreground = Brushes.Red;
                        }
                        else
                            txtCOATINGWEIGHTN4.Foreground = Brushes.Black;

                        if (ave5 != null && ave5 != 0)
                        {
                            if (ave5 == num3)
                                txtCOATINGWEIGHTN5.Foreground = Brushes.Black;
                            else
                                txtCOATINGWEIGHTN5.Foreground = Brushes.Red;
                        }
                        else
                            txtCOATINGWEIGHTN5.Foreground = Brushes.Black;

                        if (ave6 != null && ave6 != 0)
                        {
                            if (ave6 == num3)
                                txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                            else
                                txtCOATINGWEIGHTN6.Foreground = Brushes.Red;
                        }
                        else
                            txtCOATINGWEIGHTN6.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    txtCOATINGWEIGHTN1.Foreground = Brushes.Black;
                    txtCOATINGWEIGHTN2.Foreground = Brushes.Black;
                    txtCOATINGWEIGHTN3.Foreground = Brushes.Black;
                    txtCOATINGWEIGHTN4.Foreground = Brushes.Black;
                    txtCOATINGWEIGHTN5.Foreground = Brushes.Black;
                    txtCOATINGWEIGHTN6.Foreground = Brushes.Black;
                }
                #endregion

            }
            catch (Exception ex)
            {
                ex.Message.ToString().ShowMessageBox(true);
            }
        }
        #endregion

        #endregion

        #region CheckRetestButton
        private void CheckRetestButton()
        {
            try
            {
                if (!string.IsNullOrEmpty(txtITMCODE.Text) && !string.IsNullOrEmpty(txtWEAVINGLOG.Text))
                {
                    if (LabDataPDFDataService.Instance.CheckRowWeight(txtITMCODE.Text, txtWEAVINGLOG.Text, "TW") == true)
                    {
                        cmdRetestTotalWeight.Visibility = Visibility.Visible;
                    }
                    else
                    {
                        cmdRetestTotalWeight.Visibility = Visibility.Hidden;
                    }

                    if (LabDataPDFDataService.Instance.CheckRowWeight(txtITMCODE.Text, txtWEAVINGLOG.Text, "UW") == true)
                    {
                        cmdRetestUncoatedWeight.Visibility = Visibility.Visible;
                    }
                    else
                    {
                        cmdRetestUncoatedWeight.Visibility = Visibility.Hidden;
                    }

                    if (LabDataPDFDataService.Instance.CheckRowWeight(txtITMCODE.Text, txtWEAVINGLOG.Text, "CW") == true)
                    {
                        cmdRetestCoatingWeight.Visibility = Visibility.Visible;
                    }
                    else
                    {
                        cmdRetestCoatingWeight.Visibility = Visibility.Hidden;
                    }

                    if (LabDataPDFDataService.Instance.CheckRowStiffness(txtITMCODE.Text, txtWEAVINGLOG.Text) == true)
                    {
                        cmdRetestStiffness.Visibility = Visibility.Visible;
                    }
                    else
                    {
                        cmdRetestStiffness.Visibility = Visibility.Hidden;
                    }

                    if (LabDataPDFDataService.Instance.CheckRowStaticAir(txtITMCODE.Text, txtWEAVINGLOG.Text) == true)
                    {
                        cmdRetestStaticAir.Visibility = Visibility.Visible;
                    }
                    else
                    {
                        cmdRetestStaticAir.Visibility = Visibility.Hidden;
                    }

                    if (LabDataPDFDataService.Instance.CheckRowDynamicAir(txtITMCODE.Text, txtWEAVINGLOG.Text) == true)
                    {
                        cmdRetestDynamicAir.Visibility = Visibility.Visible;
                    }
                    else
                    {
                        cmdRetestDynamicAir.Visibility = Visibility.Hidden;
                    }
                }
            }
            catch (Exception ex)
            {
                ex.Err();
                Console.WriteLine(ex);
            }
        }
        #endregion

        #endregion

        #region Public Methods

        /// <summary>
        /// Setup.
        /// </summary>
        public void Setup(string user, string level)
        {
            if (opera != null)
            {
                opera = user;
            }

            if (positionLevel != null)
            {
                positionLevel = level;
            }
        }

        #endregion

    }
}


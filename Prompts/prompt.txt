For Database document generation
Check all instructions in @Documents\Database

üö® CRITICAL: These documents create the NEW DATABASE SCHEMA üö®
Missing even ONE column = COMPLETE PROJECT FAILURE

Strict with all instructions and TEMPLATE_INDIVIDUAL_PROCEDURE.md do not violate it you alrady broke my instruction more than 10 sections
i waste time to correct it DO NOT done it again.

‚õî ABSOLUTE REQUIREMENTS - NO EXCEPTIONS:
1. Read COMPLETE C# class (never use grep -A with small values)
2. Document EVERY single column (100% completeness required)
3. Verify counts match EXACTLY (C# properties = documented columns)
4. If counts don't match, STOP and FIX immediately
5. No shortcuts, no assumptions, no "probably fine"

DO NOT use Batch processing causes it lose progress when session ends. you should:
- Generate ONE file at a time
- Update tracker after EACH file
- Save progress continuously
- No need to ask me every time when process to generate file continue create it.
This way if session ends, all completed work is saved.

So continue properly do one file at a time then updating tracker after complete each file generated

---

## CRITICAL: Column Notation Rules (MUST FOLLOW)

### ‚ùå NEVER USE GROUPED NOTATION

**WRONG - DO NOT DO THIS:**
```markdown
| `TENSION_ST1-10` | NUMBER | Station 1-10 tension |
| `TENSION_ST1` - `TENSION_ST10` | NUMBER | Stations 1 through 10 |
| `TEMP1-10_PV/SP` | NUMBER | Temperature zones 1-10 PV/SP |
| `SATURATOR_CHEM_PV/SP` | NUMBER | Saturator chemical PV and SP |
| `WASHING1_PV/SP` | NUMBER | Washing PV/SP values |
| `COATINGWEIGHT_L/C/R` | NUMBER | Weight left/center/right |
| `TEMP_MIN/MAX/value` | NUMBER | Min/max/value |
| Parameters 1/2/3/4 | Various | Multiple parameters |
| `WIDTH1-4` | NUMBER | Width 1 to 4 |
| `HARDNESS_L/N/R` | NUMBER | Hardness left/middle/right |
```

**CORRECT - ALWAYS DO THIS:**
```markdown
| `TENSION_ST1` | NUMBER | Station 1 tension measurement |
| `TENSION_ST2` | NUMBER | Station 2 tension measurement |
| `TENSION_ST3` | NUMBER | Station 3 tension measurement |
...
| `TENSION_ST10` | NUMBER | Station 10 tension measurement |
| `TEMP1_PV` | NUMBER | Temperature zone 1 process value (¬∞C) |
| `TEMP1_SP` | NUMBER | Temperature zone 1 setpoint (¬∞C) |
| `TEMP2_PV` | NUMBER | Temperature zone 2 process value (¬∞C) |
| `TEMP2_SP` | NUMBER | Temperature zone 2 setpoint (¬∞C) |
...
| `SATURATOR_CHEM_PV` | NUMBER | Chemical saturator process value |
| `SATURATOR_CHEM_SP` | NUMBER | Chemical saturator setpoint |
| `COATINGWEIGHT_L` | NUMBER | Coating weight left side (g/m¬≤) |
| `COATINGWEIGHT_C` | NUMBER | Coating weight center (g/m¬≤) |
| `COATINGWEIGHT_R` | NUMBER | Coating weight right side (g/m¬≤) |
```

### Expansion Rules

**Always expand these patterns to individual columns:**

1. **Numbered ranges** (`_1-10`, `ST1-10`, `1-7`):
   - Expand to: `_1`, `_2`, `_3`, ..., `_10`

2. **PV/SP pairs** (`PARAM_PV/SP`):
   - Expand to: `PARAM_PV`, `PARAM_SP`

3. **L/C/R triplets** (`WEIGHT_L/C/R`):
   - Expand to: `WEIGHT_L`, `WEIGHT_C`, `WEIGHT_R`

4. **L/N/R triplets** (`HARDNESS_L/N/R`):
   - Expand to: `HARDNESS_L`, `HARDNESS_N`, `HARDNESS_R`

5. **MIN/MAX/value triplets** (`TEMP_MIN/MAX/value`):
   - Expand to: `TEMP_MIN`, `TEMP_MAX`, `TEMP`

6. **Numbered lists** (`1/2/3/4`):
   - Expand to separate columns with actual names

### Verification Before Saving

Before saving ANY document, verify:
- [ ] NO slashes in column names (except in descriptions)
- [ ] NO dashes for ranges (except in descriptions)
- [ ] NO "through" or "to" language in column names
- [ ] Each column has its own individual row
- [ ] All Oracle types used (VARCHAR2, NUMBER, DATE)

---

## CRITICAL: Database Type Rules (MUST FOLLOW)

### ‚úÖ ALWAYS Use Oracle Database Types

**CORRECT Types:**
- `VARCHAR2(50)` - For IDs, codes, names (short strings)
- `VARCHAR2(500)` - For remarks, notes, descriptions (long strings)
- `VARCHAR2(10)` - For flags, status codes (very short strings)
- `NUMBER` - For all numeric values (integers, decimals, measurements)
- `DATE` - For all date/time values

**‚ùå NEVER Use C# Types:**
- ~~`String`~~ ‚Üí Use `VARCHAR2(50)` or `VARCHAR2(500)`
- ~~`Decimal?`~~ ‚Üí Use `NUMBER`
- ~~`DateTime?`~~ ‚Üí Use `DATE`
- ~~`Int32`~~ ‚Üí Use `NUMBER`
- ~~`Boolean`~~ ‚Üí Use `VARCHAR2(1)` or `NUMBER(1)`

### Type Selection Guide

| Data Category | Oracle Type | Size Guide |
|---------------|-------------|------------|
| ID, Code, Barcode | VARCHAR2(50) | Default for identifiers |
| Operator ID, User | VARCHAR2(50) | Employee codes |
| Machine Number | VARCHAR2(50) | Equipment codes |
| Status, Flag | VARCHAR2(10) | Short codes like 'Y/N', 'ACTIVE' |
| Remarks, Notes | VARCHAR2(500) | Long text fields |
| Descriptions | VARCHAR2(500) | Detailed text |
| All numbers | NUMBER | Measurements, counts, amounts |
| All dates/times | DATE | Timestamps, dates |

---

## üö® ABSOLUTE REQUIREMENT: 100% COMPLETE COLUMN EXTRACTION üö®

### ‚õî ZERO TOLERANCE FOR MISSING COLUMNS ‚õî

**THIS IS NOT A WARNING - THIS IS A MANDATORY REQUIREMENT**

These database documentation files will be used to create a **brand new database schema** for the rewritten project.

**Missing even ONE column = PROJECT FAILURE**

- ‚ùå Database tables will be INCOMPLETE and UNUSABLE
- ‚ùå Stored procedures CANNOT BE CREATED
- ‚ùå Application will CRASH at runtime
- ‚ùå Data migration will be IMPOSSIBLE
- ‚ùå All work will be WASTED

**EVERY SINGLE input parameter and output column MUST be documented with 100% accuracy.**

### üî¥ NO EXCEPTIONS - NO SHORTCUTS - NO MISTAKES üî¥

**You CANNOT proceed to the next procedure until:**
1. You have read the COMPLETE C# class definition
2. You have counted EVERY property
3. You have documented EVERY column
4. You have VERIFIED counts match EXACTLY
5. You have double-checked EVERY column name

**If you are unsure, READ AGAIN. If you think you're done, VERIFY AGAIN.**

### üö´ NEVER USE TRUNCATED GREP - THIS CAUSES MISSING COLUMNS üö´

**‚ùå FORBIDDEN - These commands will cause missing columns:**
```bash
grep -A 5 "class CONDITION_DRAWINGParameter"   # WRONG - truncates output
grep -A 10 "class XYZParameter"                # WRONG - might truncate
grep -A 20 "class ABCParameter"                # WRONG - unsafe
# ANY -A value less than 150 is DANGEROUS
```

**‚úÖ MANDATORY - Use Read tool or large -A value:**
```bash
# METHOD 1 (PREFERRED): Use Read tool with offset/limit
Read file_path with offset=XXXX limit=150

# METHOD 2: Use grep with very large -A value
grep -A 150 "class CONDITION_DRAWINGParameter"  # Safe - shows ALL properties

# METHOD 3: Read the entire region manually
Read the complete #region...#endregion block
```

**‚ö†Ô∏è IF IN DOUBT, READ MORE LINES - NEVER READ FEWER**

### üîí MANDATORY VERIFICATION CHECKLIST (CANNOT BE SKIPPED) üîí

For EVERY procedure, you MUST complete ALL these steps IN ORDER:

**STEP 1: Read COMPLETE Class (MANDATORY)**
- ‚úÖ Use Read tool OR grep -A 150 (minimum)
- ‚úÖ Read from #region to #endregion
- ‚úÖ Verify you see the closing brace }
- ‚ùå NEVER use grep -A with value < 100

**STEP 2: Count ALL Properties (MANDATORY)**
- ‚úÖ Count every "{ get; set; }" line
- ‚úÖ Write down the exact count number
- ‚úÖ This is your TARGET count

**STEP 3: List EVERY Property (MANDATORY)**
- ‚úÖ Write down every property name
- ‚úÖ No shortcuts, no grouping, no "P_PARAM1-10"
- ‚úÖ Write P_PARAM1, P_PARAM2, ..., P_PARAM10 individually

**STEP 4: Document EVERY Column (MANDATORY)**
- ‚úÖ Create one markdown table row per property
- ‚úÖ Convert C# type to Oracle type
- ‚úÖ Write clear description

**STEP 5: Verify Counts Match (MANDATORY)**
- ‚úÖ Count documented columns
- ‚úÖ Compare with C# property count from Step 2
- ‚úÖ Counts MUST match EXACTLY
- ‚ùå If counts don't match, DO NOT PROCEED - FIX IT NOW

**Example of proper verification:**

```bash
# Step 1: Count properties in C# (must get EXACT count)
grep "public System" -A 1 "class CONDITION_DRAWINGParameter" | grep "{ get; set; }" | wc -l
# Result: 7 properties

# Step 2: Read FULL class to see ALL properties
Read file with sufficient offset/limit to capture entire class

# Step 3: Document ALL 7 properties individually
# P_ITMPREPARE, P_NOYARN, P_REEDTYPE, P_NODENT, P_PITCH, P_AIRSPACE, P_OPERATOR

# Step 4: Count documented parameters
grep -c "| \`P_" document.md
# Result MUST equal: 7 (or 8 with header row)
```

### Real Example of What Went Wrong

**CONDITION_DRAWING had 7 parameters in C#:**
```csharp
public class CONDITION_DRAWINGParameter {
    public System.String P_ITMPREPARE { get; set; }
    public System.Decimal? P_NOYARN { get; set; }
    public System.Decimal? P_REEDTYPE { get; set; }      // ‚Üê MISSED
    public System.Decimal? P_NODENT { get; set; }        // ‚Üê MISSED
    public System.Decimal? P_PITCH { get; set; }         // ‚Üê MISSED
    public System.Decimal? P_AIRSPACE { get; set; }      // ‚Üê MISSED
    public System.String P_OPERATOR { get; set; }
}
```

**First documentation only had 3 parameters:**
- Why? Used `grep -A 5` which truncated output
- **4 parameters were completely missing**
- This would have created an incomplete database schema

## Document Generation Workflow

### Step 1: Read Source Code COMPLETELY
Read `LuckyTex.AirBag.Core\Domains\AirbagSPs.cs` to get:
- **ALL parameter names** (verify count matches)
- **ALL column names** (verify count matches)
- **ALL C# types** (will convert to Oracle)
- **Exact parameter/column counts** (double-check with manual count)

### Step 2: Identify Grouped Patterns
If C# class has properties like:
```csharp
public Decimal? TENSION_ST1 { get; set; }
public Decimal? TENSION_ST2 { get; set; }
...
public Decimal? TENSION_ST10 { get; set; }
```

**DO NOT** write: `| TENSION_ST1-10 | NUMBER |`
**MUST** write each one individually:
```markdown
| `TENSION_ST1` | NUMBER | Station 1 tension |
| `TENSION_ST2` | NUMBER | Station 2 tension |
...
```

### Step 3: Convert Types
For each C# property, convert type:
- `String` ‚Üí `VARCHAR2(50)` or `VARCHAR2(500)`
- `Decimal?` ‚Üí `NUMBER`
- `DateTime?` ‚Üí `DATE`

### Step 4: Write Document
Follow TEMPLATE_INDIVIDUAL_PROCEDURE.md exactly.
Expand all grouped patterns.
Use Oracle types.

### Step 5: Update Tracker
Update `.DATABASE_STORED_PROCEDURES_TODO.md`:
- Increment completion count
- Mark procedure as complete
- Update percentage

---

## Common Patterns Reference

### Warping Module Patterns
```markdown
‚úÖ TENSION_ST1, TENSION_ST2, ..., TENSION_ST10 (10 columns)
‚úÖ HARDNESS_L, HARDNESS_N, HARDNESS_R (3 columns)
```

### Finishing Module Patterns
```markdown
‚úÖ TEMP1_PV, TEMP1_SP, TEMP2_PV, TEMP2_SP, ..., TEMP10_PV, TEMP10_SP (20 columns)
‚úÖ LENGTH1, LENGTH2, LENGTH3, ..., LENGTH7 (7 columns)
‚úÖ SATURATOR_CHEM_PV, SATURATOR_CHEM_SP (2 columns)
‚úÖ WASHING1_PV, WASHING1_SP (2 columns)
‚úÖ WASHING2_PV, WASHING2_SP (2 columns)
‚úÖ HOTFLUE_PV, HOTFLUE_SP (2 columns)
‚úÖ COATINGWEIGHT_L, COATINGWEIGHT_C, COATINGWEIGHT_R (3 columns)
```

### Cut & Print Module Patterns
```markdown
‚úÖ WIDTHBARCODE1, WIDTHBARCODE2, WIDTHBARCODE3, WIDTHBARCODE4 (4 columns)
‚úÖ DISTANTBARCODE1, DISTANTBARCODE2, DISTANTBARCODE3, DISTANTBARCODE4 (4 columns)
‚úÖ DISTANTLINE1, DISTANTLINE2, DISTANTLINE3 (3 columns)
‚úÖ BEGINROLL_LINE1, BEGINROLL_LINE2, BEGINROLL_LINE3, BEGINROLL_LINE4 (4 columns)
‚úÖ ENDROLL_LINE1, ENDROLL_LINE2, ENDROLL_LINE3, ENDROLL_LINE4 (4 columns)
```

---

## Self-Check Before Completing

Before marking any document as complete, verify:

1. ‚úÖ Read COMPLETE source code from AirbagSPs.cs (not truncated grep)
2. ‚úÖ **VERIFIED column count matches C# property count EXACTLY**
3. ‚úÖ **All input parameters documented** (counted and verified)
4. ‚úÖ **All output/result columns documented** (counted and verified)
5. ‚úÖ All column names match C# properties exactly (character-for-character)
6. ‚úÖ NO grouped notation anywhere (no slashes, no ranges)
7. ‚úÖ All types are Oracle types (VARCHAR2, NUMBER, DATE)
8. ‚úÖ Each column on separate row
9. ‚úÖ Descriptions are clear and specific
10. ‚úÖ Followed TEMPLATE_INDIVIDUAL_PROCEDURE.md structure
11. ‚úÖ Updated tracker file with new completion count
12. ‚úÖ Saved file successfully

**‚ùå If ANY item is NO, you MUST STOP IMMEDIATELY and FIX IT.**

**üö® DO NOT PROCEED TO NEXT PROCEDURE UNTIL ALL ITEMS ARE YES üö®**

### Final Verification Commands

Run these before marking complete:

```bash
# For Input Parameters:
# Count in C#
grep "public System" AirbagSPs.cs | grep "PROCEDURENAME.*Parameter" -A 50 | grep "{ get; set; }" | wc -l

# Count in documentation
grep -c "| \`P_" generated-doc.md

# BOTH NUMBERS MUST MATCH!

# For Result Columns:
# Count in C#
grep "public System" AirbagSPs.cs | grep "PROCEDURENAME.*Result" -A 100 | grep "{ get; set; }" | wc -l

# Count in documentation
grep -c "| \`[A-Z]" generated-doc.md  # (in Returns section)

# BOTH NUMBERS MUST MATCH!
```

### üî¥ EMERGENCY PROCEDURE: When Counts Don't Match üî¥

**‚õî HALT ALL WORK IMMEDIATELY ‚õî**

If column counts don't match between C# and documentation:

**DO NOT:**
- ‚ùå Continue to next procedure
- ‚ùå Save the file
- ‚ùå Update the tracker
- ‚ùå Ignore the discrepancy
- ‚ùå Assume "it's probably fine"

**MUST DO (IN THIS ORDER):**
1. üõë **STOP** - Do not proceed with anything else
2. üîç **RE-READ** - Read the COMPLETE C# class again (use Read tool, not grep)
3. üìù **LIST** - Write down ALL property names from C#
4. üîé **COMPARE** - Find which columns are missing in documentation
5. ‚úèÔ∏è **ADD** - Add each missing column individually with correct type and description
6. ‚úÖ **VERIFY** - Count again - must match exactly
7. üîÅ **REPEAT** - If still doesn't match, repeat from step 2
8. üíæ **SAVE** - Only after counts match perfectly, save file and update tracker

### üö® ABSOLUTE RULE üö®

```
IF (C# property count) ‚â† (Documented column count) THEN
    STOP EVERYTHING
    FIX THE PROBLEM
    DO NOT CONTINUE
END IF
```

**Remember**:
- Missing 1 column = Broken database = Failed project = All work wasted
- Complete accuracy is NOT optional
- There are NO exceptions to this rule
- VERIFY EVERYTHING, TRUST NOTHING

